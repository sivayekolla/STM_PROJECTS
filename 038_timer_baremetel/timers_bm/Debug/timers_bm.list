
timers_bm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000348  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080004d0  080004d0  000014d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004e0  080004e0  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004e0  080004e0  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004e0  080004e0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e0  080004e0  000014e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004e4  080004e4  000014e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004e8  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004ec  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004ec  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015f7  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004af  00000000  00000000  0000362b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000218  00000000  00000000  00003ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000017a  00000000  00000000  00003cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c86d  00000000  00000000  00003e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c9b  00000000  00000000  000206df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1987  00000000  00000000  0002237a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103d01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006b4  00000000  00000000  00103d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001043f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004b8 	.word	0x080004b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080004b8 	.word	0x080004b8

080001c8 <main>:
void UART2_SendString(char *str);
void delay_ms(uint32_t ms);
void TIM2_Init(void);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    SystemInit();
 80001cc:	f000 f8e8 	bl	80003a0 <SystemInit>
    UART2_Init();
 80001d0:	f000 f80e 	bl	80001f0 <UART2_Init>
    TIM2_Init();
 80001d4:	f000 f892 	bl	80002fc <TIM2_Init>

    while(1)
    {
        UART2_SendString("every 5 sec\r\n");
 80001d8:	4804      	ldr	r0, [pc, #16]	@ (80001ec <main+0x24>)
 80001da:	f000 f84f 	bl	800027c <UART2_SendString>
        delay_ms(5000);
 80001de:	f241 3088 	movw	r0, #5000	@ 0x1388
 80001e2:	f000 f871 	bl	80002c8 <delay_ms>
        UART2_SendString("every 5 sec\r\n");
 80001e6:	bf00      	nop
 80001e8:	e7f6      	b.n	80001d8 <main+0x10>
 80001ea:	bf00      	nop
 80001ec:	080004d0 	.word	0x080004d0

080001f0 <UART2_Init>:
    }
}

void UART2_Init(void)
{
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
    // Enable GPIOA and USART2 clocks
    RCC->AHB2ENR  |= RCC_AHB2ENR_GPIOAEN;
 80001f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000274 <UART2_Init+0x84>)
 80001f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000274 <UART2_Init+0x84>)
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8000200:	4b1c      	ldr	r3, [pc, #112]	@ (8000274 <UART2_Init+0x84>)
 8000202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000204:	4a1b      	ldr	r2, [pc, #108]	@ (8000274 <UART2_Init+0x84>)
 8000206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800020a:	6593      	str	r3, [r2, #88]	@ 0x58

    // Configure PA2 (TX) and PA3 (RX) as AF7 (USART2)
    GPIOA->MODER   &= ~((3<<4) | (3<<6));     // clear bits
 800020c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000216:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800021a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (2<<4) | (2<<6);       // alternate mode
 800021c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000226:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800022a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0]  &= ~((0xF<<8) | (0xF<<12));
 800022c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000230:	6a1b      	ldr	r3, [r3, #32]
 8000232:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800023a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0]  |=  (7<<8) | (7<<12);      // AF7 for PA2/PA3
 800023c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000240:	6a1b      	ldr	r3, [r3, #32]
 8000242:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000246:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800024a:	6213      	str	r3, [r2, #32]
    GPIOA->OSPEEDR |=  (3<<4) | (3<<6);       // high speed
 800024c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000256:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 800025a:	6093      	str	r3, [r2, #8]

    // USART2 configuration: 115200 baud, 8N1 (assuming 80 MHz PCLK1)
    USART2->BRR = 16000000 / 115200;          // = 694
 800025c:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <UART2_Init+0x88>)
 800025e:	228a      	movs	r2, #138	@ 0x8a
 8000260:	60da      	str	r2, [r3, #12]
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE; // enable TX + USART
 8000262:	4b05      	ldr	r3, [pc, #20]	@ (8000278 <UART2_Init+0x88>)
 8000264:	2209      	movs	r2, #9
 8000266:	601a      	str	r2, [r3, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40021000 	.word	0x40021000
 8000278:	40004400 	.word	0x40004400

0800027c <UART2_SendString>:

void UART2_SendString(char *str)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
    while(*str)
 8000284:	e00c      	b.n	80002a0 <UART2_SendString+0x24>
    {
        while(!(USART2->ISR & USART_ISR_TXE));  // wait for empty
 8000286:	bf00      	nop
 8000288:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <UART2_SendString+0x48>)
 800028a:	69db      	ldr	r3, [r3, #28]
 800028c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000290:	2b00      	cmp	r3, #0
 8000292:	d0f9      	beq.n	8000288 <UART2_SendString+0xc>
        USART2->TDR = *str++;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	1c5a      	adds	r2, r3, #1
 8000298:	607a      	str	r2, [r7, #4]
 800029a:	781a      	ldrb	r2, [r3, #0]
 800029c:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <UART2_SendString+0x48>)
 800029e:	851a      	strh	r2, [r3, #40]	@ 0x28
    while(*str)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d1ee      	bne.n	8000286 <UART2_SendString+0xa>
    }
    while(!(USART2->ISR & USART_ISR_TC)); // wait for complete
 80002a8:	bf00      	nop
 80002aa:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <UART2_SendString+0x48>)
 80002ac:	69db      	ldr	r3, [r3, #28]
 80002ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0f9      	beq.n	80002aa <UART2_SendString+0x2e>
}
 80002b6:	bf00      	nop
 80002b8:	bf00      	nop
 80002ba:	370c      	adds	r7, #12
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	40004400 	.word	0x40004400

080002c8 <delay_ms>:

void delay_ms(uint32_t ms)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0; i < ms * 4000; i++)
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	e003      	b.n	80002de <delay_ms+0x16>
        __NOP();
 80002d6:	bf00      	nop
    for(uint32_t i = 0; i < ms * 4000; i++)
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	3301      	adds	r3, #1
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80002e4:	fb02 f303 	mul.w	r3, r2, r3
 80002e8:	68fa      	ldr	r2, [r7, #12]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d3f3      	bcc.n	80002d6 <delay_ms+0xe>
}
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	3714      	adds	r7, #20
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr

080002fc <TIM2_Init>:

void TIM2_Init(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000300:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <TIM2_Init+0x40>)
 8000302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000304:	4a0d      	ldr	r2, [pc, #52]	@ (800033c <TIM2_Init+0x40>)
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6593      	str	r3, [r2, #88]	@ 0x58
    TIM2->PSC = 8000 - 1;    // 10 kHz
 800030c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000310:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000314:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 10000 - 1;   // 1 s overflow
 8000316:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800031a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800031e:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CR1 |= TIM_CR1_CEN;
 8000320:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	6013      	str	r3, [r2, #0]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000

08000340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000344:	bf00      	nop
 8000346:	e7fd      	b.n	8000344 <NMI_Handler+0x4>

08000348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800034c:	bf00      	nop
 800034e:	e7fd      	b.n	800034c <HardFault_Handler+0x4>

08000350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000354:	bf00      	nop
 8000356:	e7fd      	b.n	8000354 <MemManage_Handler+0x4>

08000358 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800035c:	bf00      	nop
 800035e:	e7fd      	b.n	800035c <BusFault_Handler+0x4>

08000360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <UsageFault_Handler+0x4>

08000368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr

08000376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800037a:	bf00      	nop
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000396:	f000 f857 	bl	8000448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <SystemInit>:
#include "stm32l476xx.h"

void SystemInit(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
    // Enable HSI and wait for it to stabilize
    RCC->CR |= RCC_CR_HSION;
 80003a4:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <SystemInit+0x50>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a11      	ldr	r2, [pc, #68]	@ (80003f0 <SystemInit+0x50>)
 80003aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003ae:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));
 80003b0:	bf00      	nop
 80003b2:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <SystemInit+0x50>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0f9      	beq.n	80003b2 <SystemInit+0x12>

    // Select HSI as system clock
    RCC->CFGR &= ~RCC_CFGR_SW;
 80003be:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <SystemInit+0x50>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	4a0b      	ldr	r2, [pc, #44]	@ (80003f0 <SystemInit+0x50>)
 80003c4:	f023 0303 	bic.w	r3, r3, #3
 80003c8:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_HSI;
 80003ca:	4b09      	ldr	r3, [pc, #36]	@ (80003f0 <SystemInit+0x50>)
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	4a08      	ldr	r2, [pc, #32]	@ (80003f0 <SystemInit+0x50>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 80003d6:	bf00      	nop
 80003d8:	4b05      	ldr	r3, [pc, #20]	@ (80003f0 <SystemInit+0x50>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	f003 030c 	and.w	r3, r3, #12
 80003e0:	2b04      	cmp	r3, #4
 80003e2:	d1f9      	bne.n	80003d8 <SystemInit+0x38>
}
 80003e4:	bf00      	nop
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000

080003f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800042c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003f8:	f7ff ffd2 	bl	80003a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003fc:	480c      	ldr	r0, [pc, #48]	@ (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fe:	490d      	ldr	r1, [pc, #52]	@ (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000400:	4a0d      	ldr	r2, [pc, #52]	@ (8000438 <LoopForever+0xe>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0a      	ldr	r2, [pc, #40]	@ (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000414:	4c0a      	ldr	r4, [pc, #40]	@ (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000422:	f000 f825 	bl	8000470 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000426:	f7ff fecf 	bl	80001c8 <main>

0800042a <LoopForever>:

LoopForever:
    b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800042c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000438:	080004e8 	.word	0x080004e8
  ldr r2, =_sbss
 800043c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000440:	20000024 	.word	0x20000024

08000444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_2_IRQHandler>
	...

08000448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800044c:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <HAL_IncTick+0x20>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	461a      	mov	r2, r3
 8000452:	4b06      	ldr	r3, [pc, #24]	@ (800046c <HAL_IncTick+0x24>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4413      	add	r3, r2
 8000458:	4a04      	ldr	r2, [pc, #16]	@ (800046c <HAL_IncTick+0x24>)
 800045a:	6013      	str	r3, [r2, #0]
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	20000000 	.word	0x20000000
 800046c:	20000020 	.word	0x20000020

08000470 <__libc_init_array>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	4d0d      	ldr	r5, [pc, #52]	@ (80004a8 <__libc_init_array+0x38>)
 8000474:	4c0d      	ldr	r4, [pc, #52]	@ (80004ac <__libc_init_array+0x3c>)
 8000476:	1b64      	subs	r4, r4, r5
 8000478:	10a4      	asrs	r4, r4, #2
 800047a:	2600      	movs	r6, #0
 800047c:	42a6      	cmp	r6, r4
 800047e:	d109      	bne.n	8000494 <__libc_init_array+0x24>
 8000480:	4d0b      	ldr	r5, [pc, #44]	@ (80004b0 <__libc_init_array+0x40>)
 8000482:	4c0c      	ldr	r4, [pc, #48]	@ (80004b4 <__libc_init_array+0x44>)
 8000484:	f000 f818 	bl	80004b8 <_init>
 8000488:	1b64      	subs	r4, r4, r5
 800048a:	10a4      	asrs	r4, r4, #2
 800048c:	2600      	movs	r6, #0
 800048e:	42a6      	cmp	r6, r4
 8000490:	d105      	bne.n	800049e <__libc_init_array+0x2e>
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	f855 3b04 	ldr.w	r3, [r5], #4
 8000498:	4798      	blx	r3
 800049a:	3601      	adds	r6, #1
 800049c:	e7ee      	b.n	800047c <__libc_init_array+0xc>
 800049e:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a2:	4798      	blx	r3
 80004a4:	3601      	adds	r6, #1
 80004a6:	e7f2      	b.n	800048e <__libc_init_array+0x1e>
 80004a8:	080004e0 	.word	0x080004e0
 80004ac:	080004e0 	.word	0x080004e0
 80004b0:	080004e0 	.word	0x080004e0
 80004b4:	080004e4 	.word	0x080004e4

080004b8 <_init>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	bf00      	nop
 80004bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004be:	bc08      	pop	{r3}
 80004c0:	469e      	mov	lr, r3
 80004c2:	4770      	bx	lr

080004c4 <_fini>:
 80004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c6:	bf00      	nop
 80004c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ca:	bc08      	pop	{r3}
 80004cc:	469e      	mov	lr, r3
 80004ce:	4770      	bx	lr
