
binary_semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800496c  0800496c  0000596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a90  08004a90  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004a90  08004a90  00005a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a98  08004a98  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a98  08004a98  00005a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a9c  08004a9c  00005a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004aa0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b04  20000060  08004b00  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b64  08004b00  00006b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a5d  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002032  00000000  00000000  0000faed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  00011b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077a  00000000  00000000  00012530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032b3  00000000  00000000  00012caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba07  00000000  00000000  00015f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee977  00000000  00000000  00021964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001102db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bc0  00000000  00000000  00110320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00112ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004954 	.word	0x08004954

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004954 	.word	0x08004954

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <debug_printf>:

SemaphoreHandle_t myMutex;

/* -------------------- Debug print via ITM -------------------- */
void debug_printf(const char *fmt, ...)
{
 80002be:	b40f      	push	{r0, r1, r2, r3}
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b0a2      	sub	sp, #136	@ 0x88
 80002c4:	af00      	add	r7, sp, #0
    char buf[128];
    va_list args;
    va_start(args, fmt);
 80002c6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80002ca:	603b      	str	r3, [r7, #0]
    vsnprintf(buf, sizeof(buf), fmt, args);
 80002cc:	1d38      	adds	r0, r7, #4
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80002d4:	2180      	movs	r1, #128	@ 0x80
 80002d6:	f003 feb1 	bl	800403c <vsniprintf>
    va_end(args);

    for (int i = 0; buf[i] != '\0'; i++)
 80002da:	2300      	movs	r3, #0
 80002dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80002e0:	e00c      	b.n	80002fc <debug_printf+0x3e>
        ITM_SendChar(buf[i]);
 80002e2:	1d3a      	adds	r2, r7, #4
 80002e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80002e8:	4413      	add	r3, r2
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ffbf 	bl	8000270 <ITM_SendChar>
    for (int i = 0; buf[i] != '\0'; i++)
 80002f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80002f6:	3301      	adds	r3, #1
 80002f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80002fc:	1d3a      	adds	r2, r7, #4
 80002fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000302:	4413      	add	r3, r2
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d1eb      	bne.n	80002e2 <debug_printf+0x24>
}
 800030a:	bf00      	nop
 800030c:	bf00      	nop
 800030e:	3788      	adds	r7, #136	@ 0x88
 8000310:	46bd      	mov	sp, r7
 8000312:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000316:	b004      	add	sp, #16
 8000318:	4770      	bx	lr
	...

0800031c <Task1>:

/* -------------------- Task 1 -------------------- */
void Task1(void *param)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        if (xSemaphoreTake(myMutex, portMAX_DELAY) == pdTRUE)
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <Task1+0x3c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800032c:	4618      	mov	r0, r3
 800032e:	f001 fd3d 	bl	8001dac <xQueueSemaphoreTake>
 8000332:	4603      	mov	r3, r0
 8000334:	2b01      	cmp	r3, #1
 8000336:	d109      	bne.n	800034c <Task1+0x30>
        {
            debug_printf("Task 1 running\r\n");
 8000338:	4808      	ldr	r0, [pc, #32]	@ (800035c <Task1+0x40>)
 800033a:	f7ff ffc0 	bl	80002be <debug_printf>
            xSemaphoreGive(myMutex);
 800033e:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <Task1+0x3c>)
 8000340:	6818      	ldr	r0, [r3, #0]
 8000342:	2300      	movs	r3, #0
 8000344:	2200      	movs	r2, #0
 8000346:	2100      	movs	r1, #0
 8000348:	f001 faae 	bl	80018a8 <xQueueGenericSend>
        }
        vTaskDelay(pdMS_TO_TICKS(500));
 800034c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000350:	f002 f8f6 	bl	8002540 <vTaskDelay>
        if (xSemaphoreTake(myMutex, portMAX_DELAY) == pdTRUE)
 8000354:	e7e6      	b.n	8000324 <Task1+0x8>
 8000356:	bf00      	nop
 8000358:	2000007c 	.word	0x2000007c
 800035c:	0800496c 	.word	0x0800496c

08000360 <Task2>:
    }
}

/* -------------------- Task 2 -------------------- */
void Task2(void *param)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        if (xSemaphoreTake(myMutex, portMAX_DELAY) == pdTRUE)
 8000368:	4b0c      	ldr	r3, [pc, #48]	@ (800039c <Task2+0x3c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000370:	4618      	mov	r0, r3
 8000372:	f001 fd1b 	bl	8001dac <xQueueSemaphoreTake>
 8000376:	4603      	mov	r3, r0
 8000378:	2b01      	cmp	r3, #1
 800037a:	d109      	bne.n	8000390 <Task2+0x30>
        {
            debug_printf("Task 2 running\r\n");
 800037c:	4808      	ldr	r0, [pc, #32]	@ (80003a0 <Task2+0x40>)
 800037e:	f7ff ff9e 	bl	80002be <debug_printf>
            xSemaphoreGive(myMutex);
 8000382:	4b06      	ldr	r3, [pc, #24]	@ (800039c <Task2+0x3c>)
 8000384:	6818      	ldr	r0, [r3, #0]
 8000386:	2300      	movs	r3, #0
 8000388:	2200      	movs	r2, #0
 800038a:	2100      	movs	r1, #0
 800038c:	f001 fa8c 	bl	80018a8 <xQueueGenericSend>
        }
        vTaskDelay(pdMS_TO_TICKS(700));
 8000390:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000394:	f002 f8d4 	bl	8002540 <vTaskDelay>
        if (xSemaphoreTake(myMutex, portMAX_DELAY) == pdTRUE)
 8000398:	e7e6      	b.n	8000368 <Task2+0x8>
 800039a:	bf00      	nop
 800039c:	2000007c 	.word	0x2000007c
 80003a0:	08004980 	.word	0x08004980

080003a4 <SystemClock_Config>:
    }
}

/* -------------------- System Clock Config -------------------- */
void SystemClock_Config(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b098      	sub	sp, #96	@ 0x60
 80003a8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	f107 031c 	add.w	r3, r7, #28
 80003ae:	2244      	movs	r2, #68	@ 0x44
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f003 fe50 	bl	8004058 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b8:	f107 0308 	add.w	r3, r7, #8
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]

    HAL_Init();
 80003c8:	f000 f94e 	bl	8000668 <HAL_Init>
    __HAL_RCC_PWR_CLK_ENABLE();
 80003cc:	4b1f      	ldr	r3, [pc, #124]	@ (800044c <SystemClock_Config+0xa8>)
 80003ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003d0:	4a1e      	ldr	r2, [pc, #120]	@ (800044c <SystemClock_Config+0xa8>)
 80003d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80003d8:	4b1c      	ldr	r3, [pc, #112]	@ (800044c <SystemClock_Config+0xa8>)
 80003da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	687b      	ldr	r3, [r7, #4]
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003e4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003e8:	f000 fa9a 	bl	8000920 <HAL_PWREx_ControlVoltageScaling>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003ec:	2310      	movs	r3, #16
 80003ee:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003f0:	2301      	movs	r3, #1
 80003f2:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80003f4:	2300      	movs	r3, #0
 80003f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003f8:	2360      	movs	r3, #96	@ 0x60
 80003fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fc:	2302      	movs	r3, #2
 80003fe:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000400:	2301      	movs	r3, #1
 8000402:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLM = 1;
 8000404:	2301      	movs	r3, #1
 8000406:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLN = 40;
 8000408:	2328      	movs	r3, #40	@ 0x28
 800040a:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800040c:	2302      	movs	r3, #2
 800040e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000410:	f107 031c 	add.w	r3, r7, #28
 8000414:	4618      	mov	r0, r3
 8000416:	f000 fad9 	bl	80009cc <HAL_RCC_OscConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x80>
        Error_Handler();
 8000420:	f000 f866 	bl	80004f0 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000424:	230f      	movs	r3, #15
 8000426:	60bb      	str	r3, [r7, #8]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000428:	2303      	movs	r3, #3
 800042a:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	61bb      	str	r3, [r7, #24]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000438:	f107 0308 	add.w	r3, r7, #8
 800043c:	2104      	movs	r1, #4
 800043e:	4618      	mov	r0, r3
 8000440:	f000 fea0 	bl	8001184 <HAL_RCC_ClockConfig>
}
 8000444:	bf00      	nop
 8000446:	3760      	adds	r7, #96	@ 0x60
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40021000 	.word	0x40021000

08000450 <main>:

/* -------------------- Main -------------------- */
int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af02      	add	r7, sp, #8
    debug_printf("FreeRTOS Mutex Test\r\n");
 8000456:	481d      	ldr	r0, [pc, #116]	@ (80004cc <main+0x7c>)
 8000458:	f7ff ff31 	bl	80002be <debug_printf>
    debug_printf("Starting scheduler...\r\n");
 800045c:	481c      	ldr	r0, [pc, #112]	@ (80004d0 <main+0x80>)
 800045e:	f7ff ff2e 	bl	80002be <debug_printf>

    HAL_Init();
 8000462:	f000 f901 	bl	8000668 <HAL_Init>
    SystemClock_Config();
 8000466:	f7ff ff9d 	bl	80003a4 <SystemClock_Config>

    debug_printf("FreeRTOS Mutex Test\r\n");
 800046a:	4818      	ldr	r0, [pc, #96]	@ (80004cc <main+0x7c>)
 800046c:	f7ff ff27 	bl	80002be <debug_printf>

    myMutex = xSemaphoreCreateMutex();
 8000470:	2001      	movs	r0, #1
 8000472:	f001 fa01 	bl	8001878 <xQueueCreateMutex>
 8000476:	4603      	mov	r3, r0
 8000478:	4a16      	ldr	r2, [pc, #88]	@ (80004d4 <main+0x84>)
 800047a:	6013      	str	r3, [r2, #0]
    if (myMutex == NULL)
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <main+0x84>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d104      	bne.n	800048e <main+0x3e>
    {
        debug_printf("Mutex creation failed!\r\n");
 8000484:	4814      	ldr	r0, [pc, #80]	@ (80004d8 <main+0x88>)
 8000486:	f7ff ff1a 	bl	80002be <debug_printf>
        while (1);
 800048a:	bf00      	nop
 800048c:	e7fd      	b.n	800048a <main+0x3a>
    }

    xTaskCreate(Task1, "Task1", 128, NULL, 2, NULL);
 800048e:	2300      	movs	r3, #0
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2302      	movs	r3, #2
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	2300      	movs	r3, #0
 8000498:	2280      	movs	r2, #128	@ 0x80
 800049a:	4910      	ldr	r1, [pc, #64]	@ (80004dc <main+0x8c>)
 800049c:	4810      	ldr	r0, [pc, #64]	@ (80004e0 <main+0x90>)
 800049e:	f001 ff1b 	bl	80022d8 <xTaskCreate>
    xTaskCreate(Task2, "Task2", 128, NULL, 2, NULL);
 80004a2:	2300      	movs	r3, #0
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2302      	movs	r3, #2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	2300      	movs	r3, #0
 80004ac:	2280      	movs	r2, #128	@ 0x80
 80004ae:	490d      	ldr	r1, [pc, #52]	@ (80004e4 <main+0x94>)
 80004b0:	480d      	ldr	r0, [pc, #52]	@ (80004e8 <main+0x98>)
 80004b2:	f001 ff11 	bl	80022d8 <xTaskCreate>

    debug_printf("Starting scheduler...\r\n");
 80004b6:	4806      	ldr	r0, [pc, #24]	@ (80004d0 <main+0x80>)
 80004b8:	f7ff ff01 	bl	80002be <debug_printf>
    vTaskStartScheduler();
 80004bc:	f002 f876 	bl	80025ac <vTaskStartScheduler>

    debug_printf("Scheduler failed!\r\n");
 80004c0:	480a      	ldr	r0, [pc, #40]	@ (80004ec <main+0x9c>)
 80004c2:	f7ff fefc 	bl	80002be <debug_printf>
    while (1);
 80004c6:	bf00      	nop
 80004c8:	e7fd      	b.n	80004c6 <main+0x76>
 80004ca:	bf00      	nop
 80004cc:	08004994 	.word	0x08004994
 80004d0:	080049ac 	.word	0x080049ac
 80004d4:	2000007c 	.word	0x2000007c
 80004d8:	080049c4 	.word	0x080049c4
 80004dc:	080049e0 	.word	0x080049e0
 80004e0:	0800031d 	.word	0x0800031d
 80004e4:	080049e8 	.word	0x080049e8
 80004e8:	08000361 	.word	0x08000361
 80004ec:	080049f0 	.word	0x080049f0

080004f0 <Error_Handler>:
}

/* -------------------- Error Handler -------------------- */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
    __disable_irq();
    while (1);
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <Error_Handler+0x8>

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000502:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <HAL_MspInit+0x4c>)
 8000504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000506:	4a10      	ldr	r2, [pc, #64]	@ (8000548 <HAL_MspInit+0x4c>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6613      	str	r3, [r2, #96]	@ 0x60
 800050e:	4b0e      	ldr	r3, [pc, #56]	@ (8000548 <HAL_MspInit+0x4c>)
 8000510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <HAL_MspInit+0x4c>)
 800051c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800051e:	4a0a      	ldr	r2, [pc, #40]	@ (8000548 <HAL_MspInit+0x4c>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000524:	6593      	str	r3, [r2, #88]	@ 0x58
 8000526:	4b08      	ldr	r3, [pc, #32]	@ (8000548 <HAL_MspInit+0x4c>)
 8000528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800052a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	210f      	movs	r1, #15
 8000536:	f06f 0001 	mvn.w	r0, #1
 800053a:	f000 f9ba 	bl	80008b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000

0800054c <NMI_Handler>:
#define USART_RX_Pin GPIO_PIN_3
#define USART_TX_GPIO_Port GPIOA
#define USART_RX_GPIO_Port GPIOA
/* USER CODE END Private defines */

void NMI_Handler(void) { while (1); }
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <NMI_Handler+0x4>

08000554 <HardFault_Handler>:
void HardFault_Handler(void) { while (1); }
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <HardFault_Handler+0x4>

0800055c <MemManage_Handler>:
void MemManage_Handler(void) { while (1); }
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <MemManage_Handler+0x4>

08000564 <BusFault_Handler>:
void BusFault_Handler(void) { while (1); }
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:
void UsageFault_Handler(void) { while (1); }
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <UsageFault_Handler+0x4>

08000574 <DebugMon_Handler>:
void DebugMon_Handler(void) {}
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800058c:	4a14      	ldr	r2, [pc, #80]	@ (80005e0 <_sbrk+0x5c>)
 800058e:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <_sbrk+0x60>)
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000598:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <_sbrk+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d102      	bne.n	80005a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a0:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <_sbrk+0x64>)
 80005a2:	4a12      	ldr	r2, [pc, #72]	@ (80005ec <_sbrk+0x68>)
 80005a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <_sbrk+0x64>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	693a      	ldr	r2, [r7, #16]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d207      	bcs.n	80005c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005b4:	f003 fd58 	bl	8004068 <__errno>
 80005b8:	4603      	mov	r3, r0
 80005ba:	220c      	movs	r2, #12
 80005bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005c2:	e009      	b.n	80005d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005c4:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <_sbrk+0x64>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ca:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <_sbrk+0x64>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	4a05      	ldr	r2, [pc, #20]	@ (80005e8 <_sbrk+0x64>)
 80005d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005d6:	68fb      	ldr	r3, [r7, #12]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3718      	adds	r7, #24
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20018000 	.word	0x20018000
 80005e4:	00000400 	.word	0x00000400
 80005e8:	20000080 	.word	0x20000080
 80005ec:	20002b68 	.word	0x20002b68

080005f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <SystemInit+0x20>)
 80005f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005fa:	4a05      	ldr	r2, [pc, #20]	@ (8000610 <SystemInit+0x20>)
 80005fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000614:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800064c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000618:	f7ff ffea 	bl	80005f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <LoopForever+0x6>)
  ldr r1, =_edata
 800061e:	490d      	ldr	r1, [pc, #52]	@ (8000654 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000620:	4a0d      	ldr	r2, [pc, #52]	@ (8000658 <LoopForever+0xe>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000634:	4c0a      	ldr	r4, [pc, #40]	@ (8000660 <LoopForever+0x16>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000642:	f003 fd17 	bl	8004074 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000646:	f7ff ff03 	bl	8000450 <main>

0800064a <LoopForever>:

LoopForever:
    b LoopForever
 800064a:	e7fe      	b.n	800064a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800064c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000658:	08004aa0 	.word	0x08004aa0
  ldr r2, =_sbss
 800065c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000660:	20002b64 	.word	0x20002b64

08000664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC1_2_IRQHandler>
	...

08000668 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800066e:	2300      	movs	r3, #0
 8000670:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000672:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <HAL_Init+0x3c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a0b      	ldr	r2, [pc, #44]	@ (80006a4 <HAL_Init+0x3c>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800067c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800067e:	2003      	movs	r0, #3
 8000680:	f000 f90c 	bl	800089c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000684:	200f      	movs	r0, #15
 8000686:	f000 f80f 	bl	80006a8 <HAL_InitTick>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d002      	beq.n	8000696 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000690:	2301      	movs	r3, #1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	e001      	b.n	800069a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000696:	f7ff ff31 	bl	80004fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800069a:	79fb      	ldrb	r3, [r7, #7]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40022000 	.word	0x40022000

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006b4:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <HAL_InitTick+0x6c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d023      	beq.n	8000704 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006bc:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <HAL_InitTick+0x70>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <HAL_InitTick+0x6c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f909 	bl	80008ea <HAL_SYSTICK_Config>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d10f      	bne.n	80006fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b0f      	cmp	r3, #15
 80006e2:	d809      	bhi.n	80006f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e4:	2200      	movs	r2, #0
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006ec:	f000 f8e1 	bl	80008b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006f0:	4a0a      	ldr	r2, [pc, #40]	@ (800071c <HAL_InitTick+0x74>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6013      	str	r3, [r2, #0]
 80006f6:	e007      	b.n	8000708 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006f8:	2301      	movs	r3, #1
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e004      	b.n	8000708 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	e001      	b.n	8000708 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000704:	2301      	movs	r3, #1
 8000706:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000008 	.word	0x20000008
 8000718:	20000000 	.word	0x20000000
 800071c:	20000004 	.word	0x20000004

08000720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return uwTick;
 8000724:	4b03      	ldr	r3, [pc, #12]	@ (8000734 <HAL_GetTick+0x14>)
 8000726:	681b      	ldr	r3, [r3, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000084 	.word	0x20000084

08000738 <__NVIC_SetPriorityGrouping>:
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000760:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076a:	4a04      	ldr	r2, [pc, #16]	@ (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	60d3      	str	r3, [r2, #12]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_GetPriorityGrouping>:
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000784:	4b04      	ldr	r3, [pc, #16]	@ (8000798 <__NVIC_GetPriorityGrouping+0x18>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	f003 0307 	and.w	r3, r3, #7
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_SetPriority>:
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db0a      	blt.n	80007c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	490c      	ldr	r1, [pc, #48]	@ (80007e8 <__NVIC_SetPriority+0x4c>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80007c4:	e00a      	b.n	80007dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4908      	ldr	r1, [pc, #32]	@ (80007ec <__NVIC_SetPriority+0x50>)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	3b04      	subs	r3, #4
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	440b      	add	r3, r1
 80007da:	761a      	strb	r2, [r3, #24]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <NVIC_EncodePriority>:
{
 80007f0:	b480      	push	{r7}
 80007f2:	b089      	sub	sp, #36	@ 0x24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	f1c3 0307 	rsb	r3, r3, #7
 800080a:	2b04      	cmp	r3, #4
 800080c:	bf28      	it	cs
 800080e:	2304      	movcs	r3, #4
 8000810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3304      	adds	r3, #4
 8000816:	2b06      	cmp	r3, #6
 8000818:	d902      	bls.n	8000820 <NVIC_EncodePriority+0x30>
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3b03      	subs	r3, #3
 800081e:	e000      	b.n	8000822 <NVIC_EncodePriority+0x32>
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43da      	mvns	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	401a      	ands	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000838:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43d9      	mvns	r1, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	4313      	orrs	r3, r2
}
 800084a:	4618      	mov	r0, r3
 800084c:	3724      	adds	r7, #36	@ 0x24
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <SysTick_Config>:
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000868:	d301      	bcc.n	800086e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800086a:	2301      	movs	r3, #1
 800086c:	e00f      	b.n	800088e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086e:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <SysTick_Config+0x40>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3b01      	subs	r3, #1
 8000874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000876:	210f      	movs	r1, #15
 8000878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800087c:	f7ff ff8e 	bl	800079c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000880:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <SysTick_Config+0x40>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000886:	4b04      	ldr	r3, [pc, #16]	@ (8000898 <SysTick_Config+0x40>)
 8000888:	2207      	movs	r2, #7
 800088a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	e000e010 	.word	0xe000e010

0800089c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ff47 	bl	8000738 <__NVIC_SetPriorityGrouping>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008c4:	f7ff ff5c 	bl	8000780 <__NVIC_GetPriorityGrouping>
 80008c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	6978      	ldr	r0, [r7, #20]
 80008d0:	f7ff ff8e 	bl	80007f0 <NVIC_EncodePriority>
 80008d4:	4602      	mov	r2, r0
 80008d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008da:	4611      	mov	r1, r2
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff5d 	bl	800079c <__NVIC_SetPriority>
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ffb0 	bl	8000858 <SysTick_Config>
 80008f8:	4603      	mov	r3, r0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000908:	4b04      	ldr	r3, [pc, #16]	@ (800091c <HAL_PWREx_GetVoltageRange+0x18>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40007000 	.word	0x40007000

08000920 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800092e:	d130      	bne.n	8000992 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000930:	4b23      	ldr	r3, [pc, #140]	@ (80009c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800093c:	d038      	beq.n	80009b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800093e:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000946:	4a1e      	ldr	r2, [pc, #120]	@ (80009c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000948:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800094c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800094e:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2232      	movs	r2, #50	@ 0x32
 8000954:	fb02 f303 	mul.w	r3, r2, r3
 8000958:	4a1b      	ldr	r2, [pc, #108]	@ (80009c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800095a:	fba2 2303 	umull	r2, r3, r2, r3
 800095e:	0c9b      	lsrs	r3, r3, #18
 8000960:	3301      	adds	r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000964:	e002      	b.n	800096c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	3b01      	subs	r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000978:	d102      	bne.n	8000980 <HAL_PWREx_ControlVoltageScaling+0x60>
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1f2      	bne.n	8000966 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800098c:	d110      	bne.n	80009b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800098e:	2303      	movs	r3, #3
 8000990:	e00f      	b.n	80009b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800099a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800099e:	d007      	beq.n	80009b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80009a0:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80009a8:	4a05      	ldr	r2, [pc, #20]	@ (80009c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40007000 	.word	0x40007000
 80009c4:	20000000 	.word	0x20000000
 80009c8:	431bde83 	.word	0x431bde83

080009cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d101      	bne.n	80009de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e3ca      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009de:	4b97      	ldr	r3, [pc, #604]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	f003 030c 	and.w	r3, r3, #12
 80009e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009e8:	4b94      	ldr	r3, [pc, #592]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	f003 0303 	and.w	r3, r3, #3
 80009f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f003 0310 	and.w	r3, r3, #16
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 80e4 	beq.w	8000bc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d007      	beq.n	8000a16 <HAL_RCC_OscConfig+0x4a>
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	2b0c      	cmp	r3, #12
 8000a0a:	f040 808b 	bne.w	8000b24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	f040 8087 	bne.w	8000b24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a16:	4b89      	ldr	r3, [pc, #548]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d005      	beq.n	8000a2e <HAL_RCC_OscConfig+0x62>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d101      	bne.n	8000a2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e3a2      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6a1a      	ldr	r2, [r3, #32]
 8000a32:	4b82      	ldr	r3, [pc, #520]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d004      	beq.n	8000a48 <HAL_RCC_OscConfig+0x7c>
 8000a3e:	4b7f      	ldr	r3, [pc, #508]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000a46:	e005      	b.n	8000a54 <HAL_RCC_OscConfig+0x88>
 8000a48:	4b7c      	ldr	r3, [pc, #496]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a4e:	091b      	lsrs	r3, r3, #4
 8000a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d223      	bcs.n	8000aa0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fd1d 	bl	800149c <RCC_SetFlashLatencyFromMSIRange>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e383      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a6c:	4b73      	ldr	r3, [pc, #460]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a72      	ldr	r2, [pc, #456]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000a72:	f043 0308 	orr.w	r3, r3, #8
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	4b70      	ldr	r3, [pc, #448]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6a1b      	ldr	r3, [r3, #32]
 8000a84:	496d      	ldr	r1, [pc, #436]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000a86:	4313      	orrs	r3, r2
 8000a88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	4968      	ldr	r1, [pc, #416]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	604b      	str	r3, [r1, #4]
 8000a9e:	e025      	b.n	8000aec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000aa0:	4b66      	ldr	r3, [pc, #408]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a65      	ldr	r2, [pc, #404]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000aa6:	f043 0308 	orr.w	r3, r3, #8
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	4b63      	ldr	r3, [pc, #396]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a1b      	ldr	r3, [r3, #32]
 8000ab8:	4960      	ldr	r1, [pc, #384]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000aba:	4313      	orrs	r3, r2
 8000abc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000abe:	4b5f      	ldr	r3, [pc, #380]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	495b      	ldr	r1, [pc, #364]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d109      	bne.n	8000aec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6a1b      	ldr	r3, [r3, #32]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fcdd 	bl	800149c <RCC_SetFlashLatencyFromMSIRange>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e343      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000aec:	f000 fc4a 	bl	8001384 <HAL_RCC_GetSysClockFreq>
 8000af0:	4602      	mov	r2, r0
 8000af2:	4b52      	ldr	r3, [pc, #328]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	091b      	lsrs	r3, r3, #4
 8000af8:	f003 030f 	and.w	r3, r3, #15
 8000afc:	4950      	ldr	r1, [pc, #320]	@ (8000c40 <HAL_RCC_OscConfig+0x274>)
 8000afe:	5ccb      	ldrb	r3, [r1, r3]
 8000b00:	f003 031f 	and.w	r3, r3, #31
 8000b04:	fa22 f303 	lsr.w	r3, r2, r3
 8000b08:	4a4e      	ldr	r2, [pc, #312]	@ (8000c44 <HAL_RCC_OscConfig+0x278>)
 8000b0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000b0c:	4b4e      	ldr	r3, [pc, #312]	@ (8000c48 <HAL_RCC_OscConfig+0x27c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fdc9 	bl	80006a8 <HAL_InitTick>
 8000b16:	4603      	mov	r3, r0
 8000b18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d052      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	e327      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d032      	beq.n	8000b92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000b2c:	4b43      	ldr	r3, [pc, #268]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a42      	ldr	r2, [pc, #264]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b38:	f7ff fdf2 	bl	8000720 <HAL_GetTick>
 8000b3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000b3e:	e008      	b.n	8000b52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b40:	f7ff fdee 	bl	8000720 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d901      	bls.n	8000b52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e310      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000b52:	4b3a      	ldr	r3, [pc, #232]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f0      	beq.n	8000b40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b5e:	4b37      	ldr	r3, [pc, #220]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a36      	ldr	r2, [pc, #216]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	4b34      	ldr	r3, [pc, #208]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6a1b      	ldr	r3, [r3, #32]
 8000b76:	4931      	ldr	r1, [pc, #196]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	492c      	ldr	r1, [pc, #176]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	604b      	str	r3, [r1, #4]
 8000b90:	e01a      	b.n	8000bc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000b92:	4b2a      	ldr	r3, [pc, #168]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a29      	ldr	r2, [pc, #164]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000b98:	f023 0301 	bic.w	r3, r3, #1
 8000b9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b9e:	f7ff fdbf 	bl	8000720 <HAL_GetTick>
 8000ba2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ba4:	e008      	b.n	8000bb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ba6:	f7ff fdbb 	bl	8000720 <HAL_GetTick>
 8000baa:	4602      	mov	r2, r0
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d901      	bls.n	8000bb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	e2dd      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000bb8:	4b20      	ldr	r3, [pc, #128]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1f0      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x1da>
 8000bc4:	e000      	b.n	8000bc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d074      	beq.n	8000cbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	2b08      	cmp	r3, #8
 8000bd8:	d005      	beq.n	8000be6 <HAL_RCC_OscConfig+0x21a>
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	2b0c      	cmp	r3, #12
 8000bde:	d10e      	bne.n	8000bfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	d10b      	bne.n	8000bfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d064      	beq.n	8000cbc <HAL_RCC_OscConfig+0x2f0>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d160      	bne.n	8000cbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e2ba      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c06:	d106      	bne.n	8000c16 <HAL_RCC_OscConfig+0x24a>
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	e026      	b.n	8000c64 <HAL_RCC_OscConfig+0x298>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c1e:	d115      	bne.n	8000c4c <HAL_RCC_OscConfig+0x280>
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000c26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	4b03      	ldr	r3, [pc, #12]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a02      	ldr	r2, [pc, #8]	@ (8000c3c <HAL_RCC_OscConfig+0x270>)
 8000c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	e014      	b.n	8000c64 <HAL_RCC_OscConfig+0x298>
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	08004a1c 	.word	0x08004a1c
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000004 	.word	0x20000004
 8000c4c:	4ba0      	ldr	r3, [pc, #640]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a9f      	ldr	r2, [pc, #636]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b9d      	ldr	r3, [pc, #628]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a9c      	ldr	r2, [pc, #624]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d013      	beq.n	8000c94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fd58 	bl	8000720 <HAL_GetTick>
 8000c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c72:	e008      	b.n	8000c86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c74:	f7ff fd54 	bl	8000720 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b64      	cmp	r3, #100	@ 0x64
 8000c80:	d901      	bls.n	8000c86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e276      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c86:	4b92      	ldr	r3, [pc, #584]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0f0      	beq.n	8000c74 <HAL_RCC_OscConfig+0x2a8>
 8000c92:	e014      	b.n	8000cbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c94:	f7ff fd44 	bl	8000720 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c9c:	f7ff fd40 	bl	8000720 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b64      	cmp	r3, #100	@ 0x64
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e262      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000cae:	4b88      	ldr	r3, [pc, #544]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f0      	bne.n	8000c9c <HAL_RCC_OscConfig+0x2d0>
 8000cba:	e000      	b.n	8000cbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d060      	beq.n	8000d8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d005      	beq.n	8000cdc <HAL_RCC_OscConfig+0x310>
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2b0c      	cmp	r3, #12
 8000cd4:	d119      	bne.n	8000d0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d116      	bne.n	8000d0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000cdc:	4b7c      	ldr	r3, [pc, #496]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x328>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e23f      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf4:	4b76      	ldr	r3, [pc, #472]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	691b      	ldr	r3, [r3, #16]
 8000d00:	061b      	lsls	r3, r3, #24
 8000d02:	4973      	ldr	r1, [pc, #460]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000d04:	4313      	orrs	r3, r2
 8000d06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d08:	e040      	b.n	8000d8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d023      	beq.n	8000d5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d12:	4b6f      	ldr	r3, [pc, #444]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a6e      	ldr	r2, [pc, #440]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d1e:	f7ff fcff 	bl	8000720 <HAL_GetTick>
 8000d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d24:	e008      	b.n	8000d38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d26:	f7ff fcfb 	bl	8000720 <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d901      	bls.n	8000d38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000d34:	2303      	movs	r3, #3
 8000d36:	e21d      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d38:	4b65      	ldr	r3, [pc, #404]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0f0      	beq.n	8000d26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d44:	4b62      	ldr	r3, [pc, #392]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	061b      	lsls	r3, r3, #24
 8000d52:	495f      	ldr	r1, [pc, #380]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000d54:	4313      	orrs	r3, r2
 8000d56:	604b      	str	r3, [r1, #4]
 8000d58:	e018      	b.n	8000d8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a5c      	ldr	r2, [pc, #368]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d66:	f7ff fcdb 	bl	8000720 <HAL_GetTick>
 8000d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d6c:	e008      	b.n	8000d80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d6e:	f7ff fcd7 	bl	8000720 <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d901      	bls.n	8000d80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e1f9      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d80:	4b53      	ldr	r3, [pc, #332]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1f0      	bne.n	8000d6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d03c      	beq.n	8000e12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d01c      	beq.n	8000dda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000da0:	4b4b      	ldr	r3, [pc, #300]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000da6:	4a4a      	ldr	r2, [pc, #296]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000db0:	f7ff fcb6 	bl	8000720 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db8:	f7ff fcb2 	bl	8000720 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e1d4      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000dca:	4b41      	ldr	r3, [pc, #260]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d0ef      	beq.n	8000db8 <HAL_RCC_OscConfig+0x3ec>
 8000dd8:	e01b      	b.n	8000e12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dda:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000de0:	4a3b      	ldr	r2, [pc, #236]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000de2:	f023 0301 	bic.w	r3, r3, #1
 8000de6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dea:	f7ff fc99 	bl	8000720 <HAL_GetTick>
 8000dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000df0:	e008      	b.n	8000e04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df2:	f7ff fc95 	bl	8000720 <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d901      	bls.n	8000e04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e1b7      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e04:	4b32      	ldr	r3, [pc, #200]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1ef      	bne.n	8000df2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 80a6 	beq.w	8000f6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000e24:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d10d      	bne.n	8000e4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e30:	4b27      	ldr	r3, [pc, #156]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e34:	4a26      	ldr	r2, [pc, #152]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e3c:	4b24      	ldr	r3, [pc, #144]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e4c:	4b21      	ldr	r3, [pc, #132]	@ (8000ed4 <HAL_RCC_OscConfig+0x508>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d118      	bne.n	8000e8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e58:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <HAL_RCC_OscConfig+0x508>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed4 <HAL_RCC_OscConfig+0x508>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e64:	f7ff fc5c 	bl	8000720 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e6c:	f7ff fc58 	bl	8000720 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e17a      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <HAL_RCC_OscConfig+0x508>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0f0      	beq.n	8000e6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d108      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x4d8>
 8000e92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000ea2:	e029      	b.n	8000ef8 <HAL_RCC_OscConfig+0x52c>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	2b05      	cmp	r3, #5
 8000eaa:	d115      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x50c>
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000eb2:	4a07      	ldr	r2, [pc, #28]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000ebc:	4b04      	ldr	r3, [pc, #16]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ec2:	4a03      	ldr	r2, [pc, #12]	@ (8000ed0 <HAL_RCC_OscConfig+0x504>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000ecc:	e014      	b.n	8000ef8 <HAL_RCC_OscConfig+0x52c>
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40007000 	.word	0x40007000
 8000ed8:	4b9c      	ldr	r3, [pc, #624]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 8000eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ede:	4a9b      	ldr	r2, [pc, #620]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000ee8:	4b98      	ldr	r3, [pc, #608]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 8000eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000eee:	4a97      	ldr	r2, [pc, #604]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 8000ef0:	f023 0304 	bic.w	r3, r3, #4
 8000ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d016      	beq.n	8000f2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f00:	f7ff fc0e 	bl	8000720 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f06:	e00a      	b.n	8000f1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f08:	f7ff fc0a 	bl	8000720 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e12a      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f1e:	4b8b      	ldr	r3, [pc, #556]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 8000f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0ed      	beq.n	8000f08 <HAL_RCC_OscConfig+0x53c>
 8000f2c:	e015      	b.n	8000f5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fbf7 	bl	8000720 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f36:	f7ff fbf3 	bl	8000720 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e113      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f4c:	4b7f      	ldr	r3, [pc, #508]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 8000f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1ed      	bne.n	8000f36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f5a:	7ffb      	ldrb	r3, [r7, #31]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d105      	bne.n	8000f6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f60:	4b7a      	ldr	r3, [pc, #488]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 8000f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f64:	4a79      	ldr	r2, [pc, #484]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 8000f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f6a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80fe 	beq.w	8001172 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	f040 80d0 	bne.w	8001120 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000f80:	4b72      	ldr	r3, [pc, #456]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f003 0203 	and.w	r2, r3, #3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d130      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d127      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d11f      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000fc0:	2a07      	cmp	r2, #7
 8000fc2:	bf14      	ite	ne
 8000fc4:	2201      	movne	r2, #1
 8000fc6:	2200      	moveq	r2, #0
 8000fc8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d113      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fd8:	085b      	lsrs	r3, r3, #1
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d109      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	085b      	lsrs	r3, r3, #1
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d06e      	beq.n	80010d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	2b0c      	cmp	r3, #12
 8000ffa:	d069      	beq.n	80010d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000ffc:	4b53      	ldr	r3, [pc, #332]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d105      	bne.n	8001014 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001008:	4b50      	ldr	r3, [pc, #320]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e0ad      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001018:	4b4c      	ldr	r3, [pc, #304]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a4b      	ldr	r2, [pc, #300]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 800101e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001022:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001024:	f7ff fb7c 	bl	8000720 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102c:	f7ff fb78 	bl	8000720 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e09a      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800103e:	4b43      	ldr	r3, [pc, #268]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800104a:	4b40      	ldr	r3, [pc, #256]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	4b40      	ldr	r3, [pc, #256]	@ (8001150 <HAL_RCC_OscConfig+0x784>)
 8001050:	4013      	ands	r3, r2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800105a:	3a01      	subs	r2, #1
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	4311      	orrs	r1, r2
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001064:	0212      	lsls	r2, r2, #8
 8001066:	4311      	orrs	r1, r2
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800106c:	0852      	lsrs	r2, r2, #1
 800106e:	3a01      	subs	r2, #1
 8001070:	0552      	lsls	r2, r2, #21
 8001072:	4311      	orrs	r1, r2
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001078:	0852      	lsrs	r2, r2, #1
 800107a:	3a01      	subs	r2, #1
 800107c:	0652      	lsls	r2, r2, #25
 800107e:	4311      	orrs	r1, r2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001084:	0912      	lsrs	r2, r2, #4
 8001086:	0452      	lsls	r2, r2, #17
 8001088:	430a      	orrs	r2, r1
 800108a:	4930      	ldr	r1, [pc, #192]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 800108c:	4313      	orrs	r3, r2
 800108e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001090:	4b2e      	ldr	r3, [pc, #184]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a2d      	ldr	r2, [pc, #180]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 8001096:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800109a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800109c:	4b2b      	ldr	r3, [pc, #172]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	4a2a      	ldr	r2, [pc, #168]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 80010a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80010a8:	f7ff fb3a 	bl	8000720 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b0:	f7ff fb36 	bl	8000720 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e058      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010c2:	4b22      	ldr	r3, [pc, #136]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80010ce:	e050      	b.n	8001172 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e04f      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010d4:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d148      	bne.n	8001172 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a19      	ldr	r2, [pc, #100]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 80010e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4a16      	ldr	r2, [pc, #88]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 80010f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80010f8:	f7ff fb12 	bl	8000720 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001100:	f7ff fb0e 	bl	8000720 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e030      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x734>
 800111e:	e028      	b.n	8001172 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2b0c      	cmp	r3, #12
 8001124:	d023      	beq.n	800116e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a08      	ldr	r2, [pc, #32]	@ (800114c <HAL_RCC_OscConfig+0x780>)
 800112c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001132:	f7ff faf5 	bl	8000720 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001138:	e00c      	b.n	8001154 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113a:	f7ff faf1 	bl	8000720 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d905      	bls.n	8001154 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e013      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
 800114c:	40021000 	.word	0x40021000
 8001150:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <HAL_RCC_OscConfig+0x7b0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1ec      	bne.n	800113a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_RCC_OscConfig+0x7b0>)
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	4905      	ldr	r1, [pc, #20]	@ (800117c <HAL_RCC_OscConfig+0x7b0>)
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_RCC_OscConfig+0x7b4>)
 8001168:	4013      	ands	r3, r2
 800116a:	60cb      	str	r3, [r1, #12]
 800116c:	e001      	b.n	8001172 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	feeefffc 	.word	0xfeeefffc

08001184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e0e7      	b.n	8001368 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001198:	4b75      	ldr	r3, [pc, #468]	@ (8001370 <HAL_RCC_ClockConfig+0x1ec>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d910      	bls.n	80011c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a6:	4b72      	ldr	r3, [pc, #456]	@ (8001370 <HAL_RCC_ClockConfig+0x1ec>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 0207 	bic.w	r2, r3, #7
 80011ae:	4970      	ldr	r1, [pc, #448]	@ (8001370 <HAL_RCC_ClockConfig+0x1ec>)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001370 <HAL_RCC_ClockConfig+0x1ec>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d001      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e0cf      	b.n	8001368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d010      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	4b66      	ldr	r3, [pc, #408]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d908      	bls.n	80011f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e4:	4b63      	ldr	r3, [pc, #396]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	4960      	ldr	r1, [pc, #384]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d04c      	beq.n	800129c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d107      	bne.n	800121a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800120a:	4b5a      	ldr	r3, [pc, #360]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d121      	bne.n	800125a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e0a6      	b.n	8001368 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d107      	bne.n	8001232 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001222:	4b54      	ldr	r3, [pc, #336]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d115      	bne.n	800125a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e09a      	b.n	8001368 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d107      	bne.n	800124a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800123a:	4b4e      	ldr	r3, [pc, #312]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d109      	bne.n	800125a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e08e      	b.n	8001368 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800124a:	4b4a      	ldr	r3, [pc, #296]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e086      	b.n	8001368 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800125a:	4b46      	ldr	r3, [pc, #280]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f023 0203 	bic.w	r2, r3, #3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	4943      	ldr	r1, [pc, #268]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 8001268:	4313      	orrs	r3, r2
 800126a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800126c:	f7ff fa58 	bl	8000720 <HAL_GetTick>
 8001270:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001272:	e00a      	b.n	800128a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001274:	f7ff fa54 	bl	8000720 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001282:	4293      	cmp	r3, r2
 8001284:	d901      	bls.n	800128a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e06e      	b.n	8001368 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128a:	4b3a      	ldr	r3, [pc, #232]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 020c 	and.w	r2, r3, #12
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	429a      	cmp	r2, r3
 800129a:	d1eb      	bne.n	8001274 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d010      	beq.n	80012ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	4b31      	ldr	r3, [pc, #196]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d208      	bcs.n	80012ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	492b      	ldr	r1, [pc, #172]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012ca:	4b29      	ldr	r3, [pc, #164]	@ (8001370 <HAL_RCC_ClockConfig+0x1ec>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d210      	bcs.n	80012fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d8:	4b25      	ldr	r3, [pc, #148]	@ (8001370 <HAL_RCC_ClockConfig+0x1ec>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f023 0207 	bic.w	r2, r3, #7
 80012e0:	4923      	ldr	r1, [pc, #140]	@ (8001370 <HAL_RCC_ClockConfig+0x1ec>)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e8:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <HAL_RCC_ClockConfig+0x1ec>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d001      	beq.n	80012fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e036      	b.n	8001368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	2b00      	cmp	r3, #0
 8001304:	d008      	beq.n	8001318 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001306:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	4918      	ldr	r1, [pc, #96]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 8001314:	4313      	orrs	r3, r2
 8001316:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	2b00      	cmp	r3, #0
 8001322:	d009      	beq.n	8001338 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001324:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4910      	ldr	r1, [pc, #64]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 8001334:	4313      	orrs	r3, r2
 8001336:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001338:	f000 f824 	bl	8001384 <HAL_RCC_GetSysClockFreq>
 800133c:	4602      	mov	r2, r0
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <HAL_RCC_ClockConfig+0x1f0>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	091b      	lsrs	r3, r3, #4
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	490b      	ldr	r1, [pc, #44]	@ (8001378 <HAL_RCC_ClockConfig+0x1f4>)
 800134a:	5ccb      	ldrb	r3, [r1, r3]
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	fa22 f303 	lsr.w	r3, r2, r3
 8001354:	4a09      	ldr	r2, [pc, #36]	@ (800137c <HAL_RCC_ClockConfig+0x1f8>)
 8001356:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <HAL_RCC_ClockConfig+0x1fc>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f9a3 	bl	80006a8 <HAL_InitTick>
 8001362:	4603      	mov	r3, r0
 8001364:	72fb      	strb	r3, [r7, #11]

  return status;
 8001366:	7afb      	ldrb	r3, [r7, #11]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40022000 	.word	0x40022000
 8001374:	40021000 	.word	0x40021000
 8001378:	08004a1c 	.word	0x08004a1c
 800137c:	20000000 	.word	0x20000000
 8001380:	20000004 	.word	0x20000004

08001384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	@ 0x24
 8001388:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001392:	4b3e      	ldr	r3, [pc, #248]	@ (800148c <HAL_RCC_GetSysClockFreq+0x108>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800139c:	4b3b      	ldr	r3, [pc, #236]	@ (800148c <HAL_RCC_GetSysClockFreq+0x108>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_GetSysClockFreq+0x34>
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	2b0c      	cmp	r3, #12
 80013b0:	d121      	bne.n	80013f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d11e      	bne.n	80013f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80013b8:	4b34      	ldr	r3, [pc, #208]	@ (800148c <HAL_RCC_GetSysClockFreq+0x108>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d107      	bne.n	80013d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80013c4:	4b31      	ldr	r3, [pc, #196]	@ (800148c <HAL_RCC_GetSysClockFreq+0x108>)
 80013c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013ca:	0a1b      	lsrs	r3, r3, #8
 80013cc:	f003 030f 	and.w	r3, r3, #15
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	e005      	b.n	80013e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80013d4:	4b2d      	ldr	r3, [pc, #180]	@ (800148c <HAL_RCC_GetSysClockFreq+0x108>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80013e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x10c>)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10d      	bne.n	800140c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d102      	bne.n	8001402 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80013fc:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <HAL_RCC_GetSysClockFreq+0x110>)
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	e004      	b.n	800140c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2b08      	cmp	r3, #8
 8001406:	d101      	bne.n	800140c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001408:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <HAL_RCC_GetSysClockFreq+0x114>)
 800140a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	2b0c      	cmp	r3, #12
 8001410:	d134      	bne.n	800147c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001412:	4b1e      	ldr	r3, [pc, #120]	@ (800148c <HAL_RCC_GetSysClockFreq+0x108>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d003      	beq.n	800142a <HAL_RCC_GetSysClockFreq+0xa6>
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2b03      	cmp	r3, #3
 8001426:	d003      	beq.n	8001430 <HAL_RCC_GetSysClockFreq+0xac>
 8001428:	e005      	b.n	8001436 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <HAL_RCC_GetSysClockFreq+0x110>)
 800142c:	617b      	str	r3, [r7, #20]
      break;
 800142e:	e005      	b.n	800143c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001430:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <HAL_RCC_GetSysClockFreq+0x114>)
 8001432:	617b      	str	r3, [r7, #20]
      break;
 8001434:	e002      	b.n	800143c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	617b      	str	r3, [r7, #20]
      break;
 800143a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800143c:	4b13      	ldr	r3, [pc, #76]	@ (800148c <HAL_RCC_GetSysClockFreq+0x108>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	091b      	lsrs	r3, r3, #4
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	3301      	adds	r3, #1
 8001448:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <HAL_RCC_GetSysClockFreq+0x108>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	fb03 f202 	mul.w	r2, r3, r2
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001460:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001462:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <HAL_RCC_GetSysClockFreq+0x108>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	0e5b      	lsrs	r3, r3, #25
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	3301      	adds	r3, #1
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800147c:	69bb      	ldr	r3, [r7, #24]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	@ 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	08004a2c 	.word	0x08004a2c
 8001494:	00f42400 	.word	0x00f42400
 8001498:	007a1200 	.word	0x007a1200

0800149c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80014a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80014b4:	f7ff fa26 	bl	8000904 <HAL_PWREx_GetVoltageRange>
 80014b8:	6178      	str	r0, [r7, #20]
 80014ba:	e014      	b.n	80014e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80014bc:	4b25      	ldr	r3, [pc, #148]	@ (8001554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c0:	4a24      	ldr	r2, [pc, #144]	@ (8001554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014c8:	4b22      	ldr	r3, [pc, #136]	@ (8001554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80014d4:	f7ff fa16 	bl	8000904 <HAL_PWREx_GetVoltageRange>
 80014d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80014da:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014de:	4a1d      	ldr	r2, [pc, #116]	@ (8001554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014ec:	d10b      	bne.n	8001506 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b80      	cmp	r3, #128	@ 0x80
 80014f2:	d919      	bls.n	8001528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80014f8:	d902      	bls.n	8001500 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80014fa:	2302      	movs	r3, #2
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	e013      	b.n	8001528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001500:	2301      	movs	r3, #1
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	e010      	b.n	8001528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b80      	cmp	r3, #128	@ 0x80
 800150a:	d902      	bls.n	8001512 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800150c:	2303      	movs	r3, #3
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	e00a      	b.n	8001528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b80      	cmp	r3, #128	@ 0x80
 8001516:	d102      	bne.n	800151e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001518:	2302      	movs	r3, #2
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	e004      	b.n	8001528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b70      	cmp	r3, #112	@ 0x70
 8001522:	d101      	bne.n	8001528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001524:	2301      	movs	r3, #1
 8001526:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001528:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 0207 	bic.w	r2, r3, #7
 8001530:	4909      	ldr	r1, [pc, #36]	@ (8001558 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001538:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	429a      	cmp	r2, r3
 8001544:	d001      	beq.n	800154a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	40022000 	.word	0x40022000

0800155c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f103 0208 	add.w	r2, r3, #8
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001574:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f103 0208 	add.w	r2, r3, #8
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f103 0208 	add.w	r2, r3, #8
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80015b6:	b480      	push	{r7}
 80015b8:	b085      	sub	sp, #20
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	601a      	str	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001614:	d103      	bne.n	800161e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	e00c      	b.n	8001638 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3308      	adds	r3, #8
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	e002      	b.n	800162c <vListInsert+0x2e>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	429a      	cmp	r2, r3
 8001636:	d2f6      	bcs.n	8001626 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	601a      	str	r2, [r3, #0]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6892      	ldr	r2, [r2, #8]
 8001686:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6852      	ldr	r2, [r2, #4]
 8001690:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	d103      	bne.n	80016a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	1e5a      	subs	r2, r3, #1
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10b      	bne.n	80016f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80016d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016dc:	f383 8811 	msr	BASEPRI, r3
 80016e0:	f3bf 8f6f 	isb	sy
 80016e4:	f3bf 8f4f 	dsb	sy
 80016e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80016f0:	f002 f9bc 	bl	8003a6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016fc:	68f9      	ldr	r1, [r7, #12]
 80016fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	441a      	add	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001720:	3b01      	subs	r3, #1
 8001722:	68f9      	ldr	r1, [r7, #12]
 8001724:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	441a      	add	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	22ff      	movs	r2, #255	@ 0xff
 8001734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	22ff      	movs	r2, #255	@ 0xff
 800173c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d114      	bne.n	8001770 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d01a      	beq.n	8001784 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3310      	adds	r3, #16
 8001752:	4618      	mov	r0, r3
 8001754:	f001 f99c 	bl	8002a90 <xTaskRemoveFromEventList>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d012      	beq.n	8001784 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800175e:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <xQueueGenericReset+0xd0>)
 8001760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	f3bf 8f4f 	dsb	sy
 800176a:	f3bf 8f6f 	isb	sy
 800176e:	e009      	b.n	8001784 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3310      	adds	r3, #16
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fef1 	bl	800155c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3324      	adds	r3, #36	@ 0x24
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff feec 	bl	800155c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001784:	f002 f9a4 	bl	8003ad0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001788:	2301      	movs	r3, #1
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	e000ed04 	.word	0xe000ed04

08001798 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af02      	add	r7, sp, #8
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	4613      	mov	r3, r2
 80017a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10b      	bne.n	80017c4 <xQueueGenericCreate+0x2c>
	__asm volatile
 80017ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017b0:	f383 8811 	msr	BASEPRI, r3
 80017b4:	f3bf 8f6f 	isb	sy
 80017b8:	f3bf 8f4f 	dsb	sy
 80017bc:	613b      	str	r3, [r7, #16]
}
 80017be:	bf00      	nop
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	fb02 f303 	mul.w	r3, r2, r3
 80017cc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3348      	adds	r3, #72	@ 0x48
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 fa16 	bl	8003c04 <pvPortMalloc>
 80017d8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00d      	beq.n	80017fc <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3348      	adds	r3, #72	@ 0x48
 80017e8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80017ea:	79fa      	ldrb	r2, [r7, #7]
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	4613      	mov	r3, r2
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 f805 	bl	8001806 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80017fc:	69bb      	ldr	r3, [r7, #24]
	}
 80017fe:	4618      	mov	r0, r3
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d103      	bne.n	8001822 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e002      	b.n	8001828 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001834:	2101      	movs	r1, #1
 8001836:	69b8      	ldr	r0, [r7, #24]
 8001838:	f7ff ff44 	bl	80016c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00e      	beq.n	8001870 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001864:	2300      	movs	r3, #0
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f81c 	bl	80018a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001882:	2301      	movs	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	461a      	mov	r2, r3
 800188e:	6939      	ldr	r1, [r7, #16]
 8001890:	6978      	ldr	r0, [r7, #20]
 8001892:	f7ff ff81 	bl	8001798 <xQueueGenericCreate>
 8001896:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f7ff ffd3 	bl	8001844 <prvInitialiseMutex>

		return xNewQueue;
 800189e:	68fb      	ldr	r3, [r7, #12]
	}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08e      	sub	sp, #56	@ 0x38
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80018be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10b      	bne.n	80018dc <xQueueGenericSend+0x34>
	__asm volatile
 80018c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018c8:	f383 8811 	msr	BASEPRI, r3
 80018cc:	f3bf 8f6f 	isb	sy
 80018d0:	f3bf 8f4f 	dsb	sy
 80018d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d103      	bne.n	80018ea <xQueueGenericSend+0x42>
 80018e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <xQueueGenericSend+0x46>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <xQueueGenericSend+0x48>
 80018ee:	2300      	movs	r3, #0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10b      	bne.n	800190c <xQueueGenericSend+0x64>
	__asm volatile
 80018f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018f8:	f383 8811 	msr	BASEPRI, r3
 80018fc:	f3bf 8f6f 	isb	sy
 8001900:	f3bf 8f4f 	dsb	sy
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d103      	bne.n	800191a <xQueueGenericSend+0x72>
 8001912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <xQueueGenericSend+0x76>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <xQueueGenericSend+0x78>
 800191e:	2300      	movs	r3, #0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10b      	bne.n	800193c <xQueueGenericSend+0x94>
	__asm volatile
 8001924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001928:	f383 8811 	msr	BASEPRI, r3
 800192c:	f3bf 8f6f 	isb	sy
 8001930:	f3bf 8f4f 	dsb	sy
 8001934:	623b      	str	r3, [r7, #32]
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800193c:	f001 fa3a 	bl	8002db4 <xTaskGetSchedulerState>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <xQueueGenericSend+0xa4>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <xQueueGenericSend+0xa8>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <xQueueGenericSend+0xaa>
 8001950:	2300      	movs	r3, #0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10b      	bne.n	800196e <xQueueGenericSend+0xc6>
	__asm volatile
 8001956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800195a:	f383 8811 	msr	BASEPRI, r3
 800195e:	f3bf 8f6f 	isb	sy
 8001962:	f3bf 8f4f 	dsb	sy
 8001966:	61fb      	str	r3, [r7, #28]
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	e7fd      	b.n	800196a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800196e:	f002 f87d 	bl	8003a6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800197a:	429a      	cmp	r2, r3
 800197c:	d302      	bcc.n	8001984 <xQueueGenericSend+0xdc>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d129      	bne.n	80019d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800198a:	f000 fb37 	bl	8001ffc <prvCopyDataToQueue>
 800198e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001994:	2b00      	cmp	r3, #0
 8001996:	d010      	beq.n	80019ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800199a:	3324      	adds	r3, #36	@ 0x24
 800199c:	4618      	mov	r0, r3
 800199e:	f001 f877 	bl	8002a90 <xTaskRemoveFromEventList>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80019a8:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa8 <xQueueGenericSend+0x200>)
 80019aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	f3bf 8f4f 	dsb	sy
 80019b4:	f3bf 8f6f 	isb	sy
 80019b8:	e00a      	b.n	80019d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80019ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80019c0:	4b39      	ldr	r3, [pc, #228]	@ (8001aa8 <xQueueGenericSend+0x200>)
 80019c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	f3bf 8f4f 	dsb	sy
 80019cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80019d0:	f002 f87e 	bl	8003ad0 <vPortExitCritical>
				return pdPASS;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e063      	b.n	8001aa0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d103      	bne.n	80019e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80019de:	f002 f877 	bl	8003ad0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e05c      	b.n	8001aa0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80019e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d106      	bne.n	80019fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4618      	mov	r0, r3
 80019f2:	f001 f8b1 	bl	8002b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80019f6:	2301      	movs	r3, #1
 80019f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80019fa:	f002 f869 	bl	8003ad0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80019fe:	f000 fe23 	bl	8002648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001a02:	f002 f833 	bl	8003a6c <vPortEnterCritical>
 8001a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001a0c:	b25b      	sxtb	r3, r3
 8001a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a12:	d103      	bne.n	8001a1c <xQueueGenericSend+0x174>
 8001a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001a22:	b25b      	sxtb	r3, r3
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a28:	d103      	bne.n	8001a32 <xQueueGenericSend+0x18a>
 8001a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a32:	f002 f84d 	bl	8003ad0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a36:	1d3a      	adds	r2, r7, #4
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f001 f8a0 	bl	8002b84 <xTaskCheckForTimeOut>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d124      	bne.n	8001a94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001a4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001a4c:	f000 fbce 	bl	80021ec <prvIsQueueFull>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d018      	beq.n	8001a88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a58:	3310      	adds	r3, #16
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 ffc4 	bl	80029ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001a64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001a66:	f000 fb59 	bl	800211c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001a6a:	f000 fdfb 	bl	8002664 <xTaskResumeAll>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f47f af7c 	bne.w	800196e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001a76:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <xQueueGenericSend+0x200>)
 8001a78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	f3bf 8f4f 	dsb	sy
 8001a82:	f3bf 8f6f 	isb	sy
 8001a86:	e772      	b.n	800196e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001a88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001a8a:	f000 fb47 	bl	800211c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a8e:	f000 fde9 	bl	8002664 <xTaskResumeAll>
 8001a92:	e76c      	b.n	800196e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001a96:	f000 fb41 	bl	800211c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001a9a:	f000 fde3 	bl	8002664 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001a9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3738      	adds	r7, #56	@ 0x38
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	e000ed04 	.word	0xe000ed04

08001aac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b090      	sub	sp, #64	@ 0x40
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10b      	bne.n	8001adc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ac8:	f383 8811 	msr	BASEPRI, r3
 8001acc:	f3bf 8f6f 	isb	sy
 8001ad0:	f3bf 8f4f 	dsb	sy
 8001ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d103      	bne.n	8001aea <xQueueGenericSendFromISR+0x3e>
 8001ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <xQueueGenericSendFromISR+0x42>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <xQueueGenericSendFromISR+0x44>
 8001aee:	2300      	movs	r3, #0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10b      	bne.n	8001b0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8001af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001af8:	f383 8811 	msr	BASEPRI, r3
 8001afc:	f3bf 8f6f 	isb	sy
 8001b00:	f3bf 8f4f 	dsb	sy
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d103      	bne.n	8001b1a <xQueueGenericSendFromISR+0x6e>
 8001b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <xQueueGenericSendFromISR+0x72>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <xQueueGenericSendFromISR+0x74>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10b      	bne.n	8001b3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8001b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b28:	f383 8811 	msr	BASEPRI, r3
 8001b2c:	f3bf 8f6f 	isb	sy
 8001b30:	f3bf 8f4f 	dsb	sy
 8001b34:	623b      	str	r3, [r7, #32]
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001b3c:	f002 f820 	bl	8003b80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001b40:	f3ef 8211 	mrs	r2, BASEPRI
 8001b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b48:	f383 8811 	msr	BASEPRI, r3
 8001b4c:	f3bf 8f6f 	isb	sy
 8001b50:	f3bf 8f4f 	dsb	sy
 8001b54:	61fa      	str	r2, [r7, #28]
 8001b56:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001b58:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001b5a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d302      	bcc.n	8001b6e <xQueueGenericSendFromISR+0xc2>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d12f      	bne.n	8001bce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001b74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001b84:	f000 fa3a 	bl	8001ffc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001b88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b90:	d112      	bne.n	8001bb8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d016      	beq.n	8001bc8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b9c:	3324      	adds	r3, #36	@ 0x24
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 ff76 	bl	8002a90 <xTaskRemoveFromEventList>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00e      	beq.n	8001bc8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00b      	beq.n	8001bc8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	e007      	b.n	8001bc8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	b25a      	sxtb	r2, r3
 8001bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8001bcc:	e001      	b.n	8001bd2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bd4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001bdc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3740      	adds	r7, #64	@ 0x40
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	@ 0x30
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10b      	bne.n	8001c1a <xQueueReceive+0x32>
	__asm volatile
 8001c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c06:	f383 8811 	msr	BASEPRI, r3
 8001c0a:	f3bf 8f6f 	isb	sy
 8001c0e:	f3bf 8f4f 	dsb	sy
 8001c12:	623b      	str	r3, [r7, #32]
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	e7fd      	b.n	8001c16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d103      	bne.n	8001c28 <xQueueReceive+0x40>
 8001c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <xQueueReceive+0x44>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <xQueueReceive+0x46>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10b      	bne.n	8001c4a <xQueueReceive+0x62>
	__asm volatile
 8001c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c36:	f383 8811 	msr	BASEPRI, r3
 8001c3a:	f3bf 8f6f 	isb	sy
 8001c3e:	f3bf 8f4f 	dsb	sy
 8001c42:	61fb      	str	r3, [r7, #28]
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	e7fd      	b.n	8001c46 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c4a:	f001 f8b3 	bl	8002db4 <xTaskGetSchedulerState>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <xQueueReceive+0x72>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <xQueueReceive+0x76>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <xQueueReceive+0x78>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10b      	bne.n	8001c7c <xQueueReceive+0x94>
	__asm volatile
 8001c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c68:	f383 8811 	msr	BASEPRI, r3
 8001c6c:	f3bf 8f6f 	isb	sy
 8001c70:	f3bf 8f4f 	dsb	sy
 8001c74:	61bb      	str	r3, [r7, #24]
}
 8001c76:	bf00      	nop
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c7c:	f001 fef6 	bl	8003a6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d01f      	beq.n	8001ccc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c90:	f000 fa1e 	bl	80020d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	1e5a      	subs	r2, r3, #1
 8001c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00f      	beq.n	8001cc4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca6:	3310      	adds	r3, #16
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 fef1 	bl	8002a90 <xTaskRemoveFromEventList>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001cb4:	4b3c      	ldr	r3, [pc, #240]	@ (8001da8 <xQueueReceive+0x1c0>)
 8001cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	f3bf 8f4f 	dsb	sy
 8001cc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001cc4:	f001 ff04 	bl	8003ad0 <vPortExitCritical>
				return pdPASS;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e069      	b.n	8001da0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d103      	bne.n	8001cda <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001cd2:	f001 fefd 	bl	8003ad0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e062      	b.n	8001da0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d106      	bne.n	8001cee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 ff37 	bl	8002b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001cea:	2301      	movs	r3, #1
 8001cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001cee:	f001 feef 	bl	8003ad0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001cf2:	f000 fca9 	bl	8002648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001cf6:	f001 feb9 	bl	8003a6c <vPortEnterCritical>
 8001cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d06:	d103      	bne.n	8001d10 <xQueueReceive+0x128>
 8001d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001d16:	b25b      	sxtb	r3, r3
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d1c:	d103      	bne.n	8001d26 <xQueueReceive+0x13e>
 8001d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001d26:	f001 fed3 	bl	8003ad0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d2a:	1d3a      	adds	r2, r7, #4
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 ff26 	bl	8002b84 <xTaskCheckForTimeOut>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d123      	bne.n	8001d86 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d40:	f000 fa3e 	bl	80021c0 <prvIsQueueEmpty>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d017      	beq.n	8001d7a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d4c:	3324      	adds	r3, #36	@ 0x24
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fe4a 	bl	80029ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001d58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d5a:	f000 f9df 	bl	800211c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001d5e:	f000 fc81 	bl	8002664 <xTaskResumeAll>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d189      	bne.n	8001c7c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8001d68:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <xQueueReceive+0x1c0>)
 8001d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	f3bf 8f4f 	dsb	sy
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	e780      	b.n	8001c7c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001d7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d7c:	f000 f9ce 	bl	800211c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d80:	f000 fc70 	bl	8002664 <xTaskResumeAll>
 8001d84:	e77a      	b.n	8001c7c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d88:	f000 f9c8 	bl	800211c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001d8c:	f000 fc6a 	bl	8002664 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d92:	f000 fa15 	bl	80021c0 <prvIsQueueEmpty>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f43f af6f 	beq.w	8001c7c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001d9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3730      	adds	r7, #48	@ 0x30
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	e000ed04 	.word	0xe000ed04

08001dac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08e      	sub	sp, #56	@ 0x38
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10b      	bne.n	8001de0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8001dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dcc:	f383 8811 	msr	BASEPRI, r3
 8001dd0:	f3bf 8f6f 	isb	sy
 8001dd4:	f3bf 8f4f 	dsb	sy
 8001dd8:	623b      	str	r3, [r7, #32]
}
 8001dda:	bf00      	nop
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00b      	beq.n	8001e00 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8001de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dec:	f383 8811 	msr	BASEPRI, r3
 8001df0:	f3bf 8f6f 	isb	sy
 8001df4:	f3bf 8f4f 	dsb	sy
 8001df8:	61fb      	str	r3, [r7, #28]
}
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e00:	f000 ffd8 	bl	8002db4 <xTaskGetSchedulerState>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <xQueueSemaphoreTake+0x64>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <xQueueSemaphoreTake+0x68>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <xQueueSemaphoreTake+0x6a>
 8001e14:	2300      	movs	r3, #0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10b      	bne.n	8001e32 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8001e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e1e:	f383 8811 	msr	BASEPRI, r3
 8001e22:	f3bf 8f6f 	isb	sy
 8001e26:	f3bf 8f4f 	dsb	sy
 8001e2a:	61bb      	str	r3, [r7, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	e7fd      	b.n	8001e2e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e32:	f001 fe1b 	bl	8003a6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d024      	beq.n	8001e8c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e44:	1e5a      	subs	r2, r3, #1
 8001e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e48:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d104      	bne.n	8001e5c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001e52:	f001 f95b 	bl	800310c <pvTaskIncrementMutexHeldCount>
 8001e56:	4602      	mov	r2, r0
 8001e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00f      	beq.n	8001e84 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e66:	3310      	adds	r3, #16
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fe11 	bl	8002a90 <xTaskRemoveFromEventList>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001e74:	4b54      	ldr	r3, [pc, #336]	@ (8001fc8 <xQueueSemaphoreTake+0x21c>)
 8001e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	f3bf 8f4f 	dsb	sy
 8001e80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001e84:	f001 fe24 	bl	8003ad0 <vPortExitCritical>
				return pdPASS;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e098      	b.n	8001fbe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d112      	bne.n	8001eb8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00b      	beq.n	8001eb0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8001e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e9c:	f383 8811 	msr	BASEPRI, r3
 8001ea0:	f3bf 8f6f 	isb	sy
 8001ea4:	f3bf 8f4f 	dsb	sy
 8001ea8:	617b      	str	r3, [r7, #20]
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001eb0:	f001 fe0e 	bl	8003ad0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e082      	b.n	8001fbe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 fe48 	bl	8002b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ecc:	f001 fe00 	bl	8003ad0 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ed0:	f000 fbba 	bl	8002648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ed4:	f001 fdca 	bl	8003a6c <vPortEnterCritical>
 8001ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001ede:	b25b      	sxtb	r3, r3
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ee4:	d103      	bne.n	8001eee <xQueueSemaphoreTake+0x142>
 8001ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001ef4:	b25b      	sxtb	r3, r3
 8001ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001efa:	d103      	bne.n	8001f04 <xQueueSemaphoreTake+0x158>
 8001efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f04:	f001 fde4 	bl	8003ad0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f08:	463a      	mov	r2, r7
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 fe37 	bl	8002b84 <xTaskCheckForTimeOut>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d132      	bne.n	8001f82 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f1e:	f000 f94f 	bl	80021c0 <prvIsQueueEmpty>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d026      	beq.n	8001f76 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8001f30:	f001 fd9c 	bl	8003a6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 ff59 	bl	8002df0 <xTaskPriorityInherit>
 8001f3e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8001f40:	f001 fdc6 	bl	8003ad0 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f46:	3324      	adds	r3, #36	@ 0x24
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 fd4d 	bl	80029ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001f52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f54:	f000 f8e2 	bl	800211c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001f58:	f000 fb84 	bl	8002664 <xTaskResumeAll>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f47f af67 	bne.w	8001e32 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8001f64:	4b18      	ldr	r3, [pc, #96]	@ (8001fc8 <xQueueSemaphoreTake+0x21c>)
 8001f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	f3bf 8f4f 	dsb	sy
 8001f70:	f3bf 8f6f 	isb	sy
 8001f74:	e75d      	b.n	8001e32 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8001f76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f78:	f000 f8d0 	bl	800211c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f7c:	f000 fb72 	bl	8002664 <xTaskResumeAll>
 8001f80:	e757      	b.n	8001e32 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001f82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f84:	f000 f8ca 	bl	800211c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f88:	f000 fb6c 	bl	8002664 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f8e:	f000 f917 	bl	80021c0 <prvIsQueueEmpty>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f43f af4c 	beq.w	8001e32 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8001f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00d      	beq.n	8001fbc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8001fa0:	f001 fd64 	bl	8003a6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001fa4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001fa6:	f000 f811 	bl	8001fcc <prvGetDisinheritPriorityAfterTimeout>
 8001faa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 f81a 	bl	8002fec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001fb8:	f001 fd8a 	bl	8003ad0 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001fbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3738      	adds	r7, #56	@ 0x38
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	e000ed04 	.word	0xe000ed04

08001fcc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f1c3 0305 	rsb	r3, r3, #5
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e001      	b.n	8001fee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8001fee:	68fb      	ldr	r3, [r7, #12]
	}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002010:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10d      	bne.n	8002036 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d14d      	bne.n	80020be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 ff58 	bl	8002edc <xTaskPriorityDisinherit>
 800202c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	e043      	b.n	80020be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d119      	bne.n	8002070 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6858      	ldr	r0, [r3, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	461a      	mov	r2, r3
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	f002 f83a 	bl	80040c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	441a      	add	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	429a      	cmp	r2, r3
 8002064:	d32b      	bcc.n	80020be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	e026      	b.n	80020be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	68d8      	ldr	r0, [r3, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	461a      	mov	r2, r3
 800207a:	68b9      	ldr	r1, [r7, #8]
 800207c:	f002 f820 	bl	80040c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	425b      	negs	r3, r3
 800208a:	441a      	add	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d207      	bcs.n	80020ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	425b      	negs	r3, r3
 80020a6:	441a      	add	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d105      	bne.n	80020be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80020c6:	697b      	ldr	r3, [r7, #20]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d018      	beq.n	8002114 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	441a      	add	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d303      	bcc.n	8002104 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68d9      	ldr	r1, [r3, #12]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210c:	461a      	mov	r2, r3
 800210e:	6838      	ldr	r0, [r7, #0]
 8002110:	f001 ffd6 	bl	80040c0 <memcpy>
	}
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002124:	f001 fca2 	bl	8003a6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800212e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002130:	e011      	b.n	8002156 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	2b00      	cmp	r3, #0
 8002138:	d012      	beq.n	8002160 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3324      	adds	r3, #36	@ 0x24
 800213e:	4618      	mov	r0, r3
 8002140:	f000 fca6 	bl	8002a90 <xTaskRemoveFromEventList>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800214a:	f000 fd77 	bl	8002c3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	3b01      	subs	r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215a:	2b00      	cmp	r3, #0
 800215c:	dce9      	bgt.n	8002132 <prvUnlockQueue+0x16>
 800215e:	e000      	b.n	8002162 <prvUnlockQueue+0x46>
					break;
 8002160:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	22ff      	movs	r2, #255	@ 0xff
 8002166:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800216a:	f001 fcb1 	bl	8003ad0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800216e:	f001 fc7d 	bl	8003a6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002178:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800217a:	e011      	b.n	80021a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d012      	beq.n	80021aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3310      	adds	r3, #16
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fc81 	bl	8002a90 <xTaskRemoveFromEventList>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002194:	f000 fd52 	bl	8002c3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002198:	7bbb      	ldrb	r3, [r7, #14]
 800219a:	3b01      	subs	r3, #1
 800219c:	b2db      	uxtb	r3, r3
 800219e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	dce9      	bgt.n	800217c <prvUnlockQueue+0x60>
 80021a8:	e000      	b.n	80021ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80021aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	22ff      	movs	r2, #255	@ 0xff
 80021b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80021b4:	f001 fc8c 	bl	8003ad0 <vPortExitCritical>
}
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80021c8:	f001 fc50 	bl	8003a6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80021d4:	2301      	movs	r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e001      	b.n	80021de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80021de:	f001 fc77 	bl	8003ad0 <vPortExitCritical>

	return xReturn;
 80021e2:	68fb      	ldr	r3, [r7, #12]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80021f4:	f001 fc3a 	bl	8003a6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002200:	429a      	cmp	r2, r3
 8002202:	d102      	bne.n	800220a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002204:	2301      	movs	r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e001      	b.n	800220e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800220e:	f001 fc5f 	bl	8003ad0 <vPortExitCritical>

	return xReturn;
 8002212:	68fb      	ldr	r3, [r7, #12]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e014      	b.n	8002256 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800222c:	4a0f      	ldr	r2, [pc, #60]	@ (800226c <vQueueAddToRegistry+0x50>)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10b      	bne.n	8002250 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002238:	490c      	ldr	r1, [pc, #48]	@ (800226c <vQueueAddToRegistry+0x50>)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002242:	4a0a      	ldr	r2, [pc, #40]	@ (800226c <vQueueAddToRegistry+0x50>)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800224e:	e006      	b.n	800225e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3301      	adds	r3, #1
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b07      	cmp	r3, #7
 800225a:	d9e7      	bls.n	800222c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000088 	.word	0x20000088

08002270 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002280:	f001 fbf4 	bl	8003a6c <vPortEnterCritical>
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800228a:	b25b      	sxtb	r3, r3
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002290:	d103      	bne.n	800229a <vQueueWaitForMessageRestricted+0x2a>
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022a0:	b25b      	sxtb	r3, r3
 80022a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022a6:	d103      	bne.n	80022b0 <vQueueWaitForMessageRestricted+0x40>
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022b0:	f001 fc0e 	bl	8003ad0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d106      	bne.n	80022ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3324      	adds	r3, #36	@ 0x24
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fbb7 	bl	8002a38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	f7ff ff26 	bl	800211c <prvUnlockQueue>
	}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08c      	sub	sp, #48	@ 0x30
 80022dc:	af04      	add	r7, sp, #16
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f001 fc89 	bl	8003c04 <pvPortMalloc>
 80022f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00e      	beq.n	8002318 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80022fa:	2054      	movs	r0, #84	@ 0x54
 80022fc:	f001 fc82 	bl	8003c04 <pvPortMalloc>
 8002300:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	631a      	str	r2, [r3, #48]	@ 0x30
 800230e:	e005      	b.n	800231c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002310:	6978      	ldr	r0, [r7, #20]
 8002312:	f001 fd45 	bl	8003da0 <vPortFree>
 8002316:	e001      	b.n	800231c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d013      	beq.n	800234a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002322:	88fa      	ldrh	r2, [r7, #6]
 8002324:	2300      	movs	r3, #0
 8002326:	9303      	str	r3, [sp, #12]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	9302      	str	r3, [sp, #8]
 800232c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232e:	9301      	str	r3, [sp, #4]
 8002330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68b9      	ldr	r1, [r7, #8]
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f80e 	bl	800235a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800233e:	69f8      	ldr	r0, [r7, #28]
 8002340:	f000 f894 	bl	800246c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002344:	2301      	movs	r3, #1
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	e002      	b.n	8002350 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800234e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002350:	69bb      	ldr	r3, [r7, #24]
	}
 8002352:	4618      	mov	r0, r3
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b088      	sub	sp, #32
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002372:	3b01      	subs	r3, #1
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	f023 0307 	bic.w	r3, r3, #7
 8002380:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00b      	beq.n	80023a4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800238c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	617b      	str	r3, [r7, #20]
}
 800239e:	bf00      	nop
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d01f      	beq.n	80023ea <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	e012      	b.n	80023d6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	7819      	ldrb	r1, [r3, #0]
 80023b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	4413      	add	r3, r2
 80023be:	3334      	adds	r3, #52	@ 0x34
 80023c0:	460a      	mov	r2, r1
 80023c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	4413      	add	r3, r2
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d006      	beq.n	80023de <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	3301      	adds	r3, #1
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	2b0f      	cmp	r3, #15
 80023da:	d9e9      	bls.n	80023b0 <prvInitialiseNewTask+0x56>
 80023dc:	e000      	b.n	80023e0 <prvInitialiseNewTask+0x86>
			{
				break;
 80023de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023e8:	e003      	b.n	80023f2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80023ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d901      	bls.n	80023fc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023f8:	2304      	movs	r3, #4
 80023fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80023fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002400:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002406:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240a:	2200      	movs	r2, #0
 800240c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800240e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002410:	3304      	adds	r3, #4
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff f8c2 	bl	800159c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241a:	3318      	adds	r3, #24
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff f8bd 	bl	800159c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002426:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242a:	f1c3 0205 	rsb	r2, r3, #5
 800242e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002430:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002436:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243a:	2200      	movs	r2, #0
 800243c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800243e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	68f9      	ldr	r1, [r7, #12]
 800244a:	69b8      	ldr	r0, [r7, #24]
 800244c:	f001 f9e2 	bl	8003814 <pxPortInitialiseStack>
 8002450:	4602      	mov	r2, r0
 8002452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002454:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800245c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800245e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002462:	bf00      	nop
 8002464:	3720      	adds	r7, #32
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002474:	f001 fafa 	bl	8003a6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002478:	4b2a      	ldr	r3, [pc, #168]	@ (8002524 <prvAddNewTaskToReadyList+0xb8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	4a29      	ldr	r2, [pc, #164]	@ (8002524 <prvAddNewTaskToReadyList+0xb8>)
 8002480:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002482:	4b29      	ldr	r3, [pc, #164]	@ (8002528 <prvAddNewTaskToReadyList+0xbc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800248a:	4a27      	ldr	r2, [pc, #156]	@ (8002528 <prvAddNewTaskToReadyList+0xbc>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002490:	4b24      	ldr	r3, [pc, #144]	@ (8002524 <prvAddNewTaskToReadyList+0xb8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d110      	bne.n	80024ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002498:	f000 fbf4 	bl	8002c84 <prvInitialiseTaskLists>
 800249c:	e00d      	b.n	80024ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800249e:	4b23      	ldr	r3, [pc, #140]	@ (800252c <prvAddNewTaskToReadyList+0xc0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024a6:	4b20      	ldr	r3, [pc, #128]	@ (8002528 <prvAddNewTaskToReadyList+0xbc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d802      	bhi.n	80024ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80024b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002528 <prvAddNewTaskToReadyList+0xbc>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80024ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002530 <prvAddNewTaskToReadyList+0xc4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3301      	adds	r3, #1
 80024c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002530 <prvAddNewTaskToReadyList+0xc4>)
 80024c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c8:	2201      	movs	r2, #1
 80024ca:	409a      	lsls	r2, r3
 80024cc:	4b19      	ldr	r3, [pc, #100]	@ (8002534 <prvAddNewTaskToReadyList+0xc8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	4a18      	ldr	r2, [pc, #96]	@ (8002534 <prvAddNewTaskToReadyList+0xc8>)
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4a15      	ldr	r2, [pc, #84]	@ (8002538 <prvAddNewTaskToReadyList+0xcc>)
 80024e4:	441a      	add	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	4619      	mov	r1, r3
 80024ec:	4610      	mov	r0, r2
 80024ee:	f7ff f862 	bl	80015b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80024f2:	f001 faed 	bl	8003ad0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80024f6:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <prvAddNewTaskToReadyList+0xc0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00e      	beq.n	800251c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <prvAddNewTaskToReadyList+0xbc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	429a      	cmp	r2, r3
 800250a:	d207      	bcs.n	800251c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800250c:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <prvAddNewTaskToReadyList+0xd0>)
 800250e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	2000018c 	.word	0x2000018c
 8002528:	200000c8 	.word	0x200000c8
 800252c:	20000198 	.word	0x20000198
 8002530:	200001a8 	.word	0x200001a8
 8002534:	20000194 	.word	0x20000194
 8002538:	200000cc 	.word	0x200000cc
 800253c:	e000ed04 	.word	0xe000ed04

08002540 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d018      	beq.n	8002584 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002552:	4b14      	ldr	r3, [pc, #80]	@ (80025a4 <vTaskDelay+0x64>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <vTaskDelay+0x32>
	__asm volatile
 800255a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800255e:	f383 8811 	msr	BASEPRI, r3
 8002562:	f3bf 8f6f 	isb	sy
 8002566:	f3bf 8f4f 	dsb	sy
 800256a:	60bb      	str	r3, [r7, #8]
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	e7fd      	b.n	800256e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002572:	f000 f869 	bl	8002648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002576:	2100      	movs	r1, #0
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 fddb 	bl	8003134 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800257e:	f000 f871 	bl	8002664 <xTaskResumeAll>
 8002582:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d107      	bne.n	800259a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800258a:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <vTaskDelay+0x68>)
 800258c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	f3bf 8f4f 	dsb	sy
 8002596:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200001b4 	.word	0x200001b4
 80025a8:	e000ed04 	.word	0xe000ed04

080025ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80025b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <vTaskStartScheduler+0x84>)
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	2300      	movs	r3, #0
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	2300      	movs	r3, #0
 80025bc:	2280      	movs	r2, #128	@ 0x80
 80025be:	491d      	ldr	r1, [pc, #116]	@ (8002634 <vTaskStartScheduler+0x88>)
 80025c0:	481d      	ldr	r0, [pc, #116]	@ (8002638 <vTaskStartScheduler+0x8c>)
 80025c2:	f7ff fe89 	bl	80022d8 <xTaskCreate>
 80025c6:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d102      	bne.n	80025d4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80025ce:	f000 fe05 	bl	80031dc <xTimerCreateTimerTask>
 80025d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d116      	bne.n	8002608 <vTaskStartScheduler+0x5c>
	__asm volatile
 80025da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	60bb      	str	r3, [r7, #8]
}
 80025ec:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80025ee:	4b13      	ldr	r3, [pc, #76]	@ (800263c <vTaskStartScheduler+0x90>)
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80025f6:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <vTaskStartScheduler+0x94>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025fc:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <vTaskStartScheduler+0x98>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002602:	f001 f97d 	bl	8003900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002606:	e00f      	b.n	8002628 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800260e:	d10b      	bne.n	8002628 <vTaskStartScheduler+0x7c>
	__asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	607b      	str	r3, [r7, #4]
}
 8002622:	bf00      	nop
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <vTaskStartScheduler+0x78>
}
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200001b0 	.word	0x200001b0
 8002634:	08004a04 	.word	0x08004a04
 8002638:	08002c55 	.word	0x08002c55
 800263c:	200001ac 	.word	0x200001ac
 8002640:	20000198 	.word	0x20000198
 8002644:	20000190 	.word	0x20000190

08002648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800264c:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <vTaskSuspendAll+0x18>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3301      	adds	r3, #1
 8002652:	4a03      	ldr	r2, [pc, #12]	@ (8002660 <vTaskSuspendAll+0x18>)
 8002654:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	200001b4 	.word	0x200001b4

08002664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002672:	4b42      	ldr	r3, [pc, #264]	@ (800277c <xTaskResumeAll+0x118>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10b      	bne.n	8002692 <xTaskResumeAll+0x2e>
	__asm volatile
 800267a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800267e:	f383 8811 	msr	BASEPRI, r3
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	603b      	str	r3, [r7, #0]
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	e7fd      	b.n	800268e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002692:	f001 f9eb 	bl	8003a6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002696:	4b39      	ldr	r3, [pc, #228]	@ (800277c <xTaskResumeAll+0x118>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3b01      	subs	r3, #1
 800269c:	4a37      	ldr	r2, [pc, #220]	@ (800277c <xTaskResumeAll+0x118>)
 800269e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026a0:	4b36      	ldr	r3, [pc, #216]	@ (800277c <xTaskResumeAll+0x118>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d161      	bne.n	800276c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026a8:	4b35      	ldr	r3, [pc, #212]	@ (8002780 <xTaskResumeAll+0x11c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d05d      	beq.n	800276c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026b0:	e02e      	b.n	8002710 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026b2:	4b34      	ldr	r3, [pc, #208]	@ (8002784 <xTaskResumeAll+0x120>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3318      	adds	r3, #24
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe ffd6 	bl	8001670 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3304      	adds	r3, #4
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe ffd1 	bl	8001670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d2:	2201      	movs	r2, #1
 80026d4:	409a      	lsls	r2, r3
 80026d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002788 <xTaskResumeAll+0x124>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002788 <xTaskResumeAll+0x124>)
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4a27      	ldr	r2, [pc, #156]	@ (800278c <xTaskResumeAll+0x128>)
 80026ee:	441a      	add	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f7fe ff5d 	bl	80015b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002700:	4b23      	ldr	r3, [pc, #140]	@ (8002790 <xTaskResumeAll+0x12c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	429a      	cmp	r2, r3
 8002708:	d302      	bcc.n	8002710 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800270a:	4b22      	ldr	r3, [pc, #136]	@ (8002794 <xTaskResumeAll+0x130>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002710:	4b1c      	ldr	r3, [pc, #112]	@ (8002784 <xTaskResumeAll+0x120>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1cc      	bne.n	80026b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800271e:	f000 fb29 	bl	8002d74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002722:	4b1d      	ldr	r3, [pc, #116]	@ (8002798 <xTaskResumeAll+0x134>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d010      	beq.n	8002750 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800272e:	f000 f847 	bl	80027c0 <xTaskIncrementTick>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002738:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <xTaskResumeAll+0x130>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3b01      	subs	r3, #1
 8002742:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f1      	bne.n	800272e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800274a:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <xTaskResumeAll+0x134>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002750:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <xTaskResumeAll+0x130>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d009      	beq.n	800276c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002758:	2301      	movs	r3, #1
 800275a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800275c:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <xTaskResumeAll+0x138>)
 800275e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800276c:	f001 f9b0 	bl	8003ad0 <vPortExitCritical>

	return xAlreadyYielded;
 8002770:	68bb      	ldr	r3, [r7, #8]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200001b4 	.word	0x200001b4
 8002780:	2000018c 	.word	0x2000018c
 8002784:	20000160 	.word	0x20000160
 8002788:	20000194 	.word	0x20000194
 800278c:	200000cc 	.word	0x200000cc
 8002790:	200000c8 	.word	0x200000c8
 8002794:	200001a0 	.word	0x200001a0
 8002798:	2000019c 	.word	0x2000019c
 800279c:	e000ed04 	.word	0xe000ed04

080027a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80027a6:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <xTaskGetTickCount+0x1c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80027ac:	687b      	ldr	r3, [r7, #4]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000190 	.word	0x20000190

080027c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002908 <xTaskIncrementTick+0x148>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 808f 	bne.w	80028f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027d4:	4b4d      	ldr	r3, [pc, #308]	@ (800290c <xTaskIncrementTick+0x14c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80027dc:	4a4b      	ldr	r2, [pc, #300]	@ (800290c <xTaskIncrementTick+0x14c>)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d121      	bne.n	800282c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80027e8:	4b49      	ldr	r3, [pc, #292]	@ (8002910 <xTaskIncrementTick+0x150>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <xTaskIncrementTick+0x4a>
	__asm volatile
 80027f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027f6:	f383 8811 	msr	BASEPRI, r3
 80027fa:	f3bf 8f6f 	isb	sy
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	603b      	str	r3, [r7, #0]
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	e7fd      	b.n	8002806 <xTaskIncrementTick+0x46>
 800280a:	4b41      	ldr	r3, [pc, #260]	@ (8002910 <xTaskIncrementTick+0x150>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	4b40      	ldr	r3, [pc, #256]	@ (8002914 <xTaskIncrementTick+0x154>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a3e      	ldr	r2, [pc, #248]	@ (8002910 <xTaskIncrementTick+0x150>)
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4a3e      	ldr	r2, [pc, #248]	@ (8002914 <xTaskIncrementTick+0x154>)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b3e      	ldr	r3, [pc, #248]	@ (8002918 <xTaskIncrementTick+0x158>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3301      	adds	r3, #1
 8002824:	4a3c      	ldr	r2, [pc, #240]	@ (8002918 <xTaskIncrementTick+0x158>)
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	f000 faa4 	bl	8002d74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800282c:	4b3b      	ldr	r3, [pc, #236]	@ (800291c <xTaskIncrementTick+0x15c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	429a      	cmp	r2, r3
 8002834:	d348      	bcc.n	80028c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002836:	4b36      	ldr	r3, [pc, #216]	@ (8002910 <xTaskIncrementTick+0x150>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d104      	bne.n	800284a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002840:	4b36      	ldr	r3, [pc, #216]	@ (800291c <xTaskIncrementTick+0x15c>)
 8002842:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002846:	601a      	str	r2, [r3, #0]
					break;
 8002848:	e03e      	b.n	80028c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800284a:	4b31      	ldr	r3, [pc, #196]	@ (8002910 <xTaskIncrementTick+0x150>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	429a      	cmp	r2, r3
 8002860:	d203      	bcs.n	800286a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002862:	4a2e      	ldr	r2, [pc, #184]	@ (800291c <xTaskIncrementTick+0x15c>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002868:	e02e      	b.n	80028c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	3304      	adds	r3, #4
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fefe 	bl	8001670 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	2b00      	cmp	r3, #0
 800287a:	d004      	beq.n	8002886 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	3318      	adds	r3, #24
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe fef5 	bl	8001670 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	2201      	movs	r2, #1
 800288c:	409a      	lsls	r2, r3
 800288e:	4b24      	ldr	r3, [pc, #144]	@ (8002920 <xTaskIncrementTick+0x160>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4313      	orrs	r3, r2
 8002894:	4a22      	ldr	r2, [pc, #136]	@ (8002920 <xTaskIncrementTick+0x160>)
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002924 <xTaskIncrementTick+0x164>)
 80028a6:	441a      	add	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	3304      	adds	r3, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f7fe fe81 	bl	80015b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <xTaskIncrementTick+0x168>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028be:	429a      	cmp	r2, r3
 80028c0:	d3b9      	bcc.n	8002836 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028c6:	e7b6      	b.n	8002836 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028c8:	4b17      	ldr	r3, [pc, #92]	@ (8002928 <xTaskIncrementTick+0x168>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ce:	4915      	ldr	r1, [pc, #84]	@ (8002924 <xTaskIncrementTick+0x164>)
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d901      	bls.n	80028e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80028e0:	2301      	movs	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80028e4:	4b11      	ldr	r3, [pc, #68]	@ (800292c <xTaskIncrementTick+0x16c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80028ec:	2301      	movs	r3, #1
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	e004      	b.n	80028fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80028f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002930 <xTaskIncrementTick+0x170>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002930 <xTaskIncrementTick+0x170>)
 80028fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80028fc:	697b      	ldr	r3, [r7, #20]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200001b4 	.word	0x200001b4
 800290c:	20000190 	.word	0x20000190
 8002910:	20000158 	.word	0x20000158
 8002914:	2000015c 	.word	0x2000015c
 8002918:	200001a4 	.word	0x200001a4
 800291c:	200001ac 	.word	0x200001ac
 8002920:	20000194 	.word	0x20000194
 8002924:	200000cc 	.word	0x200000cc
 8002928:	200000c8 	.word	0x200000c8
 800292c:	200001a0 	.word	0x200001a0
 8002930:	2000019c 	.word	0x2000019c

08002934 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800293a:	4b27      	ldr	r3, [pc, #156]	@ (80029d8 <vTaskSwitchContext+0xa4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002942:	4b26      	ldr	r3, [pc, #152]	@ (80029dc <vTaskSwitchContext+0xa8>)
 8002944:	2201      	movs	r2, #1
 8002946:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002948:	e040      	b.n	80029cc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800294a:	4b24      	ldr	r3, [pc, #144]	@ (80029dc <vTaskSwitchContext+0xa8>)
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002950:	4b23      	ldr	r3, [pc, #140]	@ (80029e0 <vTaskSwitchContext+0xac>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800295e:	7afb      	ldrb	r3, [r7, #11]
 8002960:	f1c3 031f 	rsb	r3, r3, #31
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	491f      	ldr	r1, [pc, #124]	@ (80029e4 <vTaskSwitchContext+0xb0>)
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10b      	bne.n	8002992 <vTaskSwitchContext+0x5e>
	__asm volatile
 800297a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800297e:	f383 8811 	msr	BASEPRI, r3
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	607b      	str	r3, [r7, #4]
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	e7fd      	b.n	800298e <vTaskSwitchContext+0x5a>
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4a11      	ldr	r2, [pc, #68]	@ (80029e4 <vTaskSwitchContext+0xb0>)
 800299e:	4413      	add	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	3308      	adds	r3, #8
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d104      	bne.n	80029c2 <vTaskSwitchContext+0x8e>
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a07      	ldr	r2, [pc, #28]	@ (80029e8 <vTaskSwitchContext+0xb4>)
 80029ca:	6013      	str	r3, [r2, #0]
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	200001b4 	.word	0x200001b4
 80029dc:	200001a0 	.word	0x200001a0
 80029e0:	20000194 	.word	0x20000194
 80029e4:	200000cc 	.word	0x200000cc
 80029e8:	200000c8 	.word	0x200000c8

080029ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10b      	bne.n	8002a14 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80029fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	60fb      	str	r3, [r7, #12]
}
 8002a0e:	bf00      	nop
 8002a10:	bf00      	nop
 8002a12:	e7fd      	b.n	8002a10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a14:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <vTaskPlaceOnEventList+0x48>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3318      	adds	r3, #24
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7fe fdee 	bl	80015fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002a22:	2101      	movs	r1, #1
 8002a24:	6838      	ldr	r0, [r7, #0]
 8002a26:	f000 fb85 	bl	8003134 <prvAddCurrentTaskToDelayedList>
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200000c8 	.word	0x200000c8

08002a38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10b      	bne.n	8002a62 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	617b      	str	r3, [r7, #20]
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	e7fd      	b.n	8002a5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <vTaskPlaceOnEventListRestricted+0x54>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3318      	adds	r3, #24
 8002a68:	4619      	mov	r1, r3
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7fe fda3 	bl	80015b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	68b8      	ldr	r0, [r7, #8]
 8002a80:	f000 fb58 	bl	8003134 <prvAddCurrentTaskToDelayedList>
	}
 8002a84:	bf00      	nop
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	200000c8 	.word	0x200000c8

08002a90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10b      	bne.n	8002abe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	60fb      	str	r3, [r7, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	e7fd      	b.n	8002aba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	3318      	adds	r3, #24
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fdd4 	bl	8001670 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b40 <xTaskRemoveFromEventList+0xb0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d11c      	bne.n	8002b0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fdcb 	bl	8001670 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ade:	2201      	movs	r2, #1
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	4b18      	ldr	r3, [pc, #96]	@ (8002b44 <xTaskRemoveFromEventList+0xb4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	4a16      	ldr	r2, [pc, #88]	@ (8002b44 <xTaskRemoveFromEventList+0xb4>)
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4a13      	ldr	r2, [pc, #76]	@ (8002b48 <xTaskRemoveFromEventList+0xb8>)
 8002afa:	441a      	add	r2, r3
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	3304      	adds	r3, #4
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f7fe fd57 	bl	80015b6 <vListInsertEnd>
 8002b08:	e005      	b.n	8002b16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	4619      	mov	r1, r3
 8002b10:	480e      	ldr	r0, [pc, #56]	@ (8002b4c <xTaskRemoveFromEventList+0xbc>)
 8002b12:	f7fe fd50 	bl	80015b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <xTaskRemoveFromEventList+0xc0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d905      	bls.n	8002b30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002b24:	2301      	movs	r3, #1
 8002b26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002b28:	4b0a      	ldr	r3, [pc, #40]	@ (8002b54 <xTaskRemoveFromEventList+0xc4>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e001      	b.n	8002b34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002b34:	697b      	ldr	r3, [r7, #20]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200001b4 	.word	0x200001b4
 8002b44:	20000194 	.word	0x20000194
 8002b48:	200000cc 	.word	0x200000cc
 8002b4c:	20000160 	.word	0x20000160
 8002b50:	200000c8 	.word	0x200000c8
 8002b54:	200001a0 	.word	0x200001a0

08002b58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b60:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <vTaskInternalSetTimeOutState+0x24>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b68:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <vTaskInternalSetTimeOutState+0x28>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	605a      	str	r2, [r3, #4]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	200001a4 	.word	0x200001a4
 8002b80:	20000190 	.word	0x20000190

08002b84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10b      	bne.n	8002bac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	613b      	str	r3, [r7, #16]
}
 8002ba6:	bf00      	nop
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10b      	bne.n	8002bca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	60fb      	str	r3, [r7, #12]
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	e7fd      	b.n	8002bc6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002bca:	f000 ff4f 	bl	8003a6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002bce:	4b19      	ldr	r3, [pc, #100]	@ (8002c34 <xTaskCheckForTimeOut+0xb0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b15      	ldr	r3, [pc, #84]	@ (8002c38 <xTaskCheckForTimeOut+0xb4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d007      	beq.n	8002bfa <xTaskCheckForTimeOut+0x76>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d302      	bcc.n	8002bfa <xTaskCheckForTimeOut+0x76>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	61fb      	str	r3, [r7, #28]
 8002bf8:	e015      	b.n	8002c26 <xTaskCheckForTimeOut+0xa2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d20b      	bcs.n	8002c1c <xTaskCheckForTimeOut+0x98>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	1ad2      	subs	r2, r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ffa1 	bl	8002b58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	e004      	b.n	8002c26 <xTaskCheckForTimeOut+0xa2>
		}
		else
		{
			*pxTicksToWait = 0;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002c22:	2301      	movs	r3, #1
 8002c24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002c26:	f000 ff53 	bl	8003ad0 <vPortExitCritical>

	return xReturn;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000190 	.word	0x20000190
 8002c38:	200001a4 	.word	0x200001a4

08002c3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002c40:	4b03      	ldr	r3, [pc, #12]	@ (8002c50 <vTaskMissedYield+0x14>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	200001a0 	.word	0x200001a0

08002c54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c5c:	f000 f84c 	bl	8002cf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c60:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <prvIdleTask+0x28>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d9f9      	bls.n	8002c5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002c68:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <prvIdleTask+0x2c>)
 8002c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c78:	e7f0      	b.n	8002c5c <prvIdleTask+0x8>
 8002c7a:	bf00      	nop
 8002c7c:	200000cc 	.word	0x200000cc
 8002c80:	e000ed04 	.word	0xe000ed04

08002c84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	e00c      	b.n	8002caa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4a10      	ldr	r2, [pc, #64]	@ (8002cdc <prvInitialiseTaskLists+0x58>)
 8002c9c:	4413      	add	r3, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fc5c 	bl	800155c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d9ef      	bls.n	8002c90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002cb0:	480b      	ldr	r0, [pc, #44]	@ (8002ce0 <prvInitialiseTaskLists+0x5c>)
 8002cb2:	f7fe fc53 	bl	800155c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002cb6:	480b      	ldr	r0, [pc, #44]	@ (8002ce4 <prvInitialiseTaskLists+0x60>)
 8002cb8:	f7fe fc50 	bl	800155c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002cbc:	480a      	ldr	r0, [pc, #40]	@ (8002ce8 <prvInitialiseTaskLists+0x64>)
 8002cbe:	f7fe fc4d 	bl	800155c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002cc2:	480a      	ldr	r0, [pc, #40]	@ (8002cec <prvInitialiseTaskLists+0x68>)
 8002cc4:	f7fe fc4a 	bl	800155c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002cc8:	4b09      	ldr	r3, [pc, #36]	@ (8002cf0 <prvInitialiseTaskLists+0x6c>)
 8002cca:	4a05      	ldr	r2, [pc, #20]	@ (8002ce0 <prvInitialiseTaskLists+0x5c>)
 8002ccc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cce:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <prvInitialiseTaskLists+0x70>)
 8002cd0:	4a04      	ldr	r2, [pc, #16]	@ (8002ce4 <prvInitialiseTaskLists+0x60>)
 8002cd2:	601a      	str	r2, [r3, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	200000cc 	.word	0x200000cc
 8002ce0:	20000130 	.word	0x20000130
 8002ce4:	20000144 	.word	0x20000144
 8002ce8:	20000160 	.word	0x20000160
 8002cec:	20000174 	.word	0x20000174
 8002cf0:	20000158 	.word	0x20000158
 8002cf4:	2000015c 	.word	0x2000015c

08002cf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cfe:	e019      	b.n	8002d34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002d00:	f000 feb4 	bl	8003a6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d04:	4b10      	ldr	r3, [pc, #64]	@ (8002d48 <prvCheckTasksWaitingTermination+0x50>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe fcad 	bl	8001670 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d16:	4b0d      	ldr	r3, [pc, #52]	@ (8002d4c <prvCheckTasksWaitingTermination+0x54>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d4c <prvCheckTasksWaitingTermination+0x54>)
 8002d1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d20:	4b0b      	ldr	r3, [pc, #44]	@ (8002d50 <prvCheckTasksWaitingTermination+0x58>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	4a0a      	ldr	r2, [pc, #40]	@ (8002d50 <prvCheckTasksWaitingTermination+0x58>)
 8002d28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002d2a:	f000 fed1 	bl	8003ad0 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f810 	bl	8002d54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d34:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <prvCheckTasksWaitingTermination+0x58>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e1      	bne.n	8002d00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000174 	.word	0x20000174
 8002d4c:	2000018c 	.word	0x2000018c
 8002d50:	20000188 	.word	0x20000188

08002d54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 f81d 	bl	8003da0 <vPortFree>
			vPortFree( pxTCB );
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f001 f81a 	bl	8003da0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dac <prvResetNextTaskUnblockTime+0x38>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d104      	bne.n	8002d8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d84:	4b0a      	ldr	r3, [pc, #40]	@ (8002db0 <prvResetNextTaskUnblockTime+0x3c>)
 8002d86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002d8c:	e008      	b.n	8002da0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d8e:	4b07      	ldr	r3, [pc, #28]	@ (8002dac <prvResetNextTaskUnblockTime+0x38>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a04      	ldr	r2, [pc, #16]	@ (8002db0 <prvResetNextTaskUnblockTime+0x3c>)
 8002d9e:	6013      	str	r3, [r2, #0]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	20000158 	.word	0x20000158
 8002db0:	200001ac 	.word	0x200001ac

08002db4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002dba:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <xTaskGetSchedulerState+0x34>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d102      	bne.n	8002dc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	e008      	b.n	8002dda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dc8:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <xTaskGetSchedulerState+0x38>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	e001      	b.n	8002dda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002dda:	687b      	ldr	r3, [r7, #4]
	}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	20000198 	.word	0x20000198
 8002dec:	200001b4 	.word	0x200001b4

08002df0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d05e      	beq.n	8002ec4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e0a:	4b31      	ldr	r3, [pc, #196]	@ (8002ed0 <xTaskPriorityInherit+0xe0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d24e      	bcs.n	8002eb2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	db06      	blt.n	8002e2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed0 <xTaskPriorityInherit+0xe0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e22:	f1c3 0205 	rsb	r2, r3, #5
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	6959      	ldr	r1, [r3, #20]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4a26      	ldr	r2, [pc, #152]	@ (8002ed4 <xTaskPriorityInherit+0xe4>)
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4299      	cmp	r1, r3
 8002e40:	d12f      	bne.n	8002ea2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	3304      	adds	r3, #4
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fc12 	bl	8001670 <uxListRemove>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e56:	2201      	movs	r2, #1
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43da      	mvns	r2, r3
 8002e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed8 <xTaskPriorityInherit+0xe8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4013      	ands	r3, r2
 8002e64:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed8 <xTaskPriorityInherit+0xe8>)
 8002e66:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002e68:	4b19      	ldr	r3, [pc, #100]	@ (8002ed0 <xTaskPriorityInherit+0xe0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e76:	2201      	movs	r2, #1
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ed8 <xTaskPriorityInherit+0xe8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	4a15      	ldr	r2, [pc, #84]	@ (8002ed8 <xTaskPriorityInherit+0xe8>)
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4a10      	ldr	r2, [pc, #64]	@ (8002ed4 <xTaskPriorityInherit+0xe4>)
 8002e92:	441a      	add	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	3304      	adds	r3, #4
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	f7fe fb8b 	bl	80015b6 <vListInsertEnd>
 8002ea0:	e004      	b.n	8002eac <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed0 <xTaskPriorityInherit+0xe0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002eac:	2301      	movs	r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	e008      	b.n	8002ec4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002eb6:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <xTaskPriorityInherit+0xe0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d201      	bcs.n	8002ec4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
	}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200000c8 	.word	0x200000c8
 8002ed4:	200000cc 	.word	0x200000cc
 8002ed8:	20000194 	.word	0x20000194

08002edc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d070      	beq.n	8002fd4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe0 <xTaskPriorityDisinherit+0x104>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d00b      	beq.n	8002f14 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8002efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f00:	f383 8811 	msr	BASEPRI, r3
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	60fb      	str	r3, [r7, #12]
}
 8002f0e:	bf00      	nop
 8002f10:	bf00      	nop
 8002f12:	e7fd      	b.n	8002f10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10b      	bne.n	8002f34 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8002f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	60bb      	str	r3, [r7, #8]
}
 8002f2e:	bf00      	nop
 8002f30:	bf00      	nop
 8002f32:	e7fd      	b.n	8002f30 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f38:	1e5a      	subs	r2, r3, #1
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d044      	beq.n	8002fd4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d140      	bne.n	8002fd4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	3304      	adds	r3, #4
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe fb8a 	bl	8001670 <uxListRemove>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d115      	bne.n	8002f8e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f66:	491f      	ldr	r1, [pc, #124]	@ (8002fe4 <xTaskPriorityDisinherit+0x108>)
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10a      	bne.n	8002f8e <xTaskPriorityDisinherit+0xb2>
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	4b18      	ldr	r3, [pc, #96]	@ (8002fe8 <xTaskPriorityDisinherit+0x10c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	4a17      	ldr	r2, [pc, #92]	@ (8002fe8 <xTaskPriorityDisinherit+0x10c>)
 8002f8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	f1c3 0205 	rsb	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe8 <xTaskPriorityDisinherit+0x10c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe8 <xTaskPriorityDisinherit+0x10c>)
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4a08      	ldr	r2, [pc, #32]	@ (8002fe4 <xTaskPriorityDisinherit+0x108>)
 8002fc2:	441a      	add	r2, r3
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f7fe faf3 	bl	80015b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002fd4:	697b      	ldr	r3, [r7, #20]
	}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200000c8 	.word	0x200000c8
 8002fe4:	200000cc 	.word	0x200000cc
 8002fe8:	20000194 	.word	0x20000194

08002fec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d079      	beq.n	80030f8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	60fb      	str	r3, [r7, #12]
}
 800301e:	bf00      	nop
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d902      	bls.n	8003034 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	e002      	b.n	800303a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003038:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	429a      	cmp	r2, r3
 8003042:	d059      	beq.n	80030f8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	429a      	cmp	r2, r3
 800304c:	d154      	bne.n	80030f8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800304e:	4b2c      	ldr	r3, [pc, #176]	@ (8003100 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	429a      	cmp	r2, r3
 8003056:	d10b      	bne.n	8003070 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	60bb      	str	r3, [r7, #8]
}
 800306a:	bf00      	nop
 800306c:	bf00      	nop
 800306e:	e7fd      	b.n	800306c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003074:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	db04      	blt.n	800308e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f1c3 0205 	rsb	r2, r3, #5
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	6959      	ldr	r1, [r3, #20]
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4a19      	ldr	r2, [pc, #100]	@ (8003104 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800309e:	4413      	add	r3, r2
 80030a0:	4299      	cmp	r1, r3
 80030a2:	d129      	bne.n	80030f8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	3304      	adds	r3, #4
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fe fae1 	bl	8001670 <uxListRemove>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	2201      	movs	r2, #1
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	4b11      	ldr	r3, [pc, #68]	@ (8003108 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4013      	ands	r3, r2
 80030c6:	4a10      	ldr	r2, [pc, #64]	@ (8003108 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80030c8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ce:	2201      	movs	r2, #1
 80030d0:	409a      	lsls	r2, r3
 80030d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003108 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003108 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4a06      	ldr	r2, [pc, #24]	@ (8003104 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80030ea:	441a      	add	r2, r3
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	3304      	adds	r3, #4
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f7fe fa5f 	bl	80015b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030f8:	bf00      	nop
 80030fa:	3720      	adds	r7, #32
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	200000c8 	.word	0x200000c8
 8003104:	200000cc 	.word	0x200000cc
 8003108:	20000194 	.word	0x20000194

0800310c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003110:	4b07      	ldr	r3, [pc, #28]	@ (8003130 <pvTaskIncrementMutexHeldCount+0x24>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d004      	beq.n	8003122 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003118:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <pvTaskIncrementMutexHeldCount+0x24>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800311e:	3201      	adds	r2, #1
 8003120:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8003122:	4b03      	ldr	r3, [pc, #12]	@ (8003130 <pvTaskIncrementMutexHeldCount+0x24>)
 8003124:	681b      	ldr	r3, [r3, #0]
	}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	200000c8 	.word	0x200000c8

08003134 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800313e:	4b21      	ldr	r3, [pc, #132]	@ (80031c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003144:	4b20      	ldr	r3, [pc, #128]	@ (80031c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3304      	adds	r3, #4
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe fa90 	bl	8001670 <uxListRemove>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10b      	bne.n	800316e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003156:	4b1c      	ldr	r3, [pc, #112]	@ (80031c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	2201      	movs	r2, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43da      	mvns	r2, r3
 8003164:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <prvAddCurrentTaskToDelayedList+0x98>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4013      	ands	r3, r2
 800316a:	4a18      	ldr	r2, [pc, #96]	@ (80031cc <prvAddCurrentTaskToDelayedList+0x98>)
 800316c:	6013      	str	r3, [r2, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003176:	4b14      	ldr	r3, [pc, #80]	@ (80031c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	429a      	cmp	r2, r3
 8003184:	d209      	bcs.n	800319a <prvAddCurrentTaskToDelayedList+0x66>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003186:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4b0f      	ldr	r3, [pc, #60]	@ (80031c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3304      	adds	r3, #4
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f7fe fa33 	bl	80015fe <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003198:	e010      	b.n	80031bc <prvAddCurrentTaskToDelayedList+0x88>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800319a:	4b0e      	ldr	r3, [pc, #56]	@ (80031d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b0a      	ldr	r3, [pc, #40]	@ (80031c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3304      	adds	r3, #4
 80031a4:	4619      	mov	r1, r3
 80031a6:	4610      	mov	r0, r2
 80031a8:	f7fe fa29 	bl	80015fe <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 80031ac:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d202      	bcs.n	80031bc <prvAddCurrentTaskToDelayedList+0x88>
				xNextTaskUnblockTime = xTimeToWake;
 80031b6:	4a08      	ldr	r2, [pc, #32]	@ (80031d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	6013      	str	r3, [r2, #0]
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000190 	.word	0x20000190
 80031c8:	200000c8 	.word	0x200000c8
 80031cc:	20000194 	.word	0x20000194
 80031d0:	2000015c 	.word	0x2000015c
 80031d4:	20000158 	.word	0x20000158
 80031d8:	200001ac 	.word	0x200001ac

080031dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80031e6:	f000 fadf 	bl	80037a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80031ea:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <xTimerCreateTimerTask+0x54>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80031f2:	4b10      	ldr	r3, [pc, #64]	@ (8003234 <xTimerCreateTimerTask+0x58>)
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	2302      	movs	r3, #2
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	2300      	movs	r3, #0
 80031fc:	2280      	movs	r2, #128	@ 0x80
 80031fe:	490e      	ldr	r1, [pc, #56]	@ (8003238 <xTimerCreateTimerTask+0x5c>)
 8003200:	480e      	ldr	r0, [pc, #56]	@ (800323c <xTimerCreateTimerTask+0x60>)
 8003202:	f7ff f869 	bl	80022d8 <xTaskCreate>
 8003206:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10b      	bne.n	8003226 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800320e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	603b      	str	r3, [r7, #0]
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	e7fd      	b.n	8003222 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8003226:	687b      	ldr	r3, [r7, #4]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	200001e8 	.word	0x200001e8
 8003234:	200001ec 	.word	0x200001ec
 8003238:	08004a0c 	.word	0x08004a0c
 800323c:	08003379 	.word	0x08003379

08003240 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	@ 0x28
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <xTimerGenericCommand+0x30>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	623b      	str	r3, [r7, #32]
}
 800326a:	bf00      	nop
 800326c:	bf00      	nop
 800326e:	e7fd      	b.n	800326c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003270:	4b19      	ldr	r3, [pc, #100]	@ (80032d8 <xTimerGenericCommand+0x98>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d02a      	beq.n	80032ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b05      	cmp	r3, #5
 8003288:	dc18      	bgt.n	80032bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800328a:	f7ff fd93 	bl	8002db4 <xTaskGetSchedulerState>
 800328e:	4603      	mov	r3, r0
 8003290:	2b02      	cmp	r3, #2
 8003292:	d109      	bne.n	80032a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003294:	4b10      	ldr	r3, [pc, #64]	@ (80032d8 <xTimerGenericCommand+0x98>)
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	f107 0114 	add.w	r1, r7, #20
 800329c:	2300      	movs	r3, #0
 800329e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032a0:	f7fe fb02 	bl	80018a8 <xQueueGenericSend>
 80032a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80032a6:	e012      	b.n	80032ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80032a8:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <xTimerGenericCommand+0x98>)
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	f107 0114 	add.w	r1, r7, #20
 80032b0:	2300      	movs	r3, #0
 80032b2:	2200      	movs	r2, #0
 80032b4:	f7fe faf8 	bl	80018a8 <xQueueGenericSend>
 80032b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80032ba:	e008      	b.n	80032ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80032bc:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <xTimerGenericCommand+0x98>)
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	f107 0114 	add.w	r1, r7, #20
 80032c4:	2300      	movs	r3, #0
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	f7fe fbf0 	bl	8001aac <xQueueGenericSendFromISR>
 80032cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3728      	adds	r7, #40	@ 0x28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	200001e8 	.word	0x200001e8

080032dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032e6:	4b23      	ldr	r3, [pc, #140]	@ (8003374 <prvProcessExpiredTimer+0x98>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe f9bb 	bl	8001670 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d023      	beq.n	8003350 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	699a      	ldr	r2, [r3, #24]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	18d1      	adds	r1, r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	6978      	ldr	r0, [r7, #20]
 8003316:	f000 f8d5 	bl	80034c4 <prvInsertTimerInActiveList>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d020      	beq.n	8003362 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003320:	2300      	movs	r3, #0
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2300      	movs	r3, #0
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	2100      	movs	r1, #0
 800332a:	6978      	ldr	r0, [r7, #20]
 800332c:	f7ff ff88 	bl	8003240 <xTimerGenericCommand>
 8003330:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d114      	bne.n	8003362 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	60fb      	str	r3, [r7, #12]
}
 800334a:	bf00      	nop
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	b2da      	uxtb	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	6978      	ldr	r0, [r7, #20]
 8003368:	4798      	blx	r3
}
 800336a:	bf00      	nop
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	200001e0 	.word	0x200001e0

08003378 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003380:	f107 0308 	add.w	r3, r7, #8
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f859 	bl	800343c <prvGetNextExpireTime>
 800338a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4619      	mov	r1, r3
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f805 	bl	80033a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003396:	f000 f8d7 	bl	8003548 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800339a:	bf00      	nop
 800339c:	e7f0      	b.n	8003380 <prvTimerTask+0x8>
	...

080033a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80033aa:	f7ff f94d 	bl	8002648 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80033ae:	f107 0308 	add.w	r3, r7, #8
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f866 	bl	8003484 <prvSampleTimeNow>
 80033b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d130      	bne.n	8003422 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <prvProcessTimerOrBlockTask+0x3c>
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d806      	bhi.n	80033dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80033ce:	f7ff f949 	bl	8002664 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80033d2:	68f9      	ldr	r1, [r7, #12]
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ff81 	bl	80032dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80033da:	e024      	b.n	8003426 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80033e2:	4b13      	ldr	r3, [pc, #76]	@ (8003430 <prvProcessTimerOrBlockTask+0x90>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <prvProcessTimerOrBlockTask+0x50>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <prvProcessTimerOrBlockTask+0x52>
 80033f0:	2300      	movs	r3, #0
 80033f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80033f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <prvProcessTimerOrBlockTask+0x94>)
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	4619      	mov	r1, r3
 8003402:	f7fe ff35 	bl	8002270 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003406:	f7ff f92d 	bl	8002664 <xTaskResumeAll>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003410:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <prvProcessTimerOrBlockTask+0x98>)
 8003412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	f3bf 8f6f 	isb	sy
}
 8003420:	e001      	b.n	8003426 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003422:	f7ff f91f 	bl	8002664 <xTaskResumeAll>
}
 8003426:	bf00      	nop
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	200001e4 	.word	0x200001e4
 8003434:	200001e8 	.word	0x200001e8
 8003438:	e000ed04 	.word	0xe000ed04

0800343c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003444:	4b0e      	ldr	r3, [pc, #56]	@ (8003480 <prvGetNextExpireTime+0x44>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <prvGetNextExpireTime+0x16>
 800344e:	2201      	movs	r2, #1
 8003450:	e000      	b.n	8003454 <prvGetNextExpireTime+0x18>
 8003452:	2200      	movs	r2, #0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003460:	4b07      	ldr	r3, [pc, #28]	@ (8003480 <prvGetNextExpireTime+0x44>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	e001      	b.n	8003470 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003470:	68fb      	ldr	r3, [r7, #12]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	200001e0 	.word	0x200001e0

08003484 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800348c:	f7ff f988 	bl	80027a0 <xTaskGetTickCount>
 8003490:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003492:	4b0b      	ldr	r3, [pc, #44]	@ (80034c0 <prvSampleTimeNow+0x3c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	429a      	cmp	r2, r3
 800349a:	d205      	bcs.n	80034a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800349c:	f000 f91e 	bl	80036dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	e002      	b.n	80034ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80034ae:	4a04      	ldr	r2, [pc, #16]	@ (80034c0 <prvSampleTimeNow+0x3c>)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80034b4:	68fb      	ldr	r3, [r7, #12]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200001f0 	.word	0x200001f0

080034c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d812      	bhi.n	8003510 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	1ad2      	subs	r2, r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d302      	bcc.n	80034fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80034f8:	2301      	movs	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e01b      	b.n	8003536 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80034fe:	4b10      	ldr	r3, [pc, #64]	@ (8003540 <prvInsertTimerInActiveList+0x7c>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3304      	adds	r3, #4
 8003506:	4619      	mov	r1, r3
 8003508:	4610      	mov	r0, r2
 800350a:	f7fe f878 	bl	80015fe <vListInsert>
 800350e:	e012      	b.n	8003536 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d206      	bcs.n	8003526 <prvInsertTimerInActiveList+0x62>
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d302      	bcc.n	8003526 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003520:	2301      	movs	r3, #1
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	e007      	b.n	8003536 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003526:	4b07      	ldr	r3, [pc, #28]	@ (8003544 <prvInsertTimerInActiveList+0x80>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3304      	adds	r3, #4
 800352e:	4619      	mov	r1, r3
 8003530:	4610      	mov	r0, r2
 8003532:	f7fe f864 	bl	80015fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003536:	697b      	ldr	r3, [r7, #20]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	200001e4 	.word	0x200001e4
 8003544:	200001e0 	.word	0x200001e0

08003548 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08c      	sub	sp, #48	@ 0x30
 800354c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800354e:	e0b2      	b.n	80036b6 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f2c0 80af 	blt.w	80036b6 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d004      	beq.n	800356e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	3304      	adds	r3, #4
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe f881 	bl	8001670 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff87 	bl	8003484 <prvSampleTimeNow>
 8003576:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b09      	cmp	r3, #9
 800357c:	f200 8098 	bhi.w	80036b0 <prvProcessReceivedCommands+0x168>
 8003580:	a201      	add	r2, pc, #4	@ (adr r2, 8003588 <prvProcessReceivedCommands+0x40>)
 8003582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003586:	bf00      	nop
 8003588:	080035b1 	.word	0x080035b1
 800358c:	080035b1 	.word	0x080035b1
 8003590:	080035b1 	.word	0x080035b1
 8003594:	08003627 	.word	0x08003627
 8003598:	0800363b 	.word	0x0800363b
 800359c:	08003687 	.word	0x08003687
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	080035b1 	.word	0x080035b1
 80035a8:	08003627 	.word	0x08003627
 80035ac:	0800363b 	.word	0x0800363b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	18d1      	adds	r1, r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a3a      	ldr	r2, [r7, #32]
 80035ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035d0:	f7ff ff78 	bl	80034c4 <prvInsertTimerInActiveList>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d06c      	beq.n	80036b4 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d061      	beq.n	80036b4 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	441a      	add	r2, r3
 80035f8:	2300      	movs	r3, #0
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	2300      	movs	r3, #0
 80035fe:	2100      	movs	r1, #0
 8003600:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003602:	f7ff fe1d 	bl	8003240 <xTimerGenericCommand>
 8003606:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d152      	bne.n	80036b4 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	61bb      	str	r3, [r7, #24]
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	e7fd      	b.n	8003622 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	b2da      	uxtb	r2, r3
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8003638:	e03d      	b.n	80036b6 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	b2da      	uxtb	r2, r3
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800365a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	617b      	str	r3, [r7, #20]
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	e7fd      	b.n	800366e <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	18d1      	adds	r1, r2, r3
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	6a3a      	ldr	r2, [r7, #32]
 800367e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003680:	f7ff ff20 	bl	80034c4 <prvInsertTimerInActiveList>
					break;
 8003684:	e017      	b.n	80036b6 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8003694:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003696:	f000 fb83 	bl	8003da0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800369a:	e00c      	b.n	80036b6 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80036ae:	e002      	b.n	80036b6 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 80036b0:	bf00      	nop
 80036b2:	e000      	b.n	80036b6 <prvProcessReceivedCommands+0x16e>
					break;
 80036b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80036b6:	4b08      	ldr	r3, [pc, #32]	@ (80036d8 <prvProcessReceivedCommands+0x190>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f107 0108 	add.w	r1, r7, #8
 80036be:	2200      	movs	r2, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe fa91 	bl	8001be8 <xQueueReceive>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f47f af41 	bne.w	8003550 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80036ce:	bf00      	nop
 80036d0:	bf00      	nop
 80036d2:	3728      	adds	r7, #40	@ 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	200001e8 	.word	0x200001e8

080036dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80036e2:	e049      	b.n	8003778 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036e4:	4b2e      	ldr	r3, [pc, #184]	@ (80037a0 <prvSwitchTimerLists+0xc4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ee:	4b2c      	ldr	r3, [pc, #176]	@ (80037a0 <prvSwitchTimerLists+0xc4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3304      	adds	r3, #4
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fd ffb7 	bl	8001670 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d02f      	beq.n	8003778 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	429a      	cmp	r2, r3
 8003728:	d90e      	bls.n	8003748 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003736:	4b1a      	ldr	r3, [pc, #104]	@ (80037a0 <prvSwitchTimerLists+0xc4>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3304      	adds	r3, #4
 800373e:	4619      	mov	r1, r3
 8003740:	4610      	mov	r0, r2
 8003742:	f7fd ff5c 	bl	80015fe <vListInsert>
 8003746:	e017      	b.n	8003778 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003748:	2300      	movs	r3, #0
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	2300      	movs	r3, #0
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	2100      	movs	r1, #0
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f7ff fd74 	bl	8003240 <xTimerGenericCommand>
 8003758:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10b      	bne.n	8003778 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	603b      	str	r3, [r7, #0]
}
 8003772:	bf00      	nop
 8003774:	bf00      	nop
 8003776:	e7fd      	b.n	8003774 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003778:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <prvSwitchTimerLists+0xc4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1b0      	bne.n	80036e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003782:	4b07      	ldr	r3, [pc, #28]	@ (80037a0 <prvSwitchTimerLists+0xc4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <prvSwitchTimerLists+0xc8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a04      	ldr	r2, [pc, #16]	@ (80037a0 <prvSwitchTimerLists+0xc4>)
 800378e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003790:	4a04      	ldr	r2, [pc, #16]	@ (80037a4 <prvSwitchTimerLists+0xc8>)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	6013      	str	r3, [r2, #0]
}
 8003796:	bf00      	nop
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	200001e0 	.word	0x200001e0
 80037a4:	200001e4 	.word	0x200001e4

080037a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80037ac:	f000 f95e 	bl	8003a6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80037b0:	4b12      	ldr	r3, [pc, #72]	@ (80037fc <prvCheckForValidListAndQueue+0x54>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d11d      	bne.n	80037f4 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80037b8:	4811      	ldr	r0, [pc, #68]	@ (8003800 <prvCheckForValidListAndQueue+0x58>)
 80037ba:	f7fd fecf 	bl	800155c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80037be:	4811      	ldr	r0, [pc, #68]	@ (8003804 <prvCheckForValidListAndQueue+0x5c>)
 80037c0:	f7fd fecc 	bl	800155c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80037c4:	4b10      	ldr	r3, [pc, #64]	@ (8003808 <prvCheckForValidListAndQueue+0x60>)
 80037c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003800 <prvCheckForValidListAndQueue+0x58>)
 80037c8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80037ca:	4b10      	ldr	r3, [pc, #64]	@ (800380c <prvCheckForValidListAndQueue+0x64>)
 80037cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003804 <prvCheckForValidListAndQueue+0x5c>)
 80037ce:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80037d0:	2200      	movs	r2, #0
 80037d2:	210c      	movs	r1, #12
 80037d4:	2005      	movs	r0, #5
 80037d6:	f7fd ffdf 	bl	8001798 <xQueueGenericCreate>
 80037da:	4603      	mov	r3, r0
 80037dc:	4a07      	ldr	r2, [pc, #28]	@ (80037fc <prvCheckForValidListAndQueue+0x54>)
 80037de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <prvCheckForValidListAndQueue+0x54>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80037e8:	4b04      	ldr	r3, [pc, #16]	@ (80037fc <prvCheckForValidListAndQueue+0x54>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4908      	ldr	r1, [pc, #32]	@ (8003810 <prvCheckForValidListAndQueue+0x68>)
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe fd14 	bl	800221c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037f4:	f000 f96c 	bl	8003ad0 <vPortExitCritical>
}
 80037f8:	bf00      	nop
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	200001e8 	.word	0x200001e8
 8003800:	200001b8 	.word	0x200001b8
 8003804:	200001cc 	.word	0x200001cc
 8003808:	200001e0 	.word	0x200001e0
 800380c:	200001e4 	.word	0x200001e4
 8003810:	08004a14 	.word	0x08004a14

08003814 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3b04      	subs	r3, #4
 8003824:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800382c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3b04      	subs	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f023 0201 	bic.w	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	3b04      	subs	r3, #4
 8003842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003844:	4a0c      	ldr	r2, [pc, #48]	@ (8003878 <pxPortInitialiseStack+0x64>)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3b14      	subs	r3, #20
 800384e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3b04      	subs	r3, #4
 800385a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f06f 0202 	mvn.w	r2, #2
 8003862:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3b20      	subs	r3, #32
 8003868:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800386a:	68fb      	ldr	r3, [r7, #12]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	0800387d 	.word	0x0800387d

0800387c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003886:	4b13      	ldr	r3, [pc, #76]	@ (80038d4 <prvTaskExitError+0x58>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800388e:	d00b      	beq.n	80038a8 <prvTaskExitError+0x2c>
	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	60fb      	str	r3, [r7, #12]
}
 80038a2:	bf00      	nop
 80038a4:	bf00      	nop
 80038a6:	e7fd      	b.n	80038a4 <prvTaskExitError+0x28>
	__asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	60bb      	str	r3, [r7, #8]
}
 80038ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80038bc:	bf00      	nop
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0fc      	beq.n	80038be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	2000000c 	.word	0x2000000c

080038d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80038d8:	4808      	ldr	r0, [pc, #32]	@ (80038fc <prvPortStartFirstTask+0x24>)
 80038da:	6800      	ldr	r0, [r0, #0]
 80038dc:	6800      	ldr	r0, [r0, #0]
 80038de:	f380 8808 	msr	MSP, r0
 80038e2:	f04f 0000 	mov.w	r0, #0
 80038e6:	f380 8814 	msr	CONTROL, r0
 80038ea:	b662      	cpsie	i
 80038ec:	b661      	cpsie	f
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	df00      	svc	0
 80038f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80038fa:	bf00      	nop
 80038fc:	e000ed08 	.word	0xe000ed08

08003900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003906:	4b50      	ldr	r3, [pc, #320]	@ (8003a48 <xPortStartScheduler+0x148>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a50      	ldr	r2, [pc, #320]	@ (8003a4c <xPortStartScheduler+0x14c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d10b      	bne.n	8003928 <xPortStartScheduler+0x28>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	617b      	str	r3, [r7, #20]
}
 8003922:	bf00      	nop
 8003924:	bf00      	nop
 8003926:	e7fd      	b.n	8003924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003928:	4b47      	ldr	r3, [pc, #284]	@ (8003a48 <xPortStartScheduler+0x148>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a48      	ldr	r2, [pc, #288]	@ (8003a50 <xPortStartScheduler+0x150>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d10b      	bne.n	800394a <xPortStartScheduler+0x4a>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	61bb      	str	r3, [r7, #24]
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	e7fd      	b.n	8003946 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800394a:	4b42      	ldr	r3, [pc, #264]	@ (8003a54 <xPortStartScheduler+0x154>)
 800394c:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	b2db      	uxtb	r3, r3
 8003954:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	22ff      	movs	r2, #255	@ 0xff
 800395a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800396c:	b2da      	uxtb	r2, r3
 800396e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a58 <xPortStartScheduler+0x158>)
 8003970:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003972:	4b3a      	ldr	r3, [pc, #232]	@ (8003a5c <xPortStartScheduler+0x15c>)
 8003974:	2207      	movs	r2, #7
 8003976:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003978:	e009      	b.n	800398e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800397a:	4b38      	ldr	r3, [pc, #224]	@ (8003a5c <xPortStartScheduler+0x15c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3b01      	subs	r3, #1
 8003980:	4a36      	ldr	r2, [pc, #216]	@ (8003a5c <xPortStartScheduler+0x15c>)
 8003982:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	b2db      	uxtb	r3, r3
 800398c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003996:	2b80      	cmp	r3, #128	@ 0x80
 8003998:	d0ef      	beq.n	800397a <xPortStartScheduler+0x7a>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800399a:	4b30      	ldr	r3, [pc, #192]	@ (8003a5c <xPortStartScheduler+0x15c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f1c3 0307 	rsb	r3, r3, #7
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d00b      	beq.n	80039be <xPortStartScheduler+0xbe>
	__asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	613b      	str	r3, [r7, #16]
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
 80039bc:	e7fd      	b.n	80039ba <xPortStartScheduler+0xba>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039be:	4b27      	ldr	r3, [pc, #156]	@ (8003a5c <xPortStartScheduler+0x15c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f1c3 0307 	rsb	r3, r3, #7
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d00b      	beq.n	80039e2 <xPortStartScheduler+0xe2>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	60fb      	str	r3, [r7, #12]
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	e7fd      	b.n	80039de <xPortStartScheduler+0xde>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039e2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a5c <xPortStartScheduler+0x15c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a5c <xPortStartScheduler+0x15c>)
 80039ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039ec:	4b1b      	ldr	r3, [pc, #108]	@ (8003a5c <xPortStartScheduler+0x15c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039f4:	4a19      	ldr	r2, [pc, #100]	@ (8003a5c <xPortStartScheduler+0x15c>)
 80039f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a00:	4b17      	ldr	r3, [pc, #92]	@ (8003a60 <xPortStartScheduler+0x160>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a16      	ldr	r2, [pc, #88]	@ (8003a60 <xPortStartScheduler+0x160>)
 8003a06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a0c:	4b14      	ldr	r3, [pc, #80]	@ (8003a60 <xPortStartScheduler+0x160>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a13      	ldr	r2, [pc, #76]	@ (8003a60 <xPortStartScheduler+0x160>)
 8003a12:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003a16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a18:	f000 f884 	bl	8003b24 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	@ (8003a64 <xPortStartScheduler+0x164>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a22:	f000 f8a3 	bl	8003b6c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a26:	4b10      	ldr	r3, [pc, #64]	@ (8003a68 <xPortStartScheduler+0x168>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8003a68 <xPortStartScheduler+0x168>)
 8003a2c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003a30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a32:	f7ff ff51 	bl	80038d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a36:	f7fe ff7d 	bl	8002934 <vTaskSwitchContext>
	prvTaskExitError();
 8003a3a:	f7ff ff1f 	bl	800387c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3720      	adds	r7, #32
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	e000ed00 	.word	0xe000ed00
 8003a4c:	410fc271 	.word	0x410fc271
 8003a50:	410fc270 	.word	0x410fc270
 8003a54:	e000e400 	.word	0xe000e400
 8003a58:	200001f4 	.word	0x200001f4
 8003a5c:	200001f8 	.word	0x200001f8
 8003a60:	e000ed20 	.word	0xe000ed20
 8003a64:	2000000c 	.word	0x2000000c
 8003a68:	e000ef34 	.word	0xe000ef34

08003a6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	607b      	str	r3, [r7, #4]
}
 8003a84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a86:	4b10      	ldr	r3, [pc, #64]	@ (8003ac8 <vPortEnterCritical+0x5c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac8 <vPortEnterCritical+0x5c>)
 8003a8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a90:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <vPortEnterCritical+0x5c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d110      	bne.n	8003aba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a98:	4b0c      	ldr	r3, [pc, #48]	@ (8003acc <vPortEnterCritical+0x60>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <vPortEnterCritical+0x4e>
	__asm volatile
 8003aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	603b      	str	r3, [r7, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	e7fd      	b.n	8003ab6 <vPortEnterCritical+0x4a>
	}
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	2000000c 	.word	0x2000000c
 8003acc:	e000ed04 	.word	0xe000ed04

08003ad0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ad6:	4b12      	ldr	r3, [pc, #72]	@ (8003b20 <vPortExitCritical+0x50>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <vPortExitCritical+0x26>
	__asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	607b      	str	r3, [r7, #4]
}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop
 8003af4:	e7fd      	b.n	8003af2 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003af6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b20 <vPortExitCritical+0x50>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	4a08      	ldr	r2, [pc, #32]	@ (8003b20 <vPortExitCritical+0x50>)
 8003afe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b00:	4b07      	ldr	r3, [pc, #28]	@ (8003b20 <vPortExitCritical+0x50>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <vPortExitCritical+0x44>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	f383 8811 	msr	BASEPRI, r3
}
 8003b12:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	2000000c 	.word	0x2000000c

08003b24 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b28:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <vPortSetupTimerInterrupt+0x34>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <vPortSetupTimerInterrupt+0x38>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b34:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <vPortSetupTimerInterrupt+0x3c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0a      	ldr	r2, [pc, #40]	@ (8003b64 <vPortSetupTimerInterrupt+0x40>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	099b      	lsrs	r3, r3, #6
 8003b40:	4a09      	ldr	r2, [pc, #36]	@ (8003b68 <vPortSetupTimerInterrupt+0x44>)
 8003b42:	3b01      	subs	r3, #1
 8003b44:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b46:	4b04      	ldr	r3, [pc, #16]	@ (8003b58 <vPortSetupTimerInterrupt+0x34>)
 8003b48:	2207      	movs	r2, #7
 8003b4a:	601a      	str	r2, [r3, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	e000e010 	.word	0xe000e010
 8003b5c:	e000e018 	.word	0xe000e018
 8003b60:	20000000 	.word	0x20000000
 8003b64:	10624dd3 	.word	0x10624dd3
 8003b68:	e000e014 	.word	0xe000e014

08003b6c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003b6c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003b7c <vPortEnableVFP+0x10>
 8003b70:	6801      	ldr	r1, [r0, #0]
 8003b72:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003b76:	6001      	str	r1, [r0, #0]
 8003b78:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003b7a:	bf00      	nop
 8003b7c:	e000ed88 	.word	0xe000ed88

08003b80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003b86:	f3ef 8305 	mrs	r3, IPSR
 8003b8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b0f      	cmp	r3, #15
 8003b90:	d915      	bls.n	8003bbe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b92:	4a18      	ldr	r2, [pc, #96]	@ (8003bf4 <vPortValidateInterruptPriority+0x74>)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4413      	add	r3, r2
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b9c:	4b16      	ldr	r3, [pc, #88]	@ (8003bf8 <vPortValidateInterruptPriority+0x78>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	7afa      	ldrb	r2, [r7, #11]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d20b      	bcs.n	8003bbe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	607b      	str	r3, [r7, #4]
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	e7fd      	b.n	8003bba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003bfc <vPortValidateInterruptPriority+0x7c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c00 <vPortValidateInterruptPriority+0x80>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d90b      	bls.n	8003be6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	603b      	str	r3, [r7, #0]
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	e7fd      	b.n	8003be2 <vPortValidateInterruptPriority+0x62>
	}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000e3f0 	.word	0xe000e3f0
 8003bf8:	200001f4 	.word	0x200001f4
 8003bfc:	e000ed0c 	.word	0xe000ed0c
 8003c00:	200001f8 	.word	0x200001f8

08003c04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	@ 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c10:	f7fe fd1a 	bl	8002648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c14:	4b5c      	ldr	r3, [pc, #368]	@ (8003d88 <pvPortMalloc+0x184>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c1c:	f000 f924 	bl	8003e68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c20:	4b5a      	ldr	r3, [pc, #360]	@ (8003d8c <pvPortMalloc+0x188>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 8095 	bne.w	8003d58 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01e      	beq.n	8003c72 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003c34:	2208      	movs	r2, #8
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4413      	add	r3, r2
 8003c3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d015      	beq.n	8003c72 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f023 0307 	bic.w	r3, r3, #7
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <pvPortMalloc+0x6e>
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	617b      	str	r3, [r7, #20]
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	e7fd      	b.n	8003c6e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d06f      	beq.n	8003d58 <pvPortMalloc+0x154>
 8003c78:	4b45      	ldr	r3, [pc, #276]	@ (8003d90 <pvPortMalloc+0x18c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d86a      	bhi.n	8003d58 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c82:	4b44      	ldr	r3, [pc, #272]	@ (8003d94 <pvPortMalloc+0x190>)
 8003c84:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c86:	4b43      	ldr	r3, [pc, #268]	@ (8003d94 <pvPortMalloc+0x190>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c8c:	e004      	b.n	8003c98 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d903      	bls.n	8003caa <pvPortMalloc+0xa6>
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f1      	bne.n	8003c8e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003caa:	4b37      	ldr	r3, [pc, #220]	@ (8003d88 <pvPortMalloc+0x184>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d051      	beq.n	8003d58 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2208      	movs	r2, #8
 8003cba:	4413      	add	r3, r2
 8003cbc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	1ad2      	subs	r2, r2, r3
 8003cce:	2308      	movs	r3, #8
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d920      	bls.n	8003d18 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4413      	add	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00b      	beq.n	8003d00 <pvPortMalloc+0xfc>
	__asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	613b      	str	r3, [r7, #16]
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	e7fd      	b.n	8003cfc <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	1ad2      	subs	r2, r2, r3
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d12:	69b8      	ldr	r0, [r7, #24]
 8003d14:	f000 f90a 	bl	8003f2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d18:	4b1d      	ldr	r3, [pc, #116]	@ (8003d90 <pvPortMalloc+0x18c>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	4a1b      	ldr	r2, [pc, #108]	@ (8003d90 <pvPortMalloc+0x18c>)
 8003d24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d26:	4b1a      	ldr	r3, [pc, #104]	@ (8003d90 <pvPortMalloc+0x18c>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d98 <pvPortMalloc+0x194>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d203      	bcs.n	8003d3a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d32:	4b17      	ldr	r3, [pc, #92]	@ (8003d90 <pvPortMalloc+0x18c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a18      	ldr	r2, [pc, #96]	@ (8003d98 <pvPortMalloc+0x194>)
 8003d38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	4b13      	ldr	r3, [pc, #76]	@ (8003d8c <pvPortMalloc+0x188>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003d4e:	4b13      	ldr	r3, [pc, #76]	@ (8003d9c <pvPortMalloc+0x198>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3301      	adds	r3, #1
 8003d54:	4a11      	ldr	r2, [pc, #68]	@ (8003d9c <pvPortMalloc+0x198>)
 8003d56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d58:	f7fe fc84 	bl	8002664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <pvPortMalloc+0x17a>
	__asm volatile
 8003d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	60fb      	str	r3, [r7, #12]
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	e7fd      	b.n	8003d7a <pvPortMalloc+0x176>
	return pvReturn;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3728      	adds	r7, #40	@ 0x28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	20002a04 	.word	0x20002a04
 8003d8c:	20002a18 	.word	0x20002a18
 8003d90:	20002a08 	.word	0x20002a08
 8003d94:	200029fc 	.word	0x200029fc
 8003d98:	20002a0c 	.word	0x20002a0c
 8003d9c:	20002a10 	.word	0x20002a10

08003da0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d04f      	beq.n	8003e52 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003db2:	2308      	movs	r3, #8
 8003db4:	425b      	negs	r3, r3
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4413      	add	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	4b25      	ldr	r3, [pc, #148]	@ (8003e5c <vPortFree+0xbc>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10b      	bne.n	8003de6 <vPortFree+0x46>
	__asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	60fb      	str	r3, [r7, #12]
}
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
 8003de4:	e7fd      	b.n	8003de2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <vPortFree+0x66>
	__asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	60bb      	str	r3, [r7, #8]
}
 8003e00:	bf00      	nop
 8003e02:	bf00      	nop
 8003e04:	e7fd      	b.n	8003e02 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	4b14      	ldr	r3, [pc, #80]	@ (8003e5c <vPortFree+0xbc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01e      	beq.n	8003e52 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d11a      	bne.n	8003e52 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	4b0e      	ldr	r3, [pc, #56]	@ (8003e5c <vPortFree+0xbc>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	401a      	ands	r2, r3
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e2c:	f7fe fc0c 	bl	8002648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	4b0a      	ldr	r3, [pc, #40]	@ (8003e60 <vPortFree+0xc0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4413      	add	r3, r2
 8003e3a:	4a09      	ldr	r2, [pc, #36]	@ (8003e60 <vPortFree+0xc0>)
 8003e3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e3e:	6938      	ldr	r0, [r7, #16]
 8003e40:	f000 f874 	bl	8003f2c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003e44:	4b07      	ldr	r3, [pc, #28]	@ (8003e64 <vPortFree+0xc4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	4a06      	ldr	r2, [pc, #24]	@ (8003e64 <vPortFree+0xc4>)
 8003e4c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003e4e:	f7fe fc09 	bl	8002664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e52:	bf00      	nop
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20002a18 	.word	0x20002a18
 8003e60:	20002a08 	.word	0x20002a08
 8003e64:	20002a14 	.word	0x20002a14

08003e68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e6e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003e72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e74:	4b27      	ldr	r3, [pc, #156]	@ (8003f14 <prvHeapInit+0xac>)
 8003e76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00c      	beq.n	8003e9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3307      	adds	r3, #7
 8003e86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0307 	bic.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	4a1f      	ldr	r2, [pc, #124]	@ (8003f14 <prvHeapInit+0xac>)
 8003e98:	4413      	add	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f18 <prvHeapInit+0xb0>)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f18 <prvHeapInit+0xb0>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0307 	bic.w	r3, r3, #7
 8003ec2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4a15      	ldr	r2, [pc, #84]	@ (8003f1c <prvHeapInit+0xb4>)
 8003ec8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003eca:	4b14      	ldr	r3, [pc, #80]	@ (8003f1c <prvHeapInit+0xb4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ed2:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <prvHeapInit+0xb4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	1ad2      	subs	r2, r2, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f1c <prvHeapInit+0xb4>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8003f20 <prvHeapInit+0xb8>)
 8003ef6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4a09      	ldr	r2, [pc, #36]	@ (8003f24 <prvHeapInit+0xbc>)
 8003efe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f00:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <prvHeapInit+0xc0>)
 8003f02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f06:	601a      	str	r2, [r3, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	200001fc 	.word	0x200001fc
 8003f18:	200029fc 	.word	0x200029fc
 8003f1c:	20002a04 	.word	0x20002a04
 8003f20:	20002a0c 	.word	0x20002a0c
 8003f24:	20002a08 	.word	0x20002a08
 8003f28:	20002a18 	.word	0x20002a18

08003f2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f34:	4b28      	ldr	r3, [pc, #160]	@ (8003fd8 <prvInsertBlockIntoFreeList+0xac>)
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	e002      	b.n	8003f40 <prvInsertBlockIntoFreeList+0x14>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d8f7      	bhi.n	8003f3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	4413      	add	r3, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d108      	bne.n	8003f6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	441a      	add	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	441a      	add	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d118      	bne.n	8003fb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4b15      	ldr	r3, [pc, #84]	@ (8003fdc <prvInsertBlockIntoFreeList+0xb0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d00d      	beq.n	8003faa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	441a      	add	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e008      	b.n	8003fbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003faa:	4b0c      	ldr	r3, [pc, #48]	@ (8003fdc <prvInsertBlockIntoFreeList+0xb0>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e003      	b.n	8003fbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d002      	beq.n	8003fca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	200029fc 	.word	0x200029fc
 8003fdc:	20002a04 	.word	0x20002a04

08003fe0 <_vsniprintf_r>:
 8003fe0:	b530      	push	{r4, r5, lr}
 8003fe2:	4614      	mov	r4, r2
 8003fe4:	2c00      	cmp	r4, #0
 8003fe6:	b09b      	sub	sp, #108	@ 0x6c
 8003fe8:	4605      	mov	r5, r0
 8003fea:	461a      	mov	r2, r3
 8003fec:	da05      	bge.n	8003ffa <_vsniprintf_r+0x1a>
 8003fee:	238b      	movs	r3, #139	@ 0x8b
 8003ff0:	6003      	str	r3, [r0, #0]
 8003ff2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ff6:	b01b      	add	sp, #108	@ 0x6c
 8003ff8:	bd30      	pop	{r4, r5, pc}
 8003ffa:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003ffe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	9319      	str	r3, [sp, #100]	@ 0x64
 8004008:	bf14      	ite	ne
 800400a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800400e:	4623      	moveq	r3, r4
 8004010:	9302      	str	r3, [sp, #8]
 8004012:	9305      	str	r3, [sp, #20]
 8004014:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004018:	9100      	str	r1, [sp, #0]
 800401a:	9104      	str	r1, [sp, #16]
 800401c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004020:	4669      	mov	r1, sp
 8004022:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8004024:	f000 f8b6 	bl	8004194 <_svfiprintf_r>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	bfbc      	itt	lt
 800402c:	238b      	movlt	r3, #139	@ 0x8b
 800402e:	602b      	strlt	r3, [r5, #0]
 8004030:	2c00      	cmp	r4, #0
 8004032:	d0e0      	beq.n	8003ff6 <_vsniprintf_r+0x16>
 8004034:	9b00      	ldr	r3, [sp, #0]
 8004036:	2200      	movs	r2, #0
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	e7dc      	b.n	8003ff6 <_vsniprintf_r+0x16>

0800403c <vsniprintf>:
 800403c:	b507      	push	{r0, r1, r2, lr}
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	460a      	mov	r2, r1
 8004044:	4601      	mov	r1, r0
 8004046:	4803      	ldr	r0, [pc, #12]	@ (8004054 <vsniprintf+0x18>)
 8004048:	6800      	ldr	r0, [r0, #0]
 800404a:	f7ff ffc9 	bl	8003fe0 <_vsniprintf_r>
 800404e:	b003      	add	sp, #12
 8004050:	f85d fb04 	ldr.w	pc, [sp], #4
 8004054:	20000010 	.word	0x20000010

08004058 <memset>:
 8004058:	4402      	add	r2, r0
 800405a:	4603      	mov	r3, r0
 800405c:	4293      	cmp	r3, r2
 800405e:	d100      	bne.n	8004062 <memset+0xa>
 8004060:	4770      	bx	lr
 8004062:	f803 1b01 	strb.w	r1, [r3], #1
 8004066:	e7f9      	b.n	800405c <memset+0x4>

08004068 <__errno>:
 8004068:	4b01      	ldr	r3, [pc, #4]	@ (8004070 <__errno+0x8>)
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	20000010 	.word	0x20000010

08004074 <__libc_init_array>:
 8004074:	b570      	push	{r4, r5, r6, lr}
 8004076:	4d0d      	ldr	r5, [pc, #52]	@ (80040ac <__libc_init_array+0x38>)
 8004078:	4c0d      	ldr	r4, [pc, #52]	@ (80040b0 <__libc_init_array+0x3c>)
 800407a:	1b64      	subs	r4, r4, r5
 800407c:	10a4      	asrs	r4, r4, #2
 800407e:	2600      	movs	r6, #0
 8004080:	42a6      	cmp	r6, r4
 8004082:	d109      	bne.n	8004098 <__libc_init_array+0x24>
 8004084:	4d0b      	ldr	r5, [pc, #44]	@ (80040b4 <__libc_init_array+0x40>)
 8004086:	4c0c      	ldr	r4, [pc, #48]	@ (80040b8 <__libc_init_array+0x44>)
 8004088:	f000 fc64 	bl	8004954 <_init>
 800408c:	1b64      	subs	r4, r4, r5
 800408e:	10a4      	asrs	r4, r4, #2
 8004090:	2600      	movs	r6, #0
 8004092:	42a6      	cmp	r6, r4
 8004094:	d105      	bne.n	80040a2 <__libc_init_array+0x2e>
 8004096:	bd70      	pop	{r4, r5, r6, pc}
 8004098:	f855 3b04 	ldr.w	r3, [r5], #4
 800409c:	4798      	blx	r3
 800409e:	3601      	adds	r6, #1
 80040a0:	e7ee      	b.n	8004080 <__libc_init_array+0xc>
 80040a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a6:	4798      	blx	r3
 80040a8:	3601      	adds	r6, #1
 80040aa:	e7f2      	b.n	8004092 <__libc_init_array+0x1e>
 80040ac:	08004a98 	.word	0x08004a98
 80040b0:	08004a98 	.word	0x08004a98
 80040b4:	08004a98 	.word	0x08004a98
 80040b8:	08004a9c 	.word	0x08004a9c

080040bc <__retarget_lock_acquire_recursive>:
 80040bc:	4770      	bx	lr

080040be <__retarget_lock_release_recursive>:
 80040be:	4770      	bx	lr

080040c0 <memcpy>:
 80040c0:	440a      	add	r2, r1
 80040c2:	4291      	cmp	r1, r2
 80040c4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80040c8:	d100      	bne.n	80040cc <memcpy+0xc>
 80040ca:	4770      	bx	lr
 80040cc:	b510      	push	{r4, lr}
 80040ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040d6:	4291      	cmp	r1, r2
 80040d8:	d1f9      	bne.n	80040ce <memcpy+0xe>
 80040da:	bd10      	pop	{r4, pc}

080040dc <__ssputs_r>:
 80040dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e0:	688e      	ldr	r6, [r1, #8]
 80040e2:	461f      	mov	r7, r3
 80040e4:	42be      	cmp	r6, r7
 80040e6:	680b      	ldr	r3, [r1, #0]
 80040e8:	4682      	mov	sl, r0
 80040ea:	460c      	mov	r4, r1
 80040ec:	4690      	mov	r8, r2
 80040ee:	d82d      	bhi.n	800414c <__ssputs_r+0x70>
 80040f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80040f8:	d026      	beq.n	8004148 <__ssputs_r+0x6c>
 80040fa:	6965      	ldr	r5, [r4, #20]
 80040fc:	6909      	ldr	r1, [r1, #16]
 80040fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004102:	eba3 0901 	sub.w	r9, r3, r1
 8004106:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800410a:	1c7b      	adds	r3, r7, #1
 800410c:	444b      	add	r3, r9
 800410e:	106d      	asrs	r5, r5, #1
 8004110:	429d      	cmp	r5, r3
 8004112:	bf38      	it	cc
 8004114:	461d      	movcc	r5, r3
 8004116:	0553      	lsls	r3, r2, #21
 8004118:	d527      	bpl.n	800416a <__ssputs_r+0x8e>
 800411a:	4629      	mov	r1, r5
 800411c:	f000 f958 	bl	80043d0 <_malloc_r>
 8004120:	4606      	mov	r6, r0
 8004122:	b360      	cbz	r0, 800417e <__ssputs_r+0xa2>
 8004124:	6921      	ldr	r1, [r4, #16]
 8004126:	464a      	mov	r2, r9
 8004128:	f7ff ffca 	bl	80040c0 <memcpy>
 800412c:	89a3      	ldrh	r3, [r4, #12]
 800412e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004136:	81a3      	strh	r3, [r4, #12]
 8004138:	6126      	str	r6, [r4, #16]
 800413a:	6165      	str	r5, [r4, #20]
 800413c:	444e      	add	r6, r9
 800413e:	eba5 0509 	sub.w	r5, r5, r9
 8004142:	6026      	str	r6, [r4, #0]
 8004144:	60a5      	str	r5, [r4, #8]
 8004146:	463e      	mov	r6, r7
 8004148:	42be      	cmp	r6, r7
 800414a:	d900      	bls.n	800414e <__ssputs_r+0x72>
 800414c:	463e      	mov	r6, r7
 800414e:	6820      	ldr	r0, [r4, #0]
 8004150:	4632      	mov	r2, r6
 8004152:	4641      	mov	r1, r8
 8004154:	f000 fb82 	bl	800485c <memmove>
 8004158:	68a3      	ldr	r3, [r4, #8]
 800415a:	1b9b      	subs	r3, r3, r6
 800415c:	60a3      	str	r3, [r4, #8]
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	4433      	add	r3, r6
 8004162:	6023      	str	r3, [r4, #0]
 8004164:	2000      	movs	r0, #0
 8004166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800416a:	462a      	mov	r2, r5
 800416c:	f000 fb48 	bl	8004800 <_realloc_r>
 8004170:	4606      	mov	r6, r0
 8004172:	2800      	cmp	r0, #0
 8004174:	d1e0      	bne.n	8004138 <__ssputs_r+0x5c>
 8004176:	6921      	ldr	r1, [r4, #16]
 8004178:	4650      	mov	r0, sl
 800417a:	f000 fb99 	bl	80048b0 <_free_r>
 800417e:	230c      	movs	r3, #12
 8004180:	f8ca 3000 	str.w	r3, [sl]
 8004184:	89a3      	ldrh	r3, [r4, #12]
 8004186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800418a:	81a3      	strh	r3, [r4, #12]
 800418c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004190:	e7e9      	b.n	8004166 <__ssputs_r+0x8a>
	...

08004194 <_svfiprintf_r>:
 8004194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004198:	4698      	mov	r8, r3
 800419a:	898b      	ldrh	r3, [r1, #12]
 800419c:	061b      	lsls	r3, r3, #24
 800419e:	b09d      	sub	sp, #116	@ 0x74
 80041a0:	4607      	mov	r7, r0
 80041a2:	460d      	mov	r5, r1
 80041a4:	4614      	mov	r4, r2
 80041a6:	d510      	bpl.n	80041ca <_svfiprintf_r+0x36>
 80041a8:	690b      	ldr	r3, [r1, #16]
 80041aa:	b973      	cbnz	r3, 80041ca <_svfiprintf_r+0x36>
 80041ac:	2140      	movs	r1, #64	@ 0x40
 80041ae:	f000 f90f 	bl	80043d0 <_malloc_r>
 80041b2:	6028      	str	r0, [r5, #0]
 80041b4:	6128      	str	r0, [r5, #16]
 80041b6:	b930      	cbnz	r0, 80041c6 <_svfiprintf_r+0x32>
 80041b8:	230c      	movs	r3, #12
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041c0:	b01d      	add	sp, #116	@ 0x74
 80041c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c6:	2340      	movs	r3, #64	@ 0x40
 80041c8:	616b      	str	r3, [r5, #20]
 80041ca:	2300      	movs	r3, #0
 80041cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80041ce:	2320      	movs	r3, #32
 80041d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80041d8:	2330      	movs	r3, #48	@ 0x30
 80041da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004378 <_svfiprintf_r+0x1e4>
 80041de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041e2:	f04f 0901 	mov.w	r9, #1
 80041e6:	4623      	mov	r3, r4
 80041e8:	469a      	mov	sl, r3
 80041ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041ee:	b10a      	cbz	r2, 80041f4 <_svfiprintf_r+0x60>
 80041f0:	2a25      	cmp	r2, #37	@ 0x25
 80041f2:	d1f9      	bne.n	80041e8 <_svfiprintf_r+0x54>
 80041f4:	ebba 0b04 	subs.w	fp, sl, r4
 80041f8:	d00b      	beq.n	8004212 <_svfiprintf_r+0x7e>
 80041fa:	465b      	mov	r3, fp
 80041fc:	4622      	mov	r2, r4
 80041fe:	4629      	mov	r1, r5
 8004200:	4638      	mov	r0, r7
 8004202:	f7ff ff6b 	bl	80040dc <__ssputs_r>
 8004206:	3001      	adds	r0, #1
 8004208:	f000 80a7 	beq.w	800435a <_svfiprintf_r+0x1c6>
 800420c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800420e:	445a      	add	r2, fp
 8004210:	9209      	str	r2, [sp, #36]	@ 0x24
 8004212:	f89a 3000 	ldrb.w	r3, [sl]
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 809f 	beq.w	800435a <_svfiprintf_r+0x1c6>
 800421c:	2300      	movs	r3, #0
 800421e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004226:	f10a 0a01 	add.w	sl, sl, #1
 800422a:	9304      	str	r3, [sp, #16]
 800422c:	9307      	str	r3, [sp, #28]
 800422e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004232:	931a      	str	r3, [sp, #104]	@ 0x68
 8004234:	4654      	mov	r4, sl
 8004236:	2205      	movs	r2, #5
 8004238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800423c:	484e      	ldr	r0, [pc, #312]	@ (8004378 <_svfiprintf_r+0x1e4>)
 800423e:	f7fb ffc7 	bl	80001d0 <memchr>
 8004242:	9a04      	ldr	r2, [sp, #16]
 8004244:	b9d8      	cbnz	r0, 800427e <_svfiprintf_r+0xea>
 8004246:	06d0      	lsls	r0, r2, #27
 8004248:	bf44      	itt	mi
 800424a:	2320      	movmi	r3, #32
 800424c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004250:	0711      	lsls	r1, r2, #28
 8004252:	bf44      	itt	mi
 8004254:	232b      	movmi	r3, #43	@ 0x2b
 8004256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800425a:	f89a 3000 	ldrb.w	r3, [sl]
 800425e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004260:	d015      	beq.n	800428e <_svfiprintf_r+0xfa>
 8004262:	9a07      	ldr	r2, [sp, #28]
 8004264:	4654      	mov	r4, sl
 8004266:	2000      	movs	r0, #0
 8004268:	f04f 0c0a 	mov.w	ip, #10
 800426c:	4621      	mov	r1, r4
 800426e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004272:	3b30      	subs	r3, #48	@ 0x30
 8004274:	2b09      	cmp	r3, #9
 8004276:	d94b      	bls.n	8004310 <_svfiprintf_r+0x17c>
 8004278:	b1b0      	cbz	r0, 80042a8 <_svfiprintf_r+0x114>
 800427a:	9207      	str	r2, [sp, #28]
 800427c:	e014      	b.n	80042a8 <_svfiprintf_r+0x114>
 800427e:	eba0 0308 	sub.w	r3, r0, r8
 8004282:	fa09 f303 	lsl.w	r3, r9, r3
 8004286:	4313      	orrs	r3, r2
 8004288:	9304      	str	r3, [sp, #16]
 800428a:	46a2      	mov	sl, r4
 800428c:	e7d2      	b.n	8004234 <_svfiprintf_r+0xa0>
 800428e:	9b03      	ldr	r3, [sp, #12]
 8004290:	1d19      	adds	r1, r3, #4
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	9103      	str	r1, [sp, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	bfbb      	ittet	lt
 800429a:	425b      	neglt	r3, r3
 800429c:	f042 0202 	orrlt.w	r2, r2, #2
 80042a0:	9307      	strge	r3, [sp, #28]
 80042a2:	9307      	strlt	r3, [sp, #28]
 80042a4:	bfb8      	it	lt
 80042a6:	9204      	strlt	r2, [sp, #16]
 80042a8:	7823      	ldrb	r3, [r4, #0]
 80042aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80042ac:	d10a      	bne.n	80042c4 <_svfiprintf_r+0x130>
 80042ae:	7863      	ldrb	r3, [r4, #1]
 80042b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80042b2:	d132      	bne.n	800431a <_svfiprintf_r+0x186>
 80042b4:	9b03      	ldr	r3, [sp, #12]
 80042b6:	1d1a      	adds	r2, r3, #4
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	9203      	str	r2, [sp, #12]
 80042bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042c0:	3402      	adds	r4, #2
 80042c2:	9305      	str	r3, [sp, #20]
 80042c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004388 <_svfiprintf_r+0x1f4>
 80042c8:	7821      	ldrb	r1, [r4, #0]
 80042ca:	2203      	movs	r2, #3
 80042cc:	4650      	mov	r0, sl
 80042ce:	f7fb ff7f 	bl	80001d0 <memchr>
 80042d2:	b138      	cbz	r0, 80042e4 <_svfiprintf_r+0x150>
 80042d4:	9b04      	ldr	r3, [sp, #16]
 80042d6:	eba0 000a 	sub.w	r0, r0, sl
 80042da:	2240      	movs	r2, #64	@ 0x40
 80042dc:	4082      	lsls	r2, r0
 80042de:	4313      	orrs	r3, r2
 80042e0:	3401      	adds	r4, #1
 80042e2:	9304      	str	r3, [sp, #16]
 80042e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e8:	4824      	ldr	r0, [pc, #144]	@ (800437c <_svfiprintf_r+0x1e8>)
 80042ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042ee:	2206      	movs	r2, #6
 80042f0:	f7fb ff6e 	bl	80001d0 <memchr>
 80042f4:	2800      	cmp	r0, #0
 80042f6:	d036      	beq.n	8004366 <_svfiprintf_r+0x1d2>
 80042f8:	4b21      	ldr	r3, [pc, #132]	@ (8004380 <_svfiprintf_r+0x1ec>)
 80042fa:	bb1b      	cbnz	r3, 8004344 <_svfiprintf_r+0x1b0>
 80042fc:	9b03      	ldr	r3, [sp, #12]
 80042fe:	3307      	adds	r3, #7
 8004300:	f023 0307 	bic.w	r3, r3, #7
 8004304:	3308      	adds	r3, #8
 8004306:	9303      	str	r3, [sp, #12]
 8004308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800430a:	4433      	add	r3, r6
 800430c:	9309      	str	r3, [sp, #36]	@ 0x24
 800430e:	e76a      	b.n	80041e6 <_svfiprintf_r+0x52>
 8004310:	fb0c 3202 	mla	r2, ip, r2, r3
 8004314:	460c      	mov	r4, r1
 8004316:	2001      	movs	r0, #1
 8004318:	e7a8      	b.n	800426c <_svfiprintf_r+0xd8>
 800431a:	2300      	movs	r3, #0
 800431c:	3401      	adds	r4, #1
 800431e:	9305      	str	r3, [sp, #20]
 8004320:	4619      	mov	r1, r3
 8004322:	f04f 0c0a 	mov.w	ip, #10
 8004326:	4620      	mov	r0, r4
 8004328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800432c:	3a30      	subs	r2, #48	@ 0x30
 800432e:	2a09      	cmp	r2, #9
 8004330:	d903      	bls.n	800433a <_svfiprintf_r+0x1a6>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0c6      	beq.n	80042c4 <_svfiprintf_r+0x130>
 8004336:	9105      	str	r1, [sp, #20]
 8004338:	e7c4      	b.n	80042c4 <_svfiprintf_r+0x130>
 800433a:	fb0c 2101 	mla	r1, ip, r1, r2
 800433e:	4604      	mov	r4, r0
 8004340:	2301      	movs	r3, #1
 8004342:	e7f0      	b.n	8004326 <_svfiprintf_r+0x192>
 8004344:	ab03      	add	r3, sp, #12
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	462a      	mov	r2, r5
 800434a:	4b0e      	ldr	r3, [pc, #56]	@ (8004384 <_svfiprintf_r+0x1f0>)
 800434c:	a904      	add	r1, sp, #16
 800434e:	4638      	mov	r0, r7
 8004350:	f3af 8000 	nop.w
 8004354:	1c42      	adds	r2, r0, #1
 8004356:	4606      	mov	r6, r0
 8004358:	d1d6      	bne.n	8004308 <_svfiprintf_r+0x174>
 800435a:	89ab      	ldrh	r3, [r5, #12]
 800435c:	065b      	lsls	r3, r3, #25
 800435e:	f53f af2d 	bmi.w	80041bc <_svfiprintf_r+0x28>
 8004362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004364:	e72c      	b.n	80041c0 <_svfiprintf_r+0x2c>
 8004366:	ab03      	add	r3, sp, #12
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	462a      	mov	r2, r5
 800436c:	4b05      	ldr	r3, [pc, #20]	@ (8004384 <_svfiprintf_r+0x1f0>)
 800436e:	a904      	add	r1, sp, #16
 8004370:	4638      	mov	r0, r7
 8004372:	f000 f91b 	bl	80045ac <_printf_i>
 8004376:	e7ed      	b.n	8004354 <_svfiprintf_r+0x1c0>
 8004378:	08004a5c 	.word	0x08004a5c
 800437c:	08004a66 	.word	0x08004a66
 8004380:	00000000 	.word	0x00000000
 8004384:	080040dd 	.word	0x080040dd
 8004388:	08004a62 	.word	0x08004a62

0800438c <sbrk_aligned>:
 800438c:	b570      	push	{r4, r5, r6, lr}
 800438e:	4e0f      	ldr	r6, [pc, #60]	@ (80043cc <sbrk_aligned+0x40>)
 8004390:	460c      	mov	r4, r1
 8004392:	6831      	ldr	r1, [r6, #0]
 8004394:	4605      	mov	r5, r0
 8004396:	b911      	cbnz	r1, 800439e <sbrk_aligned+0x12>
 8004398:	f000 fa7a 	bl	8004890 <_sbrk_r>
 800439c:	6030      	str	r0, [r6, #0]
 800439e:	4621      	mov	r1, r4
 80043a0:	4628      	mov	r0, r5
 80043a2:	f000 fa75 	bl	8004890 <_sbrk_r>
 80043a6:	1c43      	adds	r3, r0, #1
 80043a8:	d103      	bne.n	80043b2 <sbrk_aligned+0x26>
 80043aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80043ae:	4620      	mov	r0, r4
 80043b0:	bd70      	pop	{r4, r5, r6, pc}
 80043b2:	1cc4      	adds	r4, r0, #3
 80043b4:	f024 0403 	bic.w	r4, r4, #3
 80043b8:	42a0      	cmp	r0, r4
 80043ba:	d0f8      	beq.n	80043ae <sbrk_aligned+0x22>
 80043bc:	1a21      	subs	r1, r4, r0
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 fa66 	bl	8004890 <_sbrk_r>
 80043c4:	3001      	adds	r0, #1
 80043c6:	d1f2      	bne.n	80043ae <sbrk_aligned+0x22>
 80043c8:	e7ef      	b.n	80043aa <sbrk_aligned+0x1e>
 80043ca:	bf00      	nop
 80043cc:	20002b58 	.word	0x20002b58

080043d0 <_malloc_r>:
 80043d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043d4:	1ccd      	adds	r5, r1, #3
 80043d6:	f025 0503 	bic.w	r5, r5, #3
 80043da:	3508      	adds	r5, #8
 80043dc:	2d0c      	cmp	r5, #12
 80043de:	bf38      	it	cc
 80043e0:	250c      	movcc	r5, #12
 80043e2:	2d00      	cmp	r5, #0
 80043e4:	4606      	mov	r6, r0
 80043e6:	db01      	blt.n	80043ec <_malloc_r+0x1c>
 80043e8:	42a9      	cmp	r1, r5
 80043ea:	d904      	bls.n	80043f6 <_malloc_r+0x26>
 80043ec:	230c      	movs	r3, #12
 80043ee:	6033      	str	r3, [r6, #0]
 80043f0:	2000      	movs	r0, #0
 80043f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044cc <_malloc_r+0xfc>
 80043fa:	f000 f9f5 	bl	80047e8 <__malloc_lock>
 80043fe:	f8d8 3000 	ldr.w	r3, [r8]
 8004402:	461c      	mov	r4, r3
 8004404:	bb44      	cbnz	r4, 8004458 <_malloc_r+0x88>
 8004406:	4629      	mov	r1, r5
 8004408:	4630      	mov	r0, r6
 800440a:	f7ff ffbf 	bl	800438c <sbrk_aligned>
 800440e:	1c43      	adds	r3, r0, #1
 8004410:	4604      	mov	r4, r0
 8004412:	d158      	bne.n	80044c6 <_malloc_r+0xf6>
 8004414:	f8d8 4000 	ldr.w	r4, [r8]
 8004418:	4627      	mov	r7, r4
 800441a:	2f00      	cmp	r7, #0
 800441c:	d143      	bne.n	80044a6 <_malloc_r+0xd6>
 800441e:	2c00      	cmp	r4, #0
 8004420:	d04b      	beq.n	80044ba <_malloc_r+0xea>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	4639      	mov	r1, r7
 8004426:	4630      	mov	r0, r6
 8004428:	eb04 0903 	add.w	r9, r4, r3
 800442c:	f000 fa30 	bl	8004890 <_sbrk_r>
 8004430:	4581      	cmp	r9, r0
 8004432:	d142      	bne.n	80044ba <_malloc_r+0xea>
 8004434:	6821      	ldr	r1, [r4, #0]
 8004436:	1a6d      	subs	r5, r5, r1
 8004438:	4629      	mov	r1, r5
 800443a:	4630      	mov	r0, r6
 800443c:	f7ff ffa6 	bl	800438c <sbrk_aligned>
 8004440:	3001      	adds	r0, #1
 8004442:	d03a      	beq.n	80044ba <_malloc_r+0xea>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	442b      	add	r3, r5
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	f8d8 3000 	ldr.w	r3, [r8]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	bb62      	cbnz	r2, 80044ac <_malloc_r+0xdc>
 8004452:	f8c8 7000 	str.w	r7, [r8]
 8004456:	e00f      	b.n	8004478 <_malloc_r+0xa8>
 8004458:	6822      	ldr	r2, [r4, #0]
 800445a:	1b52      	subs	r2, r2, r5
 800445c:	d420      	bmi.n	80044a0 <_malloc_r+0xd0>
 800445e:	2a0b      	cmp	r2, #11
 8004460:	d917      	bls.n	8004492 <_malloc_r+0xc2>
 8004462:	1961      	adds	r1, r4, r5
 8004464:	42a3      	cmp	r3, r4
 8004466:	6025      	str	r5, [r4, #0]
 8004468:	bf18      	it	ne
 800446a:	6059      	strne	r1, [r3, #4]
 800446c:	6863      	ldr	r3, [r4, #4]
 800446e:	bf08      	it	eq
 8004470:	f8c8 1000 	streq.w	r1, [r8]
 8004474:	5162      	str	r2, [r4, r5]
 8004476:	604b      	str	r3, [r1, #4]
 8004478:	4630      	mov	r0, r6
 800447a:	f000 f9bb 	bl	80047f4 <__malloc_unlock>
 800447e:	f104 000b 	add.w	r0, r4, #11
 8004482:	1d23      	adds	r3, r4, #4
 8004484:	f020 0007 	bic.w	r0, r0, #7
 8004488:	1ac2      	subs	r2, r0, r3
 800448a:	bf1c      	itt	ne
 800448c:	1a1b      	subne	r3, r3, r0
 800448e:	50a3      	strne	r3, [r4, r2]
 8004490:	e7af      	b.n	80043f2 <_malloc_r+0x22>
 8004492:	6862      	ldr	r2, [r4, #4]
 8004494:	42a3      	cmp	r3, r4
 8004496:	bf0c      	ite	eq
 8004498:	f8c8 2000 	streq.w	r2, [r8]
 800449c:	605a      	strne	r2, [r3, #4]
 800449e:	e7eb      	b.n	8004478 <_malloc_r+0xa8>
 80044a0:	4623      	mov	r3, r4
 80044a2:	6864      	ldr	r4, [r4, #4]
 80044a4:	e7ae      	b.n	8004404 <_malloc_r+0x34>
 80044a6:	463c      	mov	r4, r7
 80044a8:	687f      	ldr	r7, [r7, #4]
 80044aa:	e7b6      	b.n	800441a <_malloc_r+0x4a>
 80044ac:	461a      	mov	r2, r3
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	42a3      	cmp	r3, r4
 80044b2:	d1fb      	bne.n	80044ac <_malloc_r+0xdc>
 80044b4:	2300      	movs	r3, #0
 80044b6:	6053      	str	r3, [r2, #4]
 80044b8:	e7de      	b.n	8004478 <_malloc_r+0xa8>
 80044ba:	230c      	movs	r3, #12
 80044bc:	6033      	str	r3, [r6, #0]
 80044be:	4630      	mov	r0, r6
 80044c0:	f000 f998 	bl	80047f4 <__malloc_unlock>
 80044c4:	e794      	b.n	80043f0 <_malloc_r+0x20>
 80044c6:	6005      	str	r5, [r0, #0]
 80044c8:	e7d6      	b.n	8004478 <_malloc_r+0xa8>
 80044ca:	bf00      	nop
 80044cc:	20002b5c 	.word	0x20002b5c

080044d0 <_printf_common>:
 80044d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	4616      	mov	r6, r2
 80044d6:	4698      	mov	r8, r3
 80044d8:	688a      	ldr	r2, [r1, #8]
 80044da:	690b      	ldr	r3, [r1, #16]
 80044dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bfb8      	it	lt
 80044e4:	4613      	movlt	r3, r2
 80044e6:	6033      	str	r3, [r6, #0]
 80044e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044ec:	4607      	mov	r7, r0
 80044ee:	460c      	mov	r4, r1
 80044f0:	b10a      	cbz	r2, 80044f6 <_printf_common+0x26>
 80044f2:	3301      	adds	r3, #1
 80044f4:	6033      	str	r3, [r6, #0]
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	0699      	lsls	r1, r3, #26
 80044fa:	bf42      	ittt	mi
 80044fc:	6833      	ldrmi	r3, [r6, #0]
 80044fe:	3302      	addmi	r3, #2
 8004500:	6033      	strmi	r3, [r6, #0]
 8004502:	6825      	ldr	r5, [r4, #0]
 8004504:	f015 0506 	ands.w	r5, r5, #6
 8004508:	d106      	bne.n	8004518 <_printf_common+0x48>
 800450a:	f104 0a19 	add.w	sl, r4, #25
 800450e:	68e3      	ldr	r3, [r4, #12]
 8004510:	6832      	ldr	r2, [r6, #0]
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	42ab      	cmp	r3, r5
 8004516:	dc26      	bgt.n	8004566 <_printf_common+0x96>
 8004518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800451c:	6822      	ldr	r2, [r4, #0]
 800451e:	3b00      	subs	r3, #0
 8004520:	bf18      	it	ne
 8004522:	2301      	movne	r3, #1
 8004524:	0692      	lsls	r2, r2, #26
 8004526:	d42b      	bmi.n	8004580 <_printf_common+0xb0>
 8004528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800452c:	4641      	mov	r1, r8
 800452e:	4638      	mov	r0, r7
 8004530:	47c8      	blx	r9
 8004532:	3001      	adds	r0, #1
 8004534:	d01e      	beq.n	8004574 <_printf_common+0xa4>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	6922      	ldr	r2, [r4, #16]
 800453a:	f003 0306 	and.w	r3, r3, #6
 800453e:	2b04      	cmp	r3, #4
 8004540:	bf02      	ittt	eq
 8004542:	68e5      	ldreq	r5, [r4, #12]
 8004544:	6833      	ldreq	r3, [r6, #0]
 8004546:	1aed      	subeq	r5, r5, r3
 8004548:	68a3      	ldr	r3, [r4, #8]
 800454a:	bf0c      	ite	eq
 800454c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004550:	2500      	movne	r5, #0
 8004552:	4293      	cmp	r3, r2
 8004554:	bfc4      	itt	gt
 8004556:	1a9b      	subgt	r3, r3, r2
 8004558:	18ed      	addgt	r5, r5, r3
 800455a:	2600      	movs	r6, #0
 800455c:	341a      	adds	r4, #26
 800455e:	42b5      	cmp	r5, r6
 8004560:	d11a      	bne.n	8004598 <_printf_common+0xc8>
 8004562:	2000      	movs	r0, #0
 8004564:	e008      	b.n	8004578 <_printf_common+0xa8>
 8004566:	2301      	movs	r3, #1
 8004568:	4652      	mov	r2, sl
 800456a:	4641      	mov	r1, r8
 800456c:	4638      	mov	r0, r7
 800456e:	47c8      	blx	r9
 8004570:	3001      	adds	r0, #1
 8004572:	d103      	bne.n	800457c <_printf_common+0xac>
 8004574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457c:	3501      	adds	r5, #1
 800457e:	e7c6      	b.n	800450e <_printf_common+0x3e>
 8004580:	18e1      	adds	r1, r4, r3
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	2030      	movs	r0, #48	@ 0x30
 8004586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800458a:	4422      	add	r2, r4
 800458c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004594:	3302      	adds	r3, #2
 8004596:	e7c7      	b.n	8004528 <_printf_common+0x58>
 8004598:	2301      	movs	r3, #1
 800459a:	4622      	mov	r2, r4
 800459c:	4641      	mov	r1, r8
 800459e:	4638      	mov	r0, r7
 80045a0:	47c8      	blx	r9
 80045a2:	3001      	adds	r0, #1
 80045a4:	d0e6      	beq.n	8004574 <_printf_common+0xa4>
 80045a6:	3601      	adds	r6, #1
 80045a8:	e7d9      	b.n	800455e <_printf_common+0x8e>
	...

080045ac <_printf_i>:
 80045ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045b0:	7e0f      	ldrb	r7, [r1, #24]
 80045b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045b4:	2f78      	cmp	r7, #120	@ 0x78
 80045b6:	4691      	mov	r9, r2
 80045b8:	4680      	mov	r8, r0
 80045ba:	460c      	mov	r4, r1
 80045bc:	469a      	mov	sl, r3
 80045be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045c2:	d807      	bhi.n	80045d4 <_printf_i+0x28>
 80045c4:	2f62      	cmp	r7, #98	@ 0x62
 80045c6:	d80a      	bhi.n	80045de <_printf_i+0x32>
 80045c8:	2f00      	cmp	r7, #0
 80045ca:	f000 80d1 	beq.w	8004770 <_printf_i+0x1c4>
 80045ce:	2f58      	cmp	r7, #88	@ 0x58
 80045d0:	f000 80b8 	beq.w	8004744 <_printf_i+0x198>
 80045d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045dc:	e03a      	b.n	8004654 <_printf_i+0xa8>
 80045de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045e2:	2b15      	cmp	r3, #21
 80045e4:	d8f6      	bhi.n	80045d4 <_printf_i+0x28>
 80045e6:	a101      	add	r1, pc, #4	@ (adr r1, 80045ec <_printf_i+0x40>)
 80045e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045ec:	08004645 	.word	0x08004645
 80045f0:	08004659 	.word	0x08004659
 80045f4:	080045d5 	.word	0x080045d5
 80045f8:	080045d5 	.word	0x080045d5
 80045fc:	080045d5 	.word	0x080045d5
 8004600:	080045d5 	.word	0x080045d5
 8004604:	08004659 	.word	0x08004659
 8004608:	080045d5 	.word	0x080045d5
 800460c:	080045d5 	.word	0x080045d5
 8004610:	080045d5 	.word	0x080045d5
 8004614:	080045d5 	.word	0x080045d5
 8004618:	08004757 	.word	0x08004757
 800461c:	08004683 	.word	0x08004683
 8004620:	08004711 	.word	0x08004711
 8004624:	080045d5 	.word	0x080045d5
 8004628:	080045d5 	.word	0x080045d5
 800462c:	08004779 	.word	0x08004779
 8004630:	080045d5 	.word	0x080045d5
 8004634:	08004683 	.word	0x08004683
 8004638:	080045d5 	.word	0x080045d5
 800463c:	080045d5 	.word	0x080045d5
 8004640:	08004719 	.word	0x08004719
 8004644:	6833      	ldr	r3, [r6, #0]
 8004646:	1d1a      	adds	r2, r3, #4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6032      	str	r2, [r6, #0]
 800464c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004654:	2301      	movs	r3, #1
 8004656:	e09c      	b.n	8004792 <_printf_i+0x1e6>
 8004658:	6833      	ldr	r3, [r6, #0]
 800465a:	6820      	ldr	r0, [r4, #0]
 800465c:	1d19      	adds	r1, r3, #4
 800465e:	6031      	str	r1, [r6, #0]
 8004660:	0606      	lsls	r6, r0, #24
 8004662:	d501      	bpl.n	8004668 <_printf_i+0xbc>
 8004664:	681d      	ldr	r5, [r3, #0]
 8004666:	e003      	b.n	8004670 <_printf_i+0xc4>
 8004668:	0645      	lsls	r5, r0, #25
 800466a:	d5fb      	bpl.n	8004664 <_printf_i+0xb8>
 800466c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004670:	2d00      	cmp	r5, #0
 8004672:	da03      	bge.n	800467c <_printf_i+0xd0>
 8004674:	232d      	movs	r3, #45	@ 0x2d
 8004676:	426d      	negs	r5, r5
 8004678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800467c:	4858      	ldr	r0, [pc, #352]	@ (80047e0 <_printf_i+0x234>)
 800467e:	230a      	movs	r3, #10
 8004680:	e011      	b.n	80046a6 <_printf_i+0xfa>
 8004682:	6821      	ldr	r1, [r4, #0]
 8004684:	6833      	ldr	r3, [r6, #0]
 8004686:	0608      	lsls	r0, r1, #24
 8004688:	f853 5b04 	ldr.w	r5, [r3], #4
 800468c:	d402      	bmi.n	8004694 <_printf_i+0xe8>
 800468e:	0649      	lsls	r1, r1, #25
 8004690:	bf48      	it	mi
 8004692:	b2ad      	uxthmi	r5, r5
 8004694:	2f6f      	cmp	r7, #111	@ 0x6f
 8004696:	4852      	ldr	r0, [pc, #328]	@ (80047e0 <_printf_i+0x234>)
 8004698:	6033      	str	r3, [r6, #0]
 800469a:	bf14      	ite	ne
 800469c:	230a      	movne	r3, #10
 800469e:	2308      	moveq	r3, #8
 80046a0:	2100      	movs	r1, #0
 80046a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046a6:	6866      	ldr	r6, [r4, #4]
 80046a8:	60a6      	str	r6, [r4, #8]
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	db05      	blt.n	80046ba <_printf_i+0x10e>
 80046ae:	6821      	ldr	r1, [r4, #0]
 80046b0:	432e      	orrs	r6, r5
 80046b2:	f021 0104 	bic.w	r1, r1, #4
 80046b6:	6021      	str	r1, [r4, #0]
 80046b8:	d04b      	beq.n	8004752 <_printf_i+0x1a6>
 80046ba:	4616      	mov	r6, r2
 80046bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80046c0:	fb03 5711 	mls	r7, r3, r1, r5
 80046c4:	5dc7      	ldrb	r7, [r0, r7]
 80046c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046ca:	462f      	mov	r7, r5
 80046cc:	42bb      	cmp	r3, r7
 80046ce:	460d      	mov	r5, r1
 80046d0:	d9f4      	bls.n	80046bc <_printf_i+0x110>
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d10b      	bne.n	80046ee <_printf_i+0x142>
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	07df      	lsls	r7, r3, #31
 80046da:	d508      	bpl.n	80046ee <_printf_i+0x142>
 80046dc:	6923      	ldr	r3, [r4, #16]
 80046de:	6861      	ldr	r1, [r4, #4]
 80046e0:	4299      	cmp	r1, r3
 80046e2:	bfde      	ittt	le
 80046e4:	2330      	movle	r3, #48	@ 0x30
 80046e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046ea:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80046ee:	1b92      	subs	r2, r2, r6
 80046f0:	6122      	str	r2, [r4, #16]
 80046f2:	f8cd a000 	str.w	sl, [sp]
 80046f6:	464b      	mov	r3, r9
 80046f8:	aa03      	add	r2, sp, #12
 80046fa:	4621      	mov	r1, r4
 80046fc:	4640      	mov	r0, r8
 80046fe:	f7ff fee7 	bl	80044d0 <_printf_common>
 8004702:	3001      	adds	r0, #1
 8004704:	d14a      	bne.n	800479c <_printf_i+0x1f0>
 8004706:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800470a:	b004      	add	sp, #16
 800470c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	f043 0320 	orr.w	r3, r3, #32
 8004716:	6023      	str	r3, [r4, #0]
 8004718:	4832      	ldr	r0, [pc, #200]	@ (80047e4 <_printf_i+0x238>)
 800471a:	2778      	movs	r7, #120	@ 0x78
 800471c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	6831      	ldr	r1, [r6, #0]
 8004724:	061f      	lsls	r7, r3, #24
 8004726:	f851 5b04 	ldr.w	r5, [r1], #4
 800472a:	d402      	bmi.n	8004732 <_printf_i+0x186>
 800472c:	065f      	lsls	r7, r3, #25
 800472e:	bf48      	it	mi
 8004730:	b2ad      	uxthmi	r5, r5
 8004732:	6031      	str	r1, [r6, #0]
 8004734:	07d9      	lsls	r1, r3, #31
 8004736:	bf44      	itt	mi
 8004738:	f043 0320 	orrmi.w	r3, r3, #32
 800473c:	6023      	strmi	r3, [r4, #0]
 800473e:	b11d      	cbz	r5, 8004748 <_printf_i+0x19c>
 8004740:	2310      	movs	r3, #16
 8004742:	e7ad      	b.n	80046a0 <_printf_i+0xf4>
 8004744:	4826      	ldr	r0, [pc, #152]	@ (80047e0 <_printf_i+0x234>)
 8004746:	e7e9      	b.n	800471c <_printf_i+0x170>
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	f023 0320 	bic.w	r3, r3, #32
 800474e:	6023      	str	r3, [r4, #0]
 8004750:	e7f6      	b.n	8004740 <_printf_i+0x194>
 8004752:	4616      	mov	r6, r2
 8004754:	e7bd      	b.n	80046d2 <_printf_i+0x126>
 8004756:	6833      	ldr	r3, [r6, #0]
 8004758:	6825      	ldr	r5, [r4, #0]
 800475a:	6961      	ldr	r1, [r4, #20]
 800475c:	1d18      	adds	r0, r3, #4
 800475e:	6030      	str	r0, [r6, #0]
 8004760:	062e      	lsls	r6, r5, #24
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	d501      	bpl.n	800476a <_printf_i+0x1be>
 8004766:	6019      	str	r1, [r3, #0]
 8004768:	e002      	b.n	8004770 <_printf_i+0x1c4>
 800476a:	0668      	lsls	r0, r5, #25
 800476c:	d5fb      	bpl.n	8004766 <_printf_i+0x1ba>
 800476e:	8019      	strh	r1, [r3, #0]
 8004770:	2300      	movs	r3, #0
 8004772:	6123      	str	r3, [r4, #16]
 8004774:	4616      	mov	r6, r2
 8004776:	e7bc      	b.n	80046f2 <_printf_i+0x146>
 8004778:	6833      	ldr	r3, [r6, #0]
 800477a:	1d1a      	adds	r2, r3, #4
 800477c:	6032      	str	r2, [r6, #0]
 800477e:	681e      	ldr	r6, [r3, #0]
 8004780:	6862      	ldr	r2, [r4, #4]
 8004782:	2100      	movs	r1, #0
 8004784:	4630      	mov	r0, r6
 8004786:	f7fb fd23 	bl	80001d0 <memchr>
 800478a:	b108      	cbz	r0, 8004790 <_printf_i+0x1e4>
 800478c:	1b80      	subs	r0, r0, r6
 800478e:	6060      	str	r0, [r4, #4]
 8004790:	6863      	ldr	r3, [r4, #4]
 8004792:	6123      	str	r3, [r4, #16]
 8004794:	2300      	movs	r3, #0
 8004796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800479a:	e7aa      	b.n	80046f2 <_printf_i+0x146>
 800479c:	6923      	ldr	r3, [r4, #16]
 800479e:	4632      	mov	r2, r6
 80047a0:	4649      	mov	r1, r9
 80047a2:	4640      	mov	r0, r8
 80047a4:	47d0      	blx	sl
 80047a6:	3001      	adds	r0, #1
 80047a8:	d0ad      	beq.n	8004706 <_printf_i+0x15a>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	079b      	lsls	r3, r3, #30
 80047ae:	d413      	bmi.n	80047d8 <_printf_i+0x22c>
 80047b0:	68e0      	ldr	r0, [r4, #12]
 80047b2:	9b03      	ldr	r3, [sp, #12]
 80047b4:	4298      	cmp	r0, r3
 80047b6:	bfb8      	it	lt
 80047b8:	4618      	movlt	r0, r3
 80047ba:	e7a6      	b.n	800470a <_printf_i+0x15e>
 80047bc:	2301      	movs	r3, #1
 80047be:	4632      	mov	r2, r6
 80047c0:	4649      	mov	r1, r9
 80047c2:	4640      	mov	r0, r8
 80047c4:	47d0      	blx	sl
 80047c6:	3001      	adds	r0, #1
 80047c8:	d09d      	beq.n	8004706 <_printf_i+0x15a>
 80047ca:	3501      	adds	r5, #1
 80047cc:	68e3      	ldr	r3, [r4, #12]
 80047ce:	9903      	ldr	r1, [sp, #12]
 80047d0:	1a5b      	subs	r3, r3, r1
 80047d2:	42ab      	cmp	r3, r5
 80047d4:	dcf2      	bgt.n	80047bc <_printf_i+0x210>
 80047d6:	e7eb      	b.n	80047b0 <_printf_i+0x204>
 80047d8:	2500      	movs	r5, #0
 80047da:	f104 0619 	add.w	r6, r4, #25
 80047de:	e7f5      	b.n	80047cc <_printf_i+0x220>
 80047e0:	08004a6d 	.word	0x08004a6d
 80047e4:	08004a7e 	.word	0x08004a7e

080047e8 <__malloc_lock>:
 80047e8:	4801      	ldr	r0, [pc, #4]	@ (80047f0 <__malloc_lock+0x8>)
 80047ea:	f7ff bc67 	b.w	80040bc <__retarget_lock_acquire_recursive>
 80047ee:	bf00      	nop
 80047f0:	20002b54 	.word	0x20002b54

080047f4 <__malloc_unlock>:
 80047f4:	4801      	ldr	r0, [pc, #4]	@ (80047fc <__malloc_unlock+0x8>)
 80047f6:	f7ff bc62 	b.w	80040be <__retarget_lock_release_recursive>
 80047fa:	bf00      	nop
 80047fc:	20002b54 	.word	0x20002b54

08004800 <_realloc_r>:
 8004800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004804:	4607      	mov	r7, r0
 8004806:	4614      	mov	r4, r2
 8004808:	460d      	mov	r5, r1
 800480a:	b921      	cbnz	r1, 8004816 <_realloc_r+0x16>
 800480c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004810:	4611      	mov	r1, r2
 8004812:	f7ff bddd 	b.w	80043d0 <_malloc_r>
 8004816:	b92a      	cbnz	r2, 8004824 <_realloc_r+0x24>
 8004818:	f000 f84a 	bl	80048b0 <_free_r>
 800481c:	4625      	mov	r5, r4
 800481e:	4628      	mov	r0, r5
 8004820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004824:	f000 f88e 	bl	8004944 <_malloc_usable_size_r>
 8004828:	4284      	cmp	r4, r0
 800482a:	4606      	mov	r6, r0
 800482c:	d802      	bhi.n	8004834 <_realloc_r+0x34>
 800482e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004832:	d8f4      	bhi.n	800481e <_realloc_r+0x1e>
 8004834:	4621      	mov	r1, r4
 8004836:	4638      	mov	r0, r7
 8004838:	f7ff fdca 	bl	80043d0 <_malloc_r>
 800483c:	4680      	mov	r8, r0
 800483e:	b908      	cbnz	r0, 8004844 <_realloc_r+0x44>
 8004840:	4645      	mov	r5, r8
 8004842:	e7ec      	b.n	800481e <_realloc_r+0x1e>
 8004844:	42b4      	cmp	r4, r6
 8004846:	4622      	mov	r2, r4
 8004848:	4629      	mov	r1, r5
 800484a:	bf28      	it	cs
 800484c:	4632      	movcs	r2, r6
 800484e:	f7ff fc37 	bl	80040c0 <memcpy>
 8004852:	4629      	mov	r1, r5
 8004854:	4638      	mov	r0, r7
 8004856:	f000 f82b 	bl	80048b0 <_free_r>
 800485a:	e7f1      	b.n	8004840 <_realloc_r+0x40>

0800485c <memmove>:
 800485c:	4288      	cmp	r0, r1
 800485e:	b510      	push	{r4, lr}
 8004860:	eb01 0402 	add.w	r4, r1, r2
 8004864:	d902      	bls.n	800486c <memmove+0x10>
 8004866:	4284      	cmp	r4, r0
 8004868:	4623      	mov	r3, r4
 800486a:	d807      	bhi.n	800487c <memmove+0x20>
 800486c:	1e43      	subs	r3, r0, #1
 800486e:	42a1      	cmp	r1, r4
 8004870:	d008      	beq.n	8004884 <memmove+0x28>
 8004872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800487a:	e7f8      	b.n	800486e <memmove+0x12>
 800487c:	4402      	add	r2, r0
 800487e:	4601      	mov	r1, r0
 8004880:	428a      	cmp	r2, r1
 8004882:	d100      	bne.n	8004886 <memmove+0x2a>
 8004884:	bd10      	pop	{r4, pc}
 8004886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800488a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800488e:	e7f7      	b.n	8004880 <memmove+0x24>

08004890 <_sbrk_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	4d06      	ldr	r5, [pc, #24]	@ (80048ac <_sbrk_r+0x1c>)
 8004894:	2300      	movs	r3, #0
 8004896:	4604      	mov	r4, r0
 8004898:	4608      	mov	r0, r1
 800489a:	602b      	str	r3, [r5, #0]
 800489c:	f7fb fe72 	bl	8000584 <_sbrk>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	d102      	bne.n	80048aa <_sbrk_r+0x1a>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	b103      	cbz	r3, 80048aa <_sbrk_r+0x1a>
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	20002b60 	.word	0x20002b60

080048b0 <_free_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4605      	mov	r5, r0
 80048b4:	2900      	cmp	r1, #0
 80048b6:	d041      	beq.n	800493c <_free_r+0x8c>
 80048b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048bc:	1f0c      	subs	r4, r1, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bfb8      	it	lt
 80048c2:	18e4      	addlt	r4, r4, r3
 80048c4:	f7ff ff90 	bl	80047e8 <__malloc_lock>
 80048c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004940 <_free_r+0x90>)
 80048ca:	6813      	ldr	r3, [r2, #0]
 80048cc:	b933      	cbnz	r3, 80048dc <_free_r+0x2c>
 80048ce:	6063      	str	r3, [r4, #4]
 80048d0:	6014      	str	r4, [r2, #0]
 80048d2:	4628      	mov	r0, r5
 80048d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048d8:	f7ff bf8c 	b.w	80047f4 <__malloc_unlock>
 80048dc:	42a3      	cmp	r3, r4
 80048de:	d908      	bls.n	80048f2 <_free_r+0x42>
 80048e0:	6820      	ldr	r0, [r4, #0]
 80048e2:	1821      	adds	r1, r4, r0
 80048e4:	428b      	cmp	r3, r1
 80048e6:	bf01      	itttt	eq
 80048e8:	6819      	ldreq	r1, [r3, #0]
 80048ea:	685b      	ldreq	r3, [r3, #4]
 80048ec:	1809      	addeq	r1, r1, r0
 80048ee:	6021      	streq	r1, [r4, #0]
 80048f0:	e7ed      	b.n	80048ce <_free_r+0x1e>
 80048f2:	461a      	mov	r2, r3
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	b10b      	cbz	r3, 80048fc <_free_r+0x4c>
 80048f8:	42a3      	cmp	r3, r4
 80048fa:	d9fa      	bls.n	80048f2 <_free_r+0x42>
 80048fc:	6811      	ldr	r1, [r2, #0]
 80048fe:	1850      	adds	r0, r2, r1
 8004900:	42a0      	cmp	r0, r4
 8004902:	d10b      	bne.n	800491c <_free_r+0x6c>
 8004904:	6820      	ldr	r0, [r4, #0]
 8004906:	4401      	add	r1, r0
 8004908:	1850      	adds	r0, r2, r1
 800490a:	4283      	cmp	r3, r0
 800490c:	6011      	str	r1, [r2, #0]
 800490e:	d1e0      	bne.n	80048d2 <_free_r+0x22>
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	6053      	str	r3, [r2, #4]
 8004916:	4408      	add	r0, r1
 8004918:	6010      	str	r0, [r2, #0]
 800491a:	e7da      	b.n	80048d2 <_free_r+0x22>
 800491c:	d902      	bls.n	8004924 <_free_r+0x74>
 800491e:	230c      	movs	r3, #12
 8004920:	602b      	str	r3, [r5, #0]
 8004922:	e7d6      	b.n	80048d2 <_free_r+0x22>
 8004924:	6820      	ldr	r0, [r4, #0]
 8004926:	1821      	adds	r1, r4, r0
 8004928:	428b      	cmp	r3, r1
 800492a:	bf04      	itt	eq
 800492c:	6819      	ldreq	r1, [r3, #0]
 800492e:	685b      	ldreq	r3, [r3, #4]
 8004930:	6063      	str	r3, [r4, #4]
 8004932:	bf04      	itt	eq
 8004934:	1809      	addeq	r1, r1, r0
 8004936:	6021      	streq	r1, [r4, #0]
 8004938:	6054      	str	r4, [r2, #4]
 800493a:	e7ca      	b.n	80048d2 <_free_r+0x22>
 800493c:	bd38      	pop	{r3, r4, r5, pc}
 800493e:	bf00      	nop
 8004940:	20002b5c 	.word	0x20002b5c

08004944 <_malloc_usable_size_r>:
 8004944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004948:	1f18      	subs	r0, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	bfbc      	itt	lt
 800494e:	580b      	ldrlt	r3, [r1, r0]
 8004950:	18c0      	addlt	r0, r0, r3
 8004952:	4770      	bx	lr

08004954 <_init>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr

08004960 <_fini>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr
