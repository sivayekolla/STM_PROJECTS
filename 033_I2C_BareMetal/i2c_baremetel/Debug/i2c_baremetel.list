
i2c_baremetel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000474  08000474  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000474  08000474  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000474  08000474  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000474  08000474  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000474  08000474  00001474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000478  08000478  00001478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800047c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000480  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000480  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001750  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000051d  00000000  00000000  00003784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000218  00000000  00000000  00003ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000017b  00000000  00000000  00003ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f86  00000000  00000000  0000403b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002156  00000000  00000000  00027fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1a57  00000000  00000000  0002a117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010bb6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006bc  00000000  00000000  0010bbb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0010c270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800045c 	.word	0x0800045c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800045c 	.word	0x0800045c

080001c8 <main>:
void delay_ms(uint32_t ms);
void I2C1_Init(void);
void I2C1_Send(uint8_t data);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    I2C1_Init();
 80001cc:	f000 f80a 	bl	80001e4 <I2C1_Init>

    while (1)
    {
        I2C1_Send('A'); // send one byte
 80001d0:	2041      	movs	r0, #65	@ 0x41
 80001d2:	f000 f85b 	bl	800028c <I2C1_Send>
        delay_ms(1000);
 80001d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001da:	f000 f881 	bl	80002e0 <delay_ms>
        I2C1_Send('A'); // send one byte
 80001de:	bf00      	nop
 80001e0:	e7f6      	b.n	80001d0 <main+0x8>
	...

080001e4 <I2C1_Init>:
    }
}

void I2C1_Init(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
    // Enable GPIOB and I2C1 clocks
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 80001e8:	4b24      	ldr	r3, [pc, #144]	@ (800027c <I2C1_Init+0x98>)
 80001ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001ec:	4a23      	ldr	r2, [pc, #140]	@ (800027c <I2C1_Init+0x98>)
 80001ee:	f043 0302 	orr.w	r3, r3, #2
 80001f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN;
 80001f4:	4b21      	ldr	r3, [pc, #132]	@ (800027c <I2C1_Init+0x98>)
 80001f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001f8:	4a20      	ldr	r2, [pc, #128]	@ (800027c <I2C1_Init+0x98>)
 80001fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001fe:	6593      	str	r3, [r2, #88]	@ 0x58

    // Configure PB6 -> SCL, PB7 -> SDA (AF4)
    GPIOB->MODER &= ~((3 << (6 * 2)) | (3 << (7 * 2)));
 8000200:	4b1f      	ldr	r3, [pc, #124]	@ (8000280 <I2C1_Init+0x9c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a1e      	ldr	r2, [pc, #120]	@ (8000280 <I2C1_Init+0x9c>)
 8000206:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800020a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ((2 << (6 * 2)) | (2 << (7 * 2)));  // AF mode
 800020c:	4b1c      	ldr	r3, [pc, #112]	@ (8000280 <I2C1_Init+0x9c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1b      	ldr	r2, [pc, #108]	@ (8000280 <I2C1_Init+0x9c>)
 8000212:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000216:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << 6) | (1 << 7);               // Open-drain
 8000218:	4b19      	ldr	r3, [pc, #100]	@ (8000280 <I2C1_Init+0x9c>)
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	4a18      	ldr	r2, [pc, #96]	@ (8000280 <I2C1_Init+0x9c>)
 800021e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000222:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3 << (6 * 2)) | (3 << (7 * 2));  // High speed
 8000224:	4b16      	ldr	r3, [pc, #88]	@ (8000280 <I2C1_Init+0x9c>)
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	4a15      	ldr	r2, [pc, #84]	@ (8000280 <I2C1_Init+0x9c>)
 800022a:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 800022e:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~((3 << (6 * 2)) | (3 << (7 * 2)));
 8000230:	4b13      	ldr	r3, [pc, #76]	@ (8000280 <I2C1_Init+0x9c>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	4a12      	ldr	r2, [pc, #72]	@ (8000280 <I2C1_Init+0x9c>)
 8000236:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800023a:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= ((1 << (6 * 2)) | (1 << (7 * 2)));  // Pull-up
 800023c:	4b10      	ldr	r3, [pc, #64]	@ (8000280 <I2C1_Init+0x9c>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	4a0f      	ldr	r2, [pc, #60]	@ (8000280 <I2C1_Init+0x9c>)
 8000242:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8000246:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[0] |= (4 << (6 * 4)) | (4 << (7 * 4));   // AF4 = I2C1
 8000248:	4b0d      	ldr	r3, [pc, #52]	@ (8000280 <I2C1_Init+0x9c>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a0c      	ldr	r2, [pc, #48]	@ (8000280 <I2C1_Init+0x9c>)
 800024e:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 8000252:	6213      	str	r3, [r2, #32]

    // Reset I2C1
    I2C1->CR1 &= ~I2C_CR1_PE;
 8000254:	4b0b      	ldr	r3, [pc, #44]	@ (8000284 <I2C1_Init+0xa0>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a0a      	ldr	r2, [pc, #40]	@ (8000284 <I2C1_Init+0xa0>)
 800025a:	f023 0301 	bic.w	r3, r3, #1
 800025e:	6013      	str	r3, [r2, #0]

    // Configure timing register (for 100kHz @16MHz)
    I2C1->TIMINGR = 0x00303D5B;
 8000260:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <I2C1_Init+0xa0>)
 8000262:	4a09      	ldr	r2, [pc, #36]	@ (8000288 <I2C1_Init+0xa4>)
 8000264:	611a      	str	r2, [r3, #16]

    // Enable I2C1 peripheral
    I2C1->CR1 |= I2C_CR1_PE;
 8000266:	4b07      	ldr	r3, [pc, #28]	@ (8000284 <I2C1_Init+0xa0>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a06      	ldr	r2, [pc, #24]	@ (8000284 <I2C1_Init+0xa0>)
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	6013      	str	r3, [r2, #0]
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	40021000 	.word	0x40021000
 8000280:	48000400 	.word	0x48000400
 8000284:	40005400 	.word	0x40005400
 8000288:	00303d5b 	.word	0x00303d5b

0800028c <I2C1_Send>:

void I2C1_Send(uint8_t data)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
    // Start + Write 1 byte
    I2C1->CR2 = (SLAVE_ADDR << 1) | (1 << 16) | (1 << 13); // 1 byte, write, start
 8000296:	4b10      	ldr	r3, [pc, #64]	@ (80002d8 <I2C1_Send+0x4c>)
 8000298:	4a10      	ldr	r2, [pc, #64]	@ (80002dc <I2C1_Send+0x50>)
 800029a:	605a      	str	r2, [r3, #4]

    // Wait until TXIS flag set
    while (!(I2C1->ISR & I2C_ISR_TXIS));
 800029c:	bf00      	nop
 800029e:	4b0e      	ldr	r3, [pc, #56]	@ (80002d8 <I2C1_Send+0x4c>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	f003 0302 	and.w	r3, r3, #2
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d0f9      	beq.n	800029e <I2C1_Send+0x12>

    I2C1->TXDR = data; // Write data
 80002aa:	4a0b      	ldr	r2, [pc, #44]	@ (80002d8 <I2C1_Send+0x4c>)
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	6293      	str	r3, [r2, #40]	@ 0x28

    // Wait for TC (Transfer Complete)
    while (!(I2C1->ISR & I2C_ISR_TC));
 80002b0:	bf00      	nop
 80002b2:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <I2C1_Send+0x4c>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d0f9      	beq.n	80002b2 <I2C1_Send+0x26>

    // Stop condition
    I2C1->CR2 |= I2C_CR2_STOP;
 80002be:	4b06      	ldr	r3, [pc, #24]	@ (80002d8 <I2C1_Send+0x4c>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	4a05      	ldr	r2, [pc, #20]	@ (80002d8 <I2C1_Send+0x4c>)
 80002c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002c8:	6053      	str	r3, [r2, #4]
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40005400 	.word	0x40005400
 80002dc:	00012050 	.word	0x00012050

080002e0 <delay_ms>:

void delay_ms(uint32_t ms)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms * 4000; i++) __NOP();
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	e003      	b.n	80002f6 <delay_ms+0x16>
 80002ee:	bf00      	nop
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	3301      	adds	r3, #1
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80002fc:	fb02 f303 	mul.w	r3, r2, r3
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	429a      	cmp	r2, r3
 8000304:	d3f3      	bcc.n	80002ee <delay_ms+0xe>
}
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000318:	bf00      	nop
 800031a:	e7fd      	b.n	8000318 <NMI_Handler+0x4>

0800031c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <HardFault_Handler+0x4>

08000324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000328:	bf00      	nop
 800032a:	e7fd      	b.n	8000328 <MemManage_Handler+0x4>

0800032c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <BusFault_Handler+0x4>

08000334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <UsageFault_Handler+0x4>

0800033c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr

0800034a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr

08000366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800036a:	f000 f83f 	bl	80003ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <SystemInit+0x20>)
 800037a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800037e:	4a05      	ldr	r2, [pc, #20]	@ (8000394 <SystemInit+0x20>)
 8000380:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000384:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	e000ed00 	.word	0xe000ed00

08000398 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800039c:	f7ff ffea 	bl	8000374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a0:	480c      	ldr	r0, [pc, #48]	@ (80003d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a2:	490d      	ldr	r1, [pc, #52]	@ (80003d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a4:	4a0d      	ldr	r2, [pc, #52]	@ (80003dc <LoopForever+0xe>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a8:	e002      	b.n	80003b0 <LoopCopyDataInit>

080003aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ae:	3304      	adds	r3, #4

080003b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b4:	d3f9      	bcc.n	80003aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b6:	4a0a      	ldr	r2, [pc, #40]	@ (80003e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b8:	4c0a      	ldr	r4, [pc, #40]	@ (80003e4 <LoopForever+0x16>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003bc:	e001      	b.n	80003c2 <LoopFillZerobss>

080003be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c0:	3204      	adds	r2, #4

080003c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c4:	d3fb      	bcc.n	80003be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003c6:	f000 f825 	bl	8000414 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003ca:	f7ff fefd 	bl	80001c8 <main>

080003ce <LoopForever>:

LoopForever:
    b LoopForever
 80003ce:	e7fe      	b.n	80003ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80003d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003dc:	0800047c 	.word	0x0800047c
  ldr r2, =_sbss
 80003e0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003e4:	20000024 	.word	0x20000024

080003e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003e8:	e7fe      	b.n	80003e8 <ADC1_2_IRQHandler>
	...

080003ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <HAL_IncTick+0x20>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <HAL_IncTick+0x24>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4413      	add	r3, r2
 80003fc:	4a04      	ldr	r2, [pc, #16]	@ (8000410 <HAL_IncTick+0x24>)
 80003fe:	6013      	str	r3, [r2, #0]
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	20000000 	.word	0x20000000
 8000410:	20000020 	.word	0x20000020

08000414 <__libc_init_array>:
 8000414:	b570      	push	{r4, r5, r6, lr}
 8000416:	4d0d      	ldr	r5, [pc, #52]	@ (800044c <__libc_init_array+0x38>)
 8000418:	4c0d      	ldr	r4, [pc, #52]	@ (8000450 <__libc_init_array+0x3c>)
 800041a:	1b64      	subs	r4, r4, r5
 800041c:	10a4      	asrs	r4, r4, #2
 800041e:	2600      	movs	r6, #0
 8000420:	42a6      	cmp	r6, r4
 8000422:	d109      	bne.n	8000438 <__libc_init_array+0x24>
 8000424:	4d0b      	ldr	r5, [pc, #44]	@ (8000454 <__libc_init_array+0x40>)
 8000426:	4c0c      	ldr	r4, [pc, #48]	@ (8000458 <__libc_init_array+0x44>)
 8000428:	f000 f818 	bl	800045c <_init>
 800042c:	1b64      	subs	r4, r4, r5
 800042e:	10a4      	asrs	r4, r4, #2
 8000430:	2600      	movs	r6, #0
 8000432:	42a6      	cmp	r6, r4
 8000434:	d105      	bne.n	8000442 <__libc_init_array+0x2e>
 8000436:	bd70      	pop	{r4, r5, r6, pc}
 8000438:	f855 3b04 	ldr.w	r3, [r5], #4
 800043c:	4798      	blx	r3
 800043e:	3601      	adds	r6, #1
 8000440:	e7ee      	b.n	8000420 <__libc_init_array+0xc>
 8000442:	f855 3b04 	ldr.w	r3, [r5], #4
 8000446:	4798      	blx	r3
 8000448:	3601      	adds	r6, #1
 800044a:	e7f2      	b.n	8000432 <__libc_init_array+0x1e>
 800044c:	08000474 	.word	0x08000474
 8000450:	08000474 	.word	0x08000474
 8000454:	08000474 	.word	0x08000474
 8000458:	08000478 	.word	0x08000478

0800045c <_init>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	bf00      	nop
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr

08000468 <_fini>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	bf00      	nop
 800046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046e:	bc08      	pop	{r3}
 8000470:	469e      	mov	lr, r3
 8000472:	4770      	bx	lr
