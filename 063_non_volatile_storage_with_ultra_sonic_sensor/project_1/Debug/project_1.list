
project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e98  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001028  08001028  00002028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001090  08001090  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001090  08001090  00002090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001098  08001098  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001098  08001098  00002098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800109c  0800109c  0000209c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080010a0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000054  080010f4  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080010f4  000031c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c2d  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000063f  00000000  00000000  00004cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  000052f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a2  00000000  00000000  00005540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ccb4  00000000  00000000  000056e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000256d  00000000  00000000  00022396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e50e3  00000000  00000000  00024903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001099e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c9c  00000000  00000000  00109a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010a6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001010 	.word	0x08001010

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001010 	.word	0x08001010

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <delay_us>:
void UART2_SendString(char *s);
void TIM1_InputCapture_Init(void);
uint32_t Measure_Distance(void);

void delay_us(uint32_t us)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = 80 * us;          // 80 MHz â†’ 80 ticks/us
 8000278:	490e      	ldr	r1, [pc, #56]	@ (80002b4 <delay_us+0x44>)
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	4613      	mov	r3, r2
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	4413      	add	r3, r2
 8000282:	011b      	lsls	r3, r3, #4
 8000284:	604b      	str	r3, [r1, #4]
    SysTick->VAL = 0;
 8000286:	4b0b      	ldr	r3, [pc, #44]	@ (80002b4 <delay_us+0x44>)
 8000288:	2200      	movs	r2, #0
 800028a:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 5;                // Enable, no interrupt
 800028c:	4b09      	ldr	r3, [pc, #36]	@ (80002b4 <delay_us+0x44>)
 800028e:	2205      	movs	r2, #5
 8000290:	601a      	str	r2, [r3, #0]
    while (!(SysTick->CTRL & (1 << 16)));
 8000292:	bf00      	nop
 8000294:	4b07      	ldr	r3, [pc, #28]	@ (80002b4 <delay_us+0x44>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0f9      	beq.n	8000294 <delay_us+0x24>
    SysTick->CTRL = 0;
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <delay_us+0x44>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
}
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000e010 	.word	0xe000e010

080002b8 <UART2_Init>:

void UART2_Init(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80002bc:	4b17      	ldr	r3, [pc, #92]	@ (800031c <UART2_Init+0x64>)
 80002be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002c0:	4a16      	ldr	r2, [pc, #88]	@ (800031c <UART2_Init+0x64>)
 80002c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002c6:	6593      	str	r3, [r2, #88]	@ 0x58
    RCC->AHB2ENR  |= RCC_AHB2ENR_GPIOAEN;
 80002c8:	4b14      	ldr	r3, [pc, #80]	@ (800031c <UART2_Init+0x64>)
 80002ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002cc:	4a13      	ldr	r2, [pc, #76]	@ (800031c <UART2_Init+0x64>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // PA2 = TX (AF7)
    GPIOA->MODER &= ~(3 << (2 * 2));
 80002d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80002e2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2 << (2 * 2));
 80002e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002ee:	f043 0320 	orr.w	r3, r3, #32
 80002f2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << (2 * 4));
 80002f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002f8:	6a1b      	ldr	r3, [r3, #32]
 80002fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000302:	6213      	str	r3, [r2, #32]

    USART2->BRR = 80000000 / 115200;
 8000304:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <UART2_Init+0x68>)
 8000306:	f240 22b6 	movw	r2, #694	@ 0x2b6
 800030a:	60da      	str	r2, [r3, #12]
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE;
 800030c:	4b04      	ldr	r3, [pc, #16]	@ (8000320 <UART2_Init+0x68>)
 800030e:	2209      	movs	r2, #9
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000
 8000320:	40004400 	.word	0x40004400

08000324 <UART2_SendChar>:

void UART2_SendChar(char c)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE));
 800032e:	bf00      	nop
 8000330:	4b07      	ldr	r3, [pc, #28]	@ (8000350 <UART2_SendChar+0x2c>)
 8000332:	69db      	ldr	r3, [r3, #28]
 8000334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000338:	2b00      	cmp	r3, #0
 800033a:	d0f9      	beq.n	8000330 <UART2_SendChar+0xc>
    USART2->TDR = c;
 800033c:	4b04      	ldr	r3, [pc, #16]	@ (8000350 <UART2_SendChar+0x2c>)
 800033e:	79fa      	ldrb	r2, [r7, #7]
 8000340:	b292      	uxth	r2, r2
 8000342:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	40004400 	.word	0x40004400

08000354 <UART2_SendString>:

void UART2_SendString(char *s)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
    while (*s) UART2_SendChar(*s++);
 800035c:	e006      	b.n	800036c <UART2_SendString+0x18>
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	1c5a      	adds	r2, r3, #1
 8000362:	607a      	str	r2, [r7, #4]
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ffdc 	bl	8000324 <UART2_SendChar>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d1f4      	bne.n	800035e <UART2_SendString+0xa>
}
 8000374:	bf00      	nop
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <TIM1_InputCapture_Init>:

void TIM1_InputCapture_Init(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000384:	4b20      	ldr	r3, [pc, #128]	@ (8000408 <TIM1_InputCapture_Init+0x88>)
 8000386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000388:	4a1f      	ldr	r2, [pc, #124]	@ (8000408 <TIM1_InputCapture_Init+0x88>)
 800038a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800038e:	6613      	str	r3, [r2, #96]	@ 0x60
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000390:	4b1d      	ldr	r3, [pc, #116]	@ (8000408 <TIM1_InputCapture_Init+0x88>)
 8000392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000394:	4a1c      	ldr	r2, [pc, #112]	@ (8000408 <TIM1_InputCapture_Init+0x88>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // PA8 = TIM1_CH1 (AF1)
    GPIOA->MODER &= ~(3 << (8 * 2));
 800039c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003a6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80003aa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2 << (8 * 2));
 80003ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003ba:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1]  |= (1 << ((8 - 8) * 4));
 80003bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003c6:	f043 0301 	orr.w	r3, r3, #1
 80003ca:	6253      	str	r3, [r2, #36]	@ 0x24

    TIM1->PSC = 80 - 1;   // 1 MHz = 1 Âµs tick
 80003cc:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <TIM1_InputCapture_Init+0x8c>)
 80003ce:	224f      	movs	r2, #79	@ 0x4f
 80003d0:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM1->ARR = 0xFFFF;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <TIM1_InputCapture_Init+0x8c>)
 80003d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM1->CCMR1 = 1;      // CC1 as input (IC1 mapped to TI1)
 80003da:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <TIM1_InputCapture_Init+0x8c>)
 80003dc:	2201      	movs	r2, #1
 80003de:	619a      	str	r2, [r3, #24]
    TIM1->CCER  = 0;      // rising first
 80003e0:	4b0a      	ldr	r3, [pc, #40]	@ (800040c <TIM1_InputCapture_Init+0x8c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	621a      	str	r2, [r3, #32]
    TIM1->CCER |= TIM_CCER_CC1E;
 80003e6:	4b09      	ldr	r3, [pc, #36]	@ (800040c <TIM1_InputCapture_Init+0x8c>)
 80003e8:	6a1b      	ldr	r3, [r3, #32]
 80003ea:	4a08      	ldr	r2, [pc, #32]	@ (800040c <TIM1_InputCapture_Init+0x8c>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6213      	str	r3, [r2, #32]
    TIM1->CR1  |= TIM_CR1_CEN;
 80003f2:	4b06      	ldr	r3, [pc, #24]	@ (800040c <TIM1_InputCapture_Init+0x8c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a05      	ldr	r2, [pc, #20]	@ (800040c <TIM1_InputCapture_Init+0x8c>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6013      	str	r3, [r2, #0]
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	40021000 	.word	0x40021000
 800040c:	40012c00 	.word	0x40012c00

08000410 <Measure_Distance>:

uint32_t Measure_Distance(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
    uint32_t t1, t2;
    uint32_t timeout;

    // Trigger 10 Âµs pulse
    GPIOB->ODR |= (1 << TRIG_PIN);
 8000416:	4b34      	ldr	r3, [pc, #208]	@ (80004e8 <Measure_Distance+0xd8>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a33      	ldr	r2, [pc, #204]	@ (80004e8 <Measure_Distance+0xd8>)
 800041c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000420:	6153      	str	r3, [r2, #20]
    delay_us(10);
 8000422:	200a      	movs	r0, #10
 8000424:	f7ff ff24 	bl	8000270 <delay_us>
    GPIOB->ODR &= ~(1 << TRIG_PIN);
 8000428:	4b2f      	ldr	r3, [pc, #188]	@ (80004e8 <Measure_Distance+0xd8>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4a2e      	ldr	r2, [pc, #184]	@ (80004e8 <Measure_Distance+0xd8>)
 800042e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000432:	6153      	str	r3, [r2, #20]

    // Wait for rising edge
    timeout = 30000;
 8000434:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000438:	60fb      	str	r3, [r7, #12]
    while (!(TIM1->SR & TIM_SR_CC1IF))
 800043a:	e007      	b.n	800044c <Measure_Distance+0x3c>
        if (--timeout == 0) return 0;
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	3b01      	subs	r3, #1
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d101      	bne.n	800044c <Measure_Distance+0x3c>
 8000448:	2300      	movs	r3, #0
 800044a:	e049      	b.n	80004e0 <Measure_Distance+0xd0>
    while (!(TIM1->SR & TIM_SR_CC1IF))
 800044c:	4b27      	ldr	r3, [pc, #156]	@ (80004ec <Measure_Distance+0xdc>)
 800044e:	691b      	ldr	r3, [r3, #16]
 8000450:	f003 0302 	and.w	r3, r3, #2
 8000454:	2b00      	cmp	r3, #0
 8000456:	d0f1      	beq.n	800043c <Measure_Distance+0x2c>
    TIM1->SR &= ~TIM_SR_CC1IF;
 8000458:	4b24      	ldr	r3, [pc, #144]	@ (80004ec <Measure_Distance+0xdc>)
 800045a:	691b      	ldr	r3, [r3, #16]
 800045c:	4a23      	ldr	r2, [pc, #140]	@ (80004ec <Measure_Distance+0xdc>)
 800045e:	f023 0302 	bic.w	r3, r3, #2
 8000462:	6113      	str	r3, [r2, #16]
    t1 = TIM1->CCR1;
 8000464:	4b21      	ldr	r3, [pc, #132]	@ (80004ec <Measure_Distance+0xdc>)
 8000466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000468:	60bb      	str	r3, [r7, #8]

    // Change to falling edge
    TIM1->CCER |= TIM_CCER_CC1P;
 800046a:	4b20      	ldr	r3, [pc, #128]	@ (80004ec <Measure_Distance+0xdc>)
 800046c:	6a1b      	ldr	r3, [r3, #32]
 800046e:	4a1f      	ldr	r2, [pc, #124]	@ (80004ec <Measure_Distance+0xdc>)
 8000470:	f043 0302 	orr.w	r3, r3, #2
 8000474:	6213      	str	r3, [r2, #32]

    // Wait for falling edge
    timeout = 60000;
 8000476:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800047a:	60fb      	str	r3, [r7, #12]
    while (!(TIM1->SR & TIM_SR_CC1IF))
 800047c:	e007      	b.n	800048e <Measure_Distance+0x7e>
        if (--timeout == 0) return 0;
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	3b01      	subs	r3, #1
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d101      	bne.n	800048e <Measure_Distance+0x7e>
 800048a:	2300      	movs	r3, #0
 800048c:	e028      	b.n	80004e0 <Measure_Distance+0xd0>
    while (!(TIM1->SR & TIM_SR_CC1IF))
 800048e:	4b17      	ldr	r3, [pc, #92]	@ (80004ec <Measure_Distance+0xdc>)
 8000490:	691b      	ldr	r3, [r3, #16]
 8000492:	f003 0302 	and.w	r3, r3, #2
 8000496:	2b00      	cmp	r3, #0
 8000498:	d0f1      	beq.n	800047e <Measure_Distance+0x6e>
    TIM1->SR &= ~TIM_SR_CC1IF;
 800049a:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <Measure_Distance+0xdc>)
 800049c:	691b      	ldr	r3, [r3, #16]
 800049e:	4a13      	ldr	r2, [pc, #76]	@ (80004ec <Measure_Distance+0xdc>)
 80004a0:	f023 0302 	bic.w	r3, r3, #2
 80004a4:	6113      	str	r3, [r2, #16]
    t2 = TIM1->CCR1;
 80004a6:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <Measure_Distance+0xdc>)
 80004a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004aa:	607b      	str	r3, [r7, #4]

    // Reset polarity
    TIM1->CCER &= ~TIM_CCER_CC1P;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	@ (80004ec <Measure_Distance+0xdc>)
 80004ae:	6a1b      	ldr	r3, [r3, #32]
 80004b0:	4a0e      	ldr	r2, [pc, #56]	@ (80004ec <Measure_Distance+0xdc>)
 80004b2:	f023 0302 	bic.w	r3, r3, #2
 80004b6:	6213      	str	r3, [r2, #32]

    uint32_t diff = (t2 >= t1) ? (t2 - t1) : (0xFFFF - t1 + t2);
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d303      	bcc.n	80004c8 <Measure_Distance+0xb8>
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	68bb      	ldr	r3, [r7, #8]
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	e005      	b.n	80004d4 <Measure_Distance+0xc4>
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80004d2:	33ff      	adds	r3, #255	@ 0xff
 80004d4:	603b      	str	r3, [r7, #0]
    return diff / 58;     // convert Âµs â†’ cm
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	4a05      	ldr	r2, [pc, #20]	@ (80004f0 <Measure_Distance+0xe0>)
 80004da:	fba2 2303 	umull	r2, r3, r2, r3
 80004de:	095b      	lsrs	r3, r3, #5
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	48000400 	.word	0x48000400
 80004ec:	40012c00 	.word	0x40012c00
 80004f0:	8d3dcb09 	.word	0x8d3dcb09

080004f4 <main>:

int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b090      	sub	sp, #64	@ 0x40
 80004f8:	af00      	add	r7, sp, #0
    // Enable clocks
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 80004fa:	4b19      	ldr	r3, [pc, #100]	@ (8000560 <main+0x6c>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fe:	4a18      	ldr	r2, [pc, #96]	@ (8000560 <main+0x6c>)
 8000500:	f043 0302 	orr.w	r3, r3, #2
 8000504:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // TRIG = PB15 output
    GPIOB->MODER &= ~(3 << (TRIG_PIN * 2));
 8000506:	4b17      	ldr	r3, [pc, #92]	@ (8000564 <main+0x70>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a16      	ldr	r2, [pc, #88]	@ (8000564 <main+0x70>)
 800050c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000510:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (TRIG_PIN * 2));
 8000512:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <main+0x70>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a13      	ldr	r2, [pc, #76]	@ (8000564 <main+0x70>)
 8000518:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800051c:	6013      	str	r3, [r2, #0]

    UART2_Init();
 800051e:	f7ff fecb 	bl	80002b8 <UART2_Init>
    TIM1_InputCapture_Init();
 8000522:	f7ff ff2d 	bl	8000380 <TIM1_InputCapture_Init>

    UART2_SendString("Ultrasonic Bare-Metal Test\r\n");
 8000526:	4810      	ldr	r0, [pc, #64]	@ (8000568 <main+0x74>)
 8000528:	f7ff ff14 	bl	8000354 <UART2_SendString>

    char msg[50];
    while (1)
    {
        uint32_t dist = Measure_Distance();
 800052c:	f7ff ff70 	bl	8000410 <Measure_Distance>
 8000530:	63f8      	str	r0, [r7, #60]	@ 0x3c
        sprintf(msg, "Distance = %lu cm\r\n", dist);
 8000532:	f107 0308 	add.w	r3, r7, #8
 8000536:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000538:	490c      	ldr	r1, [pc, #48]	@ (800056c <main+0x78>)
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f8d0 	bl	80006e0 <siprintf>
        UART2_SendString(msg);
 8000540:	f107 0308 	add.w	r3, r7, #8
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff ff05 	bl	8000354 <UART2_SendString>

        for (volatile int i = 0; i < 200000; i++);  // ~200 ms delay
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	e002      	b.n	8000556 <main+0x62>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3301      	adds	r3, #1
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a05      	ldr	r2, [pc, #20]	@ (8000570 <main+0x7c>)
 800055a:	4293      	cmp	r3, r2
 800055c:	ddf8      	ble.n	8000550 <main+0x5c>
    {
 800055e:	e7e5      	b.n	800052c <main+0x38>
 8000560:	40021000 	.word	0x40021000
 8000564:	48000400 	.word	0x48000400
 8000568:	08001028 	.word	0x08001028
 800056c:	08001048 	.word	0x08001048
 8000570:	00030d3f 	.word	0x00030d3f

08000574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <NMI_Handler+0x4>

0800057c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <HardFault_Handler+0x4>

08000584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <MemManage_Handler+0x4>

0800058c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <BusFault_Handler+0x4>

08000594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <UsageFault_Handler+0x4>

0800059c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ca:	f000 f875 	bl	80006b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005dc:	4a14      	ldr	r2, [pc, #80]	@ (8000630 <_sbrk+0x5c>)
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <_sbrk+0x60>)
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e8:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <_sbrk+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d102      	bne.n	80005f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <_sbrk+0x64>)
 80005f2:	4a12      	ldr	r2, [pc, #72]	@ (800063c <_sbrk+0x68>)
 80005f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005f6:	4b10      	ldr	r3, [pc, #64]	@ (8000638 <_sbrk+0x64>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	429a      	cmp	r2, r3
 8000602:	d207      	bcs.n	8000614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000604:	f000 f88e 	bl	8000724 <__errno>
 8000608:	4603      	mov	r3, r0
 800060a:	220c      	movs	r2, #12
 800060c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800060e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000612:	e009      	b.n	8000628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000614:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <_sbrk+0x64>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800061a:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <_sbrk+0x64>)
 8000624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000626:	68fb      	ldr	r3, [r7, #12]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20018000 	.word	0x20018000
 8000634:	00000400 	.word	0x00000400
 8000638:	20000070 	.word	0x20000070
 800063c:	200001c0 	.word	0x200001c0

08000640 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <SystemInit+0x20>)
 8000646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800064a:	4a05      	ldr	r2, [pc, #20]	@ (8000660 <SystemInit+0x20>)
 800064c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800069c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000668:	f7ff ffea 	bl	8000640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800066e:	490d      	ldr	r1, [pc, #52]	@ (80006a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000670:	4a0d      	ldr	r2, [pc, #52]	@ (80006a8 <LoopForever+0xe>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0a      	ldr	r2, [pc, #40]	@ (80006ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000684:	4c0a      	ldr	r4, [pc, #40]	@ (80006b0 <LoopForever+0x16>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000692:	f000 f84d 	bl	8000730 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000696:	f7ff ff2d 	bl	80004f4 <main>

0800069a <LoopForever>:

LoopForever:
    b LoopForever
 800069a:	e7fe      	b.n	800069a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800069c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80006a8:	080010a0 	.word	0x080010a0
  ldr r2, =_sbss
 80006ac:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80006b0:	200001c0 	.word	0x200001c0

080006b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC1_2_IRQHandler>
	...

080006b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <HAL_IncTick+0x20>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <HAL_IncTick+0x24>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	4a04      	ldr	r2, [pc, #16]	@ (80006dc <HAL_IncTick+0x24>)
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000074 	.word	0x20000074

080006e0 <siprintf>:
 80006e0:	b40e      	push	{r1, r2, r3}
 80006e2:	b510      	push	{r4, lr}
 80006e4:	b09d      	sub	sp, #116	@ 0x74
 80006e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80006e8:	9002      	str	r0, [sp, #8]
 80006ea:	9006      	str	r0, [sp, #24]
 80006ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80006f0:	480a      	ldr	r0, [pc, #40]	@ (800071c <siprintf+0x3c>)
 80006f2:	9107      	str	r1, [sp, #28]
 80006f4:	9104      	str	r1, [sp, #16]
 80006f6:	490a      	ldr	r1, [pc, #40]	@ (8000720 <siprintf+0x40>)
 80006f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80006fc:	9105      	str	r1, [sp, #20]
 80006fe:	2400      	movs	r4, #0
 8000700:	a902      	add	r1, sp, #8
 8000702:	6800      	ldr	r0, [r0, #0]
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000708:	f000 f894 	bl	8000834 <_svfiprintf_r>
 800070c:	9b02      	ldr	r3, [sp, #8]
 800070e:	701c      	strb	r4, [r3, #0]
 8000710:	b01d      	add	sp, #116	@ 0x74
 8000712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000716:	b003      	add	sp, #12
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000004 	.word	0x20000004
 8000720:	ffff0208 	.word	0xffff0208

08000724 <__errno>:
 8000724:	4b01      	ldr	r3, [pc, #4]	@ (800072c <__errno+0x8>)
 8000726:	6818      	ldr	r0, [r3, #0]
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000004 	.word	0x20000004

08000730 <__libc_init_array>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	4d0d      	ldr	r5, [pc, #52]	@ (8000768 <__libc_init_array+0x38>)
 8000734:	4c0d      	ldr	r4, [pc, #52]	@ (800076c <__libc_init_array+0x3c>)
 8000736:	1b64      	subs	r4, r4, r5
 8000738:	10a4      	asrs	r4, r4, #2
 800073a:	2600      	movs	r6, #0
 800073c:	42a6      	cmp	r6, r4
 800073e:	d109      	bne.n	8000754 <__libc_init_array+0x24>
 8000740:	4d0b      	ldr	r5, [pc, #44]	@ (8000770 <__libc_init_array+0x40>)
 8000742:	4c0c      	ldr	r4, [pc, #48]	@ (8000774 <__libc_init_array+0x44>)
 8000744:	f000 fc64 	bl	8001010 <_init>
 8000748:	1b64      	subs	r4, r4, r5
 800074a:	10a4      	asrs	r4, r4, #2
 800074c:	2600      	movs	r6, #0
 800074e:	42a6      	cmp	r6, r4
 8000750:	d105      	bne.n	800075e <__libc_init_array+0x2e>
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f855 3b04 	ldr.w	r3, [r5], #4
 8000758:	4798      	blx	r3
 800075a:	3601      	adds	r6, #1
 800075c:	e7ee      	b.n	800073c <__libc_init_array+0xc>
 800075e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000762:	4798      	blx	r3
 8000764:	3601      	adds	r6, #1
 8000766:	e7f2      	b.n	800074e <__libc_init_array+0x1e>
 8000768:	08001098 	.word	0x08001098
 800076c:	08001098 	.word	0x08001098
 8000770:	08001098 	.word	0x08001098
 8000774:	0800109c 	.word	0x0800109c

08000778 <__retarget_lock_acquire_recursive>:
 8000778:	4770      	bx	lr

0800077a <__retarget_lock_release_recursive>:
 800077a:	4770      	bx	lr

0800077c <__ssputs_r>:
 800077c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000780:	688e      	ldr	r6, [r1, #8]
 8000782:	461f      	mov	r7, r3
 8000784:	42be      	cmp	r6, r7
 8000786:	680b      	ldr	r3, [r1, #0]
 8000788:	4682      	mov	sl, r0
 800078a:	460c      	mov	r4, r1
 800078c:	4690      	mov	r8, r2
 800078e:	d82d      	bhi.n	80007ec <__ssputs_r+0x70>
 8000790:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000794:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000798:	d026      	beq.n	80007e8 <__ssputs_r+0x6c>
 800079a:	6965      	ldr	r5, [r4, #20]
 800079c:	6909      	ldr	r1, [r1, #16]
 800079e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80007a2:	eba3 0901 	sub.w	r9, r3, r1
 80007a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80007aa:	1c7b      	adds	r3, r7, #1
 80007ac:	444b      	add	r3, r9
 80007ae:	106d      	asrs	r5, r5, #1
 80007b0:	429d      	cmp	r5, r3
 80007b2:	bf38      	it	cc
 80007b4:	461d      	movcc	r5, r3
 80007b6:	0553      	lsls	r3, r2, #21
 80007b8:	d527      	bpl.n	800080a <__ssputs_r+0x8e>
 80007ba:	4629      	mov	r1, r5
 80007bc:	f000 f958 	bl	8000a70 <_malloc_r>
 80007c0:	4606      	mov	r6, r0
 80007c2:	b360      	cbz	r0, 800081e <__ssputs_r+0xa2>
 80007c4:	6921      	ldr	r1, [r4, #16]
 80007c6:	464a      	mov	r2, r9
 80007c8:	f000 fbc2 	bl	8000f50 <memcpy>
 80007cc:	89a3      	ldrh	r3, [r4, #12]
 80007ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80007d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d6:	81a3      	strh	r3, [r4, #12]
 80007d8:	6126      	str	r6, [r4, #16]
 80007da:	6165      	str	r5, [r4, #20]
 80007dc:	444e      	add	r6, r9
 80007de:	eba5 0509 	sub.w	r5, r5, r9
 80007e2:	6026      	str	r6, [r4, #0]
 80007e4:	60a5      	str	r5, [r4, #8]
 80007e6:	463e      	mov	r6, r7
 80007e8:	42be      	cmp	r6, r7
 80007ea:	d900      	bls.n	80007ee <__ssputs_r+0x72>
 80007ec:	463e      	mov	r6, r7
 80007ee:	6820      	ldr	r0, [r4, #0]
 80007f0:	4632      	mov	r2, r6
 80007f2:	4641      	mov	r1, r8
 80007f4:	f000 fb82 	bl	8000efc <memmove>
 80007f8:	68a3      	ldr	r3, [r4, #8]
 80007fa:	1b9b      	subs	r3, r3, r6
 80007fc:	60a3      	str	r3, [r4, #8]
 80007fe:	6823      	ldr	r3, [r4, #0]
 8000800:	4433      	add	r3, r6
 8000802:	6023      	str	r3, [r4, #0]
 8000804:	2000      	movs	r0, #0
 8000806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080a:	462a      	mov	r2, r5
 800080c:	f000 fb48 	bl	8000ea0 <_realloc_r>
 8000810:	4606      	mov	r6, r0
 8000812:	2800      	cmp	r0, #0
 8000814:	d1e0      	bne.n	80007d8 <__ssputs_r+0x5c>
 8000816:	6921      	ldr	r1, [r4, #16]
 8000818:	4650      	mov	r0, sl
 800081a:	f000 fba7 	bl	8000f6c <_free_r>
 800081e:	230c      	movs	r3, #12
 8000820:	f8ca 3000 	str.w	r3, [sl]
 8000824:	89a3      	ldrh	r3, [r4, #12]
 8000826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800082a:	81a3      	strh	r3, [r4, #12]
 800082c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000830:	e7e9      	b.n	8000806 <__ssputs_r+0x8a>
	...

08000834 <_svfiprintf_r>:
 8000834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000838:	4698      	mov	r8, r3
 800083a:	898b      	ldrh	r3, [r1, #12]
 800083c:	061b      	lsls	r3, r3, #24
 800083e:	b09d      	sub	sp, #116	@ 0x74
 8000840:	4607      	mov	r7, r0
 8000842:	460d      	mov	r5, r1
 8000844:	4614      	mov	r4, r2
 8000846:	d510      	bpl.n	800086a <_svfiprintf_r+0x36>
 8000848:	690b      	ldr	r3, [r1, #16]
 800084a:	b973      	cbnz	r3, 800086a <_svfiprintf_r+0x36>
 800084c:	2140      	movs	r1, #64	@ 0x40
 800084e:	f000 f90f 	bl	8000a70 <_malloc_r>
 8000852:	6028      	str	r0, [r5, #0]
 8000854:	6128      	str	r0, [r5, #16]
 8000856:	b930      	cbnz	r0, 8000866 <_svfiprintf_r+0x32>
 8000858:	230c      	movs	r3, #12
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000860:	b01d      	add	sp, #116	@ 0x74
 8000862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000866:	2340      	movs	r3, #64	@ 0x40
 8000868:	616b      	str	r3, [r5, #20]
 800086a:	2300      	movs	r3, #0
 800086c:	9309      	str	r3, [sp, #36]	@ 0x24
 800086e:	2320      	movs	r3, #32
 8000870:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000874:	f8cd 800c 	str.w	r8, [sp, #12]
 8000878:	2330      	movs	r3, #48	@ 0x30
 800087a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000a18 <_svfiprintf_r+0x1e4>
 800087e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000882:	f04f 0901 	mov.w	r9, #1
 8000886:	4623      	mov	r3, r4
 8000888:	469a      	mov	sl, r3
 800088a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800088e:	b10a      	cbz	r2, 8000894 <_svfiprintf_r+0x60>
 8000890:	2a25      	cmp	r2, #37	@ 0x25
 8000892:	d1f9      	bne.n	8000888 <_svfiprintf_r+0x54>
 8000894:	ebba 0b04 	subs.w	fp, sl, r4
 8000898:	d00b      	beq.n	80008b2 <_svfiprintf_r+0x7e>
 800089a:	465b      	mov	r3, fp
 800089c:	4622      	mov	r2, r4
 800089e:	4629      	mov	r1, r5
 80008a0:	4638      	mov	r0, r7
 80008a2:	f7ff ff6b 	bl	800077c <__ssputs_r>
 80008a6:	3001      	adds	r0, #1
 80008a8:	f000 80a7 	beq.w	80009fa <_svfiprintf_r+0x1c6>
 80008ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80008ae:	445a      	add	r2, fp
 80008b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80008b2:	f89a 3000 	ldrb.w	r3, [sl]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f000 809f 	beq.w	80009fa <_svfiprintf_r+0x1c6>
 80008bc:	2300      	movs	r3, #0
 80008be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80008c6:	f10a 0a01 	add.w	sl, sl, #1
 80008ca:	9304      	str	r3, [sp, #16]
 80008cc:	9307      	str	r3, [sp, #28]
 80008ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80008d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80008d4:	4654      	mov	r4, sl
 80008d6:	2205      	movs	r2, #5
 80008d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008dc:	484e      	ldr	r0, [pc, #312]	@ (8000a18 <_svfiprintf_r+0x1e4>)
 80008de:	f7ff fc77 	bl	80001d0 <memchr>
 80008e2:	9a04      	ldr	r2, [sp, #16]
 80008e4:	b9d8      	cbnz	r0, 800091e <_svfiprintf_r+0xea>
 80008e6:	06d0      	lsls	r0, r2, #27
 80008e8:	bf44      	itt	mi
 80008ea:	2320      	movmi	r3, #32
 80008ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80008f0:	0711      	lsls	r1, r2, #28
 80008f2:	bf44      	itt	mi
 80008f4:	232b      	movmi	r3, #43	@ 0x2b
 80008f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80008fa:	f89a 3000 	ldrb.w	r3, [sl]
 80008fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8000900:	d015      	beq.n	800092e <_svfiprintf_r+0xfa>
 8000902:	9a07      	ldr	r2, [sp, #28]
 8000904:	4654      	mov	r4, sl
 8000906:	2000      	movs	r0, #0
 8000908:	f04f 0c0a 	mov.w	ip, #10
 800090c:	4621      	mov	r1, r4
 800090e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000912:	3b30      	subs	r3, #48	@ 0x30
 8000914:	2b09      	cmp	r3, #9
 8000916:	d94b      	bls.n	80009b0 <_svfiprintf_r+0x17c>
 8000918:	b1b0      	cbz	r0, 8000948 <_svfiprintf_r+0x114>
 800091a:	9207      	str	r2, [sp, #28]
 800091c:	e014      	b.n	8000948 <_svfiprintf_r+0x114>
 800091e:	eba0 0308 	sub.w	r3, r0, r8
 8000922:	fa09 f303 	lsl.w	r3, r9, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	9304      	str	r3, [sp, #16]
 800092a:	46a2      	mov	sl, r4
 800092c:	e7d2      	b.n	80008d4 <_svfiprintf_r+0xa0>
 800092e:	9b03      	ldr	r3, [sp, #12]
 8000930:	1d19      	adds	r1, r3, #4
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	9103      	str	r1, [sp, #12]
 8000936:	2b00      	cmp	r3, #0
 8000938:	bfbb      	ittet	lt
 800093a:	425b      	neglt	r3, r3
 800093c:	f042 0202 	orrlt.w	r2, r2, #2
 8000940:	9307      	strge	r3, [sp, #28]
 8000942:	9307      	strlt	r3, [sp, #28]
 8000944:	bfb8      	it	lt
 8000946:	9204      	strlt	r2, [sp, #16]
 8000948:	7823      	ldrb	r3, [r4, #0]
 800094a:	2b2e      	cmp	r3, #46	@ 0x2e
 800094c:	d10a      	bne.n	8000964 <_svfiprintf_r+0x130>
 800094e:	7863      	ldrb	r3, [r4, #1]
 8000950:	2b2a      	cmp	r3, #42	@ 0x2a
 8000952:	d132      	bne.n	80009ba <_svfiprintf_r+0x186>
 8000954:	9b03      	ldr	r3, [sp, #12]
 8000956:	1d1a      	adds	r2, r3, #4
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	9203      	str	r2, [sp, #12]
 800095c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000960:	3402      	adds	r4, #2
 8000962:	9305      	str	r3, [sp, #20]
 8000964:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000a28 <_svfiprintf_r+0x1f4>
 8000968:	7821      	ldrb	r1, [r4, #0]
 800096a:	2203      	movs	r2, #3
 800096c:	4650      	mov	r0, sl
 800096e:	f7ff fc2f 	bl	80001d0 <memchr>
 8000972:	b138      	cbz	r0, 8000984 <_svfiprintf_r+0x150>
 8000974:	9b04      	ldr	r3, [sp, #16]
 8000976:	eba0 000a 	sub.w	r0, r0, sl
 800097a:	2240      	movs	r2, #64	@ 0x40
 800097c:	4082      	lsls	r2, r0
 800097e:	4313      	orrs	r3, r2
 8000980:	3401      	adds	r4, #1
 8000982:	9304      	str	r3, [sp, #16]
 8000984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000988:	4824      	ldr	r0, [pc, #144]	@ (8000a1c <_svfiprintf_r+0x1e8>)
 800098a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800098e:	2206      	movs	r2, #6
 8000990:	f7ff fc1e 	bl	80001d0 <memchr>
 8000994:	2800      	cmp	r0, #0
 8000996:	d036      	beq.n	8000a06 <_svfiprintf_r+0x1d2>
 8000998:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <_svfiprintf_r+0x1ec>)
 800099a:	bb1b      	cbnz	r3, 80009e4 <_svfiprintf_r+0x1b0>
 800099c:	9b03      	ldr	r3, [sp, #12]
 800099e:	3307      	adds	r3, #7
 80009a0:	f023 0307 	bic.w	r3, r3, #7
 80009a4:	3308      	adds	r3, #8
 80009a6:	9303      	str	r3, [sp, #12]
 80009a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80009aa:	4433      	add	r3, r6
 80009ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80009ae:	e76a      	b.n	8000886 <_svfiprintf_r+0x52>
 80009b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80009b4:	460c      	mov	r4, r1
 80009b6:	2001      	movs	r0, #1
 80009b8:	e7a8      	b.n	800090c <_svfiprintf_r+0xd8>
 80009ba:	2300      	movs	r3, #0
 80009bc:	3401      	adds	r4, #1
 80009be:	9305      	str	r3, [sp, #20]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f04f 0c0a 	mov.w	ip, #10
 80009c6:	4620      	mov	r0, r4
 80009c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80009cc:	3a30      	subs	r2, #48	@ 0x30
 80009ce:	2a09      	cmp	r2, #9
 80009d0:	d903      	bls.n	80009da <_svfiprintf_r+0x1a6>
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0c6      	beq.n	8000964 <_svfiprintf_r+0x130>
 80009d6:	9105      	str	r1, [sp, #20]
 80009d8:	e7c4      	b.n	8000964 <_svfiprintf_r+0x130>
 80009da:	fb0c 2101 	mla	r1, ip, r1, r2
 80009de:	4604      	mov	r4, r0
 80009e0:	2301      	movs	r3, #1
 80009e2:	e7f0      	b.n	80009c6 <_svfiprintf_r+0x192>
 80009e4:	ab03      	add	r3, sp, #12
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	462a      	mov	r2, r5
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <_svfiprintf_r+0x1f0>)
 80009ec:	a904      	add	r1, sp, #16
 80009ee:	4638      	mov	r0, r7
 80009f0:	f3af 8000 	nop.w
 80009f4:	1c42      	adds	r2, r0, #1
 80009f6:	4606      	mov	r6, r0
 80009f8:	d1d6      	bne.n	80009a8 <_svfiprintf_r+0x174>
 80009fa:	89ab      	ldrh	r3, [r5, #12]
 80009fc:	065b      	lsls	r3, r3, #25
 80009fe:	f53f af2d 	bmi.w	800085c <_svfiprintf_r+0x28>
 8000a02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000a04:	e72c      	b.n	8000860 <_svfiprintf_r+0x2c>
 8000a06:	ab03      	add	r3, sp, #12
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	462a      	mov	r2, r5
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <_svfiprintf_r+0x1f0>)
 8000a0e:	a904      	add	r1, sp, #16
 8000a10:	4638      	mov	r0, r7
 8000a12:	f000 f91b 	bl	8000c4c <_printf_i>
 8000a16:	e7ed      	b.n	80009f4 <_svfiprintf_r+0x1c0>
 8000a18:	0800105c 	.word	0x0800105c
 8000a1c:	08001066 	.word	0x08001066
 8000a20:	00000000 	.word	0x00000000
 8000a24:	0800077d 	.word	0x0800077d
 8000a28:	08001062 	.word	0x08001062

08000a2c <sbrk_aligned>:
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8000a6c <sbrk_aligned+0x40>)
 8000a30:	460c      	mov	r4, r1
 8000a32:	6831      	ldr	r1, [r6, #0]
 8000a34:	4605      	mov	r5, r0
 8000a36:	b911      	cbnz	r1, 8000a3e <sbrk_aligned+0x12>
 8000a38:	f000 fa7a 	bl	8000f30 <_sbrk_r>
 8000a3c:	6030      	str	r0, [r6, #0]
 8000a3e:	4621      	mov	r1, r4
 8000a40:	4628      	mov	r0, r5
 8000a42:	f000 fa75 	bl	8000f30 <_sbrk_r>
 8000a46:	1c43      	adds	r3, r0, #1
 8000a48:	d103      	bne.n	8000a52 <sbrk_aligned+0x26>
 8000a4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000a4e:	4620      	mov	r0, r4
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
 8000a52:	1cc4      	adds	r4, r0, #3
 8000a54:	f024 0403 	bic.w	r4, r4, #3
 8000a58:	42a0      	cmp	r0, r4
 8000a5a:	d0f8      	beq.n	8000a4e <sbrk_aligned+0x22>
 8000a5c:	1a21      	subs	r1, r4, r0
 8000a5e:	4628      	mov	r0, r5
 8000a60:	f000 fa66 	bl	8000f30 <_sbrk_r>
 8000a64:	3001      	adds	r0, #1
 8000a66:	d1f2      	bne.n	8000a4e <sbrk_aligned+0x22>
 8000a68:	e7ef      	b.n	8000a4a <sbrk_aligned+0x1e>
 8000a6a:	bf00      	nop
 8000a6c:	200001b4 	.word	0x200001b4

08000a70 <_malloc_r>:
 8000a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a74:	1ccd      	adds	r5, r1, #3
 8000a76:	f025 0503 	bic.w	r5, r5, #3
 8000a7a:	3508      	adds	r5, #8
 8000a7c:	2d0c      	cmp	r5, #12
 8000a7e:	bf38      	it	cc
 8000a80:	250c      	movcc	r5, #12
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	4606      	mov	r6, r0
 8000a86:	db01      	blt.n	8000a8c <_malloc_r+0x1c>
 8000a88:	42a9      	cmp	r1, r5
 8000a8a:	d904      	bls.n	8000a96 <_malloc_r+0x26>
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	6033      	str	r3, [r6, #0]
 8000a90:	2000      	movs	r0, #0
 8000a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b6c <_malloc_r+0xfc>
 8000a9a:	f000 f9f5 	bl	8000e88 <__malloc_lock>
 8000a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8000aa2:	461c      	mov	r4, r3
 8000aa4:	bb44      	cbnz	r4, 8000af8 <_malloc_r+0x88>
 8000aa6:	4629      	mov	r1, r5
 8000aa8:	4630      	mov	r0, r6
 8000aaa:	f7ff ffbf 	bl	8000a2c <sbrk_aligned>
 8000aae:	1c43      	adds	r3, r0, #1
 8000ab0:	4604      	mov	r4, r0
 8000ab2:	d158      	bne.n	8000b66 <_malloc_r+0xf6>
 8000ab4:	f8d8 4000 	ldr.w	r4, [r8]
 8000ab8:	4627      	mov	r7, r4
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d143      	bne.n	8000b46 <_malloc_r+0xd6>
 8000abe:	2c00      	cmp	r4, #0
 8000ac0:	d04b      	beq.n	8000b5a <_malloc_r+0xea>
 8000ac2:	6823      	ldr	r3, [r4, #0]
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	eb04 0903 	add.w	r9, r4, r3
 8000acc:	f000 fa30 	bl	8000f30 <_sbrk_r>
 8000ad0:	4581      	cmp	r9, r0
 8000ad2:	d142      	bne.n	8000b5a <_malloc_r+0xea>
 8000ad4:	6821      	ldr	r1, [r4, #0]
 8000ad6:	1a6d      	subs	r5, r5, r1
 8000ad8:	4629      	mov	r1, r5
 8000ada:	4630      	mov	r0, r6
 8000adc:	f7ff ffa6 	bl	8000a2c <sbrk_aligned>
 8000ae0:	3001      	adds	r0, #1
 8000ae2:	d03a      	beq.n	8000b5a <_malloc_r+0xea>
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	442b      	add	r3, r5
 8000ae8:	6023      	str	r3, [r4, #0]
 8000aea:	f8d8 3000 	ldr.w	r3, [r8]
 8000aee:	685a      	ldr	r2, [r3, #4]
 8000af0:	bb62      	cbnz	r2, 8000b4c <_malloc_r+0xdc>
 8000af2:	f8c8 7000 	str.w	r7, [r8]
 8000af6:	e00f      	b.n	8000b18 <_malloc_r+0xa8>
 8000af8:	6822      	ldr	r2, [r4, #0]
 8000afa:	1b52      	subs	r2, r2, r5
 8000afc:	d420      	bmi.n	8000b40 <_malloc_r+0xd0>
 8000afe:	2a0b      	cmp	r2, #11
 8000b00:	d917      	bls.n	8000b32 <_malloc_r+0xc2>
 8000b02:	1961      	adds	r1, r4, r5
 8000b04:	42a3      	cmp	r3, r4
 8000b06:	6025      	str	r5, [r4, #0]
 8000b08:	bf18      	it	ne
 8000b0a:	6059      	strne	r1, [r3, #4]
 8000b0c:	6863      	ldr	r3, [r4, #4]
 8000b0e:	bf08      	it	eq
 8000b10:	f8c8 1000 	streq.w	r1, [r8]
 8000b14:	5162      	str	r2, [r4, r5]
 8000b16:	604b      	str	r3, [r1, #4]
 8000b18:	4630      	mov	r0, r6
 8000b1a:	f000 f9bb 	bl	8000e94 <__malloc_unlock>
 8000b1e:	f104 000b 	add.w	r0, r4, #11
 8000b22:	1d23      	adds	r3, r4, #4
 8000b24:	f020 0007 	bic.w	r0, r0, #7
 8000b28:	1ac2      	subs	r2, r0, r3
 8000b2a:	bf1c      	itt	ne
 8000b2c:	1a1b      	subne	r3, r3, r0
 8000b2e:	50a3      	strne	r3, [r4, r2]
 8000b30:	e7af      	b.n	8000a92 <_malloc_r+0x22>
 8000b32:	6862      	ldr	r2, [r4, #4]
 8000b34:	42a3      	cmp	r3, r4
 8000b36:	bf0c      	ite	eq
 8000b38:	f8c8 2000 	streq.w	r2, [r8]
 8000b3c:	605a      	strne	r2, [r3, #4]
 8000b3e:	e7eb      	b.n	8000b18 <_malloc_r+0xa8>
 8000b40:	4623      	mov	r3, r4
 8000b42:	6864      	ldr	r4, [r4, #4]
 8000b44:	e7ae      	b.n	8000aa4 <_malloc_r+0x34>
 8000b46:	463c      	mov	r4, r7
 8000b48:	687f      	ldr	r7, [r7, #4]
 8000b4a:	e7b6      	b.n	8000aba <_malloc_r+0x4a>
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	42a3      	cmp	r3, r4
 8000b52:	d1fb      	bne.n	8000b4c <_malloc_r+0xdc>
 8000b54:	2300      	movs	r3, #0
 8000b56:	6053      	str	r3, [r2, #4]
 8000b58:	e7de      	b.n	8000b18 <_malloc_r+0xa8>
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	6033      	str	r3, [r6, #0]
 8000b5e:	4630      	mov	r0, r6
 8000b60:	f000 f998 	bl	8000e94 <__malloc_unlock>
 8000b64:	e794      	b.n	8000a90 <_malloc_r+0x20>
 8000b66:	6005      	str	r5, [r0, #0]
 8000b68:	e7d6      	b.n	8000b18 <_malloc_r+0xa8>
 8000b6a:	bf00      	nop
 8000b6c:	200001b8 	.word	0x200001b8

08000b70 <_printf_common>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	4616      	mov	r6, r2
 8000b76:	4698      	mov	r8, r3
 8000b78:	688a      	ldr	r2, [r1, #8]
 8000b7a:	690b      	ldr	r3, [r1, #16]
 8000b7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000b80:	4293      	cmp	r3, r2
 8000b82:	bfb8      	it	lt
 8000b84:	4613      	movlt	r3, r2
 8000b86:	6033      	str	r3, [r6, #0]
 8000b88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000b8c:	4607      	mov	r7, r0
 8000b8e:	460c      	mov	r4, r1
 8000b90:	b10a      	cbz	r2, 8000b96 <_printf_common+0x26>
 8000b92:	3301      	adds	r3, #1
 8000b94:	6033      	str	r3, [r6, #0]
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	0699      	lsls	r1, r3, #26
 8000b9a:	bf42      	ittt	mi
 8000b9c:	6833      	ldrmi	r3, [r6, #0]
 8000b9e:	3302      	addmi	r3, #2
 8000ba0:	6033      	strmi	r3, [r6, #0]
 8000ba2:	6825      	ldr	r5, [r4, #0]
 8000ba4:	f015 0506 	ands.w	r5, r5, #6
 8000ba8:	d106      	bne.n	8000bb8 <_printf_common+0x48>
 8000baa:	f104 0a19 	add.w	sl, r4, #25
 8000bae:	68e3      	ldr	r3, [r4, #12]
 8000bb0:	6832      	ldr	r2, [r6, #0]
 8000bb2:	1a9b      	subs	r3, r3, r2
 8000bb4:	42ab      	cmp	r3, r5
 8000bb6:	dc26      	bgt.n	8000c06 <_printf_common+0x96>
 8000bb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000bbc:	6822      	ldr	r2, [r4, #0]
 8000bbe:	3b00      	subs	r3, #0
 8000bc0:	bf18      	it	ne
 8000bc2:	2301      	movne	r3, #1
 8000bc4:	0692      	lsls	r2, r2, #26
 8000bc6:	d42b      	bmi.n	8000c20 <_printf_common+0xb0>
 8000bc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000bcc:	4641      	mov	r1, r8
 8000bce:	4638      	mov	r0, r7
 8000bd0:	47c8      	blx	r9
 8000bd2:	3001      	adds	r0, #1
 8000bd4:	d01e      	beq.n	8000c14 <_printf_common+0xa4>
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	6922      	ldr	r2, [r4, #16]
 8000bda:	f003 0306 	and.w	r3, r3, #6
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf02      	ittt	eq
 8000be2:	68e5      	ldreq	r5, [r4, #12]
 8000be4:	6833      	ldreq	r3, [r6, #0]
 8000be6:	1aed      	subeq	r5, r5, r3
 8000be8:	68a3      	ldr	r3, [r4, #8]
 8000bea:	bf0c      	ite	eq
 8000bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000bf0:	2500      	movne	r5, #0
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	bfc4      	itt	gt
 8000bf6:	1a9b      	subgt	r3, r3, r2
 8000bf8:	18ed      	addgt	r5, r5, r3
 8000bfa:	2600      	movs	r6, #0
 8000bfc:	341a      	adds	r4, #26
 8000bfe:	42b5      	cmp	r5, r6
 8000c00:	d11a      	bne.n	8000c38 <_printf_common+0xc8>
 8000c02:	2000      	movs	r0, #0
 8000c04:	e008      	b.n	8000c18 <_printf_common+0xa8>
 8000c06:	2301      	movs	r3, #1
 8000c08:	4652      	mov	r2, sl
 8000c0a:	4641      	mov	r1, r8
 8000c0c:	4638      	mov	r0, r7
 8000c0e:	47c8      	blx	r9
 8000c10:	3001      	adds	r0, #1
 8000c12:	d103      	bne.n	8000c1c <_printf_common+0xac>
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1c:	3501      	adds	r5, #1
 8000c1e:	e7c6      	b.n	8000bae <_printf_common+0x3e>
 8000c20:	18e1      	adds	r1, r4, r3
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	2030      	movs	r0, #48	@ 0x30
 8000c26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000c2a:	4422      	add	r2, r4
 8000c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000c30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000c34:	3302      	adds	r3, #2
 8000c36:	e7c7      	b.n	8000bc8 <_printf_common+0x58>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	4622      	mov	r2, r4
 8000c3c:	4641      	mov	r1, r8
 8000c3e:	4638      	mov	r0, r7
 8000c40:	47c8      	blx	r9
 8000c42:	3001      	adds	r0, #1
 8000c44:	d0e6      	beq.n	8000c14 <_printf_common+0xa4>
 8000c46:	3601      	adds	r6, #1
 8000c48:	e7d9      	b.n	8000bfe <_printf_common+0x8e>
	...

08000c4c <_printf_i>:
 8000c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	7e0f      	ldrb	r7, [r1, #24]
 8000c52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000c54:	2f78      	cmp	r7, #120	@ 0x78
 8000c56:	4691      	mov	r9, r2
 8000c58:	4680      	mov	r8, r0
 8000c5a:	460c      	mov	r4, r1
 8000c5c:	469a      	mov	sl, r3
 8000c5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000c62:	d807      	bhi.n	8000c74 <_printf_i+0x28>
 8000c64:	2f62      	cmp	r7, #98	@ 0x62
 8000c66:	d80a      	bhi.n	8000c7e <_printf_i+0x32>
 8000c68:	2f00      	cmp	r7, #0
 8000c6a:	f000 80d1 	beq.w	8000e10 <_printf_i+0x1c4>
 8000c6e:	2f58      	cmp	r7, #88	@ 0x58
 8000c70:	f000 80b8 	beq.w	8000de4 <_printf_i+0x198>
 8000c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000c7c:	e03a      	b.n	8000cf4 <_printf_i+0xa8>
 8000c7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000c82:	2b15      	cmp	r3, #21
 8000c84:	d8f6      	bhi.n	8000c74 <_printf_i+0x28>
 8000c86:	a101      	add	r1, pc, #4	@ (adr r1, 8000c8c <_printf_i+0x40>)
 8000c88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c8c:	08000ce5 	.word	0x08000ce5
 8000c90:	08000cf9 	.word	0x08000cf9
 8000c94:	08000c75 	.word	0x08000c75
 8000c98:	08000c75 	.word	0x08000c75
 8000c9c:	08000c75 	.word	0x08000c75
 8000ca0:	08000c75 	.word	0x08000c75
 8000ca4:	08000cf9 	.word	0x08000cf9
 8000ca8:	08000c75 	.word	0x08000c75
 8000cac:	08000c75 	.word	0x08000c75
 8000cb0:	08000c75 	.word	0x08000c75
 8000cb4:	08000c75 	.word	0x08000c75
 8000cb8:	08000df7 	.word	0x08000df7
 8000cbc:	08000d23 	.word	0x08000d23
 8000cc0:	08000db1 	.word	0x08000db1
 8000cc4:	08000c75 	.word	0x08000c75
 8000cc8:	08000c75 	.word	0x08000c75
 8000ccc:	08000e19 	.word	0x08000e19
 8000cd0:	08000c75 	.word	0x08000c75
 8000cd4:	08000d23 	.word	0x08000d23
 8000cd8:	08000c75 	.word	0x08000c75
 8000cdc:	08000c75 	.word	0x08000c75
 8000ce0:	08000db9 	.word	0x08000db9
 8000ce4:	6833      	ldr	r3, [r6, #0]
 8000ce6:	1d1a      	adds	r2, r3, #4
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6032      	str	r2, [r6, #0]
 8000cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000cf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e09c      	b.n	8000e32 <_printf_i+0x1e6>
 8000cf8:	6833      	ldr	r3, [r6, #0]
 8000cfa:	6820      	ldr	r0, [r4, #0]
 8000cfc:	1d19      	adds	r1, r3, #4
 8000cfe:	6031      	str	r1, [r6, #0]
 8000d00:	0606      	lsls	r6, r0, #24
 8000d02:	d501      	bpl.n	8000d08 <_printf_i+0xbc>
 8000d04:	681d      	ldr	r5, [r3, #0]
 8000d06:	e003      	b.n	8000d10 <_printf_i+0xc4>
 8000d08:	0645      	lsls	r5, r0, #25
 8000d0a:	d5fb      	bpl.n	8000d04 <_printf_i+0xb8>
 8000d0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	da03      	bge.n	8000d1c <_printf_i+0xd0>
 8000d14:	232d      	movs	r3, #45	@ 0x2d
 8000d16:	426d      	negs	r5, r5
 8000d18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d1c:	4858      	ldr	r0, [pc, #352]	@ (8000e80 <_printf_i+0x234>)
 8000d1e:	230a      	movs	r3, #10
 8000d20:	e011      	b.n	8000d46 <_printf_i+0xfa>
 8000d22:	6821      	ldr	r1, [r4, #0]
 8000d24:	6833      	ldr	r3, [r6, #0]
 8000d26:	0608      	lsls	r0, r1, #24
 8000d28:	f853 5b04 	ldr.w	r5, [r3], #4
 8000d2c:	d402      	bmi.n	8000d34 <_printf_i+0xe8>
 8000d2e:	0649      	lsls	r1, r1, #25
 8000d30:	bf48      	it	mi
 8000d32:	b2ad      	uxthmi	r5, r5
 8000d34:	2f6f      	cmp	r7, #111	@ 0x6f
 8000d36:	4852      	ldr	r0, [pc, #328]	@ (8000e80 <_printf_i+0x234>)
 8000d38:	6033      	str	r3, [r6, #0]
 8000d3a:	bf14      	ite	ne
 8000d3c:	230a      	movne	r3, #10
 8000d3e:	2308      	moveq	r3, #8
 8000d40:	2100      	movs	r1, #0
 8000d42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000d46:	6866      	ldr	r6, [r4, #4]
 8000d48:	60a6      	str	r6, [r4, #8]
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	db05      	blt.n	8000d5a <_printf_i+0x10e>
 8000d4e:	6821      	ldr	r1, [r4, #0]
 8000d50:	432e      	orrs	r6, r5
 8000d52:	f021 0104 	bic.w	r1, r1, #4
 8000d56:	6021      	str	r1, [r4, #0]
 8000d58:	d04b      	beq.n	8000df2 <_printf_i+0x1a6>
 8000d5a:	4616      	mov	r6, r2
 8000d5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8000d60:	fb03 5711 	mls	r7, r3, r1, r5
 8000d64:	5dc7      	ldrb	r7, [r0, r7]
 8000d66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000d6a:	462f      	mov	r7, r5
 8000d6c:	42bb      	cmp	r3, r7
 8000d6e:	460d      	mov	r5, r1
 8000d70:	d9f4      	bls.n	8000d5c <_printf_i+0x110>
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d10b      	bne.n	8000d8e <_printf_i+0x142>
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	07df      	lsls	r7, r3, #31
 8000d7a:	d508      	bpl.n	8000d8e <_printf_i+0x142>
 8000d7c:	6923      	ldr	r3, [r4, #16]
 8000d7e:	6861      	ldr	r1, [r4, #4]
 8000d80:	4299      	cmp	r1, r3
 8000d82:	bfde      	ittt	le
 8000d84:	2330      	movle	r3, #48	@ 0x30
 8000d86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000d8a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000d8e:	1b92      	subs	r2, r2, r6
 8000d90:	6122      	str	r2, [r4, #16]
 8000d92:	f8cd a000 	str.w	sl, [sp]
 8000d96:	464b      	mov	r3, r9
 8000d98:	aa03      	add	r2, sp, #12
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	f7ff fee7 	bl	8000b70 <_printf_common>
 8000da2:	3001      	adds	r0, #1
 8000da4:	d14a      	bne.n	8000e3c <_printf_i+0x1f0>
 8000da6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000daa:	b004      	add	sp, #16
 8000dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db0:	6823      	ldr	r3, [r4, #0]
 8000db2:	f043 0320 	orr.w	r3, r3, #32
 8000db6:	6023      	str	r3, [r4, #0]
 8000db8:	4832      	ldr	r0, [pc, #200]	@ (8000e84 <_printf_i+0x238>)
 8000dba:	2778      	movs	r7, #120	@ 0x78
 8000dbc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	6831      	ldr	r1, [r6, #0]
 8000dc4:	061f      	lsls	r7, r3, #24
 8000dc6:	f851 5b04 	ldr.w	r5, [r1], #4
 8000dca:	d402      	bmi.n	8000dd2 <_printf_i+0x186>
 8000dcc:	065f      	lsls	r7, r3, #25
 8000dce:	bf48      	it	mi
 8000dd0:	b2ad      	uxthmi	r5, r5
 8000dd2:	6031      	str	r1, [r6, #0]
 8000dd4:	07d9      	lsls	r1, r3, #31
 8000dd6:	bf44      	itt	mi
 8000dd8:	f043 0320 	orrmi.w	r3, r3, #32
 8000ddc:	6023      	strmi	r3, [r4, #0]
 8000dde:	b11d      	cbz	r5, 8000de8 <_printf_i+0x19c>
 8000de0:	2310      	movs	r3, #16
 8000de2:	e7ad      	b.n	8000d40 <_printf_i+0xf4>
 8000de4:	4826      	ldr	r0, [pc, #152]	@ (8000e80 <_printf_i+0x234>)
 8000de6:	e7e9      	b.n	8000dbc <_printf_i+0x170>
 8000de8:	6823      	ldr	r3, [r4, #0]
 8000dea:	f023 0320 	bic.w	r3, r3, #32
 8000dee:	6023      	str	r3, [r4, #0]
 8000df0:	e7f6      	b.n	8000de0 <_printf_i+0x194>
 8000df2:	4616      	mov	r6, r2
 8000df4:	e7bd      	b.n	8000d72 <_printf_i+0x126>
 8000df6:	6833      	ldr	r3, [r6, #0]
 8000df8:	6825      	ldr	r5, [r4, #0]
 8000dfa:	6961      	ldr	r1, [r4, #20]
 8000dfc:	1d18      	adds	r0, r3, #4
 8000dfe:	6030      	str	r0, [r6, #0]
 8000e00:	062e      	lsls	r6, r5, #24
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	d501      	bpl.n	8000e0a <_printf_i+0x1be>
 8000e06:	6019      	str	r1, [r3, #0]
 8000e08:	e002      	b.n	8000e10 <_printf_i+0x1c4>
 8000e0a:	0668      	lsls	r0, r5, #25
 8000e0c:	d5fb      	bpl.n	8000e06 <_printf_i+0x1ba>
 8000e0e:	8019      	strh	r1, [r3, #0]
 8000e10:	2300      	movs	r3, #0
 8000e12:	6123      	str	r3, [r4, #16]
 8000e14:	4616      	mov	r6, r2
 8000e16:	e7bc      	b.n	8000d92 <_printf_i+0x146>
 8000e18:	6833      	ldr	r3, [r6, #0]
 8000e1a:	1d1a      	adds	r2, r3, #4
 8000e1c:	6032      	str	r2, [r6, #0]
 8000e1e:	681e      	ldr	r6, [r3, #0]
 8000e20:	6862      	ldr	r2, [r4, #4]
 8000e22:	2100      	movs	r1, #0
 8000e24:	4630      	mov	r0, r6
 8000e26:	f7ff f9d3 	bl	80001d0 <memchr>
 8000e2a:	b108      	cbz	r0, 8000e30 <_printf_i+0x1e4>
 8000e2c:	1b80      	subs	r0, r0, r6
 8000e2e:	6060      	str	r0, [r4, #4]
 8000e30:	6863      	ldr	r3, [r4, #4]
 8000e32:	6123      	str	r3, [r4, #16]
 8000e34:	2300      	movs	r3, #0
 8000e36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e3a:	e7aa      	b.n	8000d92 <_printf_i+0x146>
 8000e3c:	6923      	ldr	r3, [r4, #16]
 8000e3e:	4632      	mov	r2, r6
 8000e40:	4649      	mov	r1, r9
 8000e42:	4640      	mov	r0, r8
 8000e44:	47d0      	blx	sl
 8000e46:	3001      	adds	r0, #1
 8000e48:	d0ad      	beq.n	8000da6 <_printf_i+0x15a>
 8000e4a:	6823      	ldr	r3, [r4, #0]
 8000e4c:	079b      	lsls	r3, r3, #30
 8000e4e:	d413      	bmi.n	8000e78 <_printf_i+0x22c>
 8000e50:	68e0      	ldr	r0, [r4, #12]
 8000e52:	9b03      	ldr	r3, [sp, #12]
 8000e54:	4298      	cmp	r0, r3
 8000e56:	bfb8      	it	lt
 8000e58:	4618      	movlt	r0, r3
 8000e5a:	e7a6      	b.n	8000daa <_printf_i+0x15e>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	4632      	mov	r2, r6
 8000e60:	4649      	mov	r1, r9
 8000e62:	4640      	mov	r0, r8
 8000e64:	47d0      	blx	sl
 8000e66:	3001      	adds	r0, #1
 8000e68:	d09d      	beq.n	8000da6 <_printf_i+0x15a>
 8000e6a:	3501      	adds	r5, #1
 8000e6c:	68e3      	ldr	r3, [r4, #12]
 8000e6e:	9903      	ldr	r1, [sp, #12]
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	dcf2      	bgt.n	8000e5c <_printf_i+0x210>
 8000e76:	e7eb      	b.n	8000e50 <_printf_i+0x204>
 8000e78:	2500      	movs	r5, #0
 8000e7a:	f104 0619 	add.w	r6, r4, #25
 8000e7e:	e7f5      	b.n	8000e6c <_printf_i+0x220>
 8000e80:	0800106d 	.word	0x0800106d
 8000e84:	0800107e 	.word	0x0800107e

08000e88 <__malloc_lock>:
 8000e88:	4801      	ldr	r0, [pc, #4]	@ (8000e90 <__malloc_lock+0x8>)
 8000e8a:	f7ff bc75 	b.w	8000778 <__retarget_lock_acquire_recursive>
 8000e8e:	bf00      	nop
 8000e90:	200001b0 	.word	0x200001b0

08000e94 <__malloc_unlock>:
 8000e94:	4801      	ldr	r0, [pc, #4]	@ (8000e9c <__malloc_unlock+0x8>)
 8000e96:	f7ff bc70 	b.w	800077a <__retarget_lock_release_recursive>
 8000e9a:	bf00      	nop
 8000e9c:	200001b0 	.word	0x200001b0

08000ea0 <_realloc_r>:
 8000ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	4614      	mov	r4, r2
 8000ea8:	460d      	mov	r5, r1
 8000eaa:	b921      	cbnz	r1, 8000eb6 <_realloc_r+0x16>
 8000eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	f7ff bddd 	b.w	8000a70 <_malloc_r>
 8000eb6:	b92a      	cbnz	r2, 8000ec4 <_realloc_r+0x24>
 8000eb8:	f000 f858 	bl	8000f6c <_free_r>
 8000ebc:	4625      	mov	r5, r4
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ec4:	f000 f89c 	bl	8001000 <_malloc_usable_size_r>
 8000ec8:	4284      	cmp	r4, r0
 8000eca:	4606      	mov	r6, r0
 8000ecc:	d802      	bhi.n	8000ed4 <_realloc_r+0x34>
 8000ece:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000ed2:	d8f4      	bhi.n	8000ebe <_realloc_r+0x1e>
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	4638      	mov	r0, r7
 8000ed8:	f7ff fdca 	bl	8000a70 <_malloc_r>
 8000edc:	4680      	mov	r8, r0
 8000ede:	b908      	cbnz	r0, 8000ee4 <_realloc_r+0x44>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ec      	b.n	8000ebe <_realloc_r+0x1e>
 8000ee4:	42b4      	cmp	r4, r6
 8000ee6:	4622      	mov	r2, r4
 8000ee8:	4629      	mov	r1, r5
 8000eea:	bf28      	it	cs
 8000eec:	4632      	movcs	r2, r6
 8000eee:	f000 f82f 	bl	8000f50 <memcpy>
 8000ef2:	4629      	mov	r1, r5
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	f000 f839 	bl	8000f6c <_free_r>
 8000efa:	e7f1      	b.n	8000ee0 <_realloc_r+0x40>

08000efc <memmove>:
 8000efc:	4288      	cmp	r0, r1
 8000efe:	b510      	push	{r4, lr}
 8000f00:	eb01 0402 	add.w	r4, r1, r2
 8000f04:	d902      	bls.n	8000f0c <memmove+0x10>
 8000f06:	4284      	cmp	r4, r0
 8000f08:	4623      	mov	r3, r4
 8000f0a:	d807      	bhi.n	8000f1c <memmove+0x20>
 8000f0c:	1e43      	subs	r3, r0, #1
 8000f0e:	42a1      	cmp	r1, r4
 8000f10:	d008      	beq.n	8000f24 <memmove+0x28>
 8000f12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f1a:	e7f8      	b.n	8000f0e <memmove+0x12>
 8000f1c:	4402      	add	r2, r0
 8000f1e:	4601      	mov	r1, r0
 8000f20:	428a      	cmp	r2, r1
 8000f22:	d100      	bne.n	8000f26 <memmove+0x2a>
 8000f24:	bd10      	pop	{r4, pc}
 8000f26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000f2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000f2e:	e7f7      	b.n	8000f20 <memmove+0x24>

08000f30 <_sbrk_r>:
 8000f30:	b538      	push	{r3, r4, r5, lr}
 8000f32:	4d06      	ldr	r5, [pc, #24]	@ (8000f4c <_sbrk_r+0x1c>)
 8000f34:	2300      	movs	r3, #0
 8000f36:	4604      	mov	r4, r0
 8000f38:	4608      	mov	r0, r1
 8000f3a:	602b      	str	r3, [r5, #0]
 8000f3c:	f7ff fb4a 	bl	80005d4 <_sbrk>
 8000f40:	1c43      	adds	r3, r0, #1
 8000f42:	d102      	bne.n	8000f4a <_sbrk_r+0x1a>
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	b103      	cbz	r3, 8000f4a <_sbrk_r+0x1a>
 8000f48:	6023      	str	r3, [r4, #0]
 8000f4a:	bd38      	pop	{r3, r4, r5, pc}
 8000f4c:	200001bc 	.word	0x200001bc

08000f50 <memcpy>:
 8000f50:	440a      	add	r2, r1
 8000f52:	4291      	cmp	r1, r2
 8000f54:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000f58:	d100      	bne.n	8000f5c <memcpy+0xc>
 8000f5a:	4770      	bx	lr
 8000f5c:	b510      	push	{r4, lr}
 8000f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f66:	4291      	cmp	r1, r2
 8000f68:	d1f9      	bne.n	8000f5e <memcpy+0xe>
 8000f6a:	bd10      	pop	{r4, pc}

08000f6c <_free_r>:
 8000f6c:	b538      	push	{r3, r4, r5, lr}
 8000f6e:	4605      	mov	r5, r0
 8000f70:	2900      	cmp	r1, #0
 8000f72:	d041      	beq.n	8000ff8 <_free_r+0x8c>
 8000f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f78:	1f0c      	subs	r4, r1, #4
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	bfb8      	it	lt
 8000f7e:	18e4      	addlt	r4, r4, r3
 8000f80:	f7ff ff82 	bl	8000e88 <__malloc_lock>
 8000f84:	4a1d      	ldr	r2, [pc, #116]	@ (8000ffc <_free_r+0x90>)
 8000f86:	6813      	ldr	r3, [r2, #0]
 8000f88:	b933      	cbnz	r3, 8000f98 <_free_r+0x2c>
 8000f8a:	6063      	str	r3, [r4, #4]
 8000f8c:	6014      	str	r4, [r2, #0]
 8000f8e:	4628      	mov	r0, r5
 8000f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f94:	f7ff bf7e 	b.w	8000e94 <__malloc_unlock>
 8000f98:	42a3      	cmp	r3, r4
 8000f9a:	d908      	bls.n	8000fae <_free_r+0x42>
 8000f9c:	6820      	ldr	r0, [r4, #0]
 8000f9e:	1821      	adds	r1, r4, r0
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	bf01      	itttt	eq
 8000fa4:	6819      	ldreq	r1, [r3, #0]
 8000fa6:	685b      	ldreq	r3, [r3, #4]
 8000fa8:	1809      	addeq	r1, r1, r0
 8000faa:	6021      	streq	r1, [r4, #0]
 8000fac:	e7ed      	b.n	8000f8a <_free_r+0x1e>
 8000fae:	461a      	mov	r2, r3
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	b10b      	cbz	r3, 8000fb8 <_free_r+0x4c>
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d9fa      	bls.n	8000fae <_free_r+0x42>
 8000fb8:	6811      	ldr	r1, [r2, #0]
 8000fba:	1850      	adds	r0, r2, r1
 8000fbc:	42a0      	cmp	r0, r4
 8000fbe:	d10b      	bne.n	8000fd8 <_free_r+0x6c>
 8000fc0:	6820      	ldr	r0, [r4, #0]
 8000fc2:	4401      	add	r1, r0
 8000fc4:	1850      	adds	r0, r2, r1
 8000fc6:	4283      	cmp	r3, r0
 8000fc8:	6011      	str	r1, [r2, #0]
 8000fca:	d1e0      	bne.n	8000f8e <_free_r+0x22>
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	6053      	str	r3, [r2, #4]
 8000fd2:	4408      	add	r0, r1
 8000fd4:	6010      	str	r0, [r2, #0]
 8000fd6:	e7da      	b.n	8000f8e <_free_r+0x22>
 8000fd8:	d902      	bls.n	8000fe0 <_free_r+0x74>
 8000fda:	230c      	movs	r3, #12
 8000fdc:	602b      	str	r3, [r5, #0]
 8000fde:	e7d6      	b.n	8000f8e <_free_r+0x22>
 8000fe0:	6820      	ldr	r0, [r4, #0]
 8000fe2:	1821      	adds	r1, r4, r0
 8000fe4:	428b      	cmp	r3, r1
 8000fe6:	bf04      	itt	eq
 8000fe8:	6819      	ldreq	r1, [r3, #0]
 8000fea:	685b      	ldreq	r3, [r3, #4]
 8000fec:	6063      	str	r3, [r4, #4]
 8000fee:	bf04      	itt	eq
 8000ff0:	1809      	addeq	r1, r1, r0
 8000ff2:	6021      	streq	r1, [r4, #0]
 8000ff4:	6054      	str	r4, [r2, #4]
 8000ff6:	e7ca      	b.n	8000f8e <_free_r+0x22>
 8000ff8:	bd38      	pop	{r3, r4, r5, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200001b8 	.word	0x200001b8

08001000 <_malloc_usable_size_r>:
 8001000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001004:	1f18      	subs	r0, r3, #4
 8001006:	2b00      	cmp	r3, #0
 8001008:	bfbc      	itt	lt
 800100a:	580b      	ldrlt	r3, [r1, r0]
 800100c:	18c0      	addlt	r0, r0, r3
 800100e:	4770      	bx	lr

08001010 <_init>:
 8001010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001012:	bf00      	nop
 8001014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001016:	bc08      	pop	{r3}
 8001018:	469e      	mov	lr, r3
 800101a:	4770      	bx	lr

0800101c <_fini>:
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101e:	bf00      	nop
 8001020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001022:	bc08      	pop	{r3}
 8001024:	469e      	mov	lr, r3
 8001026:	4770      	bx	lr
