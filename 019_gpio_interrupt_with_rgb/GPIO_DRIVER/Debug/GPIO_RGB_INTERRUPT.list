
GPIO_RGB_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000384  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800050c  0800050c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800050c  0800050c  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800050c  0800050c  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800050c  0800050c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800050c  0800050c  0000150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000510  08000510  00001510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000514  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000518  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000518  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001dd6  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000059c  00000000  00000000  00003e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  000043a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000181  00000000  00000000  000045c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c972  00000000  00000000  00004749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f58  00000000  00000000  000210bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1abd  00000000  00000000  00023013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104ad0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006e0  00000000  00000000  00104b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001051f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004f4 	.word	0x080004f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080004f4 	.word	0x080004f4

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	@ (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	@ (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <delay>:

#define BTN_PORT GPIOC
#define BTN_PIN  13

void delay(void)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
    for (volatile uint32_t i = 0; i < 500000; i++);
 800025e:	2300      	movs	r3, #0
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	e002      	b.n	800026a <delay+0x12>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3301      	adds	r3, #1
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4a04      	ldr	r2, [pc, #16]	@ (8000280 <delay+0x28>)
 800026e:	4293      	cmp	r3, r2
 8000270:	d9f8      	bls.n	8000264 <delay+0xc>
}
 8000272:	bf00      	nop
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	0007a11f 	.word	0x0007a11f

08000284 <main>:

int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= (1 << 0);
 8000288:	4b36      	ldr	r3, [pc, #216]	@ (8000364 <main+0xe0>)
 800028a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800028c:	4a35      	ldr	r2, [pc, #212]	@ (8000364 <main+0xe0>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->AHB2ENR |= (1 << 2);
 8000294:	4b33      	ldr	r3, [pc, #204]	@ (8000364 <main+0xe0>)
 8000296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000298:	4a32      	ldr	r2, [pc, #200]	@ (8000364 <main+0xe0>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB2ENR |= (1 << 0);
 80002a0:	4b30      	ldr	r3, [pc, #192]	@ (8000364 <main+0xe0>)
 80002a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80002a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000364 <main+0xe0>)
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6613      	str	r3, [r2, #96]	@ 0x60

    LED_PORT->MODER &= ~(3 << (2 * LED_PIN));
 80002ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002b6:	f023 0303 	bic.w	r3, r3, #3
 80002ba:	6013      	str	r3, [r2, #0]
    LED_PORT->MODER |=  (1 << (2 * LED_PIN));
 80002bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6013      	str	r3, [r2, #0]
    LED_PORT->OTYPER &= ~(1 << LED_PIN);
 80002cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002d6:	f023 0301 	bic.w	r3, r3, #1
 80002da:	6053      	str	r3, [r2, #4]
    LED_PORT->OSPEEDR |=  (3 << (2 * LED_PIN));
 80002dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002e0:	689b      	ldr	r3, [r3, #8]
 80002e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002e6:	f043 0303 	orr.w	r3, r3, #3
 80002ea:	6093      	str	r3, [r2, #8]
    LED_PORT->PUPDR &= ~(3 << (2 * LED_PIN));
 80002ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002f6:	f023 0303 	bic.w	r3, r3, #3
 80002fa:	60d3      	str	r3, [r2, #12]

    BTN_PORT->MODER &= ~(3 << (2 * BTN_PIN));
 80002fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000368 <main+0xe4>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a19      	ldr	r2, [pc, #100]	@ (8000368 <main+0xe4>)
 8000302:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000306:	6013      	str	r3, [r2, #0]
    BTN_PORT->PUPDR &= ~(3 << (2 * BTN_PIN));
 8000308:	4b17      	ldr	r3, [pc, #92]	@ (8000368 <main+0xe4>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	4a16      	ldr	r2, [pc, #88]	@ (8000368 <main+0xe4>)
 800030e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000312:	60d3      	str	r3, [r2, #12]

    SYSCFG->EXTICR[3] &= ~(0xF << 4);
 8000314:	4b15      	ldr	r3, [pc, #84]	@ (800036c <main+0xe8>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	4a14      	ldr	r2, [pc, #80]	@ (800036c <main+0xe8>)
 800031a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800031e:	6153      	str	r3, [r2, #20]
    SYSCFG->EXTICR[3] |=  (0x2 << 4);
 8000320:	4b12      	ldr	r3, [pc, #72]	@ (800036c <main+0xe8>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a11      	ldr	r2, [pc, #68]	@ (800036c <main+0xe8>)
 8000326:	f043 0320 	orr.w	r3, r3, #32
 800032a:	6153      	str	r3, [r2, #20]

    EXTI->IMR1  |=  (1 << BTN_PIN);
 800032c:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <main+0xec>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a0f      	ldr	r2, [pc, #60]	@ (8000370 <main+0xec>)
 8000332:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000336:	6013      	str	r3, [r2, #0]
    EXTI->RTSR1 &= ~(1 << BTN_PIN);
 8000338:	4b0d      	ldr	r3, [pc, #52]	@ (8000370 <main+0xec>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	4a0c      	ldr	r2, [pc, #48]	@ (8000370 <main+0xec>)
 800033e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000342:	6093      	str	r3, [r2, #8]
    EXTI->FTSR1 |=  (1 << BTN_PIN);
 8000344:	4b0a      	ldr	r3, [pc, #40]	@ (8000370 <main+0xec>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a09      	ldr	r2, [pc, #36]	@ (8000370 <main+0xec>)
 800034a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800034e:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000350:	2028      	movs	r0, #40	@ 0x28
 8000352:	f7ff ff39 	bl	80001c8 <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI15_10_IRQn, 2);
 8000356:	2102      	movs	r1, #2
 8000358:	2028      	movs	r0, #40	@ 0x28
 800035a:	f7ff ff53 	bl	8000204 <__NVIC_SetPriority>

    while (1)
 800035e:	bf00      	nop
 8000360:	e7fd      	b.n	800035e <main+0xda>
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000
 8000368:	48000800 	.word	0x48000800
 800036c:	40010000 	.word	0x40010000
 8000370:	40010400 	.word	0x40010400

08000374 <EXTI15_10_IRQHandler>:
    {
    }
}

void EXTI15_10_IRQHandler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
    if (EXTI->PR1 & (1 << BTN_PIN))
 8000378:	4b0b      	ldr	r3, [pc, #44]	@ (80003a8 <EXTI15_10_IRQHandler+0x34>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000380:	2b00      	cmp	r3, #0
 8000382:	d00f      	beq.n	80003a4 <EXTI15_10_IRQHandler+0x30>
    {
        EXTI->PR1 |= (1 << BTN_PIN);
 8000384:	4b08      	ldr	r3, [pc, #32]	@ (80003a8 <EXTI15_10_IRQHandler+0x34>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	4a07      	ldr	r2, [pc, #28]	@ (80003a8 <EXTI15_10_IRQHandler+0x34>)
 800038a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800038e:	6153      	str	r3, [r2, #20]
        LED_PORT->ODR ^= (1 << LED_PIN);
 8000390:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800039a:	f083 0301 	eor.w	r3, r3, #1
 800039e:	6153      	str	r3, [r2, #20]
        delay();
 80003a0:	f7ff ff5a 	bl	8000258 <delay>
    }
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40010400 	.word	0x40010400

080003ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003b0:	bf00      	nop
 80003b2:	e7fd      	b.n	80003b0 <NMI_Handler+0x4>

080003b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b8:	bf00      	nop
 80003ba:	e7fd      	b.n	80003b8 <HardFault_Handler+0x4>

080003bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <MemManage_Handler+0x4>

080003c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c8:	bf00      	nop
 80003ca:	e7fd      	b.n	80003c8 <BusFault_Handler+0x4>

080003cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d0:	bf00      	nop
 80003d2:	e7fd      	b.n	80003d0 <UsageFault_Handler+0x4>

080003d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000402:	f000 f83f 	bl	8000484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000410:	4b06      	ldr	r3, [pc, #24]	@ (800042c <SystemInit+0x20>)
 8000412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000416:	4a05      	ldr	r2, [pc, #20]	@ (800042c <SystemInit+0x20>)
 8000418:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800041c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	e000ed00 	.word	0xe000ed00

08000430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000430:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000468 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000434:	f7ff ffea 	bl	800040c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000438:	480c      	ldr	r0, [pc, #48]	@ (800046c <LoopForever+0x6>)
  ldr r1, =_edata
 800043a:	490d      	ldr	r1, [pc, #52]	@ (8000470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800043c:	4a0d      	ldr	r2, [pc, #52]	@ (8000474 <LoopForever+0xe>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000450:	4c0a      	ldr	r4, [pc, #40]	@ (800047c <LoopForever+0x16>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800045e:	f000 f825 	bl	80004ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000462:	f7ff ff0f 	bl	8000284 <main>

08000466 <LoopForever>:

LoopForever:
    b LoopForever
 8000466:	e7fe      	b.n	8000466 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000468:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800046c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000470:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000474:	08000514 	.word	0x08000514
  ldr r2, =_sbss
 8000478:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800047c:	20000024 	.word	0x20000024

08000480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000480:	e7fe      	b.n	8000480 <ADC1_2_IRQHandler>
	...

08000484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <HAL_IncTick+0x20>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <HAL_IncTick+0x24>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4413      	add	r3, r2
 8000494:	4a04      	ldr	r2, [pc, #16]	@ (80004a8 <HAL_IncTick+0x24>)
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	20000000 	.word	0x20000000
 80004a8:	20000020 	.word	0x20000020

080004ac <__libc_init_array>:
 80004ac:	b570      	push	{r4, r5, r6, lr}
 80004ae:	4d0d      	ldr	r5, [pc, #52]	@ (80004e4 <__libc_init_array+0x38>)
 80004b0:	4c0d      	ldr	r4, [pc, #52]	@ (80004e8 <__libc_init_array+0x3c>)
 80004b2:	1b64      	subs	r4, r4, r5
 80004b4:	10a4      	asrs	r4, r4, #2
 80004b6:	2600      	movs	r6, #0
 80004b8:	42a6      	cmp	r6, r4
 80004ba:	d109      	bne.n	80004d0 <__libc_init_array+0x24>
 80004bc:	4d0b      	ldr	r5, [pc, #44]	@ (80004ec <__libc_init_array+0x40>)
 80004be:	4c0c      	ldr	r4, [pc, #48]	@ (80004f0 <__libc_init_array+0x44>)
 80004c0:	f000 f818 	bl	80004f4 <_init>
 80004c4:	1b64      	subs	r4, r4, r5
 80004c6:	10a4      	asrs	r4, r4, #2
 80004c8:	2600      	movs	r6, #0
 80004ca:	42a6      	cmp	r6, r4
 80004cc:	d105      	bne.n	80004da <__libc_init_array+0x2e>
 80004ce:	bd70      	pop	{r4, r5, r6, pc}
 80004d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d4:	4798      	blx	r3
 80004d6:	3601      	adds	r6, #1
 80004d8:	e7ee      	b.n	80004b8 <__libc_init_array+0xc>
 80004da:	f855 3b04 	ldr.w	r3, [r5], #4
 80004de:	4798      	blx	r3
 80004e0:	3601      	adds	r6, #1
 80004e2:	e7f2      	b.n	80004ca <__libc_init_array+0x1e>
 80004e4:	0800050c 	.word	0x0800050c
 80004e8:	0800050c 	.word	0x0800050c
 80004ec:	0800050c 	.word	0x0800050c
 80004f0:	08000510 	.word	0x08000510

080004f4 <_init>:
 80004f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f6:	bf00      	nop
 80004f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fa:	bc08      	pop	{r3}
 80004fc:	469e      	mov	lr, r3
 80004fe:	4770      	bx	lr

08000500 <_fini>:
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	bf00      	nop
 8000504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000506:	bc08      	pop	{r3}
 8000508:	469e      	mov	lr, r3
 800050a:	4770      	bx	lr
