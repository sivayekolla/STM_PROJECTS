
pow2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001034  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080011c4  080011c4  000021c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001268  08001268  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001268  08001268  00002268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001270  08001270  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001270  08001270  00002270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001274  08001274  00002274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001278  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000054  080012cc  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080012cc  000031c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000170d  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000608  00000000  00000000  00004791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000258  00000000  00000000  00004da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a9  00000000  00000000  00004ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001907  00000000  00000000  000051a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000025b8  00000000  00000000  00006aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e55f7  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee657  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cd8  00000000  00000000  000ee69c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ef374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080011ac 	.word	0x080011ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	080011ac 	.word	0x080011ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <delay_ms>:
#define BMI160_CMD      0x7E
#define BMI160_ACC_DATA 0x12
#define BMI160_GYR_DATA 0x0C

/* ---------- Utility ---------- */
static void delay_ms(uint32_t ms) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
    for(uint32_t i=0; i<ms*4000; i++) __asm__("nop");
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	e003      	b.n	8000286 <delay_ms+0x16>
 800027e:	bf00      	nop
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	3301      	adds	r3, #1
 8000284:	60fb      	str	r3, [r7, #12]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800028c:	fb02 f303 	mul.w	r3, r2, r3
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	429a      	cmp	r2, r3
 8000294:	d3f3      	bcc.n	800027e <delay_ms+0xe>
}
 8000296:	bf00      	nop
 8000298:	bf00      	nop
 800029a:	3714      	adds	r7, #20
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr

080002a4 <uart2_init>:

/* ---------- UART ---------- */
static void uart2_init(void) {
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
    RCC_AHB2ENR |= (1<<0);   // GPIOA clock
 80002a8:	4b16      	ldr	r3, [pc, #88]	@ (8000304 <uart2_init+0x60>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a15      	ldr	r2, [pc, #84]	@ (8000304 <uart2_init+0x60>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6013      	str	r3, [r2, #0]
    RCC_APB1ENR1 |= (1<<17); // USART2 clock
 80002b4:	4b14      	ldr	r3, [pc, #80]	@ (8000308 <uart2_init+0x64>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a13      	ldr	r2, [pc, #76]	@ (8000308 <uart2_init+0x64>)
 80002ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002be:	6013      	str	r3, [r2, #0]

    /* PA2: AF7 */
    GPIOA_MODER &= ~(3<<(2*2));
 80002c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002ca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80002ce:	6013      	str	r3, [r2, #0]
    GPIOA_MODER |=  (2<<(2*2));
 80002d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	6013      	str	r3, [r2, #0]
    GPIOA_AFRL  |=  (7<<(4*2));
 80002e0:	4b0a      	ldr	r3, [pc, #40]	@ (800030c <uart2_init+0x68>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a09      	ldr	r2, [pc, #36]	@ (800030c <uart2_init+0x68>)
 80002e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80002ea:	6013      	str	r3, [r2, #0]

    USART2_BRR = 4000000/115200; // 80MHz clk
 80002ec:	4b08      	ldr	r3, [pc, #32]	@ (8000310 <uart2_init+0x6c>)
 80002ee:	2222      	movs	r2, #34	@ 0x22
 80002f0:	601a      	str	r2, [r3, #0]
    USART2_CR1 = (1<<3)|(1<<0);   // TE + UE
 80002f2:	4b08      	ldr	r3, [pc, #32]	@ (8000314 <uart2_init+0x70>)
 80002f4:	2209      	movs	r2, #9
 80002f6:	601a      	str	r2, [r3, #0]
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	4002104c 	.word	0x4002104c
 8000308:	40021058 	.word	0x40021058
 800030c:	48000020 	.word	0x48000020
 8000310:	4000440c 	.word	0x4000440c
 8000314:	40004400 	.word	0x40004400

08000318 <uart2_write>:

static void uart2_write(char c) {
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
    while(!(USART2_ISR & (1<<7))); // TXE
 8000322:	bf00      	nop
 8000324:	4b07      	ldr	r3, [pc, #28]	@ (8000344 <uart2_write+0x2c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0f9      	beq.n	8000324 <uart2_write+0xc>
    USART2_TDR = c;
 8000330:	4a05      	ldr	r2, [pc, #20]	@ (8000348 <uart2_write+0x30>)
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	6013      	str	r3, [r2, #0]
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	4000441c 	.word	0x4000441c
 8000348:	40004428 	.word	0x40004428

0800034c <uart2_print>:

static void uart2_print(char *s) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
    while(*s) uart2_write(*s++);
 8000354:	e006      	b.n	8000364 <uart2_print+0x18>
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	1c5a      	adds	r2, r3, #1
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ffda 	bl	8000318 <uart2_write>
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d1f4      	bne.n	8000356 <uart2_print+0xa>
}
 800036c:	bf00      	nop
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <i2c1_init>:

/* ---------- I2C ---------- */
static void i2c1_init(void) {
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
    RCC_AHB2ENR |= (1<<1);   // GPIOB clk
 800037c:	4b1e      	ldr	r3, [pc, #120]	@ (80003f8 <i2c1_init+0x80>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a1d      	ldr	r2, [pc, #116]	@ (80003f8 <i2c1_init+0x80>)
 8000382:	f043 0302 	orr.w	r3, r3, #2
 8000386:	6013      	str	r3, [r2, #0]
    RCC_APB1ENR1 |= (1<<21); // I2C1 clk
 8000388:	4b1c      	ldr	r3, [pc, #112]	@ (80003fc <i2c1_init+0x84>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a1b      	ldr	r2, [pc, #108]	@ (80003fc <i2c1_init+0x84>)
 800038e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000392:	6013      	str	r3, [r2, #0]

    // PB8 SCL, PB9 SDA (AF4)
    GPIOB_MODER &= ~((3<<(8*2)) | (3<<(9*2)));
 8000394:	4b1a      	ldr	r3, [pc, #104]	@ (8000400 <i2c1_init+0x88>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a19      	ldr	r2, [pc, #100]	@ (8000400 <i2c1_init+0x88>)
 800039a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800039e:	6013      	str	r3, [r2, #0]
    GPIOB_MODER |=  ((2<<(8*2)) | (2<<(9*2)));
 80003a0:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <i2c1_init+0x88>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a16      	ldr	r2, [pc, #88]	@ (8000400 <i2c1_init+0x88>)
 80003a6:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 80003aa:	6013      	str	r3, [r2, #0]
    GPIOB_AFRL  |=  (4<<((8-8)*4)) | (4<<((9-8)*4));
 80003ac:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <i2c1_init+0x8c>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a14      	ldr	r2, [pc, #80]	@ (8000404 <i2c1_init+0x8c>)
 80003b2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80003b6:	6013      	str	r3, [r2, #0]
    GPIOB_OTYPER |= (1<<8) | (1<<9);
 80003b8:	4b13      	ldr	r3, [pc, #76]	@ (8000408 <i2c1_init+0x90>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a12      	ldr	r2, [pc, #72]	@ (8000408 <i2c1_init+0x90>)
 80003be:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80003c2:	6013      	str	r3, [r2, #0]
    GPIOB_PUPDR  |= (1<<(8*2)) | (1<<(9*2));
 80003c4:	4b11      	ldr	r3, [pc, #68]	@ (800040c <i2c1_init+0x94>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a10      	ldr	r2, [pc, #64]	@ (800040c <i2c1_init+0x94>)
 80003ca:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 80003ce:	6013      	str	r3, [r2, #0]

    I2C1_CR1 &= ~(1<<0);             // disable
 80003d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <i2c1_init+0x98>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000410 <i2c1_init+0x98>)
 80003d6:	f023 0301 	bic.w	r3, r3, #1
 80003da:	6013      	str	r3, [r2, #0]
    I2C1_TIMINGR = 0x20303E5D;       // 100kHz timing
 80003dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000414 <i2c1_init+0x9c>)
 80003de:	4a0e      	ldr	r2, [pc, #56]	@ (8000418 <i2c1_init+0xa0>)
 80003e0:	601a      	str	r2, [r3, #0]
    I2C1_CR1 |= (1<<0);              // enable
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <i2c1_init+0x98>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000410 <i2c1_init+0x98>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6013      	str	r3, [r2, #0]
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	4002104c 	.word	0x4002104c
 80003fc:	40021058 	.word	0x40021058
 8000400:	48000400 	.word	0x48000400
 8000404:	48000420 	.word	0x48000420
 8000408:	48000404 	.word	0x48000404
 800040c:	4800040c 	.word	0x4800040c
 8000410:	40005400 	.word	0x40005400
 8000414:	40005410 	.word	0x40005410
 8000418:	20303e5d 	.word	0x20303e5d

0800041c <i2c1_write>:

static void i2c1_write(uint8_t addr, uint8_t reg, uint8_t val) {
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
 8000426:	460b      	mov	r3, r1
 8000428:	71bb      	strb	r3, [r7, #6]
 800042a:	4613      	mov	r3, r2
 800042c:	717b      	strb	r3, [r7, #5]
    I2C1_CR2 = (addr<<1) | (1<<16);  // NBYTES=1
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000436:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <i2c1_write+0xa0>)
 8000438:	601a      	str	r2, [r3, #0]
    I2C1_CR2 |= (1<<13);             // START
 800043a:	4b20      	ldr	r3, [pc, #128]	@ (80004bc <i2c1_write+0xa0>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a1f      	ldr	r2, [pc, #124]	@ (80004bc <i2c1_write+0xa0>)
 8000440:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000444:	6013      	str	r3, [r2, #0]
    while(!(I2C1_ISR & (1<<1)));     // TXIS
 8000446:	bf00      	nop
 8000448:	4b1d      	ldr	r3, [pc, #116]	@ (80004c0 <i2c1_write+0xa4>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f003 0302 	and.w	r3, r3, #2
 8000450:	2b00      	cmp	r3, #0
 8000452:	d0f9      	beq.n	8000448 <i2c1_write+0x2c>
    I2C1_TXDR = reg;
 8000454:	4a1b      	ldr	r2, [pc, #108]	@ (80004c4 <i2c1_write+0xa8>)
 8000456:	79bb      	ldrb	r3, [r7, #6]
 8000458:	6013      	str	r3, [r2, #0]
    while(!(I2C1_ISR & (1<<6)));     // TC
 800045a:	bf00      	nop
 800045c:	4b18      	ldr	r3, [pc, #96]	@ (80004c0 <i2c1_write+0xa4>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000464:	2b00      	cmp	r3, #0
 8000466:	d0f9      	beq.n	800045c <i2c1_write+0x40>

    I2C1_CR2 = (addr<<1) | (1<<16);  // NBYTES=1
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000470:	4b12      	ldr	r3, [pc, #72]	@ (80004bc <i2c1_write+0xa0>)
 8000472:	601a      	str	r2, [r3, #0]
    I2C1_CR2 |= (1<<13);             // START
 8000474:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <i2c1_write+0xa0>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a10      	ldr	r2, [pc, #64]	@ (80004bc <i2c1_write+0xa0>)
 800047a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800047e:	6013      	str	r3, [r2, #0]
    while(!(I2C1_ISR & (1<<1)));
 8000480:	bf00      	nop
 8000482:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <i2c1_write+0xa4>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f003 0302 	and.w	r3, r3, #2
 800048a:	2b00      	cmp	r3, #0
 800048c:	d0f9      	beq.n	8000482 <i2c1_write+0x66>
    I2C1_TXDR = val;
 800048e:	4a0d      	ldr	r2, [pc, #52]	@ (80004c4 <i2c1_write+0xa8>)
 8000490:	797b      	ldrb	r3, [r7, #5]
 8000492:	6013      	str	r3, [r2, #0]
    while(!(I2C1_ISR & (1<<6)));
 8000494:	bf00      	nop
 8000496:	4b0a      	ldr	r3, [pc, #40]	@ (80004c0 <i2c1_write+0xa4>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0f9      	beq.n	8000496 <i2c1_write+0x7a>
    I2C1_CR2 |= (1<<14);             // STOP
 80004a2:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <i2c1_write+0xa0>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a05      	ldr	r2, [pc, #20]	@ (80004bc <i2c1_write+0xa0>)
 80004a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004ac:	6013      	str	r3, [r2, #0]
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40005404 	.word	0x40005404
 80004c0:	40005418 	.word	0x40005418
 80004c4:	40005428 	.word	0x40005428

080004c8 <i2c1_read>:

static uint8_t i2c1_read(uint8_t addr, uint8_t reg) {
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	460a      	mov	r2, r1
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	4613      	mov	r3, r2
 80004d6:	71bb      	strb	r3, [r7, #6]
    uint8_t val;
    // Write register
    I2C1_CR2 = (addr<<1) | (1<<16);
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80004e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000558 <i2c1_read+0x90>)
 80004e2:	601a      	str	r2, [r3, #0]
    I2C1_CR2 |= (1<<13);
 80004e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000558 <i2c1_read+0x90>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000558 <i2c1_read+0x90>)
 80004ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004ee:	6013      	str	r3, [r2, #0]
    while(!(I2C1_ISR & (1<<1)));
 80004f0:	bf00      	nop
 80004f2:	4b1a      	ldr	r3, [pc, #104]	@ (800055c <i2c1_read+0x94>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f003 0302 	and.w	r3, r3, #2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0f9      	beq.n	80004f2 <i2c1_read+0x2a>
    I2C1_TXDR = reg;
 80004fe:	4a18      	ldr	r2, [pc, #96]	@ (8000560 <i2c1_read+0x98>)
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	6013      	str	r3, [r2, #0]
    while(!(I2C1_ISR & (1<<6)));
 8000504:	bf00      	nop
 8000506:	4b15      	ldr	r3, [pc, #84]	@ (800055c <i2c1_read+0x94>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0f9      	beq.n	8000506 <i2c1_read+0x3e>
    // Read one byte
    I2C1_CR2 = (addr<<1)|(1<<10)|(1<<16); // RD_WRN=1
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	f443 3282 	orr.w	r2, r3, #66560	@ 0x10400
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <i2c1_read+0x90>)
 800051c:	601a      	str	r2, [r3, #0]
    I2C1_CR2 |= (1<<13);
 800051e:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <i2c1_read+0x90>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a0d      	ldr	r2, [pc, #52]	@ (8000558 <i2c1_read+0x90>)
 8000524:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000528:	6013      	str	r3, [r2, #0]
    while(!(I2C1_ISR & (1<<2)));
 800052a:	bf00      	nop
 800052c:	4b0b      	ldr	r3, [pc, #44]	@ (800055c <i2c1_read+0x94>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	2b00      	cmp	r3, #0
 8000536:	d0f9      	beq.n	800052c <i2c1_read+0x64>
    val = I2C1_RXDR;
 8000538:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <i2c1_read+0x9c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	73fb      	strb	r3, [r7, #15]
    I2C1_CR2 |= (1<<14);
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <i2c1_read+0x90>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a05      	ldr	r2, [pc, #20]	@ (8000558 <i2c1_read+0x90>)
 8000544:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000548:	6013      	str	r3, [r2, #0]
    return val;
 800054a:	7bfb      	ldrb	r3, [r7, #15]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40005404 	.word	0x40005404
 800055c:	40005418 	.word	0x40005418
 8000560:	40005428 	.word	0x40005428
 8000564:	40005424 	.word	0x40005424

08000568 <main>:

/* ---------- MAIN ---------- */
int main(void) {
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	b09b      	sub	sp, #108	@ 0x6c
 800056c:	af06      	add	r7, sp, #24
    uart2_init();
 800056e:	f7ff fe99 	bl	80002a4 <uart2_init>
    i2c1_init();
 8000572:	f7ff ff01 	bl	8000378 <i2c1_init>
    delay_ms(50);
 8000576:	2032      	movs	r0, #50	@ 0x32
 8000578:	f7ff fe7a 	bl	8000270 <delay_ms>

    uart2_print("\r\nBMI160 Bare-Metal Init...\r\n");
 800057c:	4856      	ldr	r0, [pc, #344]	@ (80006d8 <main+0x170>)
 800057e:	f7ff fee5 	bl	800034c <uart2_print>
    uint8_t id = i2c1_read(BMI160_ADDR, BMI160_WHOAMI);
 8000582:	2100      	movs	r1, #0
 8000584:	2069      	movs	r0, #105	@ 0x69
 8000586:	f7ff ff9f 	bl	80004c8 <i2c1_read>
 800058a:	4603      	mov	r3, r0
 800058c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if(id == 0xD1)
 8000590:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000594:	2bd1      	cmp	r3, #209	@ 0xd1
 8000596:	d103      	bne.n	80005a0 <main+0x38>
        uart2_print("BMI160 detected!\r\n");
 8000598:	4850      	ldr	r0, [pc, #320]	@ (80006dc <main+0x174>)
 800059a:	f7ff fed7 	bl	800034c <uart2_print>
 800059e:	e002      	b.n	80005a6 <main+0x3e>
    else
        uart2_print("BMI160 not found!\r\n");
 80005a0:	484f      	ldr	r0, [pc, #316]	@ (80006e0 <main+0x178>)
 80005a2:	f7ff fed3 	bl	800034c <uart2_print>

    /* Wake up sensors */
    i2c1_write(BMI160_ADDR, BMI160_CMD, 0x11); delay_ms(100);
 80005a6:	2211      	movs	r2, #17
 80005a8:	217e      	movs	r1, #126	@ 0x7e
 80005aa:	2069      	movs	r0, #105	@ 0x69
 80005ac:	f7ff ff36 	bl	800041c <i2c1_write>
 80005b0:	2064      	movs	r0, #100	@ 0x64
 80005b2:	f7ff fe5d 	bl	8000270 <delay_ms>
    i2c1_write(BMI160_ADDR, BMI160_CMD, 0x15); delay_ms(100);
 80005b6:	2215      	movs	r2, #21
 80005b8:	217e      	movs	r1, #126	@ 0x7e
 80005ba:	2069      	movs	r0, #105	@ 0x69
 80005bc:	f7ff ff2e 	bl	800041c <i2c1_write>
 80005c0:	2064      	movs	r0, #100	@ 0x64
 80005c2:	f7ff fe55 	bl	8000270 <delay_ms>

    char buf[64];
    while(1) {
        int16_t gx, gy, gz, ax, ay, az;

        gx = (int16_t)((i2c1_read(BMI160_ADDR, BMI160_GYR_DATA+1)<<8) |
 80005c6:	210d      	movs	r1, #13
 80005c8:	2069      	movs	r0, #105	@ 0x69
 80005ca:	f7ff ff7d 	bl	80004c8 <i2c1_read>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b21b      	sxth	r3, r3
 80005d2:	021b      	lsls	r3, r3, #8
 80005d4:	b21c      	sxth	r4, r3
                        i2c1_read(BMI160_ADDR, BMI160_GYR_DATA));
 80005d6:	210c      	movs	r1, #12
 80005d8:	2069      	movs	r0, #105	@ 0x69
 80005da:	f7ff ff75 	bl	80004c8 <i2c1_read>
 80005de:	4603      	mov	r3, r0
 80005e0:	b21b      	sxth	r3, r3
        gx = (int16_t)((i2c1_read(BMI160_ADDR, BMI160_GYR_DATA+1)<<8) |
 80005e2:	4323      	orrs	r3, r4
 80005e4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        gy = (int16_t)((i2c1_read(BMI160_ADDR, BMI160_GYR_DATA+3)<<8) |
 80005e8:	210f      	movs	r1, #15
 80005ea:	2069      	movs	r0, #105	@ 0x69
 80005ec:	f7ff ff6c 	bl	80004c8 <i2c1_read>
 80005f0:	4603      	mov	r3, r0
 80005f2:	b21b      	sxth	r3, r3
 80005f4:	021b      	lsls	r3, r3, #8
 80005f6:	b21c      	sxth	r4, r3
                        i2c1_read(BMI160_ADDR, BMI160_GYR_DATA+2));
 80005f8:	210e      	movs	r1, #14
 80005fa:	2069      	movs	r0, #105	@ 0x69
 80005fc:	f7ff ff64 	bl	80004c8 <i2c1_read>
 8000600:	4603      	mov	r3, r0
 8000602:	b21b      	sxth	r3, r3
        gy = (int16_t)((i2c1_read(BMI160_ADDR, BMI160_GYR_DATA+3)<<8) |
 8000604:	4323      	orrs	r3, r4
 8000606:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        gz = (int16_t)((i2c1_read(BMI160_ADDR, BMI160_GYR_DATA+5)<<8) |
 800060a:	2111      	movs	r1, #17
 800060c:	2069      	movs	r0, #105	@ 0x69
 800060e:	f7ff ff5b 	bl	80004c8 <i2c1_read>
 8000612:	4603      	mov	r3, r0
 8000614:	b21b      	sxth	r3, r3
 8000616:	021b      	lsls	r3, r3, #8
 8000618:	b21c      	sxth	r4, r3
                        i2c1_read(BMI160_ADDR, BMI160_GYR_DATA+4));
 800061a:	2110      	movs	r1, #16
 800061c:	2069      	movs	r0, #105	@ 0x69
 800061e:	f7ff ff53 	bl	80004c8 <i2c1_read>
 8000622:	4603      	mov	r3, r0
 8000624:	b21b      	sxth	r3, r3
        gz = (int16_t)((i2c1_read(BMI160_ADDR, BMI160_GYR_DATA+5)<<8) |
 8000626:	4323      	orrs	r3, r4
 8000628:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

        ax = (int16_t)((i2c1_read(BMI160_ADDR, BMI160_ACC_DATA+1)<<8) |
 800062c:	2113      	movs	r1, #19
 800062e:	2069      	movs	r0, #105	@ 0x69
 8000630:	f7ff ff4a 	bl	80004c8 <i2c1_read>
 8000634:	4603      	mov	r3, r0
 8000636:	b21b      	sxth	r3, r3
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	b21c      	sxth	r4, r3
                        i2c1_read(BMI160_ADDR, BMI160_ACC_DATA));
 800063c:	2112      	movs	r1, #18
 800063e:	2069      	movs	r0, #105	@ 0x69
 8000640:	f7ff ff42 	bl	80004c8 <i2c1_read>
 8000644:	4603      	mov	r3, r0
 8000646:	b21b      	sxth	r3, r3
        ax = (int16_t)((i2c1_read(BMI160_ADDR, BMI160_ACC_DATA+1)<<8) |
 8000648:	4323      	orrs	r3, r4
 800064a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        ay = (int16_t)((i2c1_read(BMI160_ADDR, BMI160_ACC_DATA+3)<<8) |
 800064e:	2115      	movs	r1, #21
 8000650:	2069      	movs	r0, #105	@ 0x69
 8000652:	f7ff ff39 	bl	80004c8 <i2c1_read>
 8000656:	4603      	mov	r3, r0
 8000658:	b21b      	sxth	r3, r3
 800065a:	021b      	lsls	r3, r3, #8
 800065c:	b21c      	sxth	r4, r3
                        i2c1_read(BMI160_ADDR, BMI160_ACC_DATA+2));
 800065e:	2114      	movs	r1, #20
 8000660:	2069      	movs	r0, #105	@ 0x69
 8000662:	f7ff ff31 	bl	80004c8 <i2c1_read>
 8000666:	4603      	mov	r3, r0
 8000668:	b21b      	sxth	r3, r3
        ay = (int16_t)((i2c1_read(BMI160_ADDR, BMI160_ACC_DATA+3)<<8) |
 800066a:	4323      	orrs	r3, r4
 800066c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        az = (int16_t)((i2c1_read(BMI160_ADDR, BMI160_ACC_DATA+5)<<8) |
 8000670:	2117      	movs	r1, #23
 8000672:	2069      	movs	r0, #105	@ 0x69
 8000674:	f7ff ff28 	bl	80004c8 <i2c1_read>
 8000678:	4603      	mov	r3, r0
 800067a:	b21b      	sxth	r3, r3
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	b21c      	sxth	r4, r3
                        i2c1_read(BMI160_ADDR, BMI160_ACC_DATA+4));
 8000680:	2116      	movs	r1, #22
 8000682:	2069      	movs	r0, #105	@ 0x69
 8000684:	f7ff ff20 	bl	80004c8 <i2c1_read>
 8000688:	4603      	mov	r3, r0
 800068a:	b21b      	sxth	r3, r3
        az = (int16_t)((i2c1_read(BMI160_ADDR, BMI160_ACC_DATA+5)<<8) |
 800068c:	4323      	orrs	r3, r4
 800068e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

        snprintf(buf, sizeof(buf),
 8000692:	f9b7 6046 	ldrsh.w	r6, [r7, #70]	@ 0x46
 8000696:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800069a:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 800069e:	f9b7 104c 	ldrsh.w	r1, [r7, #76]	@ 0x4c
 80006a2:	f9b7 004a 	ldrsh.w	r0, [r7, #74]	@ 0x4a
 80006a6:	f9b7 4048 	ldrsh.w	r4, [r7, #72]	@ 0x48
 80006aa:	463d      	mov	r5, r7
 80006ac:	9404      	str	r4, [sp, #16]
 80006ae:	9003      	str	r0, [sp, #12]
 80006b0:	9102      	str	r1, [sp, #8]
 80006b2:	9201      	str	r2, [sp, #4]
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	4633      	mov	r3, r6
 80006b8:	4a0a      	ldr	r2, [pc, #40]	@ (80006e4 <main+0x17c>)
 80006ba:	2140      	movs	r1, #64	@ 0x40
 80006bc:	4628      	mov	r0, r5
 80006be:	f000 f8c9 	bl	8000854 <sniprintf>
                 "AX:%d AY:%d AZ:%d  GX:%d GY:%d GZ:%d\r\n",
                 ax, ay, az, gx, gy, gz);
        uart2_print(buf);
 80006c2:	463b      	mov	r3, r7
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fe41 	bl	800034c <uart2_print>
        delay_ms(300);
 80006ca:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80006ce:	f7ff fdcf 	bl	8000270 <delay_ms>
    while(1) {
 80006d2:	bf00      	nop
 80006d4:	e777      	b.n	80005c6 <main+0x5e>
 80006d6:	bf00      	nop
 80006d8:	080011c4 	.word	0x080011c4
 80006dc:	080011e4 	.word	0x080011e4
 80006e0:	080011f8 	.word	0x080011f8
 80006e4:	0800120c 	.word	0x0800120c

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <NMI_Handler+0x4>

080006f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <HardFault_Handler+0x4>

080006f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <MemManage_Handler+0x4>

08000700 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <UsageFault_Handler+0x4>

08000710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073e:	f000 f875 	bl	800082c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000750:	4a14      	ldr	r2, [pc, #80]	@ (80007a4 <_sbrk+0x5c>)
 8000752:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <_sbrk+0x60>)
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800075c:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <_sbrk+0x64>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d102      	bne.n	800076a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000764:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <_sbrk+0x64>)
 8000766:	4a12      	ldr	r2, [pc, #72]	@ (80007b0 <_sbrk+0x68>)
 8000768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <_sbrk+0x64>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	429a      	cmp	r2, r3
 8000776:	d207      	bcs.n	8000788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000778:	f000 f8a2 	bl	80008c0 <__errno>
 800077c:	4603      	mov	r3, r0
 800077e:	220c      	movs	r2, #12
 8000780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000782:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000786:	e009      	b.n	800079c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <_sbrk+0x64>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800078e:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <_sbrk+0x64>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	4a05      	ldr	r2, [pc, #20]	@ (80007ac <_sbrk+0x64>)
 8000798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800079a:	68fb      	ldr	r3, [r7, #12]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20018000 	.word	0x20018000
 80007a8:	00000400 	.word	0x00000400
 80007ac:	20000070 	.word	0x20000070
 80007b0:	200001c0 	.word	0x200001c0

080007b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <SystemInit+0x20>)
 80007ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007be:	4a05      	ldr	r2, [pc, #20]	@ (80007d4 <SystemInit+0x20>)
 80007c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000810 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007dc:	f7ff ffea 	bl	80007b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e0:	480c      	ldr	r0, [pc, #48]	@ (8000814 <LoopForever+0x6>)
  ldr r1, =_edata
 80007e2:	490d      	ldr	r1, [pc, #52]	@ (8000818 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e4:	4a0d      	ldr	r2, [pc, #52]	@ (800081c <LoopForever+0xe>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e8:	e002      	b.n	80007f0 <LoopCopyDataInit>

080007ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ee:	3304      	adds	r3, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f4:	d3f9      	bcc.n	80007ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000820 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000824 <LoopForever+0x16>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007fc:	e001      	b.n	8000802 <LoopFillZerobss>

080007fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000800:	3204      	adds	r2, #4

08000802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000804:	d3fb      	bcc.n	80007fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000806:	f000 f861 	bl	80008cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800080a:	f7ff fead 	bl	8000568 <main>

0800080e <LoopForever>:

LoopForever:
    b LoopForever
 800080e:	e7fe      	b.n	800080e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000810:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000818:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 800081c:	08001278 	.word	0x08001278
  ldr r2, =_sbss
 8000820:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000824:	200001c0 	.word	0x200001c0

08000828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC1_2_IRQHandler>
	...

0800082c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <HAL_IncTick+0x20>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <HAL_IncTick+0x24>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4413      	add	r3, r2
 800083c:	4a04      	ldr	r2, [pc, #16]	@ (8000850 <HAL_IncTick+0x24>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000000 	.word	0x20000000
 8000850:	20000074 	.word	0x20000074

08000854 <sniprintf>:
 8000854:	b40c      	push	{r2, r3}
 8000856:	b530      	push	{r4, r5, lr}
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <sniprintf+0x68>)
 800085a:	1e0c      	subs	r4, r1, #0
 800085c:	681d      	ldr	r5, [r3, #0]
 800085e:	b09d      	sub	sp, #116	@ 0x74
 8000860:	da08      	bge.n	8000874 <sniprintf+0x20>
 8000862:	238b      	movs	r3, #139	@ 0x8b
 8000864:	602b      	str	r3, [r5, #0]
 8000866:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800086a:	b01d      	add	sp, #116	@ 0x74
 800086c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000870:	b002      	add	sp, #8
 8000872:	4770      	bx	lr
 8000874:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8000878:	f8ad 3014 	strh.w	r3, [sp, #20]
 800087c:	f04f 0300 	mov.w	r3, #0
 8000880:	931b      	str	r3, [sp, #108]	@ 0x6c
 8000882:	bf14      	ite	ne
 8000884:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8000888:	4623      	moveq	r3, r4
 800088a:	9304      	str	r3, [sp, #16]
 800088c:	9307      	str	r3, [sp, #28]
 800088e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000892:	9002      	str	r0, [sp, #8]
 8000894:	9006      	str	r0, [sp, #24]
 8000896:	f8ad 3016 	strh.w	r3, [sp, #22]
 800089a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800089c:	ab21      	add	r3, sp, #132	@ 0x84
 800089e:	a902      	add	r1, sp, #8
 80008a0:	4628      	mov	r0, r5
 80008a2:	9301      	str	r3, [sp, #4]
 80008a4:	f000 f894 	bl	80009d0 <_svfiprintf_r>
 80008a8:	1c43      	adds	r3, r0, #1
 80008aa:	bfbc      	itt	lt
 80008ac:	238b      	movlt	r3, #139	@ 0x8b
 80008ae:	602b      	strlt	r3, [r5, #0]
 80008b0:	2c00      	cmp	r4, #0
 80008b2:	d0da      	beq.n	800086a <sniprintf+0x16>
 80008b4:	9b02      	ldr	r3, [sp, #8]
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	e7d6      	b.n	800086a <sniprintf+0x16>
 80008bc:	20000004 	.word	0x20000004

080008c0 <__errno>:
 80008c0:	4b01      	ldr	r3, [pc, #4]	@ (80008c8 <__errno+0x8>)
 80008c2:	6818      	ldr	r0, [r3, #0]
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000004 	.word	0x20000004

080008cc <__libc_init_array>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	4d0d      	ldr	r5, [pc, #52]	@ (8000904 <__libc_init_array+0x38>)
 80008d0:	4c0d      	ldr	r4, [pc, #52]	@ (8000908 <__libc_init_array+0x3c>)
 80008d2:	1b64      	subs	r4, r4, r5
 80008d4:	10a4      	asrs	r4, r4, #2
 80008d6:	2600      	movs	r6, #0
 80008d8:	42a6      	cmp	r6, r4
 80008da:	d109      	bne.n	80008f0 <__libc_init_array+0x24>
 80008dc:	4d0b      	ldr	r5, [pc, #44]	@ (800090c <__libc_init_array+0x40>)
 80008de:	4c0c      	ldr	r4, [pc, #48]	@ (8000910 <__libc_init_array+0x44>)
 80008e0:	f000 fc64 	bl	80011ac <_init>
 80008e4:	1b64      	subs	r4, r4, r5
 80008e6:	10a4      	asrs	r4, r4, #2
 80008e8:	2600      	movs	r6, #0
 80008ea:	42a6      	cmp	r6, r4
 80008ec:	d105      	bne.n	80008fa <__libc_init_array+0x2e>
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f4:	4798      	blx	r3
 80008f6:	3601      	adds	r6, #1
 80008f8:	e7ee      	b.n	80008d8 <__libc_init_array+0xc>
 80008fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80008fe:	4798      	blx	r3
 8000900:	3601      	adds	r6, #1
 8000902:	e7f2      	b.n	80008ea <__libc_init_array+0x1e>
 8000904:	08001270 	.word	0x08001270
 8000908:	08001270 	.word	0x08001270
 800090c:	08001270 	.word	0x08001270
 8000910:	08001274 	.word	0x08001274

08000914 <__retarget_lock_acquire_recursive>:
 8000914:	4770      	bx	lr

08000916 <__retarget_lock_release_recursive>:
 8000916:	4770      	bx	lr

08000918 <__ssputs_r>:
 8000918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800091c:	688e      	ldr	r6, [r1, #8]
 800091e:	461f      	mov	r7, r3
 8000920:	42be      	cmp	r6, r7
 8000922:	680b      	ldr	r3, [r1, #0]
 8000924:	4682      	mov	sl, r0
 8000926:	460c      	mov	r4, r1
 8000928:	4690      	mov	r8, r2
 800092a:	d82d      	bhi.n	8000988 <__ssputs_r+0x70>
 800092c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000930:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000934:	d026      	beq.n	8000984 <__ssputs_r+0x6c>
 8000936:	6965      	ldr	r5, [r4, #20]
 8000938:	6909      	ldr	r1, [r1, #16]
 800093a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800093e:	eba3 0901 	sub.w	r9, r3, r1
 8000942:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000946:	1c7b      	adds	r3, r7, #1
 8000948:	444b      	add	r3, r9
 800094a:	106d      	asrs	r5, r5, #1
 800094c:	429d      	cmp	r5, r3
 800094e:	bf38      	it	cc
 8000950:	461d      	movcc	r5, r3
 8000952:	0553      	lsls	r3, r2, #21
 8000954:	d527      	bpl.n	80009a6 <__ssputs_r+0x8e>
 8000956:	4629      	mov	r1, r5
 8000958:	f000 f958 	bl	8000c0c <_malloc_r>
 800095c:	4606      	mov	r6, r0
 800095e:	b360      	cbz	r0, 80009ba <__ssputs_r+0xa2>
 8000960:	6921      	ldr	r1, [r4, #16]
 8000962:	464a      	mov	r2, r9
 8000964:	f000 fbc2 	bl	80010ec <memcpy>
 8000968:	89a3      	ldrh	r3, [r4, #12]
 800096a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800096e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000972:	81a3      	strh	r3, [r4, #12]
 8000974:	6126      	str	r6, [r4, #16]
 8000976:	6165      	str	r5, [r4, #20]
 8000978:	444e      	add	r6, r9
 800097a:	eba5 0509 	sub.w	r5, r5, r9
 800097e:	6026      	str	r6, [r4, #0]
 8000980:	60a5      	str	r5, [r4, #8]
 8000982:	463e      	mov	r6, r7
 8000984:	42be      	cmp	r6, r7
 8000986:	d900      	bls.n	800098a <__ssputs_r+0x72>
 8000988:	463e      	mov	r6, r7
 800098a:	6820      	ldr	r0, [r4, #0]
 800098c:	4632      	mov	r2, r6
 800098e:	4641      	mov	r1, r8
 8000990:	f000 fb82 	bl	8001098 <memmove>
 8000994:	68a3      	ldr	r3, [r4, #8]
 8000996:	1b9b      	subs	r3, r3, r6
 8000998:	60a3      	str	r3, [r4, #8]
 800099a:	6823      	ldr	r3, [r4, #0]
 800099c:	4433      	add	r3, r6
 800099e:	6023      	str	r3, [r4, #0]
 80009a0:	2000      	movs	r0, #0
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	462a      	mov	r2, r5
 80009a8:	f000 fb48 	bl	800103c <_realloc_r>
 80009ac:	4606      	mov	r6, r0
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d1e0      	bne.n	8000974 <__ssputs_r+0x5c>
 80009b2:	6921      	ldr	r1, [r4, #16]
 80009b4:	4650      	mov	r0, sl
 80009b6:	f000 fba7 	bl	8001108 <_free_r>
 80009ba:	230c      	movs	r3, #12
 80009bc:	f8ca 3000 	str.w	r3, [sl]
 80009c0:	89a3      	ldrh	r3, [r4, #12]
 80009c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009c6:	81a3      	strh	r3, [r4, #12]
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009cc:	e7e9      	b.n	80009a2 <__ssputs_r+0x8a>
	...

080009d0 <_svfiprintf_r>:
 80009d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009d4:	4698      	mov	r8, r3
 80009d6:	898b      	ldrh	r3, [r1, #12]
 80009d8:	061b      	lsls	r3, r3, #24
 80009da:	b09d      	sub	sp, #116	@ 0x74
 80009dc:	4607      	mov	r7, r0
 80009de:	460d      	mov	r5, r1
 80009e0:	4614      	mov	r4, r2
 80009e2:	d510      	bpl.n	8000a06 <_svfiprintf_r+0x36>
 80009e4:	690b      	ldr	r3, [r1, #16]
 80009e6:	b973      	cbnz	r3, 8000a06 <_svfiprintf_r+0x36>
 80009e8:	2140      	movs	r1, #64	@ 0x40
 80009ea:	f000 f90f 	bl	8000c0c <_malloc_r>
 80009ee:	6028      	str	r0, [r5, #0]
 80009f0:	6128      	str	r0, [r5, #16]
 80009f2:	b930      	cbnz	r0, 8000a02 <_svfiprintf_r+0x32>
 80009f4:	230c      	movs	r3, #12
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009fc:	b01d      	add	sp, #116	@ 0x74
 80009fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a02:	2340      	movs	r3, #64	@ 0x40
 8000a04:	616b      	str	r3, [r5, #20]
 8000a06:	2300      	movs	r3, #0
 8000a08:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000a10:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a14:	2330      	movs	r3, #48	@ 0x30
 8000a16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000bb4 <_svfiprintf_r+0x1e4>
 8000a1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000a1e:	f04f 0901 	mov.w	r9, #1
 8000a22:	4623      	mov	r3, r4
 8000a24:	469a      	mov	sl, r3
 8000a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a2a:	b10a      	cbz	r2, 8000a30 <_svfiprintf_r+0x60>
 8000a2c:	2a25      	cmp	r2, #37	@ 0x25
 8000a2e:	d1f9      	bne.n	8000a24 <_svfiprintf_r+0x54>
 8000a30:	ebba 0b04 	subs.w	fp, sl, r4
 8000a34:	d00b      	beq.n	8000a4e <_svfiprintf_r+0x7e>
 8000a36:	465b      	mov	r3, fp
 8000a38:	4622      	mov	r2, r4
 8000a3a:	4629      	mov	r1, r5
 8000a3c:	4638      	mov	r0, r7
 8000a3e:	f7ff ff6b 	bl	8000918 <__ssputs_r>
 8000a42:	3001      	adds	r0, #1
 8000a44:	f000 80a7 	beq.w	8000b96 <_svfiprintf_r+0x1c6>
 8000a48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000a4a:	445a      	add	r2, fp
 8000a4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8000a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f000 809f 	beq.w	8000b96 <_svfiprintf_r+0x1c6>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a62:	f10a 0a01 	add.w	sl, sl, #1
 8000a66:	9304      	str	r3, [sp, #16]
 8000a68:	9307      	str	r3, [sp, #28]
 8000a6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000a6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000a70:	4654      	mov	r4, sl
 8000a72:	2205      	movs	r2, #5
 8000a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a78:	484e      	ldr	r0, [pc, #312]	@ (8000bb4 <_svfiprintf_r+0x1e4>)
 8000a7a:	f7ff fba9 	bl	80001d0 <memchr>
 8000a7e:	9a04      	ldr	r2, [sp, #16]
 8000a80:	b9d8      	cbnz	r0, 8000aba <_svfiprintf_r+0xea>
 8000a82:	06d0      	lsls	r0, r2, #27
 8000a84:	bf44      	itt	mi
 8000a86:	2320      	movmi	r3, #32
 8000a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a8c:	0711      	lsls	r1, r2, #28
 8000a8e:	bf44      	itt	mi
 8000a90:	232b      	movmi	r3, #43	@ 0x2b
 8000a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a96:	f89a 3000 	ldrb.w	r3, [sl]
 8000a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a9c:	d015      	beq.n	8000aca <_svfiprintf_r+0xfa>
 8000a9e:	9a07      	ldr	r2, [sp, #28]
 8000aa0:	4654      	mov	r4, sl
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f04f 0c0a 	mov.w	ip, #10
 8000aa8:	4621      	mov	r1, r4
 8000aaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000aae:	3b30      	subs	r3, #48	@ 0x30
 8000ab0:	2b09      	cmp	r3, #9
 8000ab2:	d94b      	bls.n	8000b4c <_svfiprintf_r+0x17c>
 8000ab4:	b1b0      	cbz	r0, 8000ae4 <_svfiprintf_r+0x114>
 8000ab6:	9207      	str	r2, [sp, #28]
 8000ab8:	e014      	b.n	8000ae4 <_svfiprintf_r+0x114>
 8000aba:	eba0 0308 	sub.w	r3, r0, r8
 8000abe:	fa09 f303 	lsl.w	r3, r9, r3
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	9304      	str	r3, [sp, #16]
 8000ac6:	46a2      	mov	sl, r4
 8000ac8:	e7d2      	b.n	8000a70 <_svfiprintf_r+0xa0>
 8000aca:	9b03      	ldr	r3, [sp, #12]
 8000acc:	1d19      	adds	r1, r3, #4
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	9103      	str	r1, [sp, #12]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	bfbb      	ittet	lt
 8000ad6:	425b      	neglt	r3, r3
 8000ad8:	f042 0202 	orrlt.w	r2, r2, #2
 8000adc:	9307      	strge	r3, [sp, #28]
 8000ade:	9307      	strlt	r3, [sp, #28]
 8000ae0:	bfb8      	it	lt
 8000ae2:	9204      	strlt	r2, [sp, #16]
 8000ae4:	7823      	ldrb	r3, [r4, #0]
 8000ae6:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ae8:	d10a      	bne.n	8000b00 <_svfiprintf_r+0x130>
 8000aea:	7863      	ldrb	r3, [r4, #1]
 8000aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8000aee:	d132      	bne.n	8000b56 <_svfiprintf_r+0x186>
 8000af0:	9b03      	ldr	r3, [sp, #12]
 8000af2:	1d1a      	adds	r2, r3, #4
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	9203      	str	r2, [sp, #12]
 8000af8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000afc:	3402      	adds	r4, #2
 8000afe:	9305      	str	r3, [sp, #20]
 8000b00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000bc4 <_svfiprintf_r+0x1f4>
 8000b04:	7821      	ldrb	r1, [r4, #0]
 8000b06:	2203      	movs	r2, #3
 8000b08:	4650      	mov	r0, sl
 8000b0a:	f7ff fb61 	bl	80001d0 <memchr>
 8000b0e:	b138      	cbz	r0, 8000b20 <_svfiprintf_r+0x150>
 8000b10:	9b04      	ldr	r3, [sp, #16]
 8000b12:	eba0 000a 	sub.w	r0, r0, sl
 8000b16:	2240      	movs	r2, #64	@ 0x40
 8000b18:	4082      	lsls	r2, r0
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	3401      	adds	r4, #1
 8000b1e:	9304      	str	r3, [sp, #16]
 8000b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b24:	4824      	ldr	r0, [pc, #144]	@ (8000bb8 <_svfiprintf_r+0x1e8>)
 8000b26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000b2a:	2206      	movs	r2, #6
 8000b2c:	f7ff fb50 	bl	80001d0 <memchr>
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d036      	beq.n	8000ba2 <_svfiprintf_r+0x1d2>
 8000b34:	4b21      	ldr	r3, [pc, #132]	@ (8000bbc <_svfiprintf_r+0x1ec>)
 8000b36:	bb1b      	cbnz	r3, 8000b80 <_svfiprintf_r+0x1b0>
 8000b38:	9b03      	ldr	r3, [sp, #12]
 8000b3a:	3307      	adds	r3, #7
 8000b3c:	f023 0307 	bic.w	r3, r3, #7
 8000b40:	3308      	adds	r3, #8
 8000b42:	9303      	str	r3, [sp, #12]
 8000b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000b46:	4433      	add	r3, r6
 8000b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b4a:	e76a      	b.n	8000a22 <_svfiprintf_r+0x52>
 8000b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b50:	460c      	mov	r4, r1
 8000b52:	2001      	movs	r0, #1
 8000b54:	e7a8      	b.n	8000aa8 <_svfiprintf_r+0xd8>
 8000b56:	2300      	movs	r3, #0
 8000b58:	3401      	adds	r4, #1
 8000b5a:	9305      	str	r3, [sp, #20]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f04f 0c0a 	mov.w	ip, #10
 8000b62:	4620      	mov	r0, r4
 8000b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b68:	3a30      	subs	r2, #48	@ 0x30
 8000b6a:	2a09      	cmp	r2, #9
 8000b6c:	d903      	bls.n	8000b76 <_svfiprintf_r+0x1a6>
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0c6      	beq.n	8000b00 <_svfiprintf_r+0x130>
 8000b72:	9105      	str	r1, [sp, #20]
 8000b74:	e7c4      	b.n	8000b00 <_svfiprintf_r+0x130>
 8000b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e7f0      	b.n	8000b62 <_svfiprintf_r+0x192>
 8000b80:	ab03      	add	r3, sp, #12
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	462a      	mov	r2, r5
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <_svfiprintf_r+0x1f0>)
 8000b88:	a904      	add	r1, sp, #16
 8000b8a:	4638      	mov	r0, r7
 8000b8c:	f3af 8000 	nop.w
 8000b90:	1c42      	adds	r2, r0, #1
 8000b92:	4606      	mov	r6, r0
 8000b94:	d1d6      	bne.n	8000b44 <_svfiprintf_r+0x174>
 8000b96:	89ab      	ldrh	r3, [r5, #12]
 8000b98:	065b      	lsls	r3, r3, #25
 8000b9a:	f53f af2d 	bmi.w	80009f8 <_svfiprintf_r+0x28>
 8000b9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ba0:	e72c      	b.n	80009fc <_svfiprintf_r+0x2c>
 8000ba2:	ab03      	add	r3, sp, #12
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	462a      	mov	r2, r5
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <_svfiprintf_r+0x1f0>)
 8000baa:	a904      	add	r1, sp, #16
 8000bac:	4638      	mov	r0, r7
 8000bae:	f000 f91b 	bl	8000de8 <_printf_i>
 8000bb2:	e7ed      	b.n	8000b90 <_svfiprintf_r+0x1c0>
 8000bb4:	08001233 	.word	0x08001233
 8000bb8:	0800123d 	.word	0x0800123d
 8000bbc:	00000000 	.word	0x00000000
 8000bc0:	08000919 	.word	0x08000919
 8000bc4:	08001239 	.word	0x08001239

08000bc8 <sbrk_aligned>:
 8000bc8:	b570      	push	{r4, r5, r6, lr}
 8000bca:	4e0f      	ldr	r6, [pc, #60]	@ (8000c08 <sbrk_aligned+0x40>)
 8000bcc:	460c      	mov	r4, r1
 8000bce:	6831      	ldr	r1, [r6, #0]
 8000bd0:	4605      	mov	r5, r0
 8000bd2:	b911      	cbnz	r1, 8000bda <sbrk_aligned+0x12>
 8000bd4:	f000 fa7a 	bl	80010cc <_sbrk_r>
 8000bd8:	6030      	str	r0, [r6, #0]
 8000bda:	4621      	mov	r1, r4
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f000 fa75 	bl	80010cc <_sbrk_r>
 8000be2:	1c43      	adds	r3, r0, #1
 8000be4:	d103      	bne.n	8000bee <sbrk_aligned+0x26>
 8000be6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000bea:	4620      	mov	r0, r4
 8000bec:	bd70      	pop	{r4, r5, r6, pc}
 8000bee:	1cc4      	adds	r4, r0, #3
 8000bf0:	f024 0403 	bic.w	r4, r4, #3
 8000bf4:	42a0      	cmp	r0, r4
 8000bf6:	d0f8      	beq.n	8000bea <sbrk_aligned+0x22>
 8000bf8:	1a21      	subs	r1, r4, r0
 8000bfa:	4628      	mov	r0, r5
 8000bfc:	f000 fa66 	bl	80010cc <_sbrk_r>
 8000c00:	3001      	adds	r0, #1
 8000c02:	d1f2      	bne.n	8000bea <sbrk_aligned+0x22>
 8000c04:	e7ef      	b.n	8000be6 <sbrk_aligned+0x1e>
 8000c06:	bf00      	nop
 8000c08:	200001b4 	.word	0x200001b4

08000c0c <_malloc_r>:
 8000c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c10:	1ccd      	adds	r5, r1, #3
 8000c12:	f025 0503 	bic.w	r5, r5, #3
 8000c16:	3508      	adds	r5, #8
 8000c18:	2d0c      	cmp	r5, #12
 8000c1a:	bf38      	it	cc
 8000c1c:	250c      	movcc	r5, #12
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	4606      	mov	r6, r0
 8000c22:	db01      	blt.n	8000c28 <_malloc_r+0x1c>
 8000c24:	42a9      	cmp	r1, r5
 8000c26:	d904      	bls.n	8000c32 <_malloc_r+0x26>
 8000c28:	230c      	movs	r3, #12
 8000c2a:	6033      	str	r3, [r6, #0]
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d08 <_malloc_r+0xfc>
 8000c36:	f000 f9f5 	bl	8001024 <__malloc_lock>
 8000c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c3e:	461c      	mov	r4, r3
 8000c40:	bb44      	cbnz	r4, 8000c94 <_malloc_r+0x88>
 8000c42:	4629      	mov	r1, r5
 8000c44:	4630      	mov	r0, r6
 8000c46:	f7ff ffbf 	bl	8000bc8 <sbrk_aligned>
 8000c4a:	1c43      	adds	r3, r0, #1
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	d158      	bne.n	8000d02 <_malloc_r+0xf6>
 8000c50:	f8d8 4000 	ldr.w	r4, [r8]
 8000c54:	4627      	mov	r7, r4
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d143      	bne.n	8000ce2 <_malloc_r+0xd6>
 8000c5a:	2c00      	cmp	r4, #0
 8000c5c:	d04b      	beq.n	8000cf6 <_malloc_r+0xea>
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	4639      	mov	r1, r7
 8000c62:	4630      	mov	r0, r6
 8000c64:	eb04 0903 	add.w	r9, r4, r3
 8000c68:	f000 fa30 	bl	80010cc <_sbrk_r>
 8000c6c:	4581      	cmp	r9, r0
 8000c6e:	d142      	bne.n	8000cf6 <_malloc_r+0xea>
 8000c70:	6821      	ldr	r1, [r4, #0]
 8000c72:	1a6d      	subs	r5, r5, r1
 8000c74:	4629      	mov	r1, r5
 8000c76:	4630      	mov	r0, r6
 8000c78:	f7ff ffa6 	bl	8000bc8 <sbrk_aligned>
 8000c7c:	3001      	adds	r0, #1
 8000c7e:	d03a      	beq.n	8000cf6 <_malloc_r+0xea>
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	442b      	add	r3, r5
 8000c84:	6023      	str	r3, [r4, #0]
 8000c86:	f8d8 3000 	ldr.w	r3, [r8]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	bb62      	cbnz	r2, 8000ce8 <_malloc_r+0xdc>
 8000c8e:	f8c8 7000 	str.w	r7, [r8]
 8000c92:	e00f      	b.n	8000cb4 <_malloc_r+0xa8>
 8000c94:	6822      	ldr	r2, [r4, #0]
 8000c96:	1b52      	subs	r2, r2, r5
 8000c98:	d420      	bmi.n	8000cdc <_malloc_r+0xd0>
 8000c9a:	2a0b      	cmp	r2, #11
 8000c9c:	d917      	bls.n	8000cce <_malloc_r+0xc2>
 8000c9e:	1961      	adds	r1, r4, r5
 8000ca0:	42a3      	cmp	r3, r4
 8000ca2:	6025      	str	r5, [r4, #0]
 8000ca4:	bf18      	it	ne
 8000ca6:	6059      	strne	r1, [r3, #4]
 8000ca8:	6863      	ldr	r3, [r4, #4]
 8000caa:	bf08      	it	eq
 8000cac:	f8c8 1000 	streq.w	r1, [r8]
 8000cb0:	5162      	str	r2, [r4, r5]
 8000cb2:	604b      	str	r3, [r1, #4]
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	f000 f9bb 	bl	8001030 <__malloc_unlock>
 8000cba:	f104 000b 	add.w	r0, r4, #11
 8000cbe:	1d23      	adds	r3, r4, #4
 8000cc0:	f020 0007 	bic.w	r0, r0, #7
 8000cc4:	1ac2      	subs	r2, r0, r3
 8000cc6:	bf1c      	itt	ne
 8000cc8:	1a1b      	subne	r3, r3, r0
 8000cca:	50a3      	strne	r3, [r4, r2]
 8000ccc:	e7af      	b.n	8000c2e <_malloc_r+0x22>
 8000cce:	6862      	ldr	r2, [r4, #4]
 8000cd0:	42a3      	cmp	r3, r4
 8000cd2:	bf0c      	ite	eq
 8000cd4:	f8c8 2000 	streq.w	r2, [r8]
 8000cd8:	605a      	strne	r2, [r3, #4]
 8000cda:	e7eb      	b.n	8000cb4 <_malloc_r+0xa8>
 8000cdc:	4623      	mov	r3, r4
 8000cde:	6864      	ldr	r4, [r4, #4]
 8000ce0:	e7ae      	b.n	8000c40 <_malloc_r+0x34>
 8000ce2:	463c      	mov	r4, r7
 8000ce4:	687f      	ldr	r7, [r7, #4]
 8000ce6:	e7b6      	b.n	8000c56 <_malloc_r+0x4a>
 8000ce8:	461a      	mov	r2, r3
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d1fb      	bne.n	8000ce8 <_malloc_r+0xdc>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	6053      	str	r3, [r2, #4]
 8000cf4:	e7de      	b.n	8000cb4 <_malloc_r+0xa8>
 8000cf6:	230c      	movs	r3, #12
 8000cf8:	6033      	str	r3, [r6, #0]
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	f000 f998 	bl	8001030 <__malloc_unlock>
 8000d00:	e794      	b.n	8000c2c <_malloc_r+0x20>
 8000d02:	6005      	str	r5, [r0, #0]
 8000d04:	e7d6      	b.n	8000cb4 <_malloc_r+0xa8>
 8000d06:	bf00      	nop
 8000d08:	200001b8 	.word	0x200001b8

08000d0c <_printf_common>:
 8000d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d10:	4616      	mov	r6, r2
 8000d12:	4698      	mov	r8, r3
 8000d14:	688a      	ldr	r2, [r1, #8]
 8000d16:	690b      	ldr	r3, [r1, #16]
 8000d18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	bfb8      	it	lt
 8000d20:	4613      	movlt	r3, r2
 8000d22:	6033      	str	r3, [r6, #0]
 8000d24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d28:	4607      	mov	r7, r0
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	b10a      	cbz	r2, 8000d32 <_printf_common+0x26>
 8000d2e:	3301      	adds	r3, #1
 8000d30:	6033      	str	r3, [r6, #0]
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	0699      	lsls	r1, r3, #26
 8000d36:	bf42      	ittt	mi
 8000d38:	6833      	ldrmi	r3, [r6, #0]
 8000d3a:	3302      	addmi	r3, #2
 8000d3c:	6033      	strmi	r3, [r6, #0]
 8000d3e:	6825      	ldr	r5, [r4, #0]
 8000d40:	f015 0506 	ands.w	r5, r5, #6
 8000d44:	d106      	bne.n	8000d54 <_printf_common+0x48>
 8000d46:	f104 0a19 	add.w	sl, r4, #25
 8000d4a:	68e3      	ldr	r3, [r4, #12]
 8000d4c:	6832      	ldr	r2, [r6, #0]
 8000d4e:	1a9b      	subs	r3, r3, r2
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	dc26      	bgt.n	8000da2 <_printf_common+0x96>
 8000d54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d58:	6822      	ldr	r2, [r4, #0]
 8000d5a:	3b00      	subs	r3, #0
 8000d5c:	bf18      	it	ne
 8000d5e:	2301      	movne	r3, #1
 8000d60:	0692      	lsls	r2, r2, #26
 8000d62:	d42b      	bmi.n	8000dbc <_printf_common+0xb0>
 8000d64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d68:	4641      	mov	r1, r8
 8000d6a:	4638      	mov	r0, r7
 8000d6c:	47c8      	blx	r9
 8000d6e:	3001      	adds	r0, #1
 8000d70:	d01e      	beq.n	8000db0 <_printf_common+0xa4>
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	6922      	ldr	r2, [r4, #16]
 8000d76:	f003 0306 	and.w	r3, r3, #6
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf02      	ittt	eq
 8000d7e:	68e5      	ldreq	r5, [r4, #12]
 8000d80:	6833      	ldreq	r3, [r6, #0]
 8000d82:	1aed      	subeq	r5, r5, r3
 8000d84:	68a3      	ldr	r3, [r4, #8]
 8000d86:	bf0c      	ite	eq
 8000d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d8c:	2500      	movne	r5, #0
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	bfc4      	itt	gt
 8000d92:	1a9b      	subgt	r3, r3, r2
 8000d94:	18ed      	addgt	r5, r5, r3
 8000d96:	2600      	movs	r6, #0
 8000d98:	341a      	adds	r4, #26
 8000d9a:	42b5      	cmp	r5, r6
 8000d9c:	d11a      	bne.n	8000dd4 <_printf_common+0xc8>
 8000d9e:	2000      	movs	r0, #0
 8000da0:	e008      	b.n	8000db4 <_printf_common+0xa8>
 8000da2:	2301      	movs	r3, #1
 8000da4:	4652      	mov	r2, sl
 8000da6:	4641      	mov	r1, r8
 8000da8:	4638      	mov	r0, r7
 8000daa:	47c8      	blx	r9
 8000dac:	3001      	adds	r0, #1
 8000dae:	d103      	bne.n	8000db8 <_printf_common+0xac>
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db8:	3501      	adds	r5, #1
 8000dba:	e7c6      	b.n	8000d4a <_printf_common+0x3e>
 8000dbc:	18e1      	adds	r1, r4, r3
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	2030      	movs	r0, #48	@ 0x30
 8000dc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000dc6:	4422      	add	r2, r4
 8000dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000dcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	e7c7      	b.n	8000d64 <_printf_common+0x58>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	4641      	mov	r1, r8
 8000dda:	4638      	mov	r0, r7
 8000ddc:	47c8      	blx	r9
 8000dde:	3001      	adds	r0, #1
 8000de0:	d0e6      	beq.n	8000db0 <_printf_common+0xa4>
 8000de2:	3601      	adds	r6, #1
 8000de4:	e7d9      	b.n	8000d9a <_printf_common+0x8e>
	...

08000de8 <_printf_i>:
 8000de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dec:	7e0f      	ldrb	r7, [r1, #24]
 8000dee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000df0:	2f78      	cmp	r7, #120	@ 0x78
 8000df2:	4691      	mov	r9, r2
 8000df4:	4680      	mov	r8, r0
 8000df6:	460c      	mov	r4, r1
 8000df8:	469a      	mov	sl, r3
 8000dfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000dfe:	d807      	bhi.n	8000e10 <_printf_i+0x28>
 8000e00:	2f62      	cmp	r7, #98	@ 0x62
 8000e02:	d80a      	bhi.n	8000e1a <_printf_i+0x32>
 8000e04:	2f00      	cmp	r7, #0
 8000e06:	f000 80d1 	beq.w	8000fac <_printf_i+0x1c4>
 8000e0a:	2f58      	cmp	r7, #88	@ 0x58
 8000e0c:	f000 80b8 	beq.w	8000f80 <_printf_i+0x198>
 8000e10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e18:	e03a      	b.n	8000e90 <_printf_i+0xa8>
 8000e1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e1e:	2b15      	cmp	r3, #21
 8000e20:	d8f6      	bhi.n	8000e10 <_printf_i+0x28>
 8000e22:	a101      	add	r1, pc, #4	@ (adr r1, 8000e28 <_printf_i+0x40>)
 8000e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e28:	08000e81 	.word	0x08000e81
 8000e2c:	08000e95 	.word	0x08000e95
 8000e30:	08000e11 	.word	0x08000e11
 8000e34:	08000e11 	.word	0x08000e11
 8000e38:	08000e11 	.word	0x08000e11
 8000e3c:	08000e11 	.word	0x08000e11
 8000e40:	08000e95 	.word	0x08000e95
 8000e44:	08000e11 	.word	0x08000e11
 8000e48:	08000e11 	.word	0x08000e11
 8000e4c:	08000e11 	.word	0x08000e11
 8000e50:	08000e11 	.word	0x08000e11
 8000e54:	08000f93 	.word	0x08000f93
 8000e58:	08000ebf 	.word	0x08000ebf
 8000e5c:	08000f4d 	.word	0x08000f4d
 8000e60:	08000e11 	.word	0x08000e11
 8000e64:	08000e11 	.word	0x08000e11
 8000e68:	08000fb5 	.word	0x08000fb5
 8000e6c:	08000e11 	.word	0x08000e11
 8000e70:	08000ebf 	.word	0x08000ebf
 8000e74:	08000e11 	.word	0x08000e11
 8000e78:	08000e11 	.word	0x08000e11
 8000e7c:	08000f55 	.word	0x08000f55
 8000e80:	6833      	ldr	r3, [r6, #0]
 8000e82:	1d1a      	adds	r2, r3, #4
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6032      	str	r2, [r6, #0]
 8000e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e90:	2301      	movs	r3, #1
 8000e92:	e09c      	b.n	8000fce <_printf_i+0x1e6>
 8000e94:	6833      	ldr	r3, [r6, #0]
 8000e96:	6820      	ldr	r0, [r4, #0]
 8000e98:	1d19      	adds	r1, r3, #4
 8000e9a:	6031      	str	r1, [r6, #0]
 8000e9c:	0606      	lsls	r6, r0, #24
 8000e9e:	d501      	bpl.n	8000ea4 <_printf_i+0xbc>
 8000ea0:	681d      	ldr	r5, [r3, #0]
 8000ea2:	e003      	b.n	8000eac <_printf_i+0xc4>
 8000ea4:	0645      	lsls	r5, r0, #25
 8000ea6:	d5fb      	bpl.n	8000ea0 <_printf_i+0xb8>
 8000ea8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000eac:	2d00      	cmp	r5, #0
 8000eae:	da03      	bge.n	8000eb8 <_printf_i+0xd0>
 8000eb0:	232d      	movs	r3, #45	@ 0x2d
 8000eb2:	426d      	negs	r5, r5
 8000eb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000eb8:	4858      	ldr	r0, [pc, #352]	@ (800101c <_printf_i+0x234>)
 8000eba:	230a      	movs	r3, #10
 8000ebc:	e011      	b.n	8000ee2 <_printf_i+0xfa>
 8000ebe:	6821      	ldr	r1, [r4, #0]
 8000ec0:	6833      	ldr	r3, [r6, #0]
 8000ec2:	0608      	lsls	r0, r1, #24
 8000ec4:	f853 5b04 	ldr.w	r5, [r3], #4
 8000ec8:	d402      	bmi.n	8000ed0 <_printf_i+0xe8>
 8000eca:	0649      	lsls	r1, r1, #25
 8000ecc:	bf48      	it	mi
 8000ece:	b2ad      	uxthmi	r5, r5
 8000ed0:	2f6f      	cmp	r7, #111	@ 0x6f
 8000ed2:	4852      	ldr	r0, [pc, #328]	@ (800101c <_printf_i+0x234>)
 8000ed4:	6033      	str	r3, [r6, #0]
 8000ed6:	bf14      	ite	ne
 8000ed8:	230a      	movne	r3, #10
 8000eda:	2308      	moveq	r3, #8
 8000edc:	2100      	movs	r1, #0
 8000ede:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000ee2:	6866      	ldr	r6, [r4, #4]
 8000ee4:	60a6      	str	r6, [r4, #8]
 8000ee6:	2e00      	cmp	r6, #0
 8000ee8:	db05      	blt.n	8000ef6 <_printf_i+0x10e>
 8000eea:	6821      	ldr	r1, [r4, #0]
 8000eec:	432e      	orrs	r6, r5
 8000eee:	f021 0104 	bic.w	r1, r1, #4
 8000ef2:	6021      	str	r1, [r4, #0]
 8000ef4:	d04b      	beq.n	8000f8e <_printf_i+0x1a6>
 8000ef6:	4616      	mov	r6, r2
 8000ef8:	fbb5 f1f3 	udiv	r1, r5, r3
 8000efc:	fb03 5711 	mls	r7, r3, r1, r5
 8000f00:	5dc7      	ldrb	r7, [r0, r7]
 8000f02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f06:	462f      	mov	r7, r5
 8000f08:	42bb      	cmp	r3, r7
 8000f0a:	460d      	mov	r5, r1
 8000f0c:	d9f4      	bls.n	8000ef8 <_printf_i+0x110>
 8000f0e:	2b08      	cmp	r3, #8
 8000f10:	d10b      	bne.n	8000f2a <_printf_i+0x142>
 8000f12:	6823      	ldr	r3, [r4, #0]
 8000f14:	07df      	lsls	r7, r3, #31
 8000f16:	d508      	bpl.n	8000f2a <_printf_i+0x142>
 8000f18:	6923      	ldr	r3, [r4, #16]
 8000f1a:	6861      	ldr	r1, [r4, #4]
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	bfde      	ittt	le
 8000f20:	2330      	movle	r3, #48	@ 0x30
 8000f22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f26:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000f2a:	1b92      	subs	r2, r2, r6
 8000f2c:	6122      	str	r2, [r4, #16]
 8000f2e:	f8cd a000 	str.w	sl, [sp]
 8000f32:	464b      	mov	r3, r9
 8000f34:	aa03      	add	r2, sp, #12
 8000f36:	4621      	mov	r1, r4
 8000f38:	4640      	mov	r0, r8
 8000f3a:	f7ff fee7 	bl	8000d0c <_printf_common>
 8000f3e:	3001      	adds	r0, #1
 8000f40:	d14a      	bne.n	8000fd8 <_printf_i+0x1f0>
 8000f42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f46:	b004      	add	sp, #16
 8000f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	f043 0320 	orr.w	r3, r3, #32
 8000f52:	6023      	str	r3, [r4, #0]
 8000f54:	4832      	ldr	r0, [pc, #200]	@ (8001020 <_printf_i+0x238>)
 8000f56:	2778      	movs	r7, #120	@ 0x78
 8000f58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	6831      	ldr	r1, [r6, #0]
 8000f60:	061f      	lsls	r7, r3, #24
 8000f62:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f66:	d402      	bmi.n	8000f6e <_printf_i+0x186>
 8000f68:	065f      	lsls	r7, r3, #25
 8000f6a:	bf48      	it	mi
 8000f6c:	b2ad      	uxthmi	r5, r5
 8000f6e:	6031      	str	r1, [r6, #0]
 8000f70:	07d9      	lsls	r1, r3, #31
 8000f72:	bf44      	itt	mi
 8000f74:	f043 0320 	orrmi.w	r3, r3, #32
 8000f78:	6023      	strmi	r3, [r4, #0]
 8000f7a:	b11d      	cbz	r5, 8000f84 <_printf_i+0x19c>
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	e7ad      	b.n	8000edc <_printf_i+0xf4>
 8000f80:	4826      	ldr	r0, [pc, #152]	@ (800101c <_printf_i+0x234>)
 8000f82:	e7e9      	b.n	8000f58 <_printf_i+0x170>
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	f023 0320 	bic.w	r3, r3, #32
 8000f8a:	6023      	str	r3, [r4, #0]
 8000f8c:	e7f6      	b.n	8000f7c <_printf_i+0x194>
 8000f8e:	4616      	mov	r6, r2
 8000f90:	e7bd      	b.n	8000f0e <_printf_i+0x126>
 8000f92:	6833      	ldr	r3, [r6, #0]
 8000f94:	6825      	ldr	r5, [r4, #0]
 8000f96:	6961      	ldr	r1, [r4, #20]
 8000f98:	1d18      	adds	r0, r3, #4
 8000f9a:	6030      	str	r0, [r6, #0]
 8000f9c:	062e      	lsls	r6, r5, #24
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	d501      	bpl.n	8000fa6 <_printf_i+0x1be>
 8000fa2:	6019      	str	r1, [r3, #0]
 8000fa4:	e002      	b.n	8000fac <_printf_i+0x1c4>
 8000fa6:	0668      	lsls	r0, r5, #25
 8000fa8:	d5fb      	bpl.n	8000fa2 <_printf_i+0x1ba>
 8000faa:	8019      	strh	r1, [r3, #0]
 8000fac:	2300      	movs	r3, #0
 8000fae:	6123      	str	r3, [r4, #16]
 8000fb0:	4616      	mov	r6, r2
 8000fb2:	e7bc      	b.n	8000f2e <_printf_i+0x146>
 8000fb4:	6833      	ldr	r3, [r6, #0]
 8000fb6:	1d1a      	adds	r2, r3, #4
 8000fb8:	6032      	str	r2, [r6, #0]
 8000fba:	681e      	ldr	r6, [r3, #0]
 8000fbc:	6862      	ldr	r2, [r4, #4]
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	f7ff f905 	bl	80001d0 <memchr>
 8000fc6:	b108      	cbz	r0, 8000fcc <_printf_i+0x1e4>
 8000fc8:	1b80      	subs	r0, r0, r6
 8000fca:	6060      	str	r0, [r4, #4]
 8000fcc:	6863      	ldr	r3, [r4, #4]
 8000fce:	6123      	str	r3, [r4, #16]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000fd6:	e7aa      	b.n	8000f2e <_printf_i+0x146>
 8000fd8:	6923      	ldr	r3, [r4, #16]
 8000fda:	4632      	mov	r2, r6
 8000fdc:	4649      	mov	r1, r9
 8000fde:	4640      	mov	r0, r8
 8000fe0:	47d0      	blx	sl
 8000fe2:	3001      	adds	r0, #1
 8000fe4:	d0ad      	beq.n	8000f42 <_printf_i+0x15a>
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	079b      	lsls	r3, r3, #30
 8000fea:	d413      	bmi.n	8001014 <_printf_i+0x22c>
 8000fec:	68e0      	ldr	r0, [r4, #12]
 8000fee:	9b03      	ldr	r3, [sp, #12]
 8000ff0:	4298      	cmp	r0, r3
 8000ff2:	bfb8      	it	lt
 8000ff4:	4618      	movlt	r0, r3
 8000ff6:	e7a6      	b.n	8000f46 <_printf_i+0x15e>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	4632      	mov	r2, r6
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	4640      	mov	r0, r8
 8001000:	47d0      	blx	sl
 8001002:	3001      	adds	r0, #1
 8001004:	d09d      	beq.n	8000f42 <_printf_i+0x15a>
 8001006:	3501      	adds	r5, #1
 8001008:	68e3      	ldr	r3, [r4, #12]
 800100a:	9903      	ldr	r1, [sp, #12]
 800100c:	1a5b      	subs	r3, r3, r1
 800100e:	42ab      	cmp	r3, r5
 8001010:	dcf2      	bgt.n	8000ff8 <_printf_i+0x210>
 8001012:	e7eb      	b.n	8000fec <_printf_i+0x204>
 8001014:	2500      	movs	r5, #0
 8001016:	f104 0619 	add.w	r6, r4, #25
 800101a:	e7f5      	b.n	8001008 <_printf_i+0x220>
 800101c:	08001244 	.word	0x08001244
 8001020:	08001255 	.word	0x08001255

08001024 <__malloc_lock>:
 8001024:	4801      	ldr	r0, [pc, #4]	@ (800102c <__malloc_lock+0x8>)
 8001026:	f7ff bc75 	b.w	8000914 <__retarget_lock_acquire_recursive>
 800102a:	bf00      	nop
 800102c:	200001b0 	.word	0x200001b0

08001030 <__malloc_unlock>:
 8001030:	4801      	ldr	r0, [pc, #4]	@ (8001038 <__malloc_unlock+0x8>)
 8001032:	f7ff bc70 	b.w	8000916 <__retarget_lock_release_recursive>
 8001036:	bf00      	nop
 8001038:	200001b0 	.word	0x200001b0

0800103c <_realloc_r>:
 800103c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001040:	4607      	mov	r7, r0
 8001042:	4614      	mov	r4, r2
 8001044:	460d      	mov	r5, r1
 8001046:	b921      	cbnz	r1, 8001052 <_realloc_r+0x16>
 8001048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800104c:	4611      	mov	r1, r2
 800104e:	f7ff bddd 	b.w	8000c0c <_malloc_r>
 8001052:	b92a      	cbnz	r2, 8001060 <_realloc_r+0x24>
 8001054:	f000 f858 	bl	8001108 <_free_r>
 8001058:	4625      	mov	r5, r4
 800105a:	4628      	mov	r0, r5
 800105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001060:	f000 f89c 	bl	800119c <_malloc_usable_size_r>
 8001064:	4284      	cmp	r4, r0
 8001066:	4606      	mov	r6, r0
 8001068:	d802      	bhi.n	8001070 <_realloc_r+0x34>
 800106a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800106e:	d8f4      	bhi.n	800105a <_realloc_r+0x1e>
 8001070:	4621      	mov	r1, r4
 8001072:	4638      	mov	r0, r7
 8001074:	f7ff fdca 	bl	8000c0c <_malloc_r>
 8001078:	4680      	mov	r8, r0
 800107a:	b908      	cbnz	r0, 8001080 <_realloc_r+0x44>
 800107c:	4645      	mov	r5, r8
 800107e:	e7ec      	b.n	800105a <_realloc_r+0x1e>
 8001080:	42b4      	cmp	r4, r6
 8001082:	4622      	mov	r2, r4
 8001084:	4629      	mov	r1, r5
 8001086:	bf28      	it	cs
 8001088:	4632      	movcs	r2, r6
 800108a:	f000 f82f 	bl	80010ec <memcpy>
 800108e:	4629      	mov	r1, r5
 8001090:	4638      	mov	r0, r7
 8001092:	f000 f839 	bl	8001108 <_free_r>
 8001096:	e7f1      	b.n	800107c <_realloc_r+0x40>

08001098 <memmove>:
 8001098:	4288      	cmp	r0, r1
 800109a:	b510      	push	{r4, lr}
 800109c:	eb01 0402 	add.w	r4, r1, r2
 80010a0:	d902      	bls.n	80010a8 <memmove+0x10>
 80010a2:	4284      	cmp	r4, r0
 80010a4:	4623      	mov	r3, r4
 80010a6:	d807      	bhi.n	80010b8 <memmove+0x20>
 80010a8:	1e43      	subs	r3, r0, #1
 80010aa:	42a1      	cmp	r1, r4
 80010ac:	d008      	beq.n	80010c0 <memmove+0x28>
 80010ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80010b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80010b6:	e7f8      	b.n	80010aa <memmove+0x12>
 80010b8:	4402      	add	r2, r0
 80010ba:	4601      	mov	r1, r0
 80010bc:	428a      	cmp	r2, r1
 80010be:	d100      	bne.n	80010c2 <memmove+0x2a>
 80010c0:	bd10      	pop	{r4, pc}
 80010c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80010c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80010ca:	e7f7      	b.n	80010bc <memmove+0x24>

080010cc <_sbrk_r>:
 80010cc:	b538      	push	{r3, r4, r5, lr}
 80010ce:	4d06      	ldr	r5, [pc, #24]	@ (80010e8 <_sbrk_r+0x1c>)
 80010d0:	2300      	movs	r3, #0
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	602b      	str	r3, [r5, #0]
 80010d8:	f7ff fb36 	bl	8000748 <_sbrk>
 80010dc:	1c43      	adds	r3, r0, #1
 80010de:	d102      	bne.n	80010e6 <_sbrk_r+0x1a>
 80010e0:	682b      	ldr	r3, [r5, #0]
 80010e2:	b103      	cbz	r3, 80010e6 <_sbrk_r+0x1a>
 80010e4:	6023      	str	r3, [r4, #0]
 80010e6:	bd38      	pop	{r3, r4, r5, pc}
 80010e8:	200001bc 	.word	0x200001bc

080010ec <memcpy>:
 80010ec:	440a      	add	r2, r1
 80010ee:	4291      	cmp	r1, r2
 80010f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80010f4:	d100      	bne.n	80010f8 <memcpy+0xc>
 80010f6:	4770      	bx	lr
 80010f8:	b510      	push	{r4, lr}
 80010fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80010fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001102:	4291      	cmp	r1, r2
 8001104:	d1f9      	bne.n	80010fa <memcpy+0xe>
 8001106:	bd10      	pop	{r4, pc}

08001108 <_free_r>:
 8001108:	b538      	push	{r3, r4, r5, lr}
 800110a:	4605      	mov	r5, r0
 800110c:	2900      	cmp	r1, #0
 800110e:	d041      	beq.n	8001194 <_free_r+0x8c>
 8001110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001114:	1f0c      	subs	r4, r1, #4
 8001116:	2b00      	cmp	r3, #0
 8001118:	bfb8      	it	lt
 800111a:	18e4      	addlt	r4, r4, r3
 800111c:	f7ff ff82 	bl	8001024 <__malloc_lock>
 8001120:	4a1d      	ldr	r2, [pc, #116]	@ (8001198 <_free_r+0x90>)
 8001122:	6813      	ldr	r3, [r2, #0]
 8001124:	b933      	cbnz	r3, 8001134 <_free_r+0x2c>
 8001126:	6063      	str	r3, [r4, #4]
 8001128:	6014      	str	r4, [r2, #0]
 800112a:	4628      	mov	r0, r5
 800112c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001130:	f7ff bf7e 	b.w	8001030 <__malloc_unlock>
 8001134:	42a3      	cmp	r3, r4
 8001136:	d908      	bls.n	800114a <_free_r+0x42>
 8001138:	6820      	ldr	r0, [r4, #0]
 800113a:	1821      	adds	r1, r4, r0
 800113c:	428b      	cmp	r3, r1
 800113e:	bf01      	itttt	eq
 8001140:	6819      	ldreq	r1, [r3, #0]
 8001142:	685b      	ldreq	r3, [r3, #4]
 8001144:	1809      	addeq	r1, r1, r0
 8001146:	6021      	streq	r1, [r4, #0]
 8001148:	e7ed      	b.n	8001126 <_free_r+0x1e>
 800114a:	461a      	mov	r2, r3
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	b10b      	cbz	r3, 8001154 <_free_r+0x4c>
 8001150:	42a3      	cmp	r3, r4
 8001152:	d9fa      	bls.n	800114a <_free_r+0x42>
 8001154:	6811      	ldr	r1, [r2, #0]
 8001156:	1850      	adds	r0, r2, r1
 8001158:	42a0      	cmp	r0, r4
 800115a:	d10b      	bne.n	8001174 <_free_r+0x6c>
 800115c:	6820      	ldr	r0, [r4, #0]
 800115e:	4401      	add	r1, r0
 8001160:	1850      	adds	r0, r2, r1
 8001162:	4283      	cmp	r3, r0
 8001164:	6011      	str	r1, [r2, #0]
 8001166:	d1e0      	bne.n	800112a <_free_r+0x22>
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	6053      	str	r3, [r2, #4]
 800116e:	4408      	add	r0, r1
 8001170:	6010      	str	r0, [r2, #0]
 8001172:	e7da      	b.n	800112a <_free_r+0x22>
 8001174:	d902      	bls.n	800117c <_free_r+0x74>
 8001176:	230c      	movs	r3, #12
 8001178:	602b      	str	r3, [r5, #0]
 800117a:	e7d6      	b.n	800112a <_free_r+0x22>
 800117c:	6820      	ldr	r0, [r4, #0]
 800117e:	1821      	adds	r1, r4, r0
 8001180:	428b      	cmp	r3, r1
 8001182:	bf04      	itt	eq
 8001184:	6819      	ldreq	r1, [r3, #0]
 8001186:	685b      	ldreq	r3, [r3, #4]
 8001188:	6063      	str	r3, [r4, #4]
 800118a:	bf04      	itt	eq
 800118c:	1809      	addeq	r1, r1, r0
 800118e:	6021      	streq	r1, [r4, #0]
 8001190:	6054      	str	r4, [r2, #4]
 8001192:	e7ca      	b.n	800112a <_free_r+0x22>
 8001194:	bd38      	pop	{r3, r4, r5, pc}
 8001196:	bf00      	nop
 8001198:	200001b8 	.word	0x200001b8

0800119c <_malloc_usable_size_r>:
 800119c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011a0:	1f18      	subs	r0, r3, #4
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bfbc      	itt	lt
 80011a6:	580b      	ldrlt	r3, [r1, r0]
 80011a8:	18c0      	addlt	r0, r0, r3
 80011aa:	4770      	bx	lr

080011ac <_init>:
 80011ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ae:	bf00      	nop
 80011b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011b2:	bc08      	pop	{r3}
 80011b4:	469e      	mov	lr, r3
 80011b6:	4770      	bx	lr

080011b8 <_fini>:
 80011b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ba:	bf00      	nop
 80011bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011be:	bc08      	pop	{r3}
 80011c0:	469e      	mov	lr, r3
 80011c2:	4770      	bx	lr
