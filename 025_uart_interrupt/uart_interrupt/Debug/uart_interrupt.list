
uart_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000254c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080026d4  080026d4  000036d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800273c  0800273c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800273c  0800273c  0000373c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002744  08002744  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002744  08002744  00003744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002748  08002748  00003748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800274c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002758  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002758  000040b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092f0  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014ac  00000000  00000000  0000d32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0000e7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e1  00000000  00000000  0000ef88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025363  00000000  00000000  0000f569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089bd  00000000  00000000  000348cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e67b9  00000000  00000000  0003d289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123a42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001edc  00000000  00000000  00123a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00125964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080026bc 	.word	0x080026bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080026bc 	.word	0x080026bc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
    HAL_Init();
 800050a:	f000 f9a1 	bl	8000850 <HAL_Init>
    SystemClock_Config();
 800050e:	f000 f88f 	bl	8000630 <SystemClock_Config>
    MX_GPIO_Init();
 8000512:	f000 f84b 	bl	80005ac <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000516:	f000 f81f 	bl	8000558 <MX_USART2_UART_Init>

    char startMsg[] = "STM32L476RG Ready...\r\n";
 800051a:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <main+0x4c>)
 800051c:	463c      	mov	r4, r7
 800051e:	461d      	mov	r5, r3
 8000520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000524:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000528:	6020      	str	r0, [r4, #0]
 800052a:	3404      	adds	r4, #4
 800052c:	8021      	strh	r1, [r4, #0]
 800052e:	3402      	adds	r4, #2
 8000530:	0c0b      	lsrs	r3, r1, #16
 8000532:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)startMsg, strlen(startMsg), HAL_MAX_DELAY);
 8000534:	463b      	mov	r3, r7
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe46 	bl	80001c8 <strlen>
 800053c:	4603      	mov	r3, r0
 800053e:	b29a      	uxth	r2, r3
 8000540:	4639      	mov	r1, r7
 8000542:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000546:	4803      	ldr	r0, [pc, #12]	@ (8000554 <main+0x50>)
 8000548:	f001 fb2e 	bl	8001ba8 <HAL_UART_Transmit>

    while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <main+0x48>
 8000550:	080026d4 	.word	0x080026d4
 8000554:	20000028 	.word	0x20000028

08000558 <MX_USART2_UART_Init>:
    }
}

/* -------------------- USART2 Init -------------------- */
static void MX_USART2_UART_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 800055c:	4b11      	ldr	r3, [pc, #68]	@ (80005a4 <MX_USART2_UART_Init+0x4c>)
 800055e:	4a12      	ldr	r2, [pc, #72]	@ (80005a8 <MX_USART2_UART_Init+0x50>)
 8000560:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000562:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <MX_USART2_UART_Init+0x4c>)
 8000564:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000568:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <MX_USART2_UART_Init+0x4c>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000570:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <MX_USART2_UART_Init+0x4c>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	@ (80005a4 <MX_USART2_UART_Init+0x4c>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800057c:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <MX_USART2_UART_Init+0x4c>)
 800057e:	220c      	movs	r2, #12
 8000580:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000582:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <MX_USART2_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <MX_USART2_UART_Init+0x4c>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	@ (80005a4 <MX_USART2_UART_Init+0x4c>)
 8000590:	f001 fabc 	bl	8001b0c <HAL_UART_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 800059a:	f000 f8a3 	bl	80006e4 <Error_Handler>
    }
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000028 	.word	0x20000028
 80005a8:	40004400 	.word	0x40004400

080005ac <MX_GPIO_Init>:

/* -------------------- GPIO + EXTI Init -------------------- */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();   // For Button (PC13)
 80005c2:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <MX_GPIO_Init+0x7c>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	4a18      	ldr	r2, [pc, #96]	@ (8000628 <MX_GPIO_Init+0x7c>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ce:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <MX_GPIO_Init+0x7c>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();   // For USART2 Pins
 80005da:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <MX_GPIO_Init+0x7c>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	4a12      	ldr	r2, [pc, #72]	@ (8000628 <MX_GPIO_Init+0x7c>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e6:	4b10      	ldr	r3, [pc, #64]	@ (8000628 <MX_GPIO_Init+0x7c>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

    // Configure PC13 as input with interrupt on falling edge (button press)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	4619      	mov	r1, r3
 8000608:	4808      	ldr	r0, [pc, #32]	@ (800062c <MX_GPIO_Init+0x80>)
 800060a:	f000 faaf 	bl	8000b6c <HAL_GPIO_Init>

    // Enable and set EXTI line interrupt priority
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2102      	movs	r1, #2
 8000612:	2028      	movs	r0, #40	@ 0x28
 8000614:	f000 fa73 	bl	8000afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000618:	2028      	movs	r0, #40	@ 0x28
 800061a:	f000 fa8c 	bl	8000b36 <HAL_NVIC_EnableIRQ>
}
 800061e:	bf00      	nop
 8000620:	3720      	adds	r7, #32
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000
 800062c:	48000800 	.word	0x48000800

08000630 <SystemClock_Config>:

/* -------------------- System Clock -------------------- */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b096      	sub	sp, #88	@ 0x58
 8000634:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2244      	movs	r2, #68	@ 0x44
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f002 f80f 	bl	8002662 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	463b      	mov	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000652:	2310      	movs	r3, #16
 8000654:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000656:	2301      	movs	r3, #1
 8000658:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSICalibrationValue = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6; // 4 MHz
 800065e:	2360      	movs	r3, #96	@ 0x60
 8000660:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000662:	2300      	movs	r3, #0
 8000664:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fc4e 	bl	8000f0c <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000670:	230f      	movs	r3, #15
 8000672:	603b      	str	r3, [r7, #0]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000684:	463b      	mov	r3, r7
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f001 f81b 	bl	80016c4 <HAL_RCC_ClockConfig>
}
 800068e:	bf00      	nop
 8000690:	3758      	adds	r7, #88	@ 0x58
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <HAL_GPIO_EXTI_Callback>:

/* -------------------- EXTI Interrupt Handler -------------------- */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13)
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006a8:	d114      	bne.n	80006d4 <HAL_GPIO_EXTI_Callback+0x3c>
    {
        char msg[] = "hi :)\r\n";
 80006aa:	4a0c      	ldr	r2, [pc, #48]	@ (80006dc <HAL_GPIO_EXTI_Callback+0x44>)
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b4:	e883 0003 	stmia.w	r3, {r0, r1}
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fd83 	bl	80001c8 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	f107 0108 	add.w	r1, r7, #8
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ce:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <HAL_GPIO_EXTI_Callback+0x48>)
 80006d0:	f001 fa6a 	bl	8001ba8 <HAL_UART_Transmit>
    }
}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	080026ec 	.word	0x080026ec
 80006e0:	20000028 	.word	0x20000028

080006e4 <Error_Handler>:

/* -------------------- Error Handler -------------------- */
void Error_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	bf00      	nop
    __disable_irq();
    while (1) {}
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <Error_Handler+0x8>

080006f0 <HAL_MspInit>:
#include "main.h"

extern UART_HandleTypeDef huart2;

void HAL_MspInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <HAL_MspInit+0x44>)
 80006f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000734 <HAL_MspInit+0x44>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6613      	str	r3, [r2, #96]	@ 0x60
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <HAL_MspInit+0x44>)
 8000704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <HAL_MspInit+0x44>)
 8000710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000712:	4a08      	ldr	r2, [pc, #32]	@ (8000734 <HAL_MspInit+0x44>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000718:	6593      	str	r3, [r2, #88]	@ 0x58
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <HAL_MspInit+0x44>)
 800071c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800071e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000

08000738 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a17      	ldr	r2, [pc, #92]	@ (80007b4 <HAL_UART_MspInit+0x7c>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d128      	bne.n	80007ac <HAL_UART_MspInit+0x74>
    {
        __HAL_RCC_USART2_CLK_ENABLE();
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <HAL_UART_MspInit+0x80>)
 800075c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800075e:	4a16      	ldr	r2, [pc, #88]	@ (80007b8 <HAL_UART_MspInit+0x80>)
 8000760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000764:	6593      	str	r3, [r2, #88]	@ 0x58
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <HAL_UART_MspInit+0x80>)
 8000768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <HAL_UART_MspInit+0x80>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	4a10      	ldr	r2, [pc, #64]	@ (80007b8 <HAL_UART_MspInit+0x80>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <HAL_UART_MspInit+0x80>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]

        /* PA2 -> TX, PA3 -> RX */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800078a:	230c      	movs	r3, #12
 800078c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000792:	2301      	movs	r3, #1
 8000794:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800079a:	2307      	movs	r3, #7
 800079c:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a8:	f000 f9e0 	bl	8000b6c <HAL_GPIO_Init>
    }
}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	@ 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40004400 	.word	0x40004400
 80007b8:	40021000 	.word	0x40021000

080007bc <SysTick_Handler>:
#include "main.h"
extern UART_HandleTypeDef huart2;

void SysTick_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80007c0:	f000 f8a2 	bl	8000908 <HAL_IncTick>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80007cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80007d0:	f000 fb76 	bl	8000ec0 <HAL_GPIO_EXTI_IRQHandler>
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <SystemInit+0x20>)
 80007de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007e2:	4a05      	ldr	r2, [pc, #20]	@ (80007f8 <SystemInit+0x20>)
 80007e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000834 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000800:	f7ff ffea 	bl	80007d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000804:	480c      	ldr	r0, [pc, #48]	@ (8000838 <LoopForever+0x6>)
  ldr r1, =_edata
 8000806:	490d      	ldr	r1, [pc, #52]	@ (800083c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000808:	4a0d      	ldr	r2, [pc, #52]	@ (8000840 <LoopForever+0xe>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800080c:	e002      	b.n	8000814 <LoopCopyDataInit>

0800080e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000812:	3304      	adds	r3, #4

08000814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000818:	d3f9      	bcc.n	800080e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081a:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <LoopForever+0x12>)
  ldr r4, =_ebss
 800081c:	4c0a      	ldr	r4, [pc, #40]	@ (8000848 <LoopForever+0x16>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000820:	e001      	b.n	8000826 <LoopFillZerobss>

08000822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000824:	3204      	adds	r2, #4

08000826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000828:	d3fb      	bcc.n	8000822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800082a:	f001 ff23 	bl	8002674 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800082e:	f7ff fe69 	bl	8000504 <main>

08000832 <LoopForever>:

LoopForever:
    b LoopForever
 8000832:	e7fe      	b.n	8000832 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000834:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800083c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000840:	0800274c 	.word	0x0800274c
  ldr r2, =_sbss
 8000844:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000848:	200000b4 	.word	0x200000b4

0800084c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800084c:	e7fe      	b.n	800084c <ADC1_2_IRQHandler>
	...

08000850 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000856:	2300      	movs	r3, #0
 8000858:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800085a:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <HAL_Init+0x3c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a0b      	ldr	r2, [pc, #44]	@ (800088c <HAL_Init+0x3c>)
 8000860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000864:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000866:	2003      	movs	r0, #3
 8000868:	f000 f93e 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800086c:	2000      	movs	r0, #0
 800086e:	f000 f80f 	bl	8000890 <HAL_InitTick>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d002      	beq.n	800087e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000878:	2301      	movs	r3, #1
 800087a:	71fb      	strb	r3, [r7, #7]
 800087c:	e001      	b.n	8000882 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800087e:	f7ff ff37 	bl	80006f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000882:	79fb      	ldrb	r3, [r7, #7]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40022000 	.word	0x40022000

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800089c:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <HAL_InitTick+0x6c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d023      	beq.n	80008ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008a4:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <HAL_InitTick+0x70>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <HAL_InitTick+0x6c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f949 	bl	8000b52 <HAL_SYSTICK_Config>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d10f      	bne.n	80008e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b0f      	cmp	r3, #15
 80008ca:	d809      	bhi.n	80008e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008cc:	2200      	movs	r2, #0
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008d4:	f000 f913 	bl	8000afe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000904 <HAL_InitTick+0x74>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]
 80008de:	e007      	b.n	80008f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008e0:	2301      	movs	r3, #1
 80008e2:	73fb      	strb	r3, [r7, #15]
 80008e4:	e004      	b.n	80008f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	e001      	b.n	80008f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000000 	.word	0x20000000
 8000904:	20000004 	.word	0x20000004

08000908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_IncTick+0x20>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <HAL_IncTick+0x24>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a04      	ldr	r2, [pc, #16]	@ (800092c <HAL_IncTick+0x24>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000008 	.word	0x20000008
 800092c:	200000b0 	.word	0x200000b0

08000930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b03      	ldr	r3, [pc, #12]	@ (8000944 <HAL_GetTick+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	200000b0 	.word	0x200000b0

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	@ (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	@ (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 021f 	and.w	r2, r3, #31
 80009c4:	4907      	ldr	r1, [pc, #28]	@ (80009e4 <__NVIC_EnableIRQ+0x38>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	@ (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	@ (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	@ 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	@ 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac8:	f7ff ff8e 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff29 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff3e 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ff8e 	bl	8000a3c <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff5d 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff31 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffa2 	bl	8000aa4 <SysTick_Config>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7a:	e17f      	b.n	8000e7c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 8171 	beq.w	8000e76 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d005      	beq.n	8000bac <HAL_GPIO_Init+0x40>
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 0303 	and.w	r3, r3, #3
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d130      	bne.n	8000c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000be2:	2201      	movs	r2, #1
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	f003 0201 	and.w	r2, r3, #1
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d118      	bne.n	8000c4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c20:	2201      	movs	r2, #1
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	08db      	lsrs	r3, r3, #3
 8000c36:	f003 0201 	and.w	r2, r3, #1
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	d017      	beq.n	8000c88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2203      	movs	r2, #3
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d123      	bne.n	8000cdc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	08da      	lsrs	r2, r3, #3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3208      	adds	r2, #8
 8000c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	220f      	movs	r2, #15
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	691a      	ldr	r2, [r3, #16]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	08da      	lsrs	r2, r3, #3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3208      	adds	r2, #8
 8000cd6:	6939      	ldr	r1, [r7, #16]
 8000cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0203 	and.w	r2, r3, #3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 80ac 	beq.w	8000e76 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b5f      	ldr	r3, [pc, #380]	@ (8000e9c <HAL_GPIO_Init+0x330>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d22:	4a5e      	ldr	r2, [pc, #376]	@ (8000e9c <HAL_GPIO_Init+0x330>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d2a:	4b5c      	ldr	r3, [pc, #368]	@ (8000e9c <HAL_GPIO_Init+0x330>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d36:	4a5a      	ldr	r2, [pc, #360]	@ (8000ea0 <HAL_GPIO_Init+0x334>)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d60:	d025      	beq.n	8000dae <HAL_GPIO_Init+0x242>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a4f      	ldr	r2, [pc, #316]	@ (8000ea4 <HAL_GPIO_Init+0x338>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d01f      	beq.n	8000daa <HAL_GPIO_Init+0x23e>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4e      	ldr	r2, [pc, #312]	@ (8000ea8 <HAL_GPIO_Init+0x33c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d019      	beq.n	8000da6 <HAL_GPIO_Init+0x23a>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a4d      	ldr	r2, [pc, #308]	@ (8000eac <HAL_GPIO_Init+0x340>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d013      	beq.n	8000da2 <HAL_GPIO_Init+0x236>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4c      	ldr	r2, [pc, #304]	@ (8000eb0 <HAL_GPIO_Init+0x344>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d00d      	beq.n	8000d9e <HAL_GPIO_Init+0x232>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4b      	ldr	r2, [pc, #300]	@ (8000eb4 <HAL_GPIO_Init+0x348>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d007      	beq.n	8000d9a <HAL_GPIO_Init+0x22e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4a      	ldr	r2, [pc, #296]	@ (8000eb8 <HAL_GPIO_Init+0x34c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d101      	bne.n	8000d96 <HAL_GPIO_Init+0x22a>
 8000d92:	2306      	movs	r3, #6
 8000d94:	e00c      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000d96:	2307      	movs	r3, #7
 8000d98:	e00a      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e008      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000d9e:	2304      	movs	r3, #4
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000da2:	2303      	movs	r3, #3
 8000da4:	e004      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e002      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000dae:	2300      	movs	r3, #0
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	f002 0203 	and.w	r2, r2, #3
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	4093      	lsls	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dc0:	4937      	ldr	r1, [pc, #220]	@ (8000ea0 <HAL_GPIO_Init+0x334>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dce:	4b3b      	ldr	r3, [pc, #236]	@ (8000ebc <HAL_GPIO_Init+0x350>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000df2:	4a32      	ldr	r2, [pc, #200]	@ (8000ebc <HAL_GPIO_Init+0x350>)
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000df8:	4b30      	ldr	r3, [pc, #192]	@ (8000ebc <HAL_GPIO_Init+0x350>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e1c:	4a27      	ldr	r2, [pc, #156]	@ (8000ebc <HAL_GPIO_Init+0x350>)
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e22:	4b26      	ldr	r3, [pc, #152]	@ (8000ebc <HAL_GPIO_Init+0x350>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e46:	4a1d      	ldr	r2, [pc, #116]	@ (8000ebc <HAL_GPIO_Init+0x350>)
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <HAL_GPIO_Init+0x350>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e70:	4a12      	ldr	r2, [pc, #72]	@ (8000ebc <HAL_GPIO_Init+0x350>)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa22 f303 	lsr.w	r3, r2, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f47f ae78 	bne.w	8000b7c <HAL_GPIO_Init+0x10>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	371c      	adds	r7, #28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	48000800 	.word	0x48000800
 8000eac:	48000c00 	.word	0x48000c00
 8000eb0:	48001000 	.word	0x48001000
 8000eb4:	48001400 	.word	0x48001400
 8000eb8:	48001800 	.word	0x48001800
 8000ebc:	40010400 	.word	0x40010400

08000ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eca:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ecc:	695a      	ldr	r2, [r3, #20]
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d006      	beq.n	8000ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ed6:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fbda 	bl	8000698 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40010400 	.word	0x40010400

08000ef0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40007000 	.word	0x40007000

08000f0c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e3ca      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f1e:	4b97      	ldr	r3, [pc, #604]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f28:	4b94      	ldr	r3, [pc, #592]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 80e4 	beq.w	8001108 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d007      	beq.n	8000f56 <HAL_RCC_OscConfig+0x4a>
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2b0c      	cmp	r3, #12
 8000f4a:	f040 808b 	bne.w	8001064 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	f040 8087 	bne.w	8001064 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f56:	4b89      	ldr	r3, [pc, #548]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d005      	beq.n	8000f6e <HAL_RCC_OscConfig+0x62>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e3a2      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a1a      	ldr	r2, [r3, #32]
 8000f72:	4b82      	ldr	r3, [pc, #520]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d004      	beq.n	8000f88 <HAL_RCC_OscConfig+0x7c>
 8000f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f86:	e005      	b.n	8000f94 <HAL_RCC_OscConfig+0x88>
 8000f88:	4b7c      	ldr	r3, [pc, #496]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d223      	bcs.n	8000fe0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 fd55 	bl	8001a4c <RCC_SetFlashLatencyFromMSIRange>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e383      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fac:	4b73      	ldr	r3, [pc, #460]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a72      	ldr	r2, [pc, #456]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4b70      	ldr	r3, [pc, #448]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	496d      	ldr	r1, [pc, #436]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fca:	4b6c      	ldr	r3, [pc, #432]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	4968      	ldr	r1, [pc, #416]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	604b      	str	r3, [r1, #4]
 8000fde:	e025      	b.n	800102c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe0:	4b66      	ldr	r3, [pc, #408]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a65      	ldr	r2, [pc, #404]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b63      	ldr	r3, [pc, #396]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	4960      	ldr	r1, [pc, #384]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ffe:	4b5f      	ldr	r3, [pc, #380]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	495b      	ldr	r1, [pc, #364]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 800100e:	4313      	orrs	r3, r2
 8001010:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d109      	bne.n	800102c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fd15 	bl	8001a4c <RCC_SetFlashLatencyFromMSIRange>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e343      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800102c:	f000 fc4a 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001030:	4602      	mov	r2, r0
 8001032:	4b52      	ldr	r3, [pc, #328]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	4950      	ldr	r1, [pc, #320]	@ (8001180 <HAL_RCC_OscConfig+0x274>)
 800103e:	5ccb      	ldrb	r3, [r1, r3]
 8001040:	f003 031f 	and.w	r3, r3, #31
 8001044:	fa22 f303 	lsr.w	r3, r2, r3
 8001048:	4a4e      	ldr	r2, [pc, #312]	@ (8001184 <HAL_RCC_OscConfig+0x278>)
 800104a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800104c:	4b4e      	ldr	r3, [pc, #312]	@ (8001188 <HAL_RCC_OscConfig+0x27c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fc1d 	bl	8000890 <HAL_InitTick>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d052      	beq.n	8001106 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	e327      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d032      	beq.n	80010d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800106c:	4b43      	ldr	r3, [pc, #268]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a42      	ldr	r2, [pc, #264]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001078:	f7ff fc5a 	bl	8000930 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001080:	f7ff fc56 	bl	8000930 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e310      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001092:	4b3a      	ldr	r3, [pc, #232]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f0      	beq.n	8001080 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800109e:	4b37      	ldr	r3, [pc, #220]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a36      	ldr	r2, [pc, #216]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4b34      	ldr	r3, [pc, #208]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4931      	ldr	r1, [pc, #196]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010bc:	4b2f      	ldr	r3, [pc, #188]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	492c      	ldr	r1, [pc, #176]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	604b      	str	r3, [r1, #4]
 80010d0:	e01a      	b.n	8001108 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010d2:	4b2a      	ldr	r3, [pc, #168]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a29      	ldr	r2, [pc, #164]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010de:	f7ff fc27 	bl	8000930 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010e6:	f7ff fc23 	bl	8000930 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e2dd      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010f8:	4b20      	ldr	r3, [pc, #128]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f0      	bne.n	80010e6 <HAL_RCC_OscConfig+0x1da>
 8001104:	e000      	b.n	8001108 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001106:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d074      	beq.n	80011fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	2b08      	cmp	r3, #8
 8001118:	d005      	beq.n	8001126 <HAL_RCC_OscConfig+0x21a>
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b0c      	cmp	r3, #12
 800111e:	d10e      	bne.n	800113e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b03      	cmp	r3, #3
 8001124:	d10b      	bne.n	800113e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d064      	beq.n	80011fc <HAL_RCC_OscConfig+0x2f0>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d160      	bne.n	80011fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e2ba      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001146:	d106      	bne.n	8001156 <HAL_RCC_OscConfig+0x24a>
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 800114e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	e026      	b.n	80011a4 <HAL_RCC_OscConfig+0x298>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800115e:	d115      	bne.n	800118c <HAL_RCC_OscConfig+0x280>
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a05      	ldr	r2, [pc, #20]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8001166:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a02      	ldr	r2, [pc, #8]	@ (800117c <HAL_RCC_OscConfig+0x270>)
 8001172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	e014      	b.n	80011a4 <HAL_RCC_OscConfig+0x298>
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	080026f4 	.word	0x080026f4
 8001184:	20000000 	.word	0x20000000
 8001188:	20000004 	.word	0x20000004
 800118c:	4ba0      	ldr	r3, [pc, #640]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a9f      	ldr	r2, [pc, #636]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 8001192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b9d      	ldr	r3, [pc, #628]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a9c      	ldr	r2, [pc, #624]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 800119e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d013      	beq.n	80011d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ac:	f7ff fbc0 	bl	8000930 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fbbc 	bl	8000930 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	@ 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e276      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011c6:	4b92      	ldr	r3, [pc, #584]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0x2a8>
 80011d2:	e014      	b.n	80011fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d4:	f7ff fbac 	bl	8000930 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fba8 	bl	8000930 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	@ 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e262      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ee:	4b88      	ldr	r3, [pc, #544]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x2d0>
 80011fa:	e000      	b.n	80011fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d060      	beq.n	80012cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2b04      	cmp	r3, #4
 800120e:	d005      	beq.n	800121c <HAL_RCC_OscConfig+0x310>
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2b0c      	cmp	r3, #12
 8001214:	d119      	bne.n	800124a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d116      	bne.n	800124a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800121c:	4b7c      	ldr	r3, [pc, #496]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_OscConfig+0x328>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e23f      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001234:	4b76      	ldr	r3, [pc, #472]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	061b      	lsls	r3, r3, #24
 8001242:	4973      	ldr	r1, [pc, #460]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001248:	e040      	b.n	80012cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d023      	beq.n	800129a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001252:	4b6f      	ldr	r3, [pc, #444]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a6e      	ldr	r2, [pc, #440]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 8001258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800125c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fb67 	bl	8000930 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff fb63 	bl	8000930 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e21d      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001278:	4b65      	ldr	r3, [pc, #404]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001284:	4b62      	ldr	r3, [pc, #392]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	061b      	lsls	r3, r3, #24
 8001292:	495f      	ldr	r1, [pc, #380]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
 8001298:	e018      	b.n	80012cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129a:	4b5d      	ldr	r3, [pc, #372]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a5c      	ldr	r2, [pc, #368]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 80012a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a6:	f7ff fb43 	bl	8000930 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ae:	f7ff fb3f 	bl	8000930 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e1f9      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012c0:	4b53      	ldr	r3, [pc, #332]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f0      	bne.n	80012ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d03c      	beq.n	8001352 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d01c      	beq.n	800131a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 80012e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012e6:	4a4a      	ldr	r2, [pc, #296]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f0:	f7ff fb1e 	bl	8000930 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f8:	f7ff fb1a 	bl	8000930 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1d4      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800130a:	4b41      	ldr	r3, [pc, #260]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 800130c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0ef      	beq.n	80012f8 <HAL_RCC_OscConfig+0x3ec>
 8001318:	e01b      	b.n	8001352 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131a:	4b3d      	ldr	r3, [pc, #244]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 800131c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001320:	4a3b      	ldr	r2, [pc, #236]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 8001322:	f023 0301 	bic.w	r3, r3, #1
 8001326:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132a:	f7ff fb01 	bl	8000930 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001332:	f7ff fafd 	bl	8000930 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e1b7      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001344:	4b32      	ldr	r3, [pc, #200]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 8001346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1ef      	bne.n	8001332 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 80a6 	beq.w	80014ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001364:	4b2a      	ldr	r3, [pc, #168]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 8001366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10d      	bne.n	800138c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001370:	4b27      	ldr	r3, [pc, #156]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001374:	4a26      	ldr	r2, [pc, #152]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 8001376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137a:	6593      	str	r3, [r2, #88]	@ 0x58
 800137c:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 800137e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001388:	2301      	movs	r3, #1
 800138a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800138c:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <HAL_RCC_OscConfig+0x508>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001394:	2b00      	cmp	r3, #0
 8001396:	d118      	bne.n	80013ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001398:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <HAL_RCC_OscConfig+0x508>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a1d      	ldr	r2, [pc, #116]	@ (8001414 <HAL_RCC_OscConfig+0x508>)
 800139e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a4:	f7ff fac4 	bl	8000930 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ac:	f7ff fac0 	bl	8000930 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e17a      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <HAL_RCC_OscConfig+0x508>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d108      	bne.n	80013e4 <HAL_RCC_OscConfig+0x4d8>
 80013d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 80013d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013e2:	e029      	b.n	8001438 <HAL_RCC_OscConfig+0x52c>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d115      	bne.n	8001418 <HAL_RCC_OscConfig+0x50c>
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 80013ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013f2:	4a07      	ldr	r2, [pc, #28]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013fc:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 80013fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001402:	4a03      	ldr	r2, [pc, #12]	@ (8001410 <HAL_RCC_OscConfig+0x504>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800140c:	e014      	b.n	8001438 <HAL_RCC_OscConfig+0x52c>
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	40007000 	.word	0x40007000
 8001418:	4b9c      	ldr	r3, [pc, #624]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 800141a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800141e:	4a9b      	ldr	r2, [pc, #620]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 8001420:	f023 0301 	bic.w	r3, r3, #1
 8001424:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001428:	4b98      	ldr	r3, [pc, #608]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 800142a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800142e:	4a97      	ldr	r2, [pc, #604]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 8001430:	f023 0304 	bic.w	r3, r3, #4
 8001434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d016      	beq.n	800146e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff fa76 	bl	8000930 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001446:	e00a      	b.n	800145e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f7ff fa72 	bl	8000930 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e12a      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800145e:	4b8b      	ldr	r3, [pc, #556]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 8001460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0ed      	beq.n	8001448 <HAL_RCC_OscConfig+0x53c>
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146e:	f7ff fa5f 	bl	8000930 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001474:	e00a      	b.n	800148c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001476:	f7ff fa5b 	bl	8000930 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001484:	4293      	cmp	r3, r2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e113      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800148c:	4b7f      	ldr	r3, [pc, #508]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 800148e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1ed      	bne.n	8001476 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800149a:	7ffb      	ldrb	r3, [r7, #31]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d105      	bne.n	80014ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a0:	4b7a      	ldr	r3, [pc, #488]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a4:	4a79      	ldr	r2, [pc, #484]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 80014a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80fe 	beq.w	80016b2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	f040 80d0 	bne.w	8001660 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014c0:	4b72      	ldr	r3, [pc, #456]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d130      	bne.n	8001536 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	3b01      	subs	r3, #1
 80014e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d127      	bne.n	8001536 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d11f      	bne.n	8001536 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001500:	2a07      	cmp	r2, #7
 8001502:	bf14      	ite	ne
 8001504:	2201      	movne	r2, #1
 8001506:	2200      	moveq	r2, #0
 8001508:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800150a:	4293      	cmp	r3, r2
 800150c:	d113      	bne.n	8001536 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001518:	085b      	lsrs	r3, r3, #1
 800151a:	3b01      	subs	r3, #1
 800151c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800151e:	429a      	cmp	r2, r3
 8001520:	d109      	bne.n	8001536 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	3b01      	subs	r3, #1
 8001530:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001532:	429a      	cmp	r2, r3
 8001534:	d06e      	beq.n	8001614 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b0c      	cmp	r3, #12
 800153a:	d069      	beq.n	8001610 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800153c:	4b53      	ldr	r3, [pc, #332]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d105      	bne.n	8001554 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001548:	4b50      	ldr	r3, [pc, #320]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0ad      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001558:	4b4c      	ldr	r3, [pc, #304]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a4b      	ldr	r2, [pc, #300]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 800155e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001562:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001564:	f7ff f9e4 	bl	8000930 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156c:	f7ff f9e0 	bl	8000930 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e09a      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800157e:	4b43      	ldr	r3, [pc, #268]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800158a:	4b40      	ldr	r3, [pc, #256]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	4b40      	ldr	r3, [pc, #256]	@ (8001690 <HAL_RCC_OscConfig+0x784>)
 8001590:	4013      	ands	r3, r2
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800159a:	3a01      	subs	r2, #1
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	4311      	orrs	r1, r2
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80015a4:	0212      	lsls	r2, r2, #8
 80015a6:	4311      	orrs	r1, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80015ac:	0852      	lsrs	r2, r2, #1
 80015ae:	3a01      	subs	r2, #1
 80015b0:	0552      	lsls	r2, r2, #21
 80015b2:	4311      	orrs	r1, r2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015b8:	0852      	lsrs	r2, r2, #1
 80015ba:	3a01      	subs	r2, #1
 80015bc:	0652      	lsls	r2, r2, #25
 80015be:	4311      	orrs	r1, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80015c4:	0912      	lsrs	r2, r2, #4
 80015c6:	0452      	lsls	r2, r2, #17
 80015c8:	430a      	orrs	r2, r1
 80015ca:	4930      	ldr	r1, [pc, #192]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015d0:	4b2e      	ldr	r3, [pc, #184]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2d      	ldr	r2, [pc, #180]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 80015d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015dc:	4b2b      	ldr	r3, [pc, #172]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	4a2a      	ldr	r2, [pc, #168]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 80015e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015e8:	f7ff f9a2 	bl	8000930 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff f99e 	bl	8000930 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e058      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001602:	4b22      	ldr	r3, [pc, #136]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800160e:	e050      	b.n	80016b2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e04f      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001614:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d148      	bne.n	80016b2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a19      	ldr	r2, [pc, #100]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 8001626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800162a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800162c:	4b17      	ldr	r3, [pc, #92]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4a16      	ldr	r2, [pc, #88]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 8001632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001636:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001638:	f7ff f97a 	bl	8000930 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff f976 	bl	8000930 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e030      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001652:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x734>
 800165e:	e028      	b.n	80016b2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d023      	beq.n	80016ae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b09      	ldr	r3, [pc, #36]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a08      	ldr	r2, [pc, #32]	@ (800168c <HAL_RCC_OscConfig+0x780>)
 800166c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001672:	f7ff f95d 	bl	8000930 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001678:	e00c      	b.n	8001694 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167a:	f7ff f959 	bl	8000930 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d905      	bls.n	8001694 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e013      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
 800168c:	40021000 	.word	0x40021000
 8001690:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001694:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <HAL_RCC_OscConfig+0x7b0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1ec      	bne.n	800167a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_RCC_OscConfig+0x7b0>)
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	4905      	ldr	r1, [pc, #20]	@ (80016bc <HAL_RCC_OscConfig+0x7b0>)
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_RCC_OscConfig+0x7b4>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	60cb      	str	r3, [r1, #12]
 80016ac:	e001      	b.n	80016b2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3720      	adds	r7, #32
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000
 80016c0:	feeefffc 	.word	0xfeeefffc

080016c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0e7      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d8:	4b75      	ldr	r3, [pc, #468]	@ (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d910      	bls.n	8001708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b72      	ldr	r3, [pc, #456]	@ (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 0207 	bic.w	r2, r3, #7
 80016ee:	4970      	ldr	r1, [pc, #448]	@ (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b6e      	ldr	r3, [pc, #440]	@ (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0cf      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d010      	beq.n	8001736 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	4b66      	ldr	r3, [pc, #408]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001720:	429a      	cmp	r2, r3
 8001722:	d908      	bls.n	8001736 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001724:	4b63      	ldr	r3, [pc, #396]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4960      	ldr	r1, [pc, #384]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d04c      	beq.n	80017dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174a:	4b5a      	ldr	r3, [pc, #360]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d121      	bne.n	800179a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0a6      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001762:	4b54      	ldr	r3, [pc, #336]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d115      	bne.n	800179a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e09a      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800177a:	4b4e      	ldr	r3, [pc, #312]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d109      	bne.n	800179a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e08e      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178a:	4b4a      	ldr	r3, [pc, #296]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e086      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800179a:	4b46      	ldr	r3, [pc, #280]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f023 0203 	bic.w	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4943      	ldr	r1, [pc, #268]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017ac:	f7ff f8c0 	bl	8000930 <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b4:	f7ff f8bc 	bl	8000930 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e06e      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	4b3a      	ldr	r3, [pc, #232]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 020c 	and.w	r2, r3, #12
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	429a      	cmp	r2, r3
 80017da:	d1eb      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d010      	beq.n	800180a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	4b31      	ldr	r3, [pc, #196]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d208      	bcs.n	800180a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f8:	4b2e      	ldr	r3, [pc, #184]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	492b      	ldr	r1, [pc, #172]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800180a:	4b29      	ldr	r3, [pc, #164]	@ (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d210      	bcs.n	800183a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001818:	4b25      	ldr	r3, [pc, #148]	@ (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 0207 	bic.w	r2, r3, #7
 8001820:	4923      	ldr	r1, [pc, #140]	@ (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001828:	4b21      	ldr	r3, [pc, #132]	@ (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d001      	beq.n	800183a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e036      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b00      	cmp	r3, #0
 8001844:	d008      	beq.n	8001858 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001846:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	4918      	ldr	r1, [pc, #96]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d009      	beq.n	8001878 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4910      	ldr	r1, [pc, #64]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001874:	4313      	orrs	r3, r2
 8001876:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001878:	f000 f824 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 800187c:	4602      	mov	r2, r0
 800187e:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	490b      	ldr	r1, [pc, #44]	@ (80018b8 <HAL_RCC_ClockConfig+0x1f4>)
 800188a:	5ccb      	ldrb	r3, [r1, r3]
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
 8001894:	4a09      	ldr	r2, [pc, #36]	@ (80018bc <HAL_RCC_ClockConfig+0x1f8>)
 8001896:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001898:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <HAL_RCC_ClockConfig+0x1fc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fff7 	bl	8000890 <HAL_InitTick>
 80018a2:	4603      	mov	r3, r0
 80018a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80018a6:	7afb      	ldrb	r3, [r7, #11]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40022000 	.word	0x40022000
 80018b4:	40021000 	.word	0x40021000
 80018b8:	080026f4 	.word	0x080026f4
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	@ 0x24
 80018c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d2:	4b3e      	ldr	r3, [pc, #248]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018dc:	4b3b      	ldr	r3, [pc, #236]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x34>
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d121      	bne.n	8001936 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d11e      	bne.n	8001936 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018f8:	4b34      	ldr	r3, [pc, #208]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d107      	bne.n	8001914 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001904:	4b31      	ldr	r3, [pc, #196]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 8001906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	e005      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001914:	4b2d      	ldr	r3, [pc, #180]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001920:	4a2b      	ldr	r2, [pc, #172]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001928:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10d      	bne.n	800194c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001934:	e00a      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	2b04      	cmp	r3, #4
 800193a:	d102      	bne.n	8001942 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800193c:	4b25      	ldr	r3, [pc, #148]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	e004      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	2b08      	cmp	r3, #8
 8001946:	d101      	bne.n	800194c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001948:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800194a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d134      	bne.n	80019bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001952:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d003      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0xa6>
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d003      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0xac>
 8001968:	e005      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800196a:	4b1a      	ldr	r3, [pc, #104]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800196c:	617b      	str	r3, [r7, #20]
      break;
 800196e:	e005      	b.n	800197c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001970:	4b19      	ldr	r3, [pc, #100]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001972:	617b      	str	r3, [r7, #20]
      break;
 8001974:	e002      	b.n	800197c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	617b      	str	r3, [r7, #20]
      break;
 800197a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800197c:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	3301      	adds	r3, #1
 8001988:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	fb03 f202 	mul.w	r2, r3, r2
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019a2:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	0e5b      	lsrs	r3, r3, #25
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	3301      	adds	r3, #1
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019bc:	69bb      	ldr	r3, [r7, #24]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	@ 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	0800270c 	.word	0x0800270c
 80019d4:	00f42400 	.word	0x00f42400
 80019d8:	007a1200 	.word	0x007a1200

080019dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000000 	.word	0x20000000

080019f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80019f8:	f7ff fff0 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	4904      	ldr	r1, [pc, #16]	@ (8001a1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a0a:	5ccb      	ldrb	r3, [r1, r3]
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08002704 	.word	0x08002704

08001a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001a24:	f7ff ffda 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	0adb      	lsrs	r3, r3, #11
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	4904      	ldr	r1, [pc, #16]	@ (8001a48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a36:	5ccb      	ldrb	r3, [r1, r3]
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40021000 	.word	0x40021000
 8001a48:	08002704 	.word	0x08002704

08001a4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a58:	4b2a      	ldr	r3, [pc, #168]	@ (8001b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a64:	f7ff fa44 	bl	8000ef0 <HAL_PWREx_GetVoltageRange>
 8001a68:	6178      	str	r0, [r7, #20]
 8001a6a:	e014      	b.n	8001a96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a6c:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a70:	4a24      	ldr	r2, [pc, #144]	@ (8001b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a78:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a84:	f7ff fa34 	bl	8000ef0 <HAL_PWREx_GetVoltageRange>
 8001a88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a94:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a9c:	d10b      	bne.n	8001ab6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b80      	cmp	r3, #128	@ 0x80
 8001aa2:	d919      	bls.n	8001ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001aa8:	d902      	bls.n	8001ab0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aaa:	2302      	movs	r3, #2
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	e013      	b.n	8001ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	e010      	b.n	8001ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b80      	cmp	r3, #128	@ 0x80
 8001aba:	d902      	bls.n	8001ac2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001abc:	2303      	movs	r3, #3
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	e00a      	b.n	8001ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b80      	cmp	r3, #128	@ 0x80
 8001ac6:	d102      	bne.n	8001ace <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ac8:	2302      	movs	r3, #2
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	e004      	b.n	8001ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b70      	cmp	r3, #112	@ 0x70
 8001ad2:	d101      	bne.n	8001ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f023 0207 	bic.w	r2, r3, #7
 8001ae0:	4909      	ldr	r1, [pc, #36]	@ (8001b08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ae8:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d001      	beq.n	8001afa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40022000 	.word	0x40022000

08001b0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e040      	b.n	8001ba0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d106      	bne.n	8001b34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7fe fe02 	bl	8000738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2224      	movs	r2, #36	@ 0x24
 8001b38:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 fb6a 	bl	800222c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f8af 	bl	8001cbc <UART_SetConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e01b      	b.n	8001ba0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fbe9 	bl	8002370 <UART_CheckIdleState>
 8001b9e:	4603      	mov	r3, r0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	@ 0x28
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001bbc:	2b20      	cmp	r3, #32
 8001bbe:	d177      	bne.n	8001cb0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_UART_Transmit+0x24>
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e070      	b.n	8001cb2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2221      	movs	r2, #33	@ 0x21
 8001bdc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bde:	f7fe fea7 	bl	8000930 <HAL_GetTick>
 8001be2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	88fa      	ldrh	r2, [r7, #6]
 8001be8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	88fa      	ldrh	r2, [r7, #6]
 8001bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bfc:	d108      	bne.n	8001c10 <HAL_UART_Transmit+0x68>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d104      	bne.n	8001c10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	e003      	b.n	8001c18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c18:	e02f      	b.n	8001c7a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2200      	movs	r2, #0
 8001c22:	2180      	movs	r1, #128	@ 0x80
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 fc4b 	bl	80024c0 <UART_WaitOnFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2220      	movs	r2, #32
 8001c34:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e03b      	b.n	8001cb2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10b      	bne.n	8001c58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	881a      	ldrh	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c4c:	b292      	uxth	r2, r2
 8001c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	3302      	adds	r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	e007      	b.n	8001c68 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	781a      	ldrb	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3301      	adds	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1c9      	bne.n	8001c1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2140      	movs	r1, #64	@ 0x40
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f000 fc15 	bl	80024c0 <UART_WaitOnFlagUntilTimeout>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e005      	b.n	8001cb2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	e000      	b.n	8001cb2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8001cb0:	2302      	movs	r3, #2
  }
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3720      	adds	r7, #32
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc0:	b08a      	sub	sp, #40	@ 0x28
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4ba4      	ldr	r3, [pc, #656]	@ (8001f7c <UART_SetConfig+0x2c0>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a99      	ldr	r2, [pc, #612]	@ (8001f80 <UART_SetConfig+0x2c4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d004      	beq.n	8001d28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d24:	4313      	orrs	r3, r2
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a90      	ldr	r2, [pc, #576]	@ (8001f84 <UART_SetConfig+0x2c8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d126      	bne.n	8001d94 <UART_SetConfig+0xd8>
 8001d46:	4b90      	ldr	r3, [pc, #576]	@ (8001f88 <UART_SetConfig+0x2cc>)
 8001d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d81b      	bhi.n	8001d8c <UART_SetConfig+0xd0>
 8001d54:	a201      	add	r2, pc, #4	@ (adr r2, 8001d5c <UART_SetConfig+0xa0>)
 8001d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5a:	bf00      	nop
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d7d 	.word	0x08001d7d
 8001d64:	08001d75 	.word	0x08001d75
 8001d68:	08001d85 	.word	0x08001d85
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001d72:	e116      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001d74:	2302      	movs	r3, #2
 8001d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001d7a:	e112      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001d82:	e10e      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001d84:	2308      	movs	r3, #8
 8001d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001d8a:	e10a      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001d8c:	2310      	movs	r3, #16
 8001d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001d92:	e106      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a7c      	ldr	r2, [pc, #496]	@ (8001f8c <UART_SetConfig+0x2d0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d138      	bne.n	8001e10 <UART_SetConfig+0x154>
 8001d9e:	4b7a      	ldr	r3, [pc, #488]	@ (8001f88 <UART_SetConfig+0x2cc>)
 8001da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	2b0c      	cmp	r3, #12
 8001daa:	d82d      	bhi.n	8001e08 <UART_SetConfig+0x14c>
 8001dac:	a201      	add	r2, pc, #4	@ (adr r2, 8001db4 <UART_SetConfig+0xf8>)
 8001dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db2:	bf00      	nop
 8001db4:	08001de9 	.word	0x08001de9
 8001db8:	08001e09 	.word	0x08001e09
 8001dbc:	08001e09 	.word	0x08001e09
 8001dc0:	08001e09 	.word	0x08001e09
 8001dc4:	08001df9 	.word	0x08001df9
 8001dc8:	08001e09 	.word	0x08001e09
 8001dcc:	08001e09 	.word	0x08001e09
 8001dd0:	08001e09 	.word	0x08001e09
 8001dd4:	08001df1 	.word	0x08001df1
 8001dd8:	08001e09 	.word	0x08001e09
 8001ddc:	08001e09 	.word	0x08001e09
 8001de0:	08001e09 	.word	0x08001e09
 8001de4:	08001e01 	.word	0x08001e01
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001dee:	e0d8      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001df0:	2302      	movs	r3, #2
 8001df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001df6:	e0d4      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001df8:	2304      	movs	r3, #4
 8001dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001dfe:	e0d0      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001e00:	2308      	movs	r3, #8
 8001e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e06:	e0cc      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001e08:	2310      	movs	r3, #16
 8001e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e0e:	e0c8      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a5e      	ldr	r2, [pc, #376]	@ (8001f90 <UART_SetConfig+0x2d4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d125      	bne.n	8001e66 <UART_SetConfig+0x1aa>
 8001e1a:	4b5b      	ldr	r3, [pc, #364]	@ (8001f88 <UART_SetConfig+0x2cc>)
 8001e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001e24:	2b30      	cmp	r3, #48	@ 0x30
 8001e26:	d016      	beq.n	8001e56 <UART_SetConfig+0x19a>
 8001e28:	2b30      	cmp	r3, #48	@ 0x30
 8001e2a:	d818      	bhi.n	8001e5e <UART_SetConfig+0x1a2>
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	d00a      	beq.n	8001e46 <UART_SetConfig+0x18a>
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	d814      	bhi.n	8001e5e <UART_SetConfig+0x1a2>
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <UART_SetConfig+0x182>
 8001e38:	2b10      	cmp	r3, #16
 8001e3a:	d008      	beq.n	8001e4e <UART_SetConfig+0x192>
 8001e3c:	e00f      	b.n	8001e5e <UART_SetConfig+0x1a2>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e44:	e0ad      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001e46:	2302      	movs	r3, #2
 8001e48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e4c:	e0a9      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001e4e:	2304      	movs	r3, #4
 8001e50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e54:	e0a5      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001e56:	2308      	movs	r3, #8
 8001e58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e5c:	e0a1      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001e5e:	2310      	movs	r3, #16
 8001e60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e64:	e09d      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a4a      	ldr	r2, [pc, #296]	@ (8001f94 <UART_SetConfig+0x2d8>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d125      	bne.n	8001ebc <UART_SetConfig+0x200>
 8001e70:	4b45      	ldr	r3, [pc, #276]	@ (8001f88 <UART_SetConfig+0x2cc>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001e7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8001e7c:	d016      	beq.n	8001eac <UART_SetConfig+0x1f0>
 8001e7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001e80:	d818      	bhi.n	8001eb4 <UART_SetConfig+0x1f8>
 8001e82:	2b80      	cmp	r3, #128	@ 0x80
 8001e84:	d00a      	beq.n	8001e9c <UART_SetConfig+0x1e0>
 8001e86:	2b80      	cmp	r3, #128	@ 0x80
 8001e88:	d814      	bhi.n	8001eb4 <UART_SetConfig+0x1f8>
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <UART_SetConfig+0x1d8>
 8001e8e:	2b40      	cmp	r3, #64	@ 0x40
 8001e90:	d008      	beq.n	8001ea4 <UART_SetConfig+0x1e8>
 8001e92:	e00f      	b.n	8001eb4 <UART_SetConfig+0x1f8>
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e9a:	e082      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001ea2:	e07e      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001eaa:	e07a      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001eac:	2308      	movs	r3, #8
 8001eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001eb2:	e076      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001eb4:	2310      	movs	r3, #16
 8001eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001eba:	e072      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a35      	ldr	r2, [pc, #212]	@ (8001f98 <UART_SetConfig+0x2dc>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d12a      	bne.n	8001f1c <UART_SetConfig+0x260>
 8001ec6:	4b30      	ldr	r3, [pc, #192]	@ (8001f88 <UART_SetConfig+0x2cc>)
 8001ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ecc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ed0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001ed4:	d01a      	beq.n	8001f0c <UART_SetConfig+0x250>
 8001ed6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001eda:	d81b      	bhi.n	8001f14 <UART_SetConfig+0x258>
 8001edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ee0:	d00c      	beq.n	8001efc <UART_SetConfig+0x240>
 8001ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ee6:	d815      	bhi.n	8001f14 <UART_SetConfig+0x258>
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <UART_SetConfig+0x238>
 8001eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ef0:	d008      	beq.n	8001f04 <UART_SetConfig+0x248>
 8001ef2:	e00f      	b.n	8001f14 <UART_SetConfig+0x258>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001efa:	e052      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001efc:	2302      	movs	r3, #2
 8001efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f02:	e04e      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001f04:	2304      	movs	r3, #4
 8001f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f0a:	e04a      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f12:	e046      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001f14:	2310      	movs	r3, #16
 8001f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f1a:	e042      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a17      	ldr	r2, [pc, #92]	@ (8001f80 <UART_SetConfig+0x2c4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d13a      	bne.n	8001f9c <UART_SetConfig+0x2e0>
 8001f26:	4b18      	ldr	r3, [pc, #96]	@ (8001f88 <UART_SetConfig+0x2cc>)
 8001f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001f30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001f34:	d01a      	beq.n	8001f6c <UART_SetConfig+0x2b0>
 8001f36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001f3a:	d81b      	bhi.n	8001f74 <UART_SetConfig+0x2b8>
 8001f3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f40:	d00c      	beq.n	8001f5c <UART_SetConfig+0x2a0>
 8001f42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f46:	d815      	bhi.n	8001f74 <UART_SetConfig+0x2b8>
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <UART_SetConfig+0x298>
 8001f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f50:	d008      	beq.n	8001f64 <UART_SetConfig+0x2a8>
 8001f52:	e00f      	b.n	8001f74 <UART_SetConfig+0x2b8>
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f5a:	e022      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f62:	e01e      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001f64:	2304      	movs	r3, #4
 8001f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f6a:	e01a      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001f6c:	2308      	movs	r3, #8
 8001f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f72:	e016      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001f74:	2310      	movs	r3, #16
 8001f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f7a:	e012      	b.n	8001fa2 <UART_SetConfig+0x2e6>
 8001f7c:	efff69f3 	.word	0xefff69f3
 8001f80:	40008000 	.word	0x40008000
 8001f84:	40013800 	.word	0x40013800
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40004400 	.word	0x40004400
 8001f90:	40004800 	.word	0x40004800
 8001f94:	40004c00 	.word	0x40004c00
 8001f98:	40005000 	.word	0x40005000
 8001f9c:	2310      	movs	r3, #16
 8001f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a9f      	ldr	r2, [pc, #636]	@ (8002224 <UART_SetConfig+0x568>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d17a      	bne.n	80020a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001fac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d824      	bhi.n	8001ffe <UART_SetConfig+0x342>
 8001fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8001fbc <UART_SetConfig+0x300>)
 8001fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fba:	bf00      	nop
 8001fbc:	08001fe1 	.word	0x08001fe1
 8001fc0:	08001fff 	.word	0x08001fff
 8001fc4:	08001fe9 	.word	0x08001fe9
 8001fc8:	08001fff 	.word	0x08001fff
 8001fcc:	08001fef 	.word	0x08001fef
 8001fd0:	08001fff 	.word	0x08001fff
 8001fd4:	08001fff 	.word	0x08001fff
 8001fd8:	08001fff 	.word	0x08001fff
 8001fdc:	08001ff7 	.word	0x08001ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fe0:	f7ff fd08 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 8001fe4:	61f8      	str	r0, [r7, #28]
        break;
 8001fe6:	e010      	b.n	800200a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001fe8:	4b8f      	ldr	r3, [pc, #572]	@ (8002228 <UART_SetConfig+0x56c>)
 8001fea:	61fb      	str	r3, [r7, #28]
        break;
 8001fec:	e00d      	b.n	800200a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fee:	f7ff fc69 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001ff2:	61f8      	str	r0, [r7, #28]
        break;
 8001ff4:	e009      	b.n	800200a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ffa:	61fb      	str	r3, [r7, #28]
        break;
 8001ffc:	e005      	b.n	800200a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002008:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80fb 	beq.w	8002208 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	429a      	cmp	r2, r3
 8002020:	d305      	bcc.n	800202e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	429a      	cmp	r2, r3
 800202c:	d903      	bls.n	8002036 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002034:	e0e8      	b.n	8002208 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	2200      	movs	r2, #0
 800203a:	461c      	mov	r4, r3
 800203c:	4615      	mov	r5, r2
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	022b      	lsls	r3, r5, #8
 8002048:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800204c:	0222      	lsls	r2, r4, #8
 800204e:	68f9      	ldr	r1, [r7, #12]
 8002050:	6849      	ldr	r1, [r1, #4]
 8002052:	0849      	lsrs	r1, r1, #1
 8002054:	2000      	movs	r0, #0
 8002056:	4688      	mov	r8, r1
 8002058:	4681      	mov	r9, r0
 800205a:	eb12 0a08 	adds.w	sl, r2, r8
 800205e:	eb43 0b09 	adc.w	fp, r3, r9
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002070:	4650      	mov	r0, sl
 8002072:	4659      	mov	r1, fp
 8002074:	f7fe f8b0 	bl	80001d8 <__aeabi_uldivmod>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4613      	mov	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002086:	d308      	bcc.n	800209a <UART_SetConfig+0x3de>
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800208e:	d204      	bcs.n	800209a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	e0b6      	b.n	8002208 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80020a0:	e0b2      	b.n	8002208 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020aa:	d15e      	bne.n	800216a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80020ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d828      	bhi.n	8002106 <UART_SetConfig+0x44a>
 80020b4:	a201      	add	r2, pc, #4	@ (adr r2, 80020bc <UART_SetConfig+0x400>)
 80020b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ba:	bf00      	nop
 80020bc:	080020e1 	.word	0x080020e1
 80020c0:	080020e9 	.word	0x080020e9
 80020c4:	080020f1 	.word	0x080020f1
 80020c8:	08002107 	.word	0x08002107
 80020cc:	080020f7 	.word	0x080020f7
 80020d0:	08002107 	.word	0x08002107
 80020d4:	08002107 	.word	0x08002107
 80020d8:	08002107 	.word	0x08002107
 80020dc:	080020ff 	.word	0x080020ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020e0:	f7ff fc88 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 80020e4:	61f8      	str	r0, [r7, #28]
        break;
 80020e6:	e014      	b.n	8002112 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80020e8:	f7ff fc9a 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 80020ec:	61f8      	str	r0, [r7, #28]
        break;
 80020ee:	e010      	b.n	8002112 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80020f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002228 <UART_SetConfig+0x56c>)
 80020f2:	61fb      	str	r3, [r7, #28]
        break;
 80020f4:	e00d      	b.n	8002112 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020f6:	f7ff fbe5 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 80020fa:	61f8      	str	r0, [r7, #28]
        break;
 80020fc:	e009      	b.n	8002112 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002102:	61fb      	str	r3, [r7, #28]
        break;
 8002104:	e005      	b.n	8002112 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002110:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d077      	beq.n	8002208 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005a      	lsls	r2, r3, #1
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	085b      	lsrs	r3, r3, #1
 8002122:	441a      	add	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b0f      	cmp	r3, #15
 8002132:	d916      	bls.n	8002162 <UART_SetConfig+0x4a6>
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800213a:	d212      	bcs.n	8002162 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	b29b      	uxth	r3, r3
 8002140:	f023 030f 	bic.w	r3, r3, #15
 8002144:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	085b      	lsrs	r3, r3, #1
 800214a:	b29b      	uxth	r3, r3
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	b29a      	uxth	r2, r3
 8002152:	8afb      	ldrh	r3, [r7, #22]
 8002154:	4313      	orrs	r3, r2
 8002156:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	8afa      	ldrh	r2, [r7, #22]
 800215e:	60da      	str	r2, [r3, #12]
 8002160:	e052      	b.n	8002208 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002168:	e04e      	b.n	8002208 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800216a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800216e:	2b08      	cmp	r3, #8
 8002170:	d827      	bhi.n	80021c2 <UART_SetConfig+0x506>
 8002172:	a201      	add	r2, pc, #4	@ (adr r2, 8002178 <UART_SetConfig+0x4bc>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	0800219d 	.word	0x0800219d
 800217c:	080021a5 	.word	0x080021a5
 8002180:	080021ad 	.word	0x080021ad
 8002184:	080021c3 	.word	0x080021c3
 8002188:	080021b3 	.word	0x080021b3
 800218c:	080021c3 	.word	0x080021c3
 8002190:	080021c3 	.word	0x080021c3
 8002194:	080021c3 	.word	0x080021c3
 8002198:	080021bb 	.word	0x080021bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800219c:	f7ff fc2a 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 80021a0:	61f8      	str	r0, [r7, #28]
        break;
 80021a2:	e014      	b.n	80021ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80021a4:	f7ff fc3c 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 80021a8:	61f8      	str	r0, [r7, #28]
        break;
 80021aa:	e010      	b.n	80021ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002228 <UART_SetConfig+0x56c>)
 80021ae:	61fb      	str	r3, [r7, #28]
        break;
 80021b0:	e00d      	b.n	80021ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021b2:	f7ff fb87 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 80021b6:	61f8      	str	r0, [r7, #28]
        break;
 80021b8:	e009      	b.n	80021ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021be:	61fb      	str	r3, [r7, #28]
        break;
 80021c0:	e005      	b.n	80021ce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80021cc:	bf00      	nop
    }

    if (pclk != 0U)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d019      	beq.n	8002208 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	085a      	lsrs	r2, r3, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	441a      	add	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b0f      	cmp	r3, #15
 80021ec:	d909      	bls.n	8002202 <UART_SetConfig+0x546>
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f4:	d205      	bcs.n	8002202 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	e002      	b.n	8002208 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002214:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002218:	4618      	mov	r0, r3
 800221a:	3728      	adds	r7, #40	@ 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002222:	bf00      	nop
 8002224:	40008000 	.word	0x40008000
 8002228:	00f42400 	.word	0x00f42400

0800222c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01a      	beq.n	8002342 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800232a:	d10a      	bne.n	8002342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	605a      	str	r2, [r3, #4]
  }
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b098      	sub	sp, #96	@ 0x60
 8002374:	af02      	add	r7, sp, #8
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002380:	f7fe fad6 	bl	8000930 <HAL_GetTick>
 8002384:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b08      	cmp	r3, #8
 8002392:	d12e      	bne.n	80023f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002394:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800239c:	2200      	movs	r2, #0
 800239e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f88c 	bl	80024c0 <UART_WaitOnFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d021      	beq.n	80023f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b6:	e853 3f00 	ldrex	r3, [r3]
 80023ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80023bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80023ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023d4:	e841 2300 	strex	r3, r2, [r1]
 80023d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80023da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e6      	bne.n	80023ae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e062      	b.n	80024b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d149      	bne.n	8002494 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002400:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002408:	2200      	movs	r2, #0
 800240a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f856 	bl	80024c0 <UART_WaitOnFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d03c      	beq.n	8002494 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002422:	e853 3f00 	ldrex	r3, [r3]
 8002426:	623b      	str	r3, [r7, #32]
   return(result);
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800242e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002438:	633b      	str	r3, [r7, #48]	@ 0x30
 800243a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800243c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800243e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002440:	e841 2300 	strex	r3, r2, [r1]
 8002444:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1e6      	bne.n	800241a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3308      	adds	r3, #8
 8002452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	e853 3f00 	ldrex	r3, [r3]
 800245a:	60fb      	str	r3, [r7, #12]
   return(result);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3308      	adds	r3, #8
 800246a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800246c:	61fa      	str	r2, [r7, #28]
 800246e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002470:	69b9      	ldr	r1, [r7, #24]
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	e841 2300 	strex	r3, r2, [r1]
 8002478:	617b      	str	r3, [r7, #20]
   return(result);
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e5      	bne.n	800244c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e011      	b.n	80024b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2220      	movs	r2, #32
 800249e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3758      	adds	r7, #88	@ 0x58
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	4613      	mov	r3, r2
 80024ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024d0:	e04f      	b.n	8002572 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024d8:	d04b      	beq.n	8002572 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024da:	f7fe fa29 	bl	8000930 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d302      	bcc.n	80024f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e04e      	b.n	8002592 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d037      	beq.n	8002572 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b80      	cmp	r3, #128	@ 0x80
 8002506:	d034      	beq.n	8002572 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b40      	cmp	r3, #64	@ 0x40
 800250c:	d031      	beq.n	8002572 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b08      	cmp	r3, #8
 800251a:	d110      	bne.n	800253e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2208      	movs	r2, #8
 8002522:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 f838 	bl	800259a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2208      	movs	r2, #8
 800252e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e029      	b.n	8002592 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800254c:	d111      	bne.n	8002572 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002556:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f81e 	bl	800259a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e00f      	b.n	8002592 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4013      	ands	r3, r2
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	429a      	cmp	r2, r3
 8002580:	bf0c      	ite	eq
 8002582:	2301      	moveq	r3, #1
 8002584:	2300      	movne	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	429a      	cmp	r2, r3
 800258e:	d0a0      	beq.n	80024d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800259a:	b480      	push	{r7}
 800259c:	b095      	sub	sp, #84	@ 0x54
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025aa:	e853 3f00 	ldrex	r3, [r3]
 80025ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80025c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025c8:	e841 2300 	strex	r3, r2, [r1]
 80025cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80025ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1e6      	bne.n	80025a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3308      	adds	r3, #8
 80025da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	e853 3f00 	ldrex	r3, [r3]
 80025e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3308      	adds	r3, #8
 80025f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025fc:	e841 2300 	strex	r3, r2, [r1]
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e5      	bne.n	80025d4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260c:	2b01      	cmp	r3, #1
 800260e:	d118      	bne.n	8002642 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	e853 3f00 	ldrex	r3, [r3]
 800261c:	60bb      	str	r3, [r7, #8]
   return(result);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f023 0310 	bic.w	r3, r3, #16
 8002624:	647b      	str	r3, [r7, #68]	@ 0x44
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002632:	6979      	ldr	r1, [r7, #20]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	e841 2300 	strex	r3, r2, [r1]
 800263a:	613b      	str	r3, [r7, #16]
   return(result);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e6      	bne.n	8002610 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002656:	bf00      	nop
 8002658:	3754      	adds	r7, #84	@ 0x54
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <memset>:
 8002662:	4402      	add	r2, r0
 8002664:	4603      	mov	r3, r0
 8002666:	4293      	cmp	r3, r2
 8002668:	d100      	bne.n	800266c <memset+0xa>
 800266a:	4770      	bx	lr
 800266c:	f803 1b01 	strb.w	r1, [r3], #1
 8002670:	e7f9      	b.n	8002666 <memset+0x4>
	...

08002674 <__libc_init_array>:
 8002674:	b570      	push	{r4, r5, r6, lr}
 8002676:	4d0d      	ldr	r5, [pc, #52]	@ (80026ac <__libc_init_array+0x38>)
 8002678:	4c0d      	ldr	r4, [pc, #52]	@ (80026b0 <__libc_init_array+0x3c>)
 800267a:	1b64      	subs	r4, r4, r5
 800267c:	10a4      	asrs	r4, r4, #2
 800267e:	2600      	movs	r6, #0
 8002680:	42a6      	cmp	r6, r4
 8002682:	d109      	bne.n	8002698 <__libc_init_array+0x24>
 8002684:	4d0b      	ldr	r5, [pc, #44]	@ (80026b4 <__libc_init_array+0x40>)
 8002686:	4c0c      	ldr	r4, [pc, #48]	@ (80026b8 <__libc_init_array+0x44>)
 8002688:	f000 f818 	bl	80026bc <_init>
 800268c:	1b64      	subs	r4, r4, r5
 800268e:	10a4      	asrs	r4, r4, #2
 8002690:	2600      	movs	r6, #0
 8002692:	42a6      	cmp	r6, r4
 8002694:	d105      	bne.n	80026a2 <__libc_init_array+0x2e>
 8002696:	bd70      	pop	{r4, r5, r6, pc}
 8002698:	f855 3b04 	ldr.w	r3, [r5], #4
 800269c:	4798      	blx	r3
 800269e:	3601      	adds	r6, #1
 80026a0:	e7ee      	b.n	8002680 <__libc_init_array+0xc>
 80026a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a6:	4798      	blx	r3
 80026a8:	3601      	adds	r6, #1
 80026aa:	e7f2      	b.n	8002692 <__libc_init_array+0x1e>
 80026ac:	08002744 	.word	0x08002744
 80026b0:	08002744 	.word	0x08002744
 80026b4:	08002744 	.word	0x08002744
 80026b8:	08002748 	.word	0x08002748

080026bc <_init>:
 80026bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026be:	bf00      	nop
 80026c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c2:	bc08      	pop	{r3}
 80026c4:	469e      	mov	lr, r3
 80026c6:	4770      	bx	lr

080026c8 <_fini>:
 80026c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ca:	bf00      	nop
 80026cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ce:	bc08      	pop	{r3}
 80026d0:	469e      	mov	lr, r3
 80026d2:	4770      	bx	lr
