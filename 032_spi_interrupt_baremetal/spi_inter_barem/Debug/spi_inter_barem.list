
spi_inter_barem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000530  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080006b8  080006b8  000016b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006d8  080006d8  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080006d8  080006d8  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080006d8  080006d8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006d8  080006d8  000016d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006dc  080006dc  000016dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080006e0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080006e4  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080006e4  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002020  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000602  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  00004658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a5  00000000  00000000  000048a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c95a  00000000  00000000  00004a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020e8  00000000  00000000  000213a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1b3c  00000000  00000000  0002348f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104fcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007b0  00000000  00000000  00105010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001057c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080006a0 	.word	0x080006a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080006a0 	.word	0x080006a0

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	@ (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	@ (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <main>:
void SPI1_Init(void);
void SPI1_SendData(uint8_t *data, uint16_t size);

/* --- MAIN FUNCTION --- */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
    SystemClock_Config();
 800025c:	f000 f80a 	bl	8000274 <SystemClock_Config>
    UART2_Init();
 8000260:	f000 f832 	bl	80002c8 <UART2_Init>
    SPI1_Init();
 8000264:	f000 f894 	bl	8000390 <SPI1_Init>
    GPIO_Button_Init();
 8000268:	f000 f904 	bl	8000474 <GPIO_Button_Init>
    EXTI15_10_Init();
 800026c:	f000 f91a 	bl	80004a4 <EXTI15_10_Init>

    while (1)
    {
        __WFI(); // Sleep until button interrupt
 8000270:	bf30      	wfi
 8000272:	e7fd      	b.n	8000270 <main+0x18>

08000274 <SystemClock_Config>:
    }
}

/* --- System Clock: 16 MHz HSI --- */
void SystemClock_Config(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION;                 // Enable HSI
 8000278:	4b12      	ldr	r3, [pc, #72]	@ (80002c4 <SystemClock_Config+0x50>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a11      	ldr	r2, [pc, #68]	@ (80002c4 <SystemClock_Config+0x50>)
 800027e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000282:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));      // Wait for HSI ready
 8000284:	bf00      	nop
 8000286:	4b0f      	ldr	r3, [pc, #60]	@ (80002c4 <SystemClock_Config+0x50>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800028e:	2b00      	cmp	r3, #0
 8000290:	d0f9      	beq.n	8000286 <SystemClock_Config+0x12>
    RCC->CFGR &= ~RCC_CFGR_SW;               // Select HSI as system clock
 8000292:	4b0c      	ldr	r3, [pc, #48]	@ (80002c4 <SystemClock_Config+0x50>)
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	4a0b      	ldr	r2, [pc, #44]	@ (80002c4 <SystemClock_Config+0x50>)
 8000298:	f023 0303 	bic.w	r3, r3, #3
 800029c:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_HSI;
 800029e:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <SystemClock_Config+0x50>)
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	4a08      	ldr	r2, [pc, #32]	@ (80002c4 <SystemClock_Config+0x50>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 80002aa:	bf00      	nop
 80002ac:	4b05      	ldr	r3, [pc, #20]	@ (80002c4 <SystemClock_Config+0x50>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	f003 030c 	and.w	r3, r3, #12
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	d1f9      	bne.n	80002ac <SystemClock_Config+0x38>
}
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	40021000 	.word	0x40021000

080002c8 <UART2_Init>:

/* --- UART2 Init (PA2=TX, PA3=RX) --- */
void UART2_Init(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;     // Enable GPIOA
 80002cc:	4b1b      	ldr	r3, [pc, #108]	@ (800033c <UART2_Init+0x74>)
 80002ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d0:	4a1a      	ldr	r2, [pc, #104]	@ (800033c <UART2_Init+0x74>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART2
 80002d8:	4b18      	ldr	r3, [pc, #96]	@ (800033c <UART2_Init+0x74>)
 80002da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002dc:	4a17      	ldr	r2, [pc, #92]	@ (800033c <UART2_Init+0x74>)
 80002de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002e2:	6593      	str	r3, [r2, #88]	@ 0x58

    // Alternate function for PA2, PA3
    GPIOA->MODER &= ~((3 << (2*2)) | (3 << (3*2)));
 80002e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002f2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2 << (2*2)) | (2 << (3*2));
 80002f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002fe:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000302:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0]  &= ~((0xF << (4*2)) | (0xF << (4*3)));
 8000304:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000308:	6a1b      	ldr	r3, [r3, #32]
 800030a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800030e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000312:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0]  |=  (7 << (4*2)) | (7 << (4*3));
 8000314:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000318:	6a1b      	ldr	r3, [r3, #32]
 800031a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800031e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000322:	6213      	str	r3, [r2, #32]

    USART2->BRR = 16000000 / 115200;         // Baud rate
 8000324:	4b06      	ldr	r3, [pc, #24]	@ (8000340 <UART2_Init+0x78>)
 8000326:	228a      	movs	r2, #138	@ 0x8a
 8000328:	60da      	str	r2, [r3, #12]
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE; // Enable TX, USART
 800032a:	4b05      	ldr	r3, [pc, #20]	@ (8000340 <UART2_Init+0x78>)
 800032c:	2209      	movs	r2, #9
 800032e:	601a      	str	r2, [r3, #0]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000
 8000340:	40004400 	.word	0x40004400

08000344 <UART2_SendString>:

/* --- UART Send String --- */
void UART2_SendString(char *str)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
    while (*str)
 800034c:	e00c      	b.n	8000368 <UART2_SendString+0x24>
    {
        while (!(USART2->ISR & USART_ISR_TXE));
 800034e:	bf00      	nop
 8000350:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <UART2_SendString+0x48>)
 8000352:	69db      	ldr	r3, [r3, #28]
 8000354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000358:	2b00      	cmp	r3, #0
 800035a:	d0f9      	beq.n	8000350 <UART2_SendString+0xc>
        USART2->TDR = *str++;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	1c5a      	adds	r2, r3, #1
 8000360:	607a      	str	r2, [r7, #4]
 8000362:	781a      	ldrb	r2, [r3, #0]
 8000364:	4b09      	ldr	r3, [pc, #36]	@ (800038c <UART2_SendString+0x48>)
 8000366:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (*str)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d1ee      	bne.n	800034e <UART2_SendString+0xa>
    }
    while (!(USART2->ISR & USART_ISR_TC));
 8000370:	bf00      	nop
 8000372:	4b06      	ldr	r3, [pc, #24]	@ (800038c <UART2_SendString+0x48>)
 8000374:	69db      	ldr	r3, [r3, #28]
 8000376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f9      	beq.n	8000372 <UART2_SendString+0x2e>
}
 800037e:	bf00      	nop
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	40004400 	.word	0x40004400

08000390 <SPI1_Init>:

/* --- SPI1 Init (PA5=SCK, PA6=MISO, PA7=MOSI, PA4=NSS) --- */
void SPI1_Init(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000394:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <SPI1_Init+0x7c>)
 8000396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000398:	4a1c      	ldr	r2, [pc, #112]	@ (800040c <SPI1_Init+0x7c>)
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80003a0:	4b1a      	ldr	r3, [pc, #104]	@ (800040c <SPI1_Init+0x7c>)
 80003a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003a4:	4a19      	ldr	r2, [pc, #100]	@ (800040c <SPI1_Init+0x7c>)
 80003a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003aa:	6613      	str	r3, [r2, #96]	@ 0x60

    // Alternate Function Mode
    GPIOA->MODER &= ~((3<<(4*2)) | (3<<(5*2)) | (3<<(6*2)) | (3<<(7*2)));
 80003ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80003ba:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2<<(4*2)) | (2<<(5*2)) | (2<<(6*2)) | (2<<(7*2));
 80003bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003c6:	f443 432a 	orr.w	r3, r3, #43520	@ 0xaa00
 80003ca:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xF<<(4*4)) | (0xF<<(4*5)) | (0xF<<(4*6)) | (0xF<<(4*7)));
 80003cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003d0:	6a1b      	ldr	r3, [r3, #32]
 80003d2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003d6:	b29b      	uxth	r3, r3
 80003d8:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (5<<(4*4)) | (5<<(4*5)) | (5<<(4*6)) | (5<<(4*7));
 80003da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003de:	6a1b      	ldr	r3, [r3, #32]
 80003e0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003e4:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80003e8:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 80003ec:	6213      	str	r3, [r2, #32]

    // SPI1 Config: Master, SSM, SSI, fPCLK/8
    SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_BR_1;
 80003ee:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <SPI1_Init+0x80>)
 80003f0:	f44f 7245 	mov.w	r2, #788	@ 0x314
 80003f4:	601a      	str	r2, [r3, #0]
    SPI1->CR1 |= SPI_CR1_SPE;
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <SPI1_Init+0x80>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a05      	ldr	r2, [pc, #20]	@ (8000410 <SPI1_Init+0x80>)
 80003fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000400:	6013      	str	r3, [r2, #0]
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000
 8000410:	40013000 	.word	0x40013000

08000414 <SPI1_SendData>:

/* --- SPI1 Send Data --- */
void SPI1_SendData(uint8_t *data, uint16_t size)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	460b      	mov	r3, r1
 800041e:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < size; i++)
 8000420:	2300      	movs	r3, #0
 8000422:	81fb      	strh	r3, [r7, #14]
 8000424:	e00f      	b.n	8000446 <SPI1_SendData+0x32>
    {
        while (!(SPI1->SR & SPI_SR_TXE));
 8000426:	bf00      	nop
 8000428:	4b10      	ldr	r3, [pc, #64]	@ (800046c <SPI1_SendData+0x58>)
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	f003 0302 	and.w	r3, r3, #2
 8000430:	2b00      	cmp	r3, #0
 8000432:	d0f9      	beq.n	8000428 <SPI1_SendData+0x14>
        *((__IO uint8_t *)&SPI1->DR) = data[i];
 8000434:	89fb      	ldrh	r3, [r7, #14]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	4413      	add	r3, r2
 800043a:	4a0d      	ldr	r2, [pc, #52]	@ (8000470 <SPI1_SendData+0x5c>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	7013      	strb	r3, [r2, #0]
    for (uint16_t i = 0; i < size; i++)
 8000440:	89fb      	ldrh	r3, [r7, #14]
 8000442:	3301      	adds	r3, #1
 8000444:	81fb      	strh	r3, [r7, #14]
 8000446:	89fa      	ldrh	r2, [r7, #14]
 8000448:	887b      	ldrh	r3, [r7, #2]
 800044a:	429a      	cmp	r2, r3
 800044c:	d3eb      	bcc.n	8000426 <SPI1_SendData+0x12>
    }
    while (SPI1->SR & SPI_SR_BSY);
 800044e:	bf00      	nop
 8000450:	4b06      	ldr	r3, [pc, #24]	@ (800046c <SPI1_SendData+0x58>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000458:	2b00      	cmp	r3, #0
 800045a:	d1f9      	bne.n	8000450 <SPI1_SendData+0x3c>
}
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40013000 	.word	0x40013000
 8000470:	4001300c 	.word	0x4001300c

08000474 <GPIO_Button_Init>:

/* --- Button GPIO Init (PC13) --- */
void GPIO_Button_Init(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <GPIO_Button_Init+0x28>)
 800047a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047c:	4a07      	ldr	r2, [pc, #28]	@ (800049c <GPIO_Button_Init+0x28>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOC->MODER &= ~(3 << (13 * 2));  // Input
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <GPIO_Button_Init+0x2c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a05      	ldr	r2, [pc, #20]	@ (80004a0 <GPIO_Button_Init+0x2c>)
 800048a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800048e:	6013      	str	r3, [r2, #0]
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000
 80004a0:	48000800 	.word	0x48000800

080004a4 <EXTI15_10_Init>:

/* --- External Interrupt Init for PC13 --- */
void EXTI15_10_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80004a8:	4b13      	ldr	r3, [pc, #76]	@ (80004f8 <EXTI15_10_Init+0x54>)
 80004aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ac:	4a12      	ldr	r2, [pc, #72]	@ (80004f8 <EXTI15_10_Init+0x54>)
 80004ae:	f043 0301 	orr.w	r3, r3, #1
 80004b2:	6613      	str	r3, [r2, #96]	@ 0x60
    SYSCFG->EXTICR[3] &= ~(0xF << 4);
 80004b4:	4b11      	ldr	r3, [pc, #68]	@ (80004fc <EXTI15_10_Init+0x58>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	4a10      	ldr	r2, [pc, #64]	@ (80004fc <EXTI15_10_Init+0x58>)
 80004ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80004be:	6153      	str	r3, [r2, #20]
    SYSCFG->EXTICR[3] |=  (0x2 << 4); // Map PC13 to EXTI13
 80004c0:	4b0e      	ldr	r3, [pc, #56]	@ (80004fc <EXTI15_10_Init+0x58>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	4a0d      	ldr	r2, [pc, #52]	@ (80004fc <EXTI15_10_Init+0x58>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6153      	str	r3, [r2, #20]

    EXTI->IMR1  |= (1 << 13);  // Unmask EXTI13
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <EXTI15_10_Init+0x5c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000500 <EXTI15_10_Init+0x5c>)
 80004d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004d6:	6013      	str	r3, [r2, #0]
    EXTI->FTSR1 |= (1 << 13);  // Falling edge trigger
 80004d8:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <EXTI15_10_Init+0x5c>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	4a08      	ldr	r2, [pc, #32]	@ (8000500 <EXTI15_10_Init+0x5c>)
 80004de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004e2:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004e4:	2028      	movs	r0, #40	@ 0x28
 80004e6:	f7ff fe6f 	bl	80001c8 <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI15_10_IRQn, 1);
 80004ea:	2101      	movs	r1, #1
 80004ec:	2028      	movs	r0, #40	@ 0x28
 80004ee:	f7ff fe89 	bl	8000204 <__NVIC_SetPriority>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010000 	.word	0x40010000
 8000500:	40010400 	.word	0x40010400

08000504 <EXTI15_10_IRQHandler>:

/* --- Interrupt Handler for PC13 Button --- */
void EXTI15_10_IRQHandler(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
    if (EXTI->PR1 & (1 << 13))
 800050a:	4b10      	ldr	r3, [pc, #64]	@ (800054c <EXTI15_10_IRQHandler+0x48>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000512:	2b00      	cmp	r3, #0
 8000514:	d015      	beq.n	8000542 <EXTI15_10_IRQHandler+0x3e>
    {
        EXTI->PR1 = (1 << 13); // Clear pending flag
 8000516:	4b0d      	ldr	r3, [pc, #52]	@ (800054c <EXTI15_10_IRQHandler+0x48>)
 8000518:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800051c:	615a      	str	r2, [r3, #20]

        UART2_SendString("Hi\r\n");
 800051e:	480c      	ldr	r0, [pc, #48]	@ (8000550 <EXTI15_10_IRQHandler+0x4c>)
 8000520:	f7ff ff10 	bl	8000344 <UART2_SendString>

        uint8_t msg[] = "Data Transfer Done\r\n";
 8000524:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <EXTI15_10_IRQHandler+0x50>)
 8000526:	463c      	mov	r4, r7
 8000528:	461d      	mov	r5, r3
 800052a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000532:	6020      	str	r0, [r4, #0]
 8000534:	3404      	adds	r4, #4
 8000536:	7021      	strb	r1, [r4, #0]
        SPI1_SendData(msg, sizeof(msg) - 1);
 8000538:	463b      	mov	r3, r7
 800053a:	2114      	movs	r1, #20
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ff69 	bl	8000414 <SPI1_SendData>
    }
}
 8000542:	bf00      	nop
 8000544:	3718      	adds	r7, #24
 8000546:	46bd      	mov	sp, r7
 8000548:	bdb0      	pop	{r4, r5, r7, pc}
 800054a:	bf00      	nop
 800054c:	40010400 	.word	0x40010400
 8000550:	080006b8 	.word	0x080006b8
 8000554:	080006c0 	.word	0x080006c0

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <NMI_Handler+0x4>

08000560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <HardFault_Handler+0x4>

08000568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <MemManage_Handler+0x4>

08000570 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <BusFault_Handler+0x4>

08000578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <UsageFault_Handler+0x4>

08000580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ae:	f000 f83f 	bl	8000630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <SystemInit+0x20>)
 80005be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005c2:	4a05      	ldr	r2, [pc, #20]	@ (80005d8 <SystemInit+0x20>)
 80005c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000614 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e0:	f7ff ffea 	bl	80005b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e4:	480c      	ldr	r0, [pc, #48]	@ (8000618 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e6:	490d      	ldr	r1, [pc, #52]	@ (800061c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000620 <LoopForever+0xe>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000628 <LoopForever+0x16>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800060a:	f000 f825 	bl	8000658 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800060e:	f7ff fe23 	bl	8000258 <main>

08000612 <LoopForever>:

LoopForever:
    b LoopForever
 8000612:	e7fe      	b.n	8000612 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000614:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000620:	080006e0 	.word	0x080006e0
  ldr r2, =_sbss
 8000624:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000628:	20000024 	.word	0x20000024

0800062c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC1_2_IRQHandler>
	...

08000630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <HAL_IncTick+0x20>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <HAL_IncTick+0x24>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4413      	add	r3, r2
 8000640:	4a04      	ldr	r2, [pc, #16]	@ (8000654 <HAL_IncTick+0x24>)
 8000642:	6013      	str	r3, [r2, #0]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000000 	.word	0x20000000
 8000654:	20000020 	.word	0x20000020

08000658 <__libc_init_array>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	4d0d      	ldr	r5, [pc, #52]	@ (8000690 <__libc_init_array+0x38>)
 800065c:	4c0d      	ldr	r4, [pc, #52]	@ (8000694 <__libc_init_array+0x3c>)
 800065e:	1b64      	subs	r4, r4, r5
 8000660:	10a4      	asrs	r4, r4, #2
 8000662:	2600      	movs	r6, #0
 8000664:	42a6      	cmp	r6, r4
 8000666:	d109      	bne.n	800067c <__libc_init_array+0x24>
 8000668:	4d0b      	ldr	r5, [pc, #44]	@ (8000698 <__libc_init_array+0x40>)
 800066a:	4c0c      	ldr	r4, [pc, #48]	@ (800069c <__libc_init_array+0x44>)
 800066c:	f000 f818 	bl	80006a0 <_init>
 8000670:	1b64      	subs	r4, r4, r5
 8000672:	10a4      	asrs	r4, r4, #2
 8000674:	2600      	movs	r6, #0
 8000676:	42a6      	cmp	r6, r4
 8000678:	d105      	bne.n	8000686 <__libc_init_array+0x2e>
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000680:	4798      	blx	r3
 8000682:	3601      	adds	r6, #1
 8000684:	e7ee      	b.n	8000664 <__libc_init_array+0xc>
 8000686:	f855 3b04 	ldr.w	r3, [r5], #4
 800068a:	4798      	blx	r3
 800068c:	3601      	adds	r6, #1
 800068e:	e7f2      	b.n	8000676 <__libc_init_array+0x1e>
 8000690:	080006d8 	.word	0x080006d8
 8000694:	080006d8 	.word	0x080006d8
 8000698:	080006d8 	.word	0x080006d8
 800069c:	080006dc 	.word	0x080006dc

080006a0 <_init>:
 80006a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a2:	bf00      	nop
 80006a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006a6:	bc08      	pop	{r3}
 80006a8:	469e      	mov	lr, r3
 80006aa:	4770      	bx	lr

080006ac <_fini>:
 80006ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ae:	bf00      	nop
 80006b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006b2:	bc08      	pop	{r3}
 80006b4:	469e      	mov	lr, r3
 80006b6:	4770      	bx	lr
