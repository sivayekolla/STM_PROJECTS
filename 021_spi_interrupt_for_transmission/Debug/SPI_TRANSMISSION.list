
SPI_TRANSMISSION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000147c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800160c  0800160c  0000260c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001668  08001668  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001668  08001668  00002668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001670  08001670  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001670  08001670  00002670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001674  08001674  00002674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001678  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  080016d8  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080016d8  000031d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002424  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009d8  00000000  00000000  000054b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000310  00000000  00000000  00005e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000226  00000000  00000000  000061a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e7fd  00000000  00000000  000063c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000331f  00000000  00000000  00024bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e78a6  00000000  00000000  00027ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f788  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001208  00000000  00000000  0010f7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001109d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080015f4 	.word	0x080015f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080015f4 	.word	0x080015f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <SPI_Init>:
#include "stm32l476xx_spi.h"


void SPI_Init(SPI_RegDef_t *pSPIx, uint32_t mode, uint32_t buscfg,
              uint32_t baud, uint32_t ssm_enable)
{
 8000270:	b480      	push	{r7}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
 800027c:	603b      	str	r3, [r7, #0]
	RCC->APB2ENR |= (1<<12);
 800027e:	4b17      	ldr	r3, [pc, #92]	@ (80002dc <SPI_Init+0x6c>)
 8000280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000282:	4a16      	ldr	r2, [pc, #88]	@ (80002dc <SPI_Init+0x6c>)
 8000284:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000288:	6613      	str	r3, [r2, #96]	@ 0x60
    uint32_t temp = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]

    temp |= mode;
 800028e:	697a      	ldr	r2, [r7, #20]
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	4313      	orrs	r3, r2
 8000294:	617b      	str	r3, [r7, #20]
    temp |= buscfg;
 8000296:	697a      	ldr	r2, [r7, #20]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4313      	orrs	r3, r2
 800029c:	617b      	str	r3, [r7, #20]
    temp |= baud;
 800029e:	697a      	ldr	r2, [r7, #20]
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	4313      	orrs	r3, r2
 80002a4:	617b      	str	r3, [r7, #20]
    temp |= ssm_enable;
 80002a6:	697a      	ldr	r2, [r7, #20]
 80002a8:	6a3b      	ldr	r3, [r7, #32]
 80002aa:	4313      	orrs	r3, r2
 80002ac:	617b      	str	r3, [r7, #20]

    if (ssm_enable == SPI_SSM_ENABLE)
 80002ae:	6a3b      	ldr	r3, [r7, #32]
 80002b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80002b4:	d103      	bne.n	80002be <SPI_Init+0x4e>
        temp |= SPI_SSI_SET;
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002bc:	617b      	str	r3, [r7, #20]

    pSPIx->CR1 = temp;
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	697a      	ldr	r2, [r7, #20]
 80002c2:	601a      	str	r2, [r3, #0]

    pSPIx->CR1 |= (1U << SPI_CR1_SPE_Pos);
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	601a      	str	r2, [r3, #0]
}
 80002d0:	bf00      	nop
 80002d2:	371c      	adds	r7, #28
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40021000 	.word	0x40021000

080002e0 <SPI1_GPIO_Config>:

void SPI1_GPIO_Config(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0

    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80002e4:	4b21      	ldr	r3, [pc, #132]	@ (800036c <SPI1_GPIO_Config+0x8c>)
 80002e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002e8:	4a20      	ldr	r2, [pc, #128]	@ (800036c <SPI1_GPIO_Config+0x8c>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	64d3      	str	r3, [r2, #76]	@ 0x4c

    GPIOA->MODER &= ~((3U << (4 * 2)) | (3U << (5 * 2)) | (3U << (6 * 2)) | (3U << (7 * 2)));
 80002f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80002fe:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((2U << (4 * 2)) | (2U << (5 * 2)) | (2U << (6 * 2)) | (2U << (7 * 2)));
 8000300:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800030a:	f443 432a 	orr.w	r3, r3, #43520	@ 0xaa00
 800030e:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[0] &= ~((0xFU << (4 * 4)) | (0xFU << (5 * 4)) | (0xFU << (6 * 4)) | (0xFU << (7 * 4)));
 8000310:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000314:	6a1b      	ldr	r3, [r3, #32]
 8000316:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800031a:	b29b      	uxth	r3, r3
 800031c:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  ((5U << (4 * 4)) | (5U << (5 * 4)) | (5U << (6 * 4)) | (5U << (7 * 4)));
 800031e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000328:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 800032c:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 8000330:	6213      	str	r3, [r2, #32]

    GPIOA->OSPEEDR |=  ((3U << (4 * 2)) | (3U << (5 * 2)) | (3U << (6 * 2)) | (3U << (7 * 2)));
 8000332:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800033c:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 8000340:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~((1U << 4) | (1U << 5) | (1U << 6) | (1U << 7));
 8000342:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800034c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000350:	6053      	str	r3, [r2, #4]
    GPIOA->PUPDR   &= ~((3U << (4 * 2)) | (3U << (5 * 2)) | (3U << (6 * 2)) | (3U << (7 * 2)));
 8000352:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000356:	68db      	ldr	r3, [r3, #12]
 8000358:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800035c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000360:	60d3      	str	r3, [r2, #12]
}
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	40021000 	.word	0x40021000

08000370 <SPI_TransmitReceive>:
        pSPIx->CR1 |= (1U << SPI_CR1_SPE_Pos);
    else
        pSPIx->CR1 &= ~(1U << SPI_CR1_SPE_Pos);
}
void SPI_TransmitReceive(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint8_t *pRxBuffer, uint32_t len)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]
 800037c:	603b      	str	r3, [r7, #0]
    while (len > 0)
 800037e:	e020      	b.n	80003c2 <SPI_TransmitReceive+0x52>
    {
        while (!(pSPIx->SR & (1U << 1)));
 8000380:	bf00      	nop
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	f003 0302 	and.w	r3, r3, #2
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f9      	beq.n	8000382 <SPI_TransmitReceive+0x12>
        pSPIx->DR = *pTxBuffer;
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	461a      	mov	r2, r3
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	60da      	str	r2, [r3, #12]
        pTxBuffer++;
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	3301      	adds	r3, #1
 800039c:	60bb      	str	r3, [r7, #8]
        while (!(pSPIx->SR & (1U << 0)));
 800039e:	bf00      	nop
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	f003 0301 	and.w	r3, r3, #1
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d0f9      	beq.n	80003a0 <SPI_TransmitReceive+0x30>
        *pRxBuffer = pSPIx->DR;
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	701a      	strb	r2, [r3, #0]
        pRxBuffer++;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	3301      	adds	r3, #1
 80003ba:	607b      	str	r3, [r7, #4]
        len--;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	3b01      	subs	r3, #1
 80003c0:	603b      	str	r3, [r7, #0]
    while (len > 0)
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d1db      	bne.n	8000380 <SPI_TransmitReceive+0x10>
    }
    while (pSPIx->SR & (1U << 7));
 80003c8:	bf00      	nop
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d1f9      	bne.n	80003ca <SPI_TransmitReceive+0x5a>
}
 80003d6:	bf00      	nop
 80003d8:	bf00      	nop
 80003da:	3714      	adds	r7, #20
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80003ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80003f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80003f4:	f003 0301 	and.w	r3, r3, #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d013      	beq.n	8000424 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80003fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000400:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000404:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000408:	2b00      	cmp	r3, #0
 800040a:	d00b      	beq.n	8000424 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800040c:	e000      	b.n	8000410 <ITM_SendChar+0x2c>
    {
      __NOP();
 800040e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000410:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d0f9      	beq.n	800040e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800041a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	b2d2      	uxtb	r2, r2
 8000422:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000424:	687b      	ldr	r3, [r7, #4]
}
 8000426:	4618      	mov	r0, r3
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <_write>:
#include "stm32l476xx.h"
#include "stm32l476xx_spi.h"
#include <stdio.h>
#include <stdint.h>

int _write(int file, char *ptr, int len) {
 8000432:	b580      	push	{r7, lr}
 8000434:	b086      	sub	sp, #24
 8000436:	af00      	add	r7, sp, #0
 8000438:	60f8      	str	r0, [r7, #12]
 800043a:	60b9      	str	r1, [r7, #8]
 800043c:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
 8000442:	e009      	b.n	8000458 <_write+0x26>
        ITM_SendChar(*ptr++);
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	1c5a      	adds	r2, r3, #1
 8000448:	60ba      	str	r2, [r7, #8]
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ffc9 	bl	80003e4 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	3301      	adds	r3, #1
 8000456:	617b      	str	r3, [r7, #20]
 8000458:	697a      	ldr	r2, [r7, #20]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	429a      	cmp	r2, r3
 800045e:	dbf1      	blt.n	8000444 <_write+0x12>
    }
    return len;
 8000460:	687b      	ldr	r3, [r7, #4]
}
 8000462:	4618      	mov	r0, r3
 8000464:	3718      	adds	r7, #24
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <main>:


int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af02      	add	r7, sp, #8
    uint8_t tx[] = "HELLO";
 8000472:	4a14      	ldr	r2, [pc, #80]	@ (80004c4 <main+0x58>)
 8000474:	f107 0308 	add.w	r3, r7, #8
 8000478:	e892 0003 	ldmia.w	r2, {r0, r1}
 800047c:	6018      	str	r0, [r3, #0]
 800047e:	3304      	adds	r3, #4
 8000480:	8019      	strh	r1, [r3, #0]
    uint8_t rx[6]={0};
 8000482:	463b      	mov	r3, r7
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	809a      	strh	r2, [r3, #4]

    SPI1_GPIO_Config();
 800048a:	f7ff ff29 	bl	80002e0 <SPI1_GPIO_Config>

    SPI_Init(SPI_1, SPI_MODE_MASTER, SPI_FULL_DUPLEX, SPI_BAUD_DIV16, SPI_SSM_ENABLE);
 800048e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000492:	9300      	str	r3, [sp, #0]
 8000494:	2318      	movs	r3, #24
 8000496:	2200      	movs	r2, #0
 8000498:	2104      	movs	r1, #4
 800049a:	480b      	ldr	r0, [pc, #44]	@ (80004c8 <main+0x5c>)
 800049c:	f7ff fee8 	bl	8000270 <SPI_Init>

    printf("SPI1 Configured\n");
 80004a0:	480a      	ldr	r0, [pc, #40]	@ (80004cc <main+0x60>)
 80004a2:	f000 fa47 	bl	8000934 <puts>
    SPI_TransmitReceive(SPI_1, tx, rx, 5);
 80004a6:	463a      	mov	r2, r7
 80004a8:	f107 0108 	add.w	r1, r7, #8
 80004ac:	2305      	movs	r3, #5
 80004ae:	4806      	ldr	r0, [pc, #24]	@ (80004c8 <main+0x5c>)
 80004b0:	f7ff ff5e 	bl	8000370 <SPI_TransmitReceive>


   /* SPI_SendData(SPI_1, tx, 5);
    SPI_ReceiveData(SPI_1, rx, 5);*/

    printf("RECEIVED: %s\n", rx);
 80004b4:	463b      	mov	r3, r7
 80004b6:	4619      	mov	r1, r3
 80004b8:	4805      	ldr	r0, [pc, #20]	@ (80004d0 <main+0x64>)
 80004ba:	f000 f9d3 	bl	8000864 <iprintf>

    while (1);
 80004be:	bf00      	nop
 80004c0:	e7fd      	b.n	80004be <main+0x52>
 80004c2:	bf00      	nop
 80004c4:	0800162c 	.word	0x0800162c
 80004c8:	40013000 	.word	0x40013000
 80004cc:	0800160c 	.word	0x0800160c
 80004d0:	0800161c 	.word	0x0800161c

080004d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <NMI_Handler+0x4>

080004dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <HardFault_Handler+0x4>

080004e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <MemManage_Handler+0x4>

080004ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <BusFault_Handler+0x4>

080004f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <UsageFault_Handler+0x4>

080004fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052a:	f000 f8c5 	bl	80006b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}

08000532 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b086      	sub	sp, #24
 8000536:	af00      	add	r7, sp, #0
 8000538:	60f8      	str	r0, [r7, #12]
 800053a:	60b9      	str	r1, [r7, #8]
 800053c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
 8000542:	e00a      	b.n	800055a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000544:	f3af 8000 	nop.w
 8000548:	4601      	mov	r1, r0
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	60ba      	str	r2, [r7, #8]
 8000550:	b2ca      	uxtb	r2, r1
 8000552:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3301      	adds	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	697a      	ldr	r2, [r7, #20]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	429a      	cmp	r2, r3
 8000560:	dbf0      	blt.n	8000544 <_read+0x12>
  }

  return len;
 8000562:	687b      	ldr	r3, [r7, #4]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <_close>:
  }
  return len;
}

int _close(int file)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000574:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000594:	605a      	str	r2, [r3, #4]
  return 0;
 8000596:	2300      	movs	r3, #0
}
 8000598:	4618      	mov	r0, r3
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <_isatty>:

int _isatty(int file)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005ac:	2301      	movs	r3, #1
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b085      	sub	sp, #20
 80005be:	af00      	add	r7, sp, #0
 80005c0:	60f8      	str	r0, [r7, #12]
 80005c2:	60b9      	str	r1, [r7, #8]
 80005c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005c6:	2300      	movs	r3, #0
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005dc:	4a14      	ldr	r2, [pc, #80]	@ (8000630 <_sbrk+0x5c>)
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <_sbrk+0x60>)
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e8:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <_sbrk+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d102      	bne.n	80005f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <_sbrk+0x64>)
 80005f2:	4a12      	ldr	r2, [pc, #72]	@ (800063c <_sbrk+0x68>)
 80005f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005f6:	4b10      	ldr	r3, [pc, #64]	@ (8000638 <_sbrk+0x64>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	429a      	cmp	r2, r3
 8000602:	d207      	bcs.n	8000614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000604:	f000 f9a6 	bl	8000954 <__errno>
 8000608:	4603      	mov	r3, r0
 800060a:	220c      	movs	r2, #12
 800060c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800060e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000612:	e009      	b.n	8000628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000614:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <_sbrk+0x64>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800061a:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <_sbrk+0x64>)
 8000624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000626:	68fb      	ldr	r3, [r7, #12]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20018000 	.word	0x20018000
 8000634:	00000400 	.word	0x00000400
 8000638:	2000007c 	.word	0x2000007c
 800063c:	200001d0 	.word	0x200001d0

08000640 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <SystemInit+0x20>)
 8000646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800064a:	4a05      	ldr	r2, [pc, #20]	@ (8000660 <SystemInit+0x20>)
 800064c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800069c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000668:	f7ff ffea 	bl	8000640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800066e:	490d      	ldr	r1, [pc, #52]	@ (80006a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000670:	4a0d      	ldr	r2, [pc, #52]	@ (80006a8 <LoopForever+0xe>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0a      	ldr	r2, [pc, #40]	@ (80006ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000684:	4c0a      	ldr	r4, [pc, #40]	@ (80006b0 <LoopForever+0x16>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000692:	f000 f965 	bl	8000960 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000696:	f7ff fee9 	bl	800046c <main>

0800069a <LoopForever>:

LoopForever:
    b LoopForever
 800069a:	e7fe      	b.n	800069a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800069c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006a8:	08001678 	.word	0x08001678
  ldr r2, =_sbss
 80006ac:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006b0:	200001d0 	.word	0x200001d0

080006b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC1_2_IRQHandler>
	...

080006b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <HAL_IncTick+0x20>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <HAL_IncTick+0x24>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	4a04      	ldr	r2, [pc, #16]	@ (80006dc <HAL_IncTick+0x24>)
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000080 	.word	0x20000080

080006e0 <std>:
 80006e0:	2300      	movs	r3, #0
 80006e2:	b510      	push	{r4, lr}
 80006e4:	4604      	mov	r4, r0
 80006e6:	e9c0 3300 	strd	r3, r3, [r0]
 80006ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006ee:	6083      	str	r3, [r0, #8]
 80006f0:	8181      	strh	r1, [r0, #12]
 80006f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80006f4:	81c2      	strh	r2, [r0, #14]
 80006f6:	6183      	str	r3, [r0, #24]
 80006f8:	4619      	mov	r1, r3
 80006fa:	2208      	movs	r2, #8
 80006fc:	305c      	adds	r0, #92	@ 0x5c
 80006fe:	f000 f921 	bl	8000944 <memset>
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <std+0x58>)
 8000704:	6263      	str	r3, [r4, #36]	@ 0x24
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <std+0x5c>)
 8000708:	62a3      	str	r3, [r4, #40]	@ 0x28
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <std+0x60>)
 800070c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <std+0x64>)
 8000710:	6323      	str	r3, [r4, #48]	@ 0x30
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <std+0x68>)
 8000714:	6224      	str	r4, [r4, #32]
 8000716:	429c      	cmp	r4, r3
 8000718:	d006      	beq.n	8000728 <std+0x48>
 800071a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800071e:	4294      	cmp	r4, r2
 8000720:	d002      	beq.n	8000728 <std+0x48>
 8000722:	33d0      	adds	r3, #208	@ 0xd0
 8000724:	429c      	cmp	r4, r3
 8000726:	d105      	bne.n	8000734 <std+0x54>
 8000728:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800072c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000730:	f000 b93a 	b.w	80009a8 <__retarget_lock_init_recursive>
 8000734:	bd10      	pop	{r4, pc}
 8000736:	bf00      	nop
 8000738:	080011fd 	.word	0x080011fd
 800073c:	0800121f 	.word	0x0800121f
 8000740:	08001257 	.word	0x08001257
 8000744:	0800127b 	.word	0x0800127b
 8000748:	20000084 	.word	0x20000084

0800074c <stdio_exit_handler>:
 800074c:	4a02      	ldr	r2, [pc, #8]	@ (8000758 <stdio_exit_handler+0xc>)
 800074e:	4903      	ldr	r1, [pc, #12]	@ (800075c <stdio_exit_handler+0x10>)
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <stdio_exit_handler+0x14>)
 8000752:	f000 b869 	b.w	8000828 <_fwalk_sglue>
 8000756:	bf00      	nop
 8000758:	20000004 	.word	0x20000004
 800075c:	08001195 	.word	0x08001195
 8000760:	20000014 	.word	0x20000014

08000764 <cleanup_stdio>:
 8000764:	6841      	ldr	r1, [r0, #4]
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <cleanup_stdio+0x34>)
 8000768:	4299      	cmp	r1, r3
 800076a:	b510      	push	{r4, lr}
 800076c:	4604      	mov	r4, r0
 800076e:	d001      	beq.n	8000774 <cleanup_stdio+0x10>
 8000770:	f000 fd10 	bl	8001194 <_fflush_r>
 8000774:	68a1      	ldr	r1, [r4, #8]
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <cleanup_stdio+0x38>)
 8000778:	4299      	cmp	r1, r3
 800077a:	d002      	beq.n	8000782 <cleanup_stdio+0x1e>
 800077c:	4620      	mov	r0, r4
 800077e:	f000 fd09 	bl	8001194 <_fflush_r>
 8000782:	68e1      	ldr	r1, [r4, #12]
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <cleanup_stdio+0x3c>)
 8000786:	4299      	cmp	r1, r3
 8000788:	d004      	beq.n	8000794 <cleanup_stdio+0x30>
 800078a:	4620      	mov	r0, r4
 800078c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000790:	f000 bd00 	b.w	8001194 <_fflush_r>
 8000794:	bd10      	pop	{r4, pc}
 8000796:	bf00      	nop
 8000798:	20000084 	.word	0x20000084
 800079c:	200000ec 	.word	0x200000ec
 80007a0:	20000154 	.word	0x20000154

080007a4 <global_stdio_init.part.0>:
 80007a4:	b510      	push	{r4, lr}
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <global_stdio_init.part.0+0x30>)
 80007a8:	4c0b      	ldr	r4, [pc, #44]	@ (80007d8 <global_stdio_init.part.0+0x34>)
 80007aa:	4a0c      	ldr	r2, [pc, #48]	@ (80007dc <global_stdio_init.part.0+0x38>)
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	4620      	mov	r0, r4
 80007b0:	2200      	movs	r2, #0
 80007b2:	2104      	movs	r1, #4
 80007b4:	f7ff ff94 	bl	80006e0 <std>
 80007b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007bc:	2201      	movs	r2, #1
 80007be:	2109      	movs	r1, #9
 80007c0:	f7ff ff8e 	bl	80006e0 <std>
 80007c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007c8:	2202      	movs	r2, #2
 80007ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ce:	2112      	movs	r1, #18
 80007d0:	f7ff bf86 	b.w	80006e0 <std>
 80007d4:	200001bc 	.word	0x200001bc
 80007d8:	20000084 	.word	0x20000084
 80007dc:	0800074d 	.word	0x0800074d

080007e0 <__sfp_lock_acquire>:
 80007e0:	4801      	ldr	r0, [pc, #4]	@ (80007e8 <__sfp_lock_acquire+0x8>)
 80007e2:	f000 b8e2 	b.w	80009aa <__retarget_lock_acquire_recursive>
 80007e6:	bf00      	nop
 80007e8:	200001c1 	.word	0x200001c1

080007ec <__sfp_lock_release>:
 80007ec:	4801      	ldr	r0, [pc, #4]	@ (80007f4 <__sfp_lock_release+0x8>)
 80007ee:	f000 b8dd 	b.w	80009ac <__retarget_lock_release_recursive>
 80007f2:	bf00      	nop
 80007f4:	200001c1 	.word	0x200001c1

080007f8 <__sinit>:
 80007f8:	b510      	push	{r4, lr}
 80007fa:	4604      	mov	r4, r0
 80007fc:	f7ff fff0 	bl	80007e0 <__sfp_lock_acquire>
 8000800:	6a23      	ldr	r3, [r4, #32]
 8000802:	b11b      	cbz	r3, 800080c <__sinit+0x14>
 8000804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000808:	f7ff bff0 	b.w	80007ec <__sfp_lock_release>
 800080c:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <__sinit+0x28>)
 800080e:	6223      	str	r3, [r4, #32]
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <__sinit+0x2c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1f5      	bne.n	8000804 <__sinit+0xc>
 8000818:	f7ff ffc4 	bl	80007a4 <global_stdio_init.part.0>
 800081c:	e7f2      	b.n	8000804 <__sinit+0xc>
 800081e:	bf00      	nop
 8000820:	08000765 	.word	0x08000765
 8000824:	200001bc 	.word	0x200001bc

08000828 <_fwalk_sglue>:
 8000828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800082c:	4607      	mov	r7, r0
 800082e:	4688      	mov	r8, r1
 8000830:	4614      	mov	r4, r2
 8000832:	2600      	movs	r6, #0
 8000834:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000838:	f1b9 0901 	subs.w	r9, r9, #1
 800083c:	d505      	bpl.n	800084a <_fwalk_sglue+0x22>
 800083e:	6824      	ldr	r4, [r4, #0]
 8000840:	2c00      	cmp	r4, #0
 8000842:	d1f7      	bne.n	8000834 <_fwalk_sglue+0xc>
 8000844:	4630      	mov	r0, r6
 8000846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800084a:	89ab      	ldrh	r3, [r5, #12]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d907      	bls.n	8000860 <_fwalk_sglue+0x38>
 8000850:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000854:	3301      	adds	r3, #1
 8000856:	d003      	beq.n	8000860 <_fwalk_sglue+0x38>
 8000858:	4629      	mov	r1, r5
 800085a:	4638      	mov	r0, r7
 800085c:	47c0      	blx	r8
 800085e:	4306      	orrs	r6, r0
 8000860:	3568      	adds	r5, #104	@ 0x68
 8000862:	e7e9      	b.n	8000838 <_fwalk_sglue+0x10>

08000864 <iprintf>:
 8000864:	b40f      	push	{r0, r1, r2, r3}
 8000866:	b507      	push	{r0, r1, r2, lr}
 8000868:	4906      	ldr	r1, [pc, #24]	@ (8000884 <iprintf+0x20>)
 800086a:	ab04      	add	r3, sp, #16
 800086c:	6808      	ldr	r0, [r1, #0]
 800086e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000872:	6881      	ldr	r1, [r0, #8]
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	f000 f8c3 	bl	8000a00 <_vfiprintf_r>
 800087a:	b003      	add	sp, #12
 800087c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr
 8000884:	20000010 	.word	0x20000010

08000888 <_puts_r>:
 8000888:	6a03      	ldr	r3, [r0, #32]
 800088a:	b570      	push	{r4, r5, r6, lr}
 800088c:	6884      	ldr	r4, [r0, #8]
 800088e:	4605      	mov	r5, r0
 8000890:	460e      	mov	r6, r1
 8000892:	b90b      	cbnz	r3, 8000898 <_puts_r+0x10>
 8000894:	f7ff ffb0 	bl	80007f8 <__sinit>
 8000898:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800089a:	07db      	lsls	r3, r3, #31
 800089c:	d405      	bmi.n	80008aa <_puts_r+0x22>
 800089e:	89a3      	ldrh	r3, [r4, #12]
 80008a0:	0598      	lsls	r0, r3, #22
 80008a2:	d402      	bmi.n	80008aa <_puts_r+0x22>
 80008a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80008a6:	f000 f880 	bl	80009aa <__retarget_lock_acquire_recursive>
 80008aa:	89a3      	ldrh	r3, [r4, #12]
 80008ac:	0719      	lsls	r1, r3, #28
 80008ae:	d502      	bpl.n	80008b6 <_puts_r+0x2e>
 80008b0:	6923      	ldr	r3, [r4, #16]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d135      	bne.n	8000922 <_puts_r+0x9a>
 80008b6:	4621      	mov	r1, r4
 80008b8:	4628      	mov	r0, r5
 80008ba:	f000 fd21 	bl	8001300 <__swsetup_r>
 80008be:	b380      	cbz	r0, 8000922 <_puts_r+0x9a>
 80008c0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80008c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80008c6:	07da      	lsls	r2, r3, #31
 80008c8:	d405      	bmi.n	80008d6 <_puts_r+0x4e>
 80008ca:	89a3      	ldrh	r3, [r4, #12]
 80008cc:	059b      	lsls	r3, r3, #22
 80008ce:	d402      	bmi.n	80008d6 <_puts_r+0x4e>
 80008d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80008d2:	f000 f86b 	bl	80009ac <__retarget_lock_release_recursive>
 80008d6:	4628      	mov	r0, r5
 80008d8:	bd70      	pop	{r4, r5, r6, pc}
 80008da:	2b00      	cmp	r3, #0
 80008dc:	da04      	bge.n	80008e8 <_puts_r+0x60>
 80008de:	69a2      	ldr	r2, [r4, #24]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	dc17      	bgt.n	8000914 <_puts_r+0x8c>
 80008e4:	290a      	cmp	r1, #10
 80008e6:	d015      	beq.n	8000914 <_puts_r+0x8c>
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	6022      	str	r2, [r4, #0]
 80008ee:	7019      	strb	r1, [r3, #0]
 80008f0:	68a3      	ldr	r3, [r4, #8]
 80008f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80008f6:	3b01      	subs	r3, #1
 80008f8:	60a3      	str	r3, [r4, #8]
 80008fa:	2900      	cmp	r1, #0
 80008fc:	d1ed      	bne.n	80008da <_puts_r+0x52>
 80008fe:	2b00      	cmp	r3, #0
 8000900:	da11      	bge.n	8000926 <_puts_r+0x9e>
 8000902:	4622      	mov	r2, r4
 8000904:	210a      	movs	r1, #10
 8000906:	4628      	mov	r0, r5
 8000908:	f000 fcbb 	bl	8001282 <__swbuf_r>
 800090c:	3001      	adds	r0, #1
 800090e:	d0d7      	beq.n	80008c0 <_puts_r+0x38>
 8000910:	250a      	movs	r5, #10
 8000912:	e7d7      	b.n	80008c4 <_puts_r+0x3c>
 8000914:	4622      	mov	r2, r4
 8000916:	4628      	mov	r0, r5
 8000918:	f000 fcb3 	bl	8001282 <__swbuf_r>
 800091c:	3001      	adds	r0, #1
 800091e:	d1e7      	bne.n	80008f0 <_puts_r+0x68>
 8000920:	e7ce      	b.n	80008c0 <_puts_r+0x38>
 8000922:	3e01      	subs	r6, #1
 8000924:	e7e4      	b.n	80008f0 <_puts_r+0x68>
 8000926:	6823      	ldr	r3, [r4, #0]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	6022      	str	r2, [r4, #0]
 800092c:	220a      	movs	r2, #10
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e7ee      	b.n	8000910 <_puts_r+0x88>
	...

08000934 <puts>:
 8000934:	4b02      	ldr	r3, [pc, #8]	@ (8000940 <puts+0xc>)
 8000936:	4601      	mov	r1, r0
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	f7ff bfa5 	b.w	8000888 <_puts_r>
 800093e:	bf00      	nop
 8000940:	20000010 	.word	0x20000010

08000944 <memset>:
 8000944:	4402      	add	r2, r0
 8000946:	4603      	mov	r3, r0
 8000948:	4293      	cmp	r3, r2
 800094a:	d100      	bne.n	800094e <memset+0xa>
 800094c:	4770      	bx	lr
 800094e:	f803 1b01 	strb.w	r1, [r3], #1
 8000952:	e7f9      	b.n	8000948 <memset+0x4>

08000954 <__errno>:
 8000954:	4b01      	ldr	r3, [pc, #4]	@ (800095c <__errno+0x8>)
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000010 	.word	0x20000010

08000960 <__libc_init_array>:
 8000960:	b570      	push	{r4, r5, r6, lr}
 8000962:	4d0d      	ldr	r5, [pc, #52]	@ (8000998 <__libc_init_array+0x38>)
 8000964:	4c0d      	ldr	r4, [pc, #52]	@ (800099c <__libc_init_array+0x3c>)
 8000966:	1b64      	subs	r4, r4, r5
 8000968:	10a4      	asrs	r4, r4, #2
 800096a:	2600      	movs	r6, #0
 800096c:	42a6      	cmp	r6, r4
 800096e:	d109      	bne.n	8000984 <__libc_init_array+0x24>
 8000970:	4d0b      	ldr	r5, [pc, #44]	@ (80009a0 <__libc_init_array+0x40>)
 8000972:	4c0c      	ldr	r4, [pc, #48]	@ (80009a4 <__libc_init_array+0x44>)
 8000974:	f000 fe3e 	bl	80015f4 <_init>
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	10a4      	asrs	r4, r4, #2
 800097c:	2600      	movs	r6, #0
 800097e:	42a6      	cmp	r6, r4
 8000980:	d105      	bne.n	800098e <__libc_init_array+0x2e>
 8000982:	bd70      	pop	{r4, r5, r6, pc}
 8000984:	f855 3b04 	ldr.w	r3, [r5], #4
 8000988:	4798      	blx	r3
 800098a:	3601      	adds	r6, #1
 800098c:	e7ee      	b.n	800096c <__libc_init_array+0xc>
 800098e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000992:	4798      	blx	r3
 8000994:	3601      	adds	r6, #1
 8000996:	e7f2      	b.n	800097e <__libc_init_array+0x1e>
 8000998:	08001670 	.word	0x08001670
 800099c:	08001670 	.word	0x08001670
 80009a0:	08001670 	.word	0x08001670
 80009a4:	08001674 	.word	0x08001674

080009a8 <__retarget_lock_init_recursive>:
 80009a8:	4770      	bx	lr

080009aa <__retarget_lock_acquire_recursive>:
 80009aa:	4770      	bx	lr

080009ac <__retarget_lock_release_recursive>:
 80009ac:	4770      	bx	lr

080009ae <__sfputc_r>:
 80009ae:	6893      	ldr	r3, [r2, #8]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	b410      	push	{r4}
 80009b6:	6093      	str	r3, [r2, #8]
 80009b8:	da08      	bge.n	80009cc <__sfputc_r+0x1e>
 80009ba:	6994      	ldr	r4, [r2, #24]
 80009bc:	42a3      	cmp	r3, r4
 80009be:	db01      	blt.n	80009c4 <__sfputc_r+0x16>
 80009c0:	290a      	cmp	r1, #10
 80009c2:	d103      	bne.n	80009cc <__sfputc_r+0x1e>
 80009c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009c8:	f000 bc5b 	b.w	8001282 <__swbuf_r>
 80009cc:	6813      	ldr	r3, [r2, #0]
 80009ce:	1c58      	adds	r0, r3, #1
 80009d0:	6010      	str	r0, [r2, #0]
 80009d2:	7019      	strb	r1, [r3, #0]
 80009d4:	4608      	mov	r0, r1
 80009d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009da:	4770      	bx	lr

080009dc <__sfputs_r>:
 80009dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009de:	4606      	mov	r6, r0
 80009e0:	460f      	mov	r7, r1
 80009e2:	4614      	mov	r4, r2
 80009e4:	18d5      	adds	r5, r2, r3
 80009e6:	42ac      	cmp	r4, r5
 80009e8:	d101      	bne.n	80009ee <__sfputs_r+0x12>
 80009ea:	2000      	movs	r0, #0
 80009ec:	e007      	b.n	80009fe <__sfputs_r+0x22>
 80009ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009f2:	463a      	mov	r2, r7
 80009f4:	4630      	mov	r0, r6
 80009f6:	f7ff ffda 	bl	80009ae <__sfputc_r>
 80009fa:	1c43      	adds	r3, r0, #1
 80009fc:	d1f3      	bne.n	80009e6 <__sfputs_r+0xa>
 80009fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000a00 <_vfiprintf_r>:
 8000a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a04:	460d      	mov	r5, r1
 8000a06:	b09d      	sub	sp, #116	@ 0x74
 8000a08:	4614      	mov	r4, r2
 8000a0a:	4698      	mov	r8, r3
 8000a0c:	4606      	mov	r6, r0
 8000a0e:	b118      	cbz	r0, 8000a18 <_vfiprintf_r+0x18>
 8000a10:	6a03      	ldr	r3, [r0, #32]
 8000a12:	b90b      	cbnz	r3, 8000a18 <_vfiprintf_r+0x18>
 8000a14:	f7ff fef0 	bl	80007f8 <__sinit>
 8000a18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000a1a:	07d9      	lsls	r1, r3, #31
 8000a1c:	d405      	bmi.n	8000a2a <_vfiprintf_r+0x2a>
 8000a1e:	89ab      	ldrh	r3, [r5, #12]
 8000a20:	059a      	lsls	r2, r3, #22
 8000a22:	d402      	bmi.n	8000a2a <_vfiprintf_r+0x2a>
 8000a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000a26:	f7ff ffc0 	bl	80009aa <__retarget_lock_acquire_recursive>
 8000a2a:	89ab      	ldrh	r3, [r5, #12]
 8000a2c:	071b      	lsls	r3, r3, #28
 8000a2e:	d501      	bpl.n	8000a34 <_vfiprintf_r+0x34>
 8000a30:	692b      	ldr	r3, [r5, #16]
 8000a32:	b99b      	cbnz	r3, 8000a5c <_vfiprintf_r+0x5c>
 8000a34:	4629      	mov	r1, r5
 8000a36:	4630      	mov	r0, r6
 8000a38:	f000 fc62 	bl	8001300 <__swsetup_r>
 8000a3c:	b170      	cbz	r0, 8000a5c <_vfiprintf_r+0x5c>
 8000a3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000a40:	07dc      	lsls	r4, r3, #31
 8000a42:	d504      	bpl.n	8000a4e <_vfiprintf_r+0x4e>
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a48:	b01d      	add	sp, #116	@ 0x74
 8000a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a4e:	89ab      	ldrh	r3, [r5, #12]
 8000a50:	0598      	lsls	r0, r3, #22
 8000a52:	d4f7      	bmi.n	8000a44 <_vfiprintf_r+0x44>
 8000a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000a56:	f7ff ffa9 	bl	80009ac <__retarget_lock_release_recursive>
 8000a5a:	e7f3      	b.n	8000a44 <_vfiprintf_r+0x44>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a60:	2320      	movs	r3, #32
 8000a62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000a66:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a6a:	2330      	movs	r3, #48	@ 0x30
 8000a6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000c1c <_vfiprintf_r+0x21c>
 8000a70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000a74:	f04f 0901 	mov.w	r9, #1
 8000a78:	4623      	mov	r3, r4
 8000a7a:	469a      	mov	sl, r3
 8000a7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a80:	b10a      	cbz	r2, 8000a86 <_vfiprintf_r+0x86>
 8000a82:	2a25      	cmp	r2, #37	@ 0x25
 8000a84:	d1f9      	bne.n	8000a7a <_vfiprintf_r+0x7a>
 8000a86:	ebba 0b04 	subs.w	fp, sl, r4
 8000a8a:	d00b      	beq.n	8000aa4 <_vfiprintf_r+0xa4>
 8000a8c:	465b      	mov	r3, fp
 8000a8e:	4622      	mov	r2, r4
 8000a90:	4629      	mov	r1, r5
 8000a92:	4630      	mov	r0, r6
 8000a94:	f7ff ffa2 	bl	80009dc <__sfputs_r>
 8000a98:	3001      	adds	r0, #1
 8000a9a:	f000 80a7 	beq.w	8000bec <_vfiprintf_r+0x1ec>
 8000a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000aa0:	445a      	add	r2, fp
 8000aa2:	9209      	str	r2, [sp, #36]	@ 0x24
 8000aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f000 809f 	beq.w	8000bec <_vfiprintf_r+0x1ec>
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ab8:	f10a 0a01 	add.w	sl, sl, #1
 8000abc:	9304      	str	r3, [sp, #16]
 8000abe:	9307      	str	r3, [sp, #28]
 8000ac0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000ac4:	931a      	str	r3, [sp, #104]	@ 0x68
 8000ac6:	4654      	mov	r4, sl
 8000ac8:	2205      	movs	r2, #5
 8000aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ace:	4853      	ldr	r0, [pc, #332]	@ (8000c1c <_vfiprintf_r+0x21c>)
 8000ad0:	f7ff fb7e 	bl	80001d0 <memchr>
 8000ad4:	9a04      	ldr	r2, [sp, #16]
 8000ad6:	b9d8      	cbnz	r0, 8000b10 <_vfiprintf_r+0x110>
 8000ad8:	06d1      	lsls	r1, r2, #27
 8000ada:	bf44      	itt	mi
 8000adc:	2320      	movmi	r3, #32
 8000ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ae2:	0713      	lsls	r3, r2, #28
 8000ae4:	bf44      	itt	mi
 8000ae6:	232b      	movmi	r3, #43	@ 0x2b
 8000ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000aec:	f89a 3000 	ldrb.w	r3, [sl]
 8000af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000af2:	d015      	beq.n	8000b20 <_vfiprintf_r+0x120>
 8000af4:	9a07      	ldr	r2, [sp, #28]
 8000af6:	4654      	mov	r4, sl
 8000af8:	2000      	movs	r0, #0
 8000afa:	f04f 0c0a 	mov.w	ip, #10
 8000afe:	4621      	mov	r1, r4
 8000b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b04:	3b30      	subs	r3, #48	@ 0x30
 8000b06:	2b09      	cmp	r3, #9
 8000b08:	d94b      	bls.n	8000ba2 <_vfiprintf_r+0x1a2>
 8000b0a:	b1b0      	cbz	r0, 8000b3a <_vfiprintf_r+0x13a>
 8000b0c:	9207      	str	r2, [sp, #28]
 8000b0e:	e014      	b.n	8000b3a <_vfiprintf_r+0x13a>
 8000b10:	eba0 0308 	sub.w	r3, r0, r8
 8000b14:	fa09 f303 	lsl.w	r3, r9, r3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	9304      	str	r3, [sp, #16]
 8000b1c:	46a2      	mov	sl, r4
 8000b1e:	e7d2      	b.n	8000ac6 <_vfiprintf_r+0xc6>
 8000b20:	9b03      	ldr	r3, [sp, #12]
 8000b22:	1d19      	adds	r1, r3, #4
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	9103      	str	r1, [sp, #12]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	bfbb      	ittet	lt
 8000b2c:	425b      	neglt	r3, r3
 8000b2e:	f042 0202 	orrlt.w	r2, r2, #2
 8000b32:	9307      	strge	r3, [sp, #28]
 8000b34:	9307      	strlt	r3, [sp, #28]
 8000b36:	bfb8      	it	lt
 8000b38:	9204      	strlt	r2, [sp, #16]
 8000b3a:	7823      	ldrb	r3, [r4, #0]
 8000b3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b3e:	d10a      	bne.n	8000b56 <_vfiprintf_r+0x156>
 8000b40:	7863      	ldrb	r3, [r4, #1]
 8000b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b44:	d132      	bne.n	8000bac <_vfiprintf_r+0x1ac>
 8000b46:	9b03      	ldr	r3, [sp, #12]
 8000b48:	1d1a      	adds	r2, r3, #4
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	9203      	str	r2, [sp, #12]
 8000b4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000b52:	3402      	adds	r4, #2
 8000b54:	9305      	str	r3, [sp, #20]
 8000b56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000c2c <_vfiprintf_r+0x22c>
 8000b5a:	7821      	ldrb	r1, [r4, #0]
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	4650      	mov	r0, sl
 8000b60:	f7ff fb36 	bl	80001d0 <memchr>
 8000b64:	b138      	cbz	r0, 8000b76 <_vfiprintf_r+0x176>
 8000b66:	9b04      	ldr	r3, [sp, #16]
 8000b68:	eba0 000a 	sub.w	r0, r0, sl
 8000b6c:	2240      	movs	r2, #64	@ 0x40
 8000b6e:	4082      	lsls	r2, r0
 8000b70:	4313      	orrs	r3, r2
 8000b72:	3401      	adds	r4, #1
 8000b74:	9304      	str	r3, [sp, #16]
 8000b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b7a:	4829      	ldr	r0, [pc, #164]	@ (8000c20 <_vfiprintf_r+0x220>)
 8000b7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000b80:	2206      	movs	r2, #6
 8000b82:	f7ff fb25 	bl	80001d0 <memchr>
 8000b86:	2800      	cmp	r0, #0
 8000b88:	d03f      	beq.n	8000c0a <_vfiprintf_r+0x20a>
 8000b8a:	4b26      	ldr	r3, [pc, #152]	@ (8000c24 <_vfiprintf_r+0x224>)
 8000b8c:	bb1b      	cbnz	r3, 8000bd6 <_vfiprintf_r+0x1d6>
 8000b8e:	9b03      	ldr	r3, [sp, #12]
 8000b90:	3307      	adds	r3, #7
 8000b92:	f023 0307 	bic.w	r3, r3, #7
 8000b96:	3308      	adds	r3, #8
 8000b98:	9303      	str	r3, [sp, #12]
 8000b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000b9c:	443b      	add	r3, r7
 8000b9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ba0:	e76a      	b.n	8000a78 <_vfiprintf_r+0x78>
 8000ba2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ba6:	460c      	mov	r4, r1
 8000ba8:	2001      	movs	r0, #1
 8000baa:	e7a8      	b.n	8000afe <_vfiprintf_r+0xfe>
 8000bac:	2300      	movs	r3, #0
 8000bae:	3401      	adds	r4, #1
 8000bb0:	9305      	str	r3, [sp, #20]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f04f 0c0a 	mov.w	ip, #10
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bbe:	3a30      	subs	r2, #48	@ 0x30
 8000bc0:	2a09      	cmp	r2, #9
 8000bc2:	d903      	bls.n	8000bcc <_vfiprintf_r+0x1cc>
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0c6      	beq.n	8000b56 <_vfiprintf_r+0x156>
 8000bc8:	9105      	str	r1, [sp, #20]
 8000bca:	e7c4      	b.n	8000b56 <_vfiprintf_r+0x156>
 8000bcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e7f0      	b.n	8000bb8 <_vfiprintf_r+0x1b8>
 8000bd6:	ab03      	add	r3, sp, #12
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	462a      	mov	r2, r5
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <_vfiprintf_r+0x228>)
 8000bde:	a904      	add	r1, sp, #16
 8000be0:	4630      	mov	r0, r6
 8000be2:	f3af 8000 	nop.w
 8000be6:	4607      	mov	r7, r0
 8000be8:	1c78      	adds	r0, r7, #1
 8000bea:	d1d6      	bne.n	8000b9a <_vfiprintf_r+0x19a>
 8000bec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000bee:	07d9      	lsls	r1, r3, #31
 8000bf0:	d405      	bmi.n	8000bfe <_vfiprintf_r+0x1fe>
 8000bf2:	89ab      	ldrh	r3, [r5, #12]
 8000bf4:	059a      	lsls	r2, r3, #22
 8000bf6:	d402      	bmi.n	8000bfe <_vfiprintf_r+0x1fe>
 8000bf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000bfa:	f7ff fed7 	bl	80009ac <__retarget_lock_release_recursive>
 8000bfe:	89ab      	ldrh	r3, [r5, #12]
 8000c00:	065b      	lsls	r3, r3, #25
 8000c02:	f53f af1f 	bmi.w	8000a44 <_vfiprintf_r+0x44>
 8000c06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c08:	e71e      	b.n	8000a48 <_vfiprintf_r+0x48>
 8000c0a:	ab03      	add	r3, sp, #12
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	462a      	mov	r2, r5
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <_vfiprintf_r+0x228>)
 8000c12:	a904      	add	r1, sp, #16
 8000c14:	4630      	mov	r0, r6
 8000c16:	f000 f91b 	bl	8000e50 <_printf_i>
 8000c1a:	e7e4      	b.n	8000be6 <_vfiprintf_r+0x1e6>
 8000c1c:	08001632 	.word	0x08001632
 8000c20:	0800163c 	.word	0x0800163c
 8000c24:	00000000 	.word	0x00000000
 8000c28:	080009dd 	.word	0x080009dd
 8000c2c:	08001638 	.word	0x08001638

08000c30 <sbrk_aligned>:
 8000c30:	b570      	push	{r4, r5, r6, lr}
 8000c32:	4e0f      	ldr	r6, [pc, #60]	@ (8000c70 <sbrk_aligned+0x40>)
 8000c34:	460c      	mov	r4, r1
 8000c36:	6831      	ldr	r1, [r6, #0]
 8000c38:	4605      	mov	r5, r0
 8000c3a:	b911      	cbnz	r1, 8000c42 <sbrk_aligned+0x12>
 8000c3c:	f000 fc4c 	bl	80014d8 <_sbrk_r>
 8000c40:	6030      	str	r0, [r6, #0]
 8000c42:	4621      	mov	r1, r4
 8000c44:	4628      	mov	r0, r5
 8000c46:	f000 fc47 	bl	80014d8 <_sbrk_r>
 8000c4a:	1c43      	adds	r3, r0, #1
 8000c4c:	d103      	bne.n	8000c56 <sbrk_aligned+0x26>
 8000c4e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000c52:	4620      	mov	r0, r4
 8000c54:	bd70      	pop	{r4, r5, r6, pc}
 8000c56:	1cc4      	adds	r4, r0, #3
 8000c58:	f024 0403 	bic.w	r4, r4, #3
 8000c5c:	42a0      	cmp	r0, r4
 8000c5e:	d0f8      	beq.n	8000c52 <sbrk_aligned+0x22>
 8000c60:	1a21      	subs	r1, r4, r0
 8000c62:	4628      	mov	r0, r5
 8000c64:	f000 fc38 	bl	80014d8 <_sbrk_r>
 8000c68:	3001      	adds	r0, #1
 8000c6a:	d1f2      	bne.n	8000c52 <sbrk_aligned+0x22>
 8000c6c:	e7ef      	b.n	8000c4e <sbrk_aligned+0x1e>
 8000c6e:	bf00      	nop
 8000c70:	200001c4 	.word	0x200001c4

08000c74 <_malloc_r>:
 8000c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c78:	1ccd      	adds	r5, r1, #3
 8000c7a:	f025 0503 	bic.w	r5, r5, #3
 8000c7e:	3508      	adds	r5, #8
 8000c80:	2d0c      	cmp	r5, #12
 8000c82:	bf38      	it	cc
 8000c84:	250c      	movcc	r5, #12
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	4606      	mov	r6, r0
 8000c8a:	db01      	blt.n	8000c90 <_malloc_r+0x1c>
 8000c8c:	42a9      	cmp	r1, r5
 8000c8e:	d904      	bls.n	8000c9a <_malloc_r+0x26>
 8000c90:	230c      	movs	r3, #12
 8000c92:	6033      	str	r3, [r6, #0]
 8000c94:	2000      	movs	r0, #0
 8000c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d70 <_malloc_r+0xfc>
 8000c9e:	f000 faa1 	bl	80011e4 <__malloc_lock>
 8000ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8000ca6:	461c      	mov	r4, r3
 8000ca8:	bb44      	cbnz	r4, 8000cfc <_malloc_r+0x88>
 8000caa:	4629      	mov	r1, r5
 8000cac:	4630      	mov	r0, r6
 8000cae:	f7ff ffbf 	bl	8000c30 <sbrk_aligned>
 8000cb2:	1c43      	adds	r3, r0, #1
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	d158      	bne.n	8000d6a <_malloc_r+0xf6>
 8000cb8:	f8d8 4000 	ldr.w	r4, [r8]
 8000cbc:	4627      	mov	r7, r4
 8000cbe:	2f00      	cmp	r7, #0
 8000cc0:	d143      	bne.n	8000d4a <_malloc_r+0xd6>
 8000cc2:	2c00      	cmp	r4, #0
 8000cc4:	d04b      	beq.n	8000d5e <_malloc_r+0xea>
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	4639      	mov	r1, r7
 8000cca:	4630      	mov	r0, r6
 8000ccc:	eb04 0903 	add.w	r9, r4, r3
 8000cd0:	f000 fc02 	bl	80014d8 <_sbrk_r>
 8000cd4:	4581      	cmp	r9, r0
 8000cd6:	d142      	bne.n	8000d5e <_malloc_r+0xea>
 8000cd8:	6821      	ldr	r1, [r4, #0]
 8000cda:	1a6d      	subs	r5, r5, r1
 8000cdc:	4629      	mov	r1, r5
 8000cde:	4630      	mov	r0, r6
 8000ce0:	f7ff ffa6 	bl	8000c30 <sbrk_aligned>
 8000ce4:	3001      	adds	r0, #1
 8000ce6:	d03a      	beq.n	8000d5e <_malloc_r+0xea>
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	442b      	add	r3, r5
 8000cec:	6023      	str	r3, [r4, #0]
 8000cee:	f8d8 3000 	ldr.w	r3, [r8]
 8000cf2:	685a      	ldr	r2, [r3, #4]
 8000cf4:	bb62      	cbnz	r2, 8000d50 <_malloc_r+0xdc>
 8000cf6:	f8c8 7000 	str.w	r7, [r8]
 8000cfa:	e00f      	b.n	8000d1c <_malloc_r+0xa8>
 8000cfc:	6822      	ldr	r2, [r4, #0]
 8000cfe:	1b52      	subs	r2, r2, r5
 8000d00:	d420      	bmi.n	8000d44 <_malloc_r+0xd0>
 8000d02:	2a0b      	cmp	r2, #11
 8000d04:	d917      	bls.n	8000d36 <_malloc_r+0xc2>
 8000d06:	1961      	adds	r1, r4, r5
 8000d08:	42a3      	cmp	r3, r4
 8000d0a:	6025      	str	r5, [r4, #0]
 8000d0c:	bf18      	it	ne
 8000d0e:	6059      	strne	r1, [r3, #4]
 8000d10:	6863      	ldr	r3, [r4, #4]
 8000d12:	bf08      	it	eq
 8000d14:	f8c8 1000 	streq.w	r1, [r8]
 8000d18:	5162      	str	r2, [r4, r5]
 8000d1a:	604b      	str	r3, [r1, #4]
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	f000 fa67 	bl	80011f0 <__malloc_unlock>
 8000d22:	f104 000b 	add.w	r0, r4, #11
 8000d26:	1d23      	adds	r3, r4, #4
 8000d28:	f020 0007 	bic.w	r0, r0, #7
 8000d2c:	1ac2      	subs	r2, r0, r3
 8000d2e:	bf1c      	itt	ne
 8000d30:	1a1b      	subne	r3, r3, r0
 8000d32:	50a3      	strne	r3, [r4, r2]
 8000d34:	e7af      	b.n	8000c96 <_malloc_r+0x22>
 8000d36:	6862      	ldr	r2, [r4, #4]
 8000d38:	42a3      	cmp	r3, r4
 8000d3a:	bf0c      	ite	eq
 8000d3c:	f8c8 2000 	streq.w	r2, [r8]
 8000d40:	605a      	strne	r2, [r3, #4]
 8000d42:	e7eb      	b.n	8000d1c <_malloc_r+0xa8>
 8000d44:	4623      	mov	r3, r4
 8000d46:	6864      	ldr	r4, [r4, #4]
 8000d48:	e7ae      	b.n	8000ca8 <_malloc_r+0x34>
 8000d4a:	463c      	mov	r4, r7
 8000d4c:	687f      	ldr	r7, [r7, #4]
 8000d4e:	e7b6      	b.n	8000cbe <_malloc_r+0x4a>
 8000d50:	461a      	mov	r2, r3
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	42a3      	cmp	r3, r4
 8000d56:	d1fb      	bne.n	8000d50 <_malloc_r+0xdc>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	6053      	str	r3, [r2, #4]
 8000d5c:	e7de      	b.n	8000d1c <_malloc_r+0xa8>
 8000d5e:	230c      	movs	r3, #12
 8000d60:	6033      	str	r3, [r6, #0]
 8000d62:	4630      	mov	r0, r6
 8000d64:	f000 fa44 	bl	80011f0 <__malloc_unlock>
 8000d68:	e794      	b.n	8000c94 <_malloc_r+0x20>
 8000d6a:	6005      	str	r5, [r0, #0]
 8000d6c:	e7d6      	b.n	8000d1c <_malloc_r+0xa8>
 8000d6e:	bf00      	nop
 8000d70:	200001c8 	.word	0x200001c8

08000d74 <_printf_common>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	4616      	mov	r6, r2
 8000d7a:	4698      	mov	r8, r3
 8000d7c:	688a      	ldr	r2, [r1, #8]
 8000d7e:	690b      	ldr	r3, [r1, #16]
 8000d80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d84:	4293      	cmp	r3, r2
 8000d86:	bfb8      	it	lt
 8000d88:	4613      	movlt	r3, r2
 8000d8a:	6033      	str	r3, [r6, #0]
 8000d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d90:	4607      	mov	r7, r0
 8000d92:	460c      	mov	r4, r1
 8000d94:	b10a      	cbz	r2, 8000d9a <_printf_common+0x26>
 8000d96:	3301      	adds	r3, #1
 8000d98:	6033      	str	r3, [r6, #0]
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	0699      	lsls	r1, r3, #26
 8000d9e:	bf42      	ittt	mi
 8000da0:	6833      	ldrmi	r3, [r6, #0]
 8000da2:	3302      	addmi	r3, #2
 8000da4:	6033      	strmi	r3, [r6, #0]
 8000da6:	6825      	ldr	r5, [r4, #0]
 8000da8:	f015 0506 	ands.w	r5, r5, #6
 8000dac:	d106      	bne.n	8000dbc <_printf_common+0x48>
 8000dae:	f104 0a19 	add.w	sl, r4, #25
 8000db2:	68e3      	ldr	r3, [r4, #12]
 8000db4:	6832      	ldr	r2, [r6, #0]
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	dc26      	bgt.n	8000e0a <_printf_common+0x96>
 8000dbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000dc0:	6822      	ldr	r2, [r4, #0]
 8000dc2:	3b00      	subs	r3, #0
 8000dc4:	bf18      	it	ne
 8000dc6:	2301      	movne	r3, #1
 8000dc8:	0692      	lsls	r2, r2, #26
 8000dca:	d42b      	bmi.n	8000e24 <_printf_common+0xb0>
 8000dcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000dd0:	4641      	mov	r1, r8
 8000dd2:	4638      	mov	r0, r7
 8000dd4:	47c8      	blx	r9
 8000dd6:	3001      	adds	r0, #1
 8000dd8:	d01e      	beq.n	8000e18 <_printf_common+0xa4>
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	6922      	ldr	r2, [r4, #16]
 8000dde:	f003 0306 	and.w	r3, r3, #6
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf02      	ittt	eq
 8000de6:	68e5      	ldreq	r5, [r4, #12]
 8000de8:	6833      	ldreq	r3, [r6, #0]
 8000dea:	1aed      	subeq	r5, r5, r3
 8000dec:	68a3      	ldr	r3, [r4, #8]
 8000dee:	bf0c      	ite	eq
 8000df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000df4:	2500      	movne	r5, #0
 8000df6:	4293      	cmp	r3, r2
 8000df8:	bfc4      	itt	gt
 8000dfa:	1a9b      	subgt	r3, r3, r2
 8000dfc:	18ed      	addgt	r5, r5, r3
 8000dfe:	2600      	movs	r6, #0
 8000e00:	341a      	adds	r4, #26
 8000e02:	42b5      	cmp	r5, r6
 8000e04:	d11a      	bne.n	8000e3c <_printf_common+0xc8>
 8000e06:	2000      	movs	r0, #0
 8000e08:	e008      	b.n	8000e1c <_printf_common+0xa8>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	4652      	mov	r2, sl
 8000e0e:	4641      	mov	r1, r8
 8000e10:	4638      	mov	r0, r7
 8000e12:	47c8      	blx	r9
 8000e14:	3001      	adds	r0, #1
 8000e16:	d103      	bne.n	8000e20 <_printf_common+0xac>
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	3501      	adds	r5, #1
 8000e22:	e7c6      	b.n	8000db2 <_printf_common+0x3e>
 8000e24:	18e1      	adds	r1, r4, r3
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	2030      	movs	r0, #48	@ 0x30
 8000e2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e2e:	4422      	add	r2, r4
 8000e30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e38:	3302      	adds	r3, #2
 8000e3a:	e7c7      	b.n	8000dcc <_printf_common+0x58>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	4622      	mov	r2, r4
 8000e40:	4641      	mov	r1, r8
 8000e42:	4638      	mov	r0, r7
 8000e44:	47c8      	blx	r9
 8000e46:	3001      	adds	r0, #1
 8000e48:	d0e6      	beq.n	8000e18 <_printf_common+0xa4>
 8000e4a:	3601      	adds	r6, #1
 8000e4c:	e7d9      	b.n	8000e02 <_printf_common+0x8e>
	...

08000e50 <_printf_i>:
 8000e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e54:	7e0f      	ldrb	r7, [r1, #24]
 8000e56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e58:	2f78      	cmp	r7, #120	@ 0x78
 8000e5a:	4691      	mov	r9, r2
 8000e5c:	4680      	mov	r8, r0
 8000e5e:	460c      	mov	r4, r1
 8000e60:	469a      	mov	sl, r3
 8000e62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e66:	d807      	bhi.n	8000e78 <_printf_i+0x28>
 8000e68:	2f62      	cmp	r7, #98	@ 0x62
 8000e6a:	d80a      	bhi.n	8000e82 <_printf_i+0x32>
 8000e6c:	2f00      	cmp	r7, #0
 8000e6e:	f000 80d1 	beq.w	8001014 <_printf_i+0x1c4>
 8000e72:	2f58      	cmp	r7, #88	@ 0x58
 8000e74:	f000 80b8 	beq.w	8000fe8 <_printf_i+0x198>
 8000e78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e80:	e03a      	b.n	8000ef8 <_printf_i+0xa8>
 8000e82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e86:	2b15      	cmp	r3, #21
 8000e88:	d8f6      	bhi.n	8000e78 <_printf_i+0x28>
 8000e8a:	a101      	add	r1, pc, #4	@ (adr r1, 8000e90 <_printf_i+0x40>)
 8000e8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e90:	08000ee9 	.word	0x08000ee9
 8000e94:	08000efd 	.word	0x08000efd
 8000e98:	08000e79 	.word	0x08000e79
 8000e9c:	08000e79 	.word	0x08000e79
 8000ea0:	08000e79 	.word	0x08000e79
 8000ea4:	08000e79 	.word	0x08000e79
 8000ea8:	08000efd 	.word	0x08000efd
 8000eac:	08000e79 	.word	0x08000e79
 8000eb0:	08000e79 	.word	0x08000e79
 8000eb4:	08000e79 	.word	0x08000e79
 8000eb8:	08000e79 	.word	0x08000e79
 8000ebc:	08000ffb 	.word	0x08000ffb
 8000ec0:	08000f27 	.word	0x08000f27
 8000ec4:	08000fb5 	.word	0x08000fb5
 8000ec8:	08000e79 	.word	0x08000e79
 8000ecc:	08000e79 	.word	0x08000e79
 8000ed0:	0800101d 	.word	0x0800101d
 8000ed4:	08000e79 	.word	0x08000e79
 8000ed8:	08000f27 	.word	0x08000f27
 8000edc:	08000e79 	.word	0x08000e79
 8000ee0:	08000e79 	.word	0x08000e79
 8000ee4:	08000fbd 	.word	0x08000fbd
 8000ee8:	6833      	ldr	r3, [r6, #0]
 8000eea:	1d1a      	adds	r2, r3, #4
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6032      	str	r2, [r6, #0]
 8000ef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ef4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e09c      	b.n	8001036 <_printf_i+0x1e6>
 8000efc:	6833      	ldr	r3, [r6, #0]
 8000efe:	6820      	ldr	r0, [r4, #0]
 8000f00:	1d19      	adds	r1, r3, #4
 8000f02:	6031      	str	r1, [r6, #0]
 8000f04:	0606      	lsls	r6, r0, #24
 8000f06:	d501      	bpl.n	8000f0c <_printf_i+0xbc>
 8000f08:	681d      	ldr	r5, [r3, #0]
 8000f0a:	e003      	b.n	8000f14 <_printf_i+0xc4>
 8000f0c:	0645      	lsls	r5, r0, #25
 8000f0e:	d5fb      	bpl.n	8000f08 <_printf_i+0xb8>
 8000f10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	da03      	bge.n	8000f20 <_printf_i+0xd0>
 8000f18:	232d      	movs	r3, #45	@ 0x2d
 8000f1a:	426d      	negs	r5, r5
 8000f1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f20:	4858      	ldr	r0, [pc, #352]	@ (8001084 <_printf_i+0x234>)
 8000f22:	230a      	movs	r3, #10
 8000f24:	e011      	b.n	8000f4a <_printf_i+0xfa>
 8000f26:	6821      	ldr	r1, [r4, #0]
 8000f28:	6833      	ldr	r3, [r6, #0]
 8000f2a:	0608      	lsls	r0, r1, #24
 8000f2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f30:	d402      	bmi.n	8000f38 <_printf_i+0xe8>
 8000f32:	0649      	lsls	r1, r1, #25
 8000f34:	bf48      	it	mi
 8000f36:	b2ad      	uxthmi	r5, r5
 8000f38:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f3a:	4852      	ldr	r0, [pc, #328]	@ (8001084 <_printf_i+0x234>)
 8000f3c:	6033      	str	r3, [r6, #0]
 8000f3e:	bf14      	ite	ne
 8000f40:	230a      	movne	r3, #10
 8000f42:	2308      	moveq	r3, #8
 8000f44:	2100      	movs	r1, #0
 8000f46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f4a:	6866      	ldr	r6, [r4, #4]
 8000f4c:	60a6      	str	r6, [r4, #8]
 8000f4e:	2e00      	cmp	r6, #0
 8000f50:	db05      	blt.n	8000f5e <_printf_i+0x10e>
 8000f52:	6821      	ldr	r1, [r4, #0]
 8000f54:	432e      	orrs	r6, r5
 8000f56:	f021 0104 	bic.w	r1, r1, #4
 8000f5a:	6021      	str	r1, [r4, #0]
 8000f5c:	d04b      	beq.n	8000ff6 <_printf_i+0x1a6>
 8000f5e:	4616      	mov	r6, r2
 8000f60:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f64:	fb03 5711 	mls	r7, r3, r1, r5
 8000f68:	5dc7      	ldrb	r7, [r0, r7]
 8000f6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f6e:	462f      	mov	r7, r5
 8000f70:	42bb      	cmp	r3, r7
 8000f72:	460d      	mov	r5, r1
 8000f74:	d9f4      	bls.n	8000f60 <_printf_i+0x110>
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	d10b      	bne.n	8000f92 <_printf_i+0x142>
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	07df      	lsls	r7, r3, #31
 8000f7e:	d508      	bpl.n	8000f92 <_printf_i+0x142>
 8000f80:	6923      	ldr	r3, [r4, #16]
 8000f82:	6861      	ldr	r1, [r4, #4]
 8000f84:	4299      	cmp	r1, r3
 8000f86:	bfde      	ittt	le
 8000f88:	2330      	movle	r3, #48	@ 0x30
 8000f8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f8e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000f92:	1b92      	subs	r2, r2, r6
 8000f94:	6122      	str	r2, [r4, #16]
 8000f96:	f8cd a000 	str.w	sl, [sp]
 8000f9a:	464b      	mov	r3, r9
 8000f9c:	aa03      	add	r2, sp, #12
 8000f9e:	4621      	mov	r1, r4
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	f7ff fee7 	bl	8000d74 <_printf_common>
 8000fa6:	3001      	adds	r0, #1
 8000fa8:	d14a      	bne.n	8001040 <_printf_i+0x1f0>
 8000faa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fae:	b004      	add	sp, #16
 8000fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	f043 0320 	orr.w	r3, r3, #32
 8000fba:	6023      	str	r3, [r4, #0]
 8000fbc:	4832      	ldr	r0, [pc, #200]	@ (8001088 <_printf_i+0x238>)
 8000fbe:	2778      	movs	r7, #120	@ 0x78
 8000fc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	6831      	ldr	r1, [r6, #0]
 8000fc8:	061f      	lsls	r7, r3, #24
 8000fca:	f851 5b04 	ldr.w	r5, [r1], #4
 8000fce:	d402      	bmi.n	8000fd6 <_printf_i+0x186>
 8000fd0:	065f      	lsls	r7, r3, #25
 8000fd2:	bf48      	it	mi
 8000fd4:	b2ad      	uxthmi	r5, r5
 8000fd6:	6031      	str	r1, [r6, #0]
 8000fd8:	07d9      	lsls	r1, r3, #31
 8000fda:	bf44      	itt	mi
 8000fdc:	f043 0320 	orrmi.w	r3, r3, #32
 8000fe0:	6023      	strmi	r3, [r4, #0]
 8000fe2:	b11d      	cbz	r5, 8000fec <_printf_i+0x19c>
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	e7ad      	b.n	8000f44 <_printf_i+0xf4>
 8000fe8:	4826      	ldr	r0, [pc, #152]	@ (8001084 <_printf_i+0x234>)
 8000fea:	e7e9      	b.n	8000fc0 <_printf_i+0x170>
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	f023 0320 	bic.w	r3, r3, #32
 8000ff2:	6023      	str	r3, [r4, #0]
 8000ff4:	e7f6      	b.n	8000fe4 <_printf_i+0x194>
 8000ff6:	4616      	mov	r6, r2
 8000ff8:	e7bd      	b.n	8000f76 <_printf_i+0x126>
 8000ffa:	6833      	ldr	r3, [r6, #0]
 8000ffc:	6825      	ldr	r5, [r4, #0]
 8000ffe:	6961      	ldr	r1, [r4, #20]
 8001000:	1d18      	adds	r0, r3, #4
 8001002:	6030      	str	r0, [r6, #0]
 8001004:	062e      	lsls	r6, r5, #24
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	d501      	bpl.n	800100e <_printf_i+0x1be>
 800100a:	6019      	str	r1, [r3, #0]
 800100c:	e002      	b.n	8001014 <_printf_i+0x1c4>
 800100e:	0668      	lsls	r0, r5, #25
 8001010:	d5fb      	bpl.n	800100a <_printf_i+0x1ba>
 8001012:	8019      	strh	r1, [r3, #0]
 8001014:	2300      	movs	r3, #0
 8001016:	6123      	str	r3, [r4, #16]
 8001018:	4616      	mov	r6, r2
 800101a:	e7bc      	b.n	8000f96 <_printf_i+0x146>
 800101c:	6833      	ldr	r3, [r6, #0]
 800101e:	1d1a      	adds	r2, r3, #4
 8001020:	6032      	str	r2, [r6, #0]
 8001022:	681e      	ldr	r6, [r3, #0]
 8001024:	6862      	ldr	r2, [r4, #4]
 8001026:	2100      	movs	r1, #0
 8001028:	4630      	mov	r0, r6
 800102a:	f7ff f8d1 	bl	80001d0 <memchr>
 800102e:	b108      	cbz	r0, 8001034 <_printf_i+0x1e4>
 8001030:	1b80      	subs	r0, r0, r6
 8001032:	6060      	str	r0, [r4, #4]
 8001034:	6863      	ldr	r3, [r4, #4]
 8001036:	6123      	str	r3, [r4, #16]
 8001038:	2300      	movs	r3, #0
 800103a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800103e:	e7aa      	b.n	8000f96 <_printf_i+0x146>
 8001040:	6923      	ldr	r3, [r4, #16]
 8001042:	4632      	mov	r2, r6
 8001044:	4649      	mov	r1, r9
 8001046:	4640      	mov	r0, r8
 8001048:	47d0      	blx	sl
 800104a:	3001      	adds	r0, #1
 800104c:	d0ad      	beq.n	8000faa <_printf_i+0x15a>
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	079b      	lsls	r3, r3, #30
 8001052:	d413      	bmi.n	800107c <_printf_i+0x22c>
 8001054:	68e0      	ldr	r0, [r4, #12]
 8001056:	9b03      	ldr	r3, [sp, #12]
 8001058:	4298      	cmp	r0, r3
 800105a:	bfb8      	it	lt
 800105c:	4618      	movlt	r0, r3
 800105e:	e7a6      	b.n	8000fae <_printf_i+0x15e>
 8001060:	2301      	movs	r3, #1
 8001062:	4632      	mov	r2, r6
 8001064:	4649      	mov	r1, r9
 8001066:	4640      	mov	r0, r8
 8001068:	47d0      	blx	sl
 800106a:	3001      	adds	r0, #1
 800106c:	d09d      	beq.n	8000faa <_printf_i+0x15a>
 800106e:	3501      	adds	r5, #1
 8001070:	68e3      	ldr	r3, [r4, #12]
 8001072:	9903      	ldr	r1, [sp, #12]
 8001074:	1a5b      	subs	r3, r3, r1
 8001076:	42ab      	cmp	r3, r5
 8001078:	dcf2      	bgt.n	8001060 <_printf_i+0x210>
 800107a:	e7eb      	b.n	8001054 <_printf_i+0x204>
 800107c:	2500      	movs	r5, #0
 800107e:	f104 0619 	add.w	r6, r4, #25
 8001082:	e7f5      	b.n	8001070 <_printf_i+0x220>
 8001084:	08001643 	.word	0x08001643
 8001088:	08001654 	.word	0x08001654

0800108c <__sflush_r>:
 800108c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001094:	0716      	lsls	r6, r2, #28
 8001096:	4605      	mov	r5, r0
 8001098:	460c      	mov	r4, r1
 800109a:	d454      	bmi.n	8001146 <__sflush_r+0xba>
 800109c:	684b      	ldr	r3, [r1, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	dc02      	bgt.n	80010a8 <__sflush_r+0x1c>
 80010a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dd48      	ble.n	800113a <__sflush_r+0xae>
 80010a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010aa:	2e00      	cmp	r6, #0
 80010ac:	d045      	beq.n	800113a <__sflush_r+0xae>
 80010ae:	2300      	movs	r3, #0
 80010b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80010b4:	682f      	ldr	r7, [r5, #0]
 80010b6:	6a21      	ldr	r1, [r4, #32]
 80010b8:	602b      	str	r3, [r5, #0]
 80010ba:	d030      	beq.n	800111e <__sflush_r+0x92>
 80010bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80010be:	89a3      	ldrh	r3, [r4, #12]
 80010c0:	0759      	lsls	r1, r3, #29
 80010c2:	d505      	bpl.n	80010d0 <__sflush_r+0x44>
 80010c4:	6863      	ldr	r3, [r4, #4]
 80010c6:	1ad2      	subs	r2, r2, r3
 80010c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80010ca:	b10b      	cbz	r3, 80010d0 <__sflush_r+0x44>
 80010cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010ce:	1ad2      	subs	r2, r2, r3
 80010d0:	2300      	movs	r3, #0
 80010d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010d4:	6a21      	ldr	r1, [r4, #32]
 80010d6:	4628      	mov	r0, r5
 80010d8:	47b0      	blx	r6
 80010da:	1c43      	adds	r3, r0, #1
 80010dc:	89a3      	ldrh	r3, [r4, #12]
 80010de:	d106      	bne.n	80010ee <__sflush_r+0x62>
 80010e0:	6829      	ldr	r1, [r5, #0]
 80010e2:	291d      	cmp	r1, #29
 80010e4:	d82b      	bhi.n	800113e <__sflush_r+0xb2>
 80010e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001190 <__sflush_r+0x104>)
 80010e8:	40ca      	lsrs	r2, r1
 80010ea:	07d6      	lsls	r6, r2, #31
 80010ec:	d527      	bpl.n	800113e <__sflush_r+0xb2>
 80010ee:	2200      	movs	r2, #0
 80010f0:	6062      	str	r2, [r4, #4]
 80010f2:	04d9      	lsls	r1, r3, #19
 80010f4:	6922      	ldr	r2, [r4, #16]
 80010f6:	6022      	str	r2, [r4, #0]
 80010f8:	d504      	bpl.n	8001104 <__sflush_r+0x78>
 80010fa:	1c42      	adds	r2, r0, #1
 80010fc:	d101      	bne.n	8001102 <__sflush_r+0x76>
 80010fe:	682b      	ldr	r3, [r5, #0]
 8001100:	b903      	cbnz	r3, 8001104 <__sflush_r+0x78>
 8001102:	6560      	str	r0, [r4, #84]	@ 0x54
 8001104:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001106:	602f      	str	r7, [r5, #0]
 8001108:	b1b9      	cbz	r1, 800113a <__sflush_r+0xae>
 800110a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800110e:	4299      	cmp	r1, r3
 8001110:	d002      	beq.n	8001118 <__sflush_r+0x8c>
 8001112:	4628      	mov	r0, r5
 8001114:	f000 fa24 	bl	8001560 <_free_r>
 8001118:	2300      	movs	r3, #0
 800111a:	6363      	str	r3, [r4, #52]	@ 0x34
 800111c:	e00d      	b.n	800113a <__sflush_r+0xae>
 800111e:	2301      	movs	r3, #1
 8001120:	4628      	mov	r0, r5
 8001122:	47b0      	blx	r6
 8001124:	4602      	mov	r2, r0
 8001126:	1c50      	adds	r0, r2, #1
 8001128:	d1c9      	bne.n	80010be <__sflush_r+0x32>
 800112a:	682b      	ldr	r3, [r5, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0c6      	beq.n	80010be <__sflush_r+0x32>
 8001130:	2b1d      	cmp	r3, #29
 8001132:	d001      	beq.n	8001138 <__sflush_r+0xac>
 8001134:	2b16      	cmp	r3, #22
 8001136:	d11e      	bne.n	8001176 <__sflush_r+0xea>
 8001138:	602f      	str	r7, [r5, #0]
 800113a:	2000      	movs	r0, #0
 800113c:	e022      	b.n	8001184 <__sflush_r+0xf8>
 800113e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001142:	b21b      	sxth	r3, r3
 8001144:	e01b      	b.n	800117e <__sflush_r+0xf2>
 8001146:	690f      	ldr	r7, [r1, #16]
 8001148:	2f00      	cmp	r7, #0
 800114a:	d0f6      	beq.n	800113a <__sflush_r+0xae>
 800114c:	0793      	lsls	r3, r2, #30
 800114e:	680e      	ldr	r6, [r1, #0]
 8001150:	bf08      	it	eq
 8001152:	694b      	ldreq	r3, [r1, #20]
 8001154:	600f      	str	r7, [r1, #0]
 8001156:	bf18      	it	ne
 8001158:	2300      	movne	r3, #0
 800115a:	eba6 0807 	sub.w	r8, r6, r7
 800115e:	608b      	str	r3, [r1, #8]
 8001160:	f1b8 0f00 	cmp.w	r8, #0
 8001164:	dde9      	ble.n	800113a <__sflush_r+0xae>
 8001166:	6a21      	ldr	r1, [r4, #32]
 8001168:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800116a:	4643      	mov	r3, r8
 800116c:	463a      	mov	r2, r7
 800116e:	4628      	mov	r0, r5
 8001170:	47b0      	blx	r6
 8001172:	2800      	cmp	r0, #0
 8001174:	dc08      	bgt.n	8001188 <__sflush_r+0xfc>
 8001176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800117a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800117e:	81a3      	strh	r3, [r4, #12]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001188:	4407      	add	r7, r0
 800118a:	eba8 0800 	sub.w	r8, r8, r0
 800118e:	e7e7      	b.n	8001160 <__sflush_r+0xd4>
 8001190:	20400001 	.word	0x20400001

08001194 <_fflush_r>:
 8001194:	b538      	push	{r3, r4, r5, lr}
 8001196:	690b      	ldr	r3, [r1, #16]
 8001198:	4605      	mov	r5, r0
 800119a:	460c      	mov	r4, r1
 800119c:	b913      	cbnz	r3, 80011a4 <_fflush_r+0x10>
 800119e:	2500      	movs	r5, #0
 80011a0:	4628      	mov	r0, r5
 80011a2:	bd38      	pop	{r3, r4, r5, pc}
 80011a4:	b118      	cbz	r0, 80011ae <_fflush_r+0x1a>
 80011a6:	6a03      	ldr	r3, [r0, #32]
 80011a8:	b90b      	cbnz	r3, 80011ae <_fflush_r+0x1a>
 80011aa:	f7ff fb25 	bl	80007f8 <__sinit>
 80011ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f3      	beq.n	800119e <_fflush_r+0xa>
 80011b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80011b8:	07d0      	lsls	r0, r2, #31
 80011ba:	d404      	bmi.n	80011c6 <_fflush_r+0x32>
 80011bc:	0599      	lsls	r1, r3, #22
 80011be:	d402      	bmi.n	80011c6 <_fflush_r+0x32>
 80011c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011c2:	f7ff fbf2 	bl	80009aa <__retarget_lock_acquire_recursive>
 80011c6:	4628      	mov	r0, r5
 80011c8:	4621      	mov	r1, r4
 80011ca:	f7ff ff5f 	bl	800108c <__sflush_r>
 80011ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80011d0:	07da      	lsls	r2, r3, #31
 80011d2:	4605      	mov	r5, r0
 80011d4:	d4e4      	bmi.n	80011a0 <_fflush_r+0xc>
 80011d6:	89a3      	ldrh	r3, [r4, #12]
 80011d8:	059b      	lsls	r3, r3, #22
 80011da:	d4e1      	bmi.n	80011a0 <_fflush_r+0xc>
 80011dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011de:	f7ff fbe5 	bl	80009ac <__retarget_lock_release_recursive>
 80011e2:	e7dd      	b.n	80011a0 <_fflush_r+0xc>

080011e4 <__malloc_lock>:
 80011e4:	4801      	ldr	r0, [pc, #4]	@ (80011ec <__malloc_lock+0x8>)
 80011e6:	f7ff bbe0 	b.w	80009aa <__retarget_lock_acquire_recursive>
 80011ea:	bf00      	nop
 80011ec:	200001c0 	.word	0x200001c0

080011f0 <__malloc_unlock>:
 80011f0:	4801      	ldr	r0, [pc, #4]	@ (80011f8 <__malloc_unlock+0x8>)
 80011f2:	f7ff bbdb 	b.w	80009ac <__retarget_lock_release_recursive>
 80011f6:	bf00      	nop
 80011f8:	200001c0 	.word	0x200001c0

080011fc <__sread>:
 80011fc:	b510      	push	{r4, lr}
 80011fe:	460c      	mov	r4, r1
 8001200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001204:	f000 f956 	bl	80014b4 <_read_r>
 8001208:	2800      	cmp	r0, #0
 800120a:	bfab      	itete	ge
 800120c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800120e:	89a3      	ldrhlt	r3, [r4, #12]
 8001210:	181b      	addge	r3, r3, r0
 8001212:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001216:	bfac      	ite	ge
 8001218:	6563      	strge	r3, [r4, #84]	@ 0x54
 800121a:	81a3      	strhlt	r3, [r4, #12]
 800121c:	bd10      	pop	{r4, pc}

0800121e <__swrite>:
 800121e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001222:	461f      	mov	r7, r3
 8001224:	898b      	ldrh	r3, [r1, #12]
 8001226:	05db      	lsls	r3, r3, #23
 8001228:	4605      	mov	r5, r0
 800122a:	460c      	mov	r4, r1
 800122c:	4616      	mov	r6, r2
 800122e:	d505      	bpl.n	800123c <__swrite+0x1e>
 8001230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001234:	2302      	movs	r3, #2
 8001236:	2200      	movs	r2, #0
 8001238:	f000 f92a 	bl	8001490 <_lseek_r>
 800123c:	89a3      	ldrh	r3, [r4, #12]
 800123e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001246:	81a3      	strh	r3, [r4, #12]
 8001248:	4632      	mov	r2, r6
 800124a:	463b      	mov	r3, r7
 800124c:	4628      	mov	r0, r5
 800124e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001252:	f000 b951 	b.w	80014f8 <_write_r>

08001256 <__sseek>:
 8001256:	b510      	push	{r4, lr}
 8001258:	460c      	mov	r4, r1
 800125a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800125e:	f000 f917 	bl	8001490 <_lseek_r>
 8001262:	1c43      	adds	r3, r0, #1
 8001264:	89a3      	ldrh	r3, [r4, #12]
 8001266:	bf15      	itete	ne
 8001268:	6560      	strne	r0, [r4, #84]	@ 0x54
 800126a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800126e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001272:	81a3      	strheq	r3, [r4, #12]
 8001274:	bf18      	it	ne
 8001276:	81a3      	strhne	r3, [r4, #12]
 8001278:	bd10      	pop	{r4, pc}

0800127a <__sclose>:
 800127a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800127e:	f000 b94d 	b.w	800151c <_close_r>

08001282 <__swbuf_r>:
 8001282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001284:	460e      	mov	r6, r1
 8001286:	4614      	mov	r4, r2
 8001288:	4605      	mov	r5, r0
 800128a:	b118      	cbz	r0, 8001294 <__swbuf_r+0x12>
 800128c:	6a03      	ldr	r3, [r0, #32]
 800128e:	b90b      	cbnz	r3, 8001294 <__swbuf_r+0x12>
 8001290:	f7ff fab2 	bl	80007f8 <__sinit>
 8001294:	69a3      	ldr	r3, [r4, #24]
 8001296:	60a3      	str	r3, [r4, #8]
 8001298:	89a3      	ldrh	r3, [r4, #12]
 800129a:	071a      	lsls	r2, r3, #28
 800129c:	d501      	bpl.n	80012a2 <__swbuf_r+0x20>
 800129e:	6923      	ldr	r3, [r4, #16]
 80012a0:	b943      	cbnz	r3, 80012b4 <__swbuf_r+0x32>
 80012a2:	4621      	mov	r1, r4
 80012a4:	4628      	mov	r0, r5
 80012a6:	f000 f82b 	bl	8001300 <__swsetup_r>
 80012aa:	b118      	cbz	r0, 80012b4 <__swbuf_r+0x32>
 80012ac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80012b0:	4638      	mov	r0, r7
 80012b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	6922      	ldr	r2, [r4, #16]
 80012b8:	1a98      	subs	r0, r3, r2
 80012ba:	6963      	ldr	r3, [r4, #20]
 80012bc:	b2f6      	uxtb	r6, r6
 80012be:	4283      	cmp	r3, r0
 80012c0:	4637      	mov	r7, r6
 80012c2:	dc05      	bgt.n	80012d0 <__swbuf_r+0x4e>
 80012c4:	4621      	mov	r1, r4
 80012c6:	4628      	mov	r0, r5
 80012c8:	f7ff ff64 	bl	8001194 <_fflush_r>
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d1ed      	bne.n	80012ac <__swbuf_r+0x2a>
 80012d0:	68a3      	ldr	r3, [r4, #8]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	60a3      	str	r3, [r4, #8]
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	6022      	str	r2, [r4, #0]
 80012dc:	701e      	strb	r6, [r3, #0]
 80012de:	6962      	ldr	r2, [r4, #20]
 80012e0:	1c43      	adds	r3, r0, #1
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d004      	beq.n	80012f0 <__swbuf_r+0x6e>
 80012e6:	89a3      	ldrh	r3, [r4, #12]
 80012e8:	07db      	lsls	r3, r3, #31
 80012ea:	d5e1      	bpl.n	80012b0 <__swbuf_r+0x2e>
 80012ec:	2e0a      	cmp	r6, #10
 80012ee:	d1df      	bne.n	80012b0 <__swbuf_r+0x2e>
 80012f0:	4621      	mov	r1, r4
 80012f2:	4628      	mov	r0, r5
 80012f4:	f7ff ff4e 	bl	8001194 <_fflush_r>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d0d9      	beq.n	80012b0 <__swbuf_r+0x2e>
 80012fc:	e7d6      	b.n	80012ac <__swbuf_r+0x2a>
	...

08001300 <__swsetup_r>:
 8001300:	b538      	push	{r3, r4, r5, lr}
 8001302:	4b29      	ldr	r3, [pc, #164]	@ (80013a8 <__swsetup_r+0xa8>)
 8001304:	4605      	mov	r5, r0
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	460c      	mov	r4, r1
 800130a:	b118      	cbz	r0, 8001314 <__swsetup_r+0x14>
 800130c:	6a03      	ldr	r3, [r0, #32]
 800130e:	b90b      	cbnz	r3, 8001314 <__swsetup_r+0x14>
 8001310:	f7ff fa72 	bl	80007f8 <__sinit>
 8001314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001318:	0719      	lsls	r1, r3, #28
 800131a:	d422      	bmi.n	8001362 <__swsetup_r+0x62>
 800131c:	06da      	lsls	r2, r3, #27
 800131e:	d407      	bmi.n	8001330 <__swsetup_r+0x30>
 8001320:	2209      	movs	r2, #9
 8001322:	602a      	str	r2, [r5, #0]
 8001324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001328:	81a3      	strh	r3, [r4, #12]
 800132a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800132e:	e033      	b.n	8001398 <__swsetup_r+0x98>
 8001330:	0758      	lsls	r0, r3, #29
 8001332:	d512      	bpl.n	800135a <__swsetup_r+0x5a>
 8001334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001336:	b141      	cbz	r1, 800134a <__swsetup_r+0x4a>
 8001338:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800133c:	4299      	cmp	r1, r3
 800133e:	d002      	beq.n	8001346 <__swsetup_r+0x46>
 8001340:	4628      	mov	r0, r5
 8001342:	f000 f90d 	bl	8001560 <_free_r>
 8001346:	2300      	movs	r3, #0
 8001348:	6363      	str	r3, [r4, #52]	@ 0x34
 800134a:	89a3      	ldrh	r3, [r4, #12]
 800134c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001350:	81a3      	strh	r3, [r4, #12]
 8001352:	2300      	movs	r3, #0
 8001354:	6063      	str	r3, [r4, #4]
 8001356:	6923      	ldr	r3, [r4, #16]
 8001358:	6023      	str	r3, [r4, #0]
 800135a:	89a3      	ldrh	r3, [r4, #12]
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	81a3      	strh	r3, [r4, #12]
 8001362:	6923      	ldr	r3, [r4, #16]
 8001364:	b94b      	cbnz	r3, 800137a <__swsetup_r+0x7a>
 8001366:	89a3      	ldrh	r3, [r4, #12]
 8001368:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800136c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001370:	d003      	beq.n	800137a <__swsetup_r+0x7a>
 8001372:	4621      	mov	r1, r4
 8001374:	4628      	mov	r0, r5
 8001376:	f000 f83f 	bl	80013f8 <__smakebuf_r>
 800137a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800137e:	f013 0201 	ands.w	r2, r3, #1
 8001382:	d00a      	beq.n	800139a <__swsetup_r+0x9a>
 8001384:	2200      	movs	r2, #0
 8001386:	60a2      	str	r2, [r4, #8]
 8001388:	6962      	ldr	r2, [r4, #20]
 800138a:	4252      	negs	r2, r2
 800138c:	61a2      	str	r2, [r4, #24]
 800138e:	6922      	ldr	r2, [r4, #16]
 8001390:	b942      	cbnz	r2, 80013a4 <__swsetup_r+0xa4>
 8001392:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001396:	d1c5      	bne.n	8001324 <__swsetup_r+0x24>
 8001398:	bd38      	pop	{r3, r4, r5, pc}
 800139a:	0799      	lsls	r1, r3, #30
 800139c:	bf58      	it	pl
 800139e:	6962      	ldrpl	r2, [r4, #20]
 80013a0:	60a2      	str	r2, [r4, #8]
 80013a2:	e7f4      	b.n	800138e <__swsetup_r+0x8e>
 80013a4:	2000      	movs	r0, #0
 80013a6:	e7f7      	b.n	8001398 <__swsetup_r+0x98>
 80013a8:	20000010 	.word	0x20000010

080013ac <__swhatbuf_r>:
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	460c      	mov	r4, r1
 80013b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013b4:	2900      	cmp	r1, #0
 80013b6:	b096      	sub	sp, #88	@ 0x58
 80013b8:	4615      	mov	r5, r2
 80013ba:	461e      	mov	r6, r3
 80013bc:	da0d      	bge.n	80013da <__swhatbuf_r+0x2e>
 80013be:	89a3      	ldrh	r3, [r4, #12]
 80013c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013c4:	f04f 0100 	mov.w	r1, #0
 80013c8:	bf14      	ite	ne
 80013ca:	2340      	movne	r3, #64	@ 0x40
 80013cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80013d0:	2000      	movs	r0, #0
 80013d2:	6031      	str	r1, [r6, #0]
 80013d4:	602b      	str	r3, [r5, #0]
 80013d6:	b016      	add	sp, #88	@ 0x58
 80013d8:	bd70      	pop	{r4, r5, r6, pc}
 80013da:	466a      	mov	r2, sp
 80013dc:	f000 f8ae 	bl	800153c <_fstat_r>
 80013e0:	2800      	cmp	r0, #0
 80013e2:	dbec      	blt.n	80013be <__swhatbuf_r+0x12>
 80013e4:	9901      	ldr	r1, [sp, #4]
 80013e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80013ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80013ee:	4259      	negs	r1, r3
 80013f0:	4159      	adcs	r1, r3
 80013f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013f6:	e7eb      	b.n	80013d0 <__swhatbuf_r+0x24>

080013f8 <__smakebuf_r>:
 80013f8:	898b      	ldrh	r3, [r1, #12]
 80013fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013fc:	079d      	lsls	r5, r3, #30
 80013fe:	4606      	mov	r6, r0
 8001400:	460c      	mov	r4, r1
 8001402:	d507      	bpl.n	8001414 <__smakebuf_r+0x1c>
 8001404:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001408:	6023      	str	r3, [r4, #0]
 800140a:	6123      	str	r3, [r4, #16]
 800140c:	2301      	movs	r3, #1
 800140e:	6163      	str	r3, [r4, #20]
 8001410:	b003      	add	sp, #12
 8001412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001414:	ab01      	add	r3, sp, #4
 8001416:	466a      	mov	r2, sp
 8001418:	f7ff ffc8 	bl	80013ac <__swhatbuf_r>
 800141c:	9f00      	ldr	r7, [sp, #0]
 800141e:	4605      	mov	r5, r0
 8001420:	4639      	mov	r1, r7
 8001422:	4630      	mov	r0, r6
 8001424:	f7ff fc26 	bl	8000c74 <_malloc_r>
 8001428:	b948      	cbnz	r0, 800143e <__smakebuf_r+0x46>
 800142a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800142e:	059a      	lsls	r2, r3, #22
 8001430:	d4ee      	bmi.n	8001410 <__smakebuf_r+0x18>
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	f043 0302 	orr.w	r3, r3, #2
 800143a:	81a3      	strh	r3, [r4, #12]
 800143c:	e7e2      	b.n	8001404 <__smakebuf_r+0xc>
 800143e:	89a3      	ldrh	r3, [r4, #12]
 8001440:	6020      	str	r0, [r4, #0]
 8001442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001446:	81a3      	strh	r3, [r4, #12]
 8001448:	9b01      	ldr	r3, [sp, #4]
 800144a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800144e:	b15b      	cbz	r3, 8001468 <__smakebuf_r+0x70>
 8001450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001454:	4630      	mov	r0, r6
 8001456:	f000 f80b 	bl	8001470 <_isatty_r>
 800145a:	b128      	cbz	r0, 8001468 <__smakebuf_r+0x70>
 800145c:	89a3      	ldrh	r3, [r4, #12]
 800145e:	f023 0303 	bic.w	r3, r3, #3
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	81a3      	strh	r3, [r4, #12]
 8001468:	89a3      	ldrh	r3, [r4, #12]
 800146a:	431d      	orrs	r5, r3
 800146c:	81a5      	strh	r5, [r4, #12]
 800146e:	e7cf      	b.n	8001410 <__smakebuf_r+0x18>

08001470 <_isatty_r>:
 8001470:	b538      	push	{r3, r4, r5, lr}
 8001472:	4d06      	ldr	r5, [pc, #24]	@ (800148c <_isatty_r+0x1c>)
 8001474:	2300      	movs	r3, #0
 8001476:	4604      	mov	r4, r0
 8001478:	4608      	mov	r0, r1
 800147a:	602b      	str	r3, [r5, #0]
 800147c:	f7ff f892 	bl	80005a4 <_isatty>
 8001480:	1c43      	adds	r3, r0, #1
 8001482:	d102      	bne.n	800148a <_isatty_r+0x1a>
 8001484:	682b      	ldr	r3, [r5, #0]
 8001486:	b103      	cbz	r3, 800148a <_isatty_r+0x1a>
 8001488:	6023      	str	r3, [r4, #0]
 800148a:	bd38      	pop	{r3, r4, r5, pc}
 800148c:	200001cc 	.word	0x200001cc

08001490 <_lseek_r>:
 8001490:	b538      	push	{r3, r4, r5, lr}
 8001492:	4d07      	ldr	r5, [pc, #28]	@ (80014b0 <_lseek_r+0x20>)
 8001494:	4604      	mov	r4, r0
 8001496:	4608      	mov	r0, r1
 8001498:	4611      	mov	r1, r2
 800149a:	2200      	movs	r2, #0
 800149c:	602a      	str	r2, [r5, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	f7ff f88b 	bl	80005ba <_lseek>
 80014a4:	1c43      	adds	r3, r0, #1
 80014a6:	d102      	bne.n	80014ae <_lseek_r+0x1e>
 80014a8:	682b      	ldr	r3, [r5, #0]
 80014aa:	b103      	cbz	r3, 80014ae <_lseek_r+0x1e>
 80014ac:	6023      	str	r3, [r4, #0]
 80014ae:	bd38      	pop	{r3, r4, r5, pc}
 80014b0:	200001cc 	.word	0x200001cc

080014b4 <_read_r>:
 80014b4:	b538      	push	{r3, r4, r5, lr}
 80014b6:	4d07      	ldr	r5, [pc, #28]	@ (80014d4 <_read_r+0x20>)
 80014b8:	4604      	mov	r4, r0
 80014ba:	4608      	mov	r0, r1
 80014bc:	4611      	mov	r1, r2
 80014be:	2200      	movs	r2, #0
 80014c0:	602a      	str	r2, [r5, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	f7ff f835 	bl	8000532 <_read>
 80014c8:	1c43      	adds	r3, r0, #1
 80014ca:	d102      	bne.n	80014d2 <_read_r+0x1e>
 80014cc:	682b      	ldr	r3, [r5, #0]
 80014ce:	b103      	cbz	r3, 80014d2 <_read_r+0x1e>
 80014d0:	6023      	str	r3, [r4, #0]
 80014d2:	bd38      	pop	{r3, r4, r5, pc}
 80014d4:	200001cc 	.word	0x200001cc

080014d8 <_sbrk_r>:
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	4d06      	ldr	r5, [pc, #24]	@ (80014f4 <_sbrk_r+0x1c>)
 80014dc:	2300      	movs	r3, #0
 80014de:	4604      	mov	r4, r0
 80014e0:	4608      	mov	r0, r1
 80014e2:	602b      	str	r3, [r5, #0]
 80014e4:	f7ff f876 	bl	80005d4 <_sbrk>
 80014e8:	1c43      	adds	r3, r0, #1
 80014ea:	d102      	bne.n	80014f2 <_sbrk_r+0x1a>
 80014ec:	682b      	ldr	r3, [r5, #0]
 80014ee:	b103      	cbz	r3, 80014f2 <_sbrk_r+0x1a>
 80014f0:	6023      	str	r3, [r4, #0]
 80014f2:	bd38      	pop	{r3, r4, r5, pc}
 80014f4:	200001cc 	.word	0x200001cc

080014f8 <_write_r>:
 80014f8:	b538      	push	{r3, r4, r5, lr}
 80014fa:	4d07      	ldr	r5, [pc, #28]	@ (8001518 <_write_r+0x20>)
 80014fc:	4604      	mov	r4, r0
 80014fe:	4608      	mov	r0, r1
 8001500:	4611      	mov	r1, r2
 8001502:	2200      	movs	r2, #0
 8001504:	602a      	str	r2, [r5, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	f7fe ff93 	bl	8000432 <_write>
 800150c:	1c43      	adds	r3, r0, #1
 800150e:	d102      	bne.n	8001516 <_write_r+0x1e>
 8001510:	682b      	ldr	r3, [r5, #0]
 8001512:	b103      	cbz	r3, 8001516 <_write_r+0x1e>
 8001514:	6023      	str	r3, [r4, #0]
 8001516:	bd38      	pop	{r3, r4, r5, pc}
 8001518:	200001cc 	.word	0x200001cc

0800151c <_close_r>:
 800151c:	b538      	push	{r3, r4, r5, lr}
 800151e:	4d06      	ldr	r5, [pc, #24]	@ (8001538 <_close_r+0x1c>)
 8001520:	2300      	movs	r3, #0
 8001522:	4604      	mov	r4, r0
 8001524:	4608      	mov	r0, r1
 8001526:	602b      	str	r3, [r5, #0]
 8001528:	f7ff f820 	bl	800056c <_close>
 800152c:	1c43      	adds	r3, r0, #1
 800152e:	d102      	bne.n	8001536 <_close_r+0x1a>
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	b103      	cbz	r3, 8001536 <_close_r+0x1a>
 8001534:	6023      	str	r3, [r4, #0]
 8001536:	bd38      	pop	{r3, r4, r5, pc}
 8001538:	200001cc 	.word	0x200001cc

0800153c <_fstat_r>:
 800153c:	b538      	push	{r3, r4, r5, lr}
 800153e:	4d07      	ldr	r5, [pc, #28]	@ (800155c <_fstat_r+0x20>)
 8001540:	2300      	movs	r3, #0
 8001542:	4604      	mov	r4, r0
 8001544:	4608      	mov	r0, r1
 8001546:	4611      	mov	r1, r2
 8001548:	602b      	str	r3, [r5, #0]
 800154a:	f7ff f81b 	bl	8000584 <_fstat>
 800154e:	1c43      	adds	r3, r0, #1
 8001550:	d102      	bne.n	8001558 <_fstat_r+0x1c>
 8001552:	682b      	ldr	r3, [r5, #0]
 8001554:	b103      	cbz	r3, 8001558 <_fstat_r+0x1c>
 8001556:	6023      	str	r3, [r4, #0]
 8001558:	bd38      	pop	{r3, r4, r5, pc}
 800155a:	bf00      	nop
 800155c:	200001cc 	.word	0x200001cc

08001560 <_free_r>:
 8001560:	b538      	push	{r3, r4, r5, lr}
 8001562:	4605      	mov	r5, r0
 8001564:	2900      	cmp	r1, #0
 8001566:	d041      	beq.n	80015ec <_free_r+0x8c>
 8001568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800156c:	1f0c      	subs	r4, r1, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	bfb8      	it	lt
 8001572:	18e4      	addlt	r4, r4, r3
 8001574:	f7ff fe36 	bl	80011e4 <__malloc_lock>
 8001578:	4a1d      	ldr	r2, [pc, #116]	@ (80015f0 <_free_r+0x90>)
 800157a:	6813      	ldr	r3, [r2, #0]
 800157c:	b933      	cbnz	r3, 800158c <_free_r+0x2c>
 800157e:	6063      	str	r3, [r4, #4]
 8001580:	6014      	str	r4, [r2, #0]
 8001582:	4628      	mov	r0, r5
 8001584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001588:	f7ff be32 	b.w	80011f0 <__malloc_unlock>
 800158c:	42a3      	cmp	r3, r4
 800158e:	d908      	bls.n	80015a2 <_free_r+0x42>
 8001590:	6820      	ldr	r0, [r4, #0]
 8001592:	1821      	adds	r1, r4, r0
 8001594:	428b      	cmp	r3, r1
 8001596:	bf01      	itttt	eq
 8001598:	6819      	ldreq	r1, [r3, #0]
 800159a:	685b      	ldreq	r3, [r3, #4]
 800159c:	1809      	addeq	r1, r1, r0
 800159e:	6021      	streq	r1, [r4, #0]
 80015a0:	e7ed      	b.n	800157e <_free_r+0x1e>
 80015a2:	461a      	mov	r2, r3
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	b10b      	cbz	r3, 80015ac <_free_r+0x4c>
 80015a8:	42a3      	cmp	r3, r4
 80015aa:	d9fa      	bls.n	80015a2 <_free_r+0x42>
 80015ac:	6811      	ldr	r1, [r2, #0]
 80015ae:	1850      	adds	r0, r2, r1
 80015b0:	42a0      	cmp	r0, r4
 80015b2:	d10b      	bne.n	80015cc <_free_r+0x6c>
 80015b4:	6820      	ldr	r0, [r4, #0]
 80015b6:	4401      	add	r1, r0
 80015b8:	1850      	adds	r0, r2, r1
 80015ba:	4283      	cmp	r3, r0
 80015bc:	6011      	str	r1, [r2, #0]
 80015be:	d1e0      	bne.n	8001582 <_free_r+0x22>
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	6053      	str	r3, [r2, #4]
 80015c6:	4408      	add	r0, r1
 80015c8:	6010      	str	r0, [r2, #0]
 80015ca:	e7da      	b.n	8001582 <_free_r+0x22>
 80015cc:	d902      	bls.n	80015d4 <_free_r+0x74>
 80015ce:	230c      	movs	r3, #12
 80015d0:	602b      	str	r3, [r5, #0]
 80015d2:	e7d6      	b.n	8001582 <_free_r+0x22>
 80015d4:	6820      	ldr	r0, [r4, #0]
 80015d6:	1821      	adds	r1, r4, r0
 80015d8:	428b      	cmp	r3, r1
 80015da:	bf04      	itt	eq
 80015dc:	6819      	ldreq	r1, [r3, #0]
 80015de:	685b      	ldreq	r3, [r3, #4]
 80015e0:	6063      	str	r3, [r4, #4]
 80015e2:	bf04      	itt	eq
 80015e4:	1809      	addeq	r1, r1, r0
 80015e6:	6021      	streq	r1, [r4, #0]
 80015e8:	6054      	str	r4, [r2, #4]
 80015ea:	e7ca      	b.n	8001582 <_free_r+0x22>
 80015ec:	bd38      	pop	{r3, r4, r5, pc}
 80015ee:	bf00      	nop
 80015f0:	200001c8 	.word	0x200001c8

080015f4 <_init>:
 80015f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f6:	bf00      	nop
 80015f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015fa:	bc08      	pop	{r3}
 80015fc:	469e      	mov	lr, r3
 80015fe:	4770      	bx	lr

08001600 <_fini>:
 8001600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001602:	bf00      	nop
 8001604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001606:	bc08      	pop	{r3}
 8001608:	469e      	mov	lr, r3
 800160a:	4770      	bx	lr
