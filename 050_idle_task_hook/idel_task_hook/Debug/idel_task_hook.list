
idel_task_hook.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080050e0  080050e0  000060e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051c4  080051c4  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080051c4  080051c4  000061c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051cc  080051cc  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051cc  080051cc  000061cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051d0  080051d0  000061d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080051d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001160  20000060  08005234  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  08005234  000071c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f390  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026eb  00000000  00000000  00016420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00018b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a73  00000000  00000000  000198c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027559  00000000  00000000  0001a333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f296  00000000  00000000  0004188c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f04cc  00000000  00000000  00050b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140fee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf0  00000000  00000000  00141034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00144c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080050c8 	.word	0x080050c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080050c8 	.word	0x080050c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	2000007c 	.word	0x2000007c
 80005cc:	200000d0 	.word	0x200000d0

080005d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d013      	beq.n	8000610 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00b      	beq.n	8000610 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005f8:	e000      	b.n	80005fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0f9      	beq.n	80005fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000606:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000610:	687b      	ldr	r3, [r7, #4]
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <debug_printf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void debug_printf(const char *fmt, ...)
{
 800061e:	b40f      	push	{r0, r1, r2, r3}
 8000620:	b580      	push	{r7, lr}
 8000622:	b0c2      	sub	sp, #264	@ 0x108
 8000624:	af00      	add	r7, sp, #0
	char buffer[256];
	va_list args;
	va_start(args, fmt);
 8000626:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800062a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800062e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000632:	601a      	str	r2, [r3, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800063c:	1d38      	adds	r0, r7, #4
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000644:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000648:	f004 f8b2 	bl	80047b0 <vsniprintf>
	va_end(args);
	uint16_t i = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
	while(buffer[i] != '\0')
 8000652:	e00e      	b.n	8000672 <debug_printf+0x54>
	{
		ITM_SendChar(buffer[i]);
 8000654:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8000658:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800065c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000660:	5cd3      	ldrb	r3, [r2, r3]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ffb4 	bl	80005d0 <ITM_SendChar>
		i++;
 8000668:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800066c:	3301      	adds	r3, #1
 800066e:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
	while(buffer[i] != '\0')
 8000672:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8000676:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800067a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800067e:	5cd3      	ldrb	r3, [r2, r3]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1e7      	bne.n	8000654 <debug_printf+0x36>
	}
}
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800068c:	46bd      	mov	sp, r7
 800068e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000692:	b004      	add	sp, #16
 8000694:	4770      	bx	lr
	...

08000698 <Task1_Handler>:

TaskHandle_t xTaskHandler1 = NULL ;
TaskHandle_t xTaskHandler2 = NULL ;
BaseType_t status;
void Task1_Handler(void *params)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		debug_printf("task1 is printing\r\n");
 80006a0:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <Task1_Handler+0x1c>)
 80006a2:	f7ff ffbc 	bl	800061e <debug_printf>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80006a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006aa:	f003 f89f 	bl	80037ec <vTaskDelay>
		debug_printf("task1 is printing\r\n");
 80006ae:	bf00      	nop
 80006b0:	e7f6      	b.n	80006a0 <Task1_Handler+0x8>
 80006b2:	bf00      	nop
 80006b4:	080050e0 	.word	0x080050e0

080006b8 <Task2_Handler>:
	}
}
void Task2_Handler(void *params)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	while(1)
	{
		debug_printf("task2 is printing\r\n");
 80006c0:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <Task2_Handler+0x1c>)
 80006c2:	f7ff ffac 	bl	800061e <debug_printf>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80006c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ca:	f003 f88f 	bl	80037ec <vTaskDelay>
		debug_printf("task2 is printing\r\n");
 80006ce:	bf00      	nop
 80006d0:	e7f6      	b.n	80006c0 <Task2_Handler+0x8>
 80006d2:	bf00      	nop
 80006d4:	080050f4 	.word	0x080050f4

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b08a      	sub	sp, #40	@ 0x28
 80006dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fa55 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f83f 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 f8bf 	bl	8000868 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ea:	f000 f88d 	bl	8000808 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <main+0x6c>)
 80006f0:	1d3c      	adds	r4, r7, #4
 80006f2:	461d      	mov	r5, r3
 80006f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fdc5 	bl	8003294 <osThreadCreate>
 800070a:	4603      	mov	r3, r0
 800070c:	4a0e      	ldr	r2, [pc, #56]	@ (8000748 <main+0x70>)
 800070e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(Task1_Handler,"Task1",200,NULL,1,&xTaskHandler1);
 8000710:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <main+0x74>)
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	2301      	movs	r3, #1
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2300      	movs	r3, #0
 800071a:	22c8      	movs	r2, #200	@ 0xc8
 800071c:	490c      	ldr	r1, [pc, #48]	@ (8000750 <main+0x78>)
 800071e:	480d      	ldr	r0, [pc, #52]	@ (8000754 <main+0x7c>)
 8000720:	f002 ff2c 	bl	800357c <xTaskCreate>
  xTaskCreate(Task2_Handler,"Task2",200,NULL,1,&xTaskHandler2);
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <main+0x80>)
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	2301      	movs	r3, #1
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2300      	movs	r3, #0
 800072e:	22c8      	movs	r2, #200	@ 0xc8
 8000730:	490a      	ldr	r1, [pc, #40]	@ (800075c <main+0x84>)
 8000732:	480b      	ldr	r0, [pc, #44]	@ (8000760 <main+0x88>)
 8000734:	f002 ff22 	bl	800357c <xTaskCreate>

  vTaskStartScheduler();
 8000738:	f003 f88e 	bl	8003858 <vTaskStartScheduler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800073c:	f002 fda3 	bl	8003286 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <main+0x68>
 8000744:	08005124 	.word	0x08005124
 8000748:	20000358 	.word	0x20000358
 800074c:	2000035c 	.word	0x2000035c
 8000750:	08005108 	.word	0x08005108
 8000754:	08000699 	.word	0x08000699
 8000758:	20000360 	.word	0x20000360
 800075c:	08005110 	.word	0x08005110
 8000760:	080006b9 	.word	0x080006b9

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b096      	sub	sp, #88	@ 0x58
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2244      	movs	r2, #68	@ 0x44
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f004 f82a 	bl	80047cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	463b      	mov	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000786:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800078a:	f000 fd31 	bl	80011f0 <HAL_PWREx_ControlVoltageScaling>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000794:	f000 f8d6 	bl	8000944 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a2:	2310      	movs	r3, #16
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007aa:	2302      	movs	r3, #2
 80007ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007b2:	230a      	movs	r3, #10
 80007b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007b6:	2307      	movs	r3, #7
 80007b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fd68 	bl	800129c <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007d2:	f000 f8b7 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2303      	movs	r3, #3
 80007dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	2104      	movs	r1, #4
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 f930 	bl	8001a54 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007fa:	f000 f8a3 	bl	8000944 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3758      	adds	r7, #88	@ 0x58
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 800080e:	4a15      	ldr	r2, [pc, #84]	@ (8000864 <MX_USART2_UART_Init+0x5c>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 800084c:	f001 ffe2 	bl	8002814 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000856:	f000 f875 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200002d0 	.word	0x200002d0
 8000864:	40004400 	.word	0x40004400

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	@ 0x28
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a2a      	ldr	r2, [pc, #168]	@ (800092c <MX_GPIO_Init+0xc4>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b28      	ldr	r3, [pc, #160]	@ (800092c <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	4b25      	ldr	r3, [pc, #148]	@ (800092c <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	4a24      	ldr	r2, [pc, #144]	@ (800092c <MX_GPIO_Init+0xc4>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	4a1e      	ldr	r2, [pc, #120]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	4a18      	ldr	r2, [pc, #96]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2120      	movs	r1, #32
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e6:	f000 fc5d 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	480b      	ldr	r0, [pc, #44]	@ (8000930 <MX_GPIO_Init+0xc8>)
 8000902:	f000 faa5 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000906:	2320      	movs	r3, #32
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000920:	f000 fa96 	bl	8000e50 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	@ 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	48000800 	.word	0x48000800

08000934 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800093c:	2001      	movs	r0, #1
 800093e:	f002 fcf5 	bl	800332c <osDelay>
 8000942:	e7fb      	b.n	800093c <StartDefaultTask+0x8>

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <Error_Handler+0x8>

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <HAL_MspInit+0x4c>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800095a:	4a10      	ldr	r2, [pc, #64]	@ (800099c <HAL_MspInit+0x4c>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6613      	str	r3, [r2, #96]	@ 0x60
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <HAL_MspInit+0x4c>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <HAL_MspInit+0x4c>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000972:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000978:	6593      	str	r3, [r2, #88]	@ 0x58
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_MspInit+0x4c>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	210f      	movs	r1, #15
 800098a:	f06f 0001 	mvn.w	r0, #1
 800098e:	f000 fa36 	bl	8000dfe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b0ac      	sub	sp, #176	@ 0xb0
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2288      	movs	r2, #136	@ 0x88
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f003 ff03 	bl	80047cc <memset>
  if(huart->Instance==USART2)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a21      	ldr	r2, [pc, #132]	@ (8000a50 <HAL_UART_MspInit+0xb0>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d13b      	bne.n	8000a48 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fa5d 	bl	8001e9c <HAL_RCCEx_PeriphCLKConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009e8:	f7ff ffac 	bl	8000944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ec:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <HAL_UART_MspInit+0xb4>)
 80009ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f0:	4a18      	ldr	r2, [pc, #96]	@ (8000a54 <HAL_UART_MspInit+0xb4>)
 80009f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f8:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <HAL_UART_MspInit+0xb4>)
 80009fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <HAL_UART_MspInit+0xb4>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <HAL_UART_MspInit+0xb4>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a10:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <HAL_UART_MspInit+0xb4>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a34:	2307      	movs	r3, #7
 8000a36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a44:	f000 fa04 	bl	8000e50 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a48:	bf00      	nop
 8000a4a:	37b0      	adds	r7, #176	@ 0xb0
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40004400 	.word	0x40004400
 8000a54:	40021000 	.word	0x40021000

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <NMI_Handler+0x4>

08000a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <MemManage_Handler+0x4>

08000a70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a92:	f000 f8d7 	bl	8000c44 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a96:	f003 f9d9 	bl	8003e4c <xTaskGetSchedulerState>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d001      	beq.n	8000aa4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000aa0:	f003 fc1a 	bl	80042d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f003 fe80 	bl	80047dc <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20018000 	.word	0x20018000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	20000364 	.word	0x20000364
 8000b10:	200011c0 	.word	0x200011c0

08000b14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b3c:	f7ff ffea 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	@ (8000b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <LoopForever+0xe>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <LoopForever+0x16>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b66:	f003 fe3f 	bl	80047e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b6a:	f7ff fdb5 	bl	80006d8 <main>

08000b6e <LoopForever>:

LoopForever:
    b LoopForever
 8000b6e:	e7fe      	b.n	8000b6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b7c:	080051d4 	.word	0x080051d4
  ldr r2, =_sbss
 8000b80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b84:	200011c0 	.word	0x200011c0

08000b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC1_2_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b96:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <HAL_Init+0x3c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc8 <HAL_Init+0x3c>)
 8000b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ba0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba2:	2003      	movs	r0, #3
 8000ba4:	f000 f920 	bl	8000de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba8:	200f      	movs	r0, #15
 8000baa:	f000 f80f 	bl	8000bcc <HAL_InitTick>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	71fb      	strb	r3, [r7, #7]
 8000bb8:	e001      	b.n	8000bbe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bba:	f7ff fec9 	bl	8000950 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40022000 	.word	0x40022000

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bd8:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <HAL_InitTick+0x6c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d023      	beq.n	8000c28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000be0:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <HAL_InitTick+0x70>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <HAL_InitTick+0x6c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f91d 	bl	8000e36 <HAL_SYSTICK_Config>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10f      	bne.n	8000c22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d809      	bhi.n	8000c1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	f000 f8f5 	bl	8000dfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c14:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <HAL_InitTick+0x74>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	e007      	b.n	8000c2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	e004      	b.n	8000c2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	e001      	b.n	8000c2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000004 	.word	0x20000004

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000368 	.word	0x20000368

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000368 	.word	0x20000368

08000c84 <__NVIC_SetPriorityGrouping>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_SetPriority>:
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db0a      	blt.n	8000d12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	490c      	ldr	r1, [pc, #48]	@ (8000d34 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000d10:	e00a      	b.n	8000d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4908      	ldr	r1, [pc, #32]	@ (8000d38 <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	440b      	add	r3, r1
 8000d26:	761a      	strb	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EncodePriority>:
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	@ 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f1c3 0307 	rsb	r3, r3, #7
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf28      	it	cs
 8000d5a:	2304      	movcs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3304      	adds	r3, #4
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d902      	bls.n	8000d6c <NVIC_EncodePriority+0x30>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b03      	subs	r3, #3
 8000d6a:	e000      	b.n	8000d6e <NVIC_EncodePriority+0x32>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	@ 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <SysTick_Config>:
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000db4:	d301      	bcc.n	8000dba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00f      	b.n	8000dda <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dba:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <SysTick_Config+0x40>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dc8:	f7ff ff8e 	bl	8000ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dcc:	4b05      	ldr	r3, [pc, #20]	@ (8000de4 <SysTick_Config+0x40>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd2:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <SysTick_Config+0x40>)
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	e000e010 	.word	0xe000e010

08000de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff47 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
 8000e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e10:	f7ff ff5c 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	68b9      	ldr	r1, [r7, #8]
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	f7ff ff8e 	bl	8000d3c <NVIC_EncodePriority>
 8000e20:	4602      	mov	r2, r0
 8000e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff5d 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffb0 	bl	8000da4 <SysTick_Config>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5e:	e17f      	b.n	8001160 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2101      	movs	r1, #1
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 8171 	beq.w	800115a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d005      	beq.n	8000e90 <HAL_GPIO_Init+0x40>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d130      	bne.n	8000ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f003 0201 	and.w	r2, r3, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d118      	bne.n	8000f30 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f04:	2201      	movs	r2, #1
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	08db      	lsrs	r3, r3, #3
 8000f1a:	f003 0201 	and.w	r2, r3, #1
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d017      	beq.n	8000f6c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d123      	bne.n	8000fc0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	6939      	ldr	r1, [r7, #16]
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0203 	and.w	r2, r3, #3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80ac 	beq.w	800115a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b5f      	ldr	r3, [pc, #380]	@ (8001180 <HAL_GPIO_Init+0x330>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001006:	4a5e      	ldr	r2, [pc, #376]	@ (8001180 <HAL_GPIO_Init+0x330>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6613      	str	r3, [r2, #96]	@ 0x60
 800100e:	4b5c      	ldr	r3, [pc, #368]	@ (8001180 <HAL_GPIO_Init+0x330>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800101a:	4a5a      	ldr	r2, [pc, #360]	@ (8001184 <HAL_GPIO_Init+0x334>)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3302      	adds	r3, #2
 8001022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001044:	d025      	beq.n	8001092 <HAL_GPIO_Init+0x242>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4f      	ldr	r2, [pc, #316]	@ (8001188 <HAL_GPIO_Init+0x338>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d01f      	beq.n	800108e <HAL_GPIO_Init+0x23e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4e      	ldr	r2, [pc, #312]	@ (800118c <HAL_GPIO_Init+0x33c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d019      	beq.n	800108a <HAL_GPIO_Init+0x23a>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4d      	ldr	r2, [pc, #308]	@ (8001190 <HAL_GPIO_Init+0x340>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x236>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4c      	ldr	r2, [pc, #304]	@ (8001194 <HAL_GPIO_Init+0x344>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00d      	beq.n	8001082 <HAL_GPIO_Init+0x232>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4b      	ldr	r2, [pc, #300]	@ (8001198 <HAL_GPIO_Init+0x348>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x22e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4a      	ldr	r2, [pc, #296]	@ (800119c <HAL_GPIO_Init+0x34c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_GPIO_Init+0x22a>
 8001076:	2306      	movs	r3, #6
 8001078:	e00c      	b.n	8001094 <HAL_GPIO_Init+0x244>
 800107a:	2307      	movs	r3, #7
 800107c:	e00a      	b.n	8001094 <HAL_GPIO_Init+0x244>
 800107e:	2305      	movs	r3, #5
 8001080:	e008      	b.n	8001094 <HAL_GPIO_Init+0x244>
 8001082:	2304      	movs	r3, #4
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x244>
 8001086:	2303      	movs	r3, #3
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x244>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x244>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x244>
 8001092:	2300      	movs	r3, #0
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	f002 0203 	and.w	r2, r2, #3
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a4:	4937      	ldr	r1, [pc, #220]	@ (8001184 <HAL_GPIO_Init+0x334>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010b2:	4b3b      	ldr	r3, [pc, #236]	@ (80011a0 <HAL_GPIO_Init+0x350>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010d6:	4a32      	ldr	r2, [pc, #200]	@ (80011a0 <HAL_GPIO_Init+0x350>)
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010dc:	4b30      	ldr	r3, [pc, #192]	@ (80011a0 <HAL_GPIO_Init+0x350>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001100:	4a27      	ldr	r2, [pc, #156]	@ (80011a0 <HAL_GPIO_Init+0x350>)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001106:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <HAL_GPIO_Init+0x350>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800112a:	4a1d      	ldr	r2, [pc, #116]	@ (80011a0 <HAL_GPIO_Init+0x350>)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <HAL_GPIO_Init+0x350>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001154:	4a12      	ldr	r2, [pc, #72]	@ (80011a0 <HAL_GPIO_Init+0x350>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa22 f303 	lsr.w	r3, r2, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	f47f ae78 	bne.w	8000e60 <HAL_GPIO_Init+0x10>
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	371c      	adds	r7, #28
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	40010000 	.word	0x40010000
 8001188:	48000400 	.word	0x48000400
 800118c:	48000800 	.word	0x48000800
 8001190:	48000c00 	.word	0x48000c00
 8001194:	48001000 	.word	0x48001000
 8001198:	48001400 	.word	0x48001400
 800119c:	48001800 	.word	0x48001800
 80011a0:	40010400 	.word	0x40010400

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011d8:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <HAL_PWREx_GetVoltageRange+0x18>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40007000 	.word	0x40007000

080011f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011fe:	d130      	bne.n	8001262 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001200:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800120c:	d038      	beq.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800120e:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001216:	4a1e      	ldr	r2, [pc, #120]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001218:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800121c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800121e:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2232      	movs	r2, #50	@ 0x32
 8001224:	fb02 f303 	mul.w	r3, r2, r3
 8001228:	4a1b      	ldr	r2, [pc, #108]	@ (8001298 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	0c9b      	lsrs	r3, r3, #18
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001234:	e002      	b.n	800123c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3b01      	subs	r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800123c:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001248:	d102      	bne.n	8001250 <HAL_PWREx_ControlVoltageScaling+0x60>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f2      	bne.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800125c:	d110      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e00f      	b.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800126a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800126e:	d007      	beq.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001270:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001278:	4a05      	ldr	r2, [pc, #20]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800127e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40007000 	.word	0x40007000
 8001294:	20000000 	.word	0x20000000
 8001298:	431bde83 	.word	0x431bde83

0800129c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e3ca      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ae:	4b97      	ldr	r3, [pc, #604]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012b8:	4b94      	ldr	r3, [pc, #592]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 80e4 	beq.w	8001498 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <HAL_RCC_OscConfig+0x4a>
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	f040 808b 	bne.w	80013f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	f040 8087 	bne.w	80013f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e6:	4b89      	ldr	r3, [pc, #548]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d005      	beq.n	80012fe <HAL_RCC_OscConfig+0x62>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e3a2      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1a      	ldr	r2, [r3, #32]
 8001302:	4b82      	ldr	r3, [pc, #520]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d004      	beq.n	8001318 <HAL_RCC_OscConfig+0x7c>
 800130e:	4b7f      	ldr	r3, [pc, #508]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001316:	e005      	b.n	8001324 <HAL_RCC_OscConfig+0x88>
 8001318:	4b7c      	ldr	r3, [pc, #496]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800131a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001324:	4293      	cmp	r3, r2
 8001326:	d223      	bcs.n	8001370 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fd55 	bl	8001ddc <RCC_SetFlashLatencyFromMSIRange>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e383      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800133c:	4b73      	ldr	r3, [pc, #460]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a72      	ldr	r2, [pc, #456]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001342:	f043 0308 	orr.w	r3, r3, #8
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b70      	ldr	r3, [pc, #448]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	496d      	ldr	r1, [pc, #436]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800135a:	4b6c      	ldr	r3, [pc, #432]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	4968      	ldr	r1, [pc, #416]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800136a:	4313      	orrs	r3, r2
 800136c:	604b      	str	r3, [r1, #4]
 800136e:	e025      	b.n	80013bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001370:	4b66      	ldr	r3, [pc, #408]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a65      	ldr	r2, [pc, #404]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001376:	f043 0308 	orr.w	r3, r3, #8
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b63      	ldr	r3, [pc, #396]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4960      	ldr	r1, [pc, #384]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800138e:	4b5f      	ldr	r3, [pc, #380]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	495b      	ldr	r1, [pc, #364]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d109      	bne.n	80013bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fd15 	bl	8001ddc <RCC_SetFlashLatencyFromMSIRange>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e343      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013bc:	f000 fc4a 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b52      	ldr	r3, [pc, #328]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	4950      	ldr	r1, [pc, #320]	@ (8001510 <HAL_RCC_OscConfig+0x274>)
 80013ce:	5ccb      	ldrb	r3, [r1, r3]
 80013d0:	f003 031f 	and.w	r3, r3, #31
 80013d4:	fa22 f303 	lsr.w	r3, r2, r3
 80013d8:	4a4e      	ldr	r2, [pc, #312]	@ (8001514 <HAL_RCC_OscConfig+0x278>)
 80013da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001518 <HAL_RCC_OscConfig+0x27c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fbf3 	bl	8000bcc <HAL_InitTick>
 80013e6:	4603      	mov	r3, r0
 80013e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d052      	beq.n	8001496 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	e327      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d032      	beq.n	8001462 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013fc:	4b43      	ldr	r3, [pc, #268]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a42      	ldr	r2, [pc, #264]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001408:	f7ff fc30 	bl	8000c6c <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001410:	f7ff fc2c 	bl	8000c6c <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e310      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001422:	4b3a      	ldr	r3, [pc, #232]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800142e:	4b37      	ldr	r3, [pc, #220]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a36      	ldr	r2, [pc, #216]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b34      	ldr	r3, [pc, #208]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4931      	ldr	r1, [pc, #196]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001448:	4313      	orrs	r3, r2
 800144a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800144c:	4b2f      	ldr	r3, [pc, #188]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	492c      	ldr	r1, [pc, #176]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]
 8001460:	e01a      	b.n	8001498 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001462:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a29      	ldr	r2, [pc, #164]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001468:	f023 0301 	bic.w	r3, r3, #1
 800146c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800146e:	f7ff fbfd 	bl	8000c6c <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001476:	f7ff fbf9 	bl	8000c6c <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e2dd      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001488:	4b20      	ldr	r3, [pc, #128]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x1da>
 8001494:	e000      	b.n	8001498 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001496:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d074      	beq.n	800158e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d005      	beq.n	80014b6 <HAL_RCC_OscConfig+0x21a>
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d10e      	bne.n	80014ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d10b      	bne.n	80014ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d064      	beq.n	800158c <HAL_RCC_OscConfig+0x2f0>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d160      	bne.n	800158c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e2ba      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d6:	d106      	bne.n	80014e6 <HAL_RCC_OscConfig+0x24a>
 80014d8:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80014de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	e026      	b.n	8001534 <HAL_RCC_OscConfig+0x298>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014ee:	d115      	bne.n	800151c <HAL_RCC_OscConfig+0x280>
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a05      	ldr	r2, [pc, #20]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80014f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a02      	ldr	r2, [pc, #8]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e014      	b.n	8001534 <HAL_RCC_OscConfig+0x298>
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	08005148 	.word	0x08005148
 8001514:	20000000 	.word	0x20000000
 8001518:	20000004 	.word	0x20000004
 800151c:	4ba0      	ldr	r3, [pc, #640]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a9f      	ldr	r2, [pc, #636]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b9d      	ldr	r3, [pc, #628]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a9c      	ldr	r2, [pc, #624]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fb96 	bl	8000c6c <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fb92 	bl	8000c6c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	@ 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e276      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001556:	4b92      	ldr	r3, [pc, #584]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x2a8>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fb82 	bl	8000c6c <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fb7e 	bl	8000c6c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	@ 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e262      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800157e:	4b88      	ldr	r3, [pc, #544]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x2d0>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d060      	beq.n	800165c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b04      	cmp	r3, #4
 800159e:	d005      	beq.n	80015ac <HAL_RCC_OscConfig+0x310>
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2b0c      	cmp	r3, #12
 80015a4:	d119      	bne.n	80015da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d116      	bne.n	80015da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ac:	4b7c      	ldr	r3, [pc, #496]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_OscConfig+0x328>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e23f      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c4:	4b76      	ldr	r3, [pc, #472]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	061b      	lsls	r3, r3, #24
 80015d2:	4973      	ldr	r1, [pc, #460]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d8:	e040      	b.n	800165c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d023      	beq.n	800162a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e2:	4b6f      	ldr	r3, [pc, #444]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a6e      	ldr	r2, [pc, #440]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff fb3d 	bl	8000c6c <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fb39 	bl	8000c6c <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e21d      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001608:	4b65      	ldr	r3, [pc, #404]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b62      	ldr	r3, [pc, #392]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	061b      	lsls	r3, r3, #24
 8001622:	495f      	ldr	r1, [pc, #380]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
 8001628:	e018      	b.n	800165c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162a:	4b5d      	ldr	r3, [pc, #372]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a5c      	ldr	r2, [pc, #368]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fb19 	bl	8000c6c <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fb15 	bl	8000c6c <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e1f9      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001650:	4b53      	ldr	r3, [pc, #332]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f0      	bne.n	800163e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d03c      	beq.n	80016e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01c      	beq.n	80016aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001670:	4b4b      	ldr	r3, [pc, #300]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001676:	4a4a      	ldr	r2, [pc, #296]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff faf4 	bl	8000c6c <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff faf0 	bl	8000c6c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e1d4      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800169a:	4b41      	ldr	r3, [pc, #260]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800169c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0ef      	beq.n	8001688 <HAL_RCC_OscConfig+0x3ec>
 80016a8:	e01b      	b.n	80016e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016aa:	4b3d      	ldr	r3, [pc, #244]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b0:	4a3b      	ldr	r2, [pc, #236]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff fad7 	bl	8000c6c <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c2:	f7ff fad3 	bl	8000c6c <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e1b7      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d4:	4b32      	ldr	r3, [pc, #200]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ef      	bne.n	80016c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 80a6 	beq.w	800183c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016f4:	4b2a      	ldr	r3, [pc, #168]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10d      	bne.n	800171c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	4b27      	ldr	r3, [pc, #156]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001704:	4a26      	ldr	r2, [pc, #152]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800170a:	6593      	str	r3, [r2, #88]	@ 0x58
 800170c:	4b24      	ldr	r3, [pc, #144]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001718:	2301      	movs	r3, #1
 800171a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171c:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <HAL_RCC_OscConfig+0x508>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d118      	bne.n	800175a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001728:	4b1e      	ldr	r3, [pc, #120]	@ (80017a4 <HAL_RCC_OscConfig+0x508>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1d      	ldr	r2, [pc, #116]	@ (80017a4 <HAL_RCC_OscConfig+0x508>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001732:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001734:	f7ff fa9a 	bl	8000c6c <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173c:	f7ff fa96 	bl	8000c6c <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e17a      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174e:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <HAL_RCC_OscConfig+0x508>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d108      	bne.n	8001774 <HAL_RCC_OscConfig+0x4d8>
 8001762:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001768:	4a0d      	ldr	r2, [pc, #52]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001772:	e029      	b.n	80017c8 <HAL_RCC_OscConfig+0x52c>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b05      	cmp	r3, #5
 800177a:	d115      	bne.n	80017a8 <HAL_RCC_OscConfig+0x50c>
 800177c:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001782:	4a07      	ldr	r2, [pc, #28]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001792:	4a03      	ldr	r2, [pc, #12]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800179c:	e014      	b.n	80017c8 <HAL_RCC_OscConfig+0x52c>
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40007000 	.word	0x40007000
 80017a8:	4b9c      	ldr	r3, [pc, #624]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ae:	4a9b      	ldr	r2, [pc, #620]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017b8:	4b98      	ldr	r3, [pc, #608]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017be:	4a97      	ldr	r2, [pc, #604]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80017c0:	f023 0304 	bic.w	r3, r3, #4
 80017c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d016      	beq.n	80017fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fa4c 	bl	8000c6c <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff fa48 	bl	8000c6c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e12a      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ee:	4b8b      	ldr	r3, [pc, #556]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80017f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0ed      	beq.n	80017d8 <HAL_RCC_OscConfig+0x53c>
 80017fc:	e015      	b.n	800182a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff fa35 	bl	8000c6c <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001804:	e00a      	b.n	800181c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff fa31 	bl	8000c6c <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e113      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800181c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ed      	bne.n	8001806 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800182a:	7ffb      	ldrb	r3, [r7, #31]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4b7a      	ldr	r3, [pc, #488]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001834:	4a79      	ldr	r2, [pc, #484]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 8001836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800183a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80fe 	beq.w	8001a42 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184a:	2b02      	cmp	r3, #2
 800184c:	f040 80d0 	bne.w	80019f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001850:	4b72      	ldr	r3, [pc, #456]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 0203 	and.w	r2, r3, #3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001860:	429a      	cmp	r2, r3
 8001862:	d130      	bne.n	80018c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	3b01      	subs	r3, #1
 8001870:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d127      	bne.n	80018c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001880:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001882:	429a      	cmp	r2, r3
 8001884:	d11f      	bne.n	80018c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001890:	2a07      	cmp	r2, #7
 8001892:	bf14      	ite	ne
 8001894:	2201      	movne	r2, #1
 8001896:	2200      	moveq	r2, #0
 8001898:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800189a:	4293      	cmp	r3, r2
 800189c:	d113      	bne.n	80018c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	3b01      	subs	r3, #1
 80018ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	085b      	lsrs	r3, r3, #1
 80018be:	3b01      	subs	r3, #1
 80018c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d06e      	beq.n	80019a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	2b0c      	cmp	r3, #12
 80018ca:	d069      	beq.n	80019a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018cc:	4b53      	ldr	r3, [pc, #332]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018d8:	4b50      	ldr	r3, [pc, #320]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0ad      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018e8:	4b4c      	ldr	r3, [pc, #304]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a4b      	ldr	r2, [pc, #300]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80018ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018f4:	f7ff f9ba 	bl	8000c6c <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff f9b6 	bl	8000c6c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e09a      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190e:	4b43      	ldr	r3, [pc, #268]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800191a:	4b40      	ldr	r3, [pc, #256]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	4b40      	ldr	r3, [pc, #256]	@ (8001a20 <HAL_RCC_OscConfig+0x784>)
 8001920:	4013      	ands	r3, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800192a:	3a01      	subs	r2, #1
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	4311      	orrs	r1, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001934:	0212      	lsls	r2, r2, #8
 8001936:	4311      	orrs	r1, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800193c:	0852      	lsrs	r2, r2, #1
 800193e:	3a01      	subs	r2, #1
 8001940:	0552      	lsls	r2, r2, #21
 8001942:	4311      	orrs	r1, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001948:	0852      	lsrs	r2, r2, #1
 800194a:	3a01      	subs	r2, #1
 800194c:	0652      	lsls	r2, r2, #25
 800194e:	4311      	orrs	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001954:	0912      	lsrs	r2, r2, #4
 8001956:	0452      	lsls	r2, r2, #17
 8001958:	430a      	orrs	r2, r1
 800195a:	4930      	ldr	r1, [pc, #192]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 800195c:	4313      	orrs	r3, r2
 800195e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001960:	4b2e      	ldr	r3, [pc, #184]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a2d      	ldr	r2, [pc, #180]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 8001966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800196a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800196c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4a2a      	ldr	r2, [pc, #168]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 8001972:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001976:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001978:	f7ff f978 	bl	8000c6c <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff f974 	bl	8000c6c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e058      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001992:	4b22      	ldr	r3, [pc, #136]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800199e:	e050      	b.n	8001a42 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e04f      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d148      	bne.n	8001a42 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019b0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a19      	ldr	r2, [pc, #100]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019bc:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4a16      	ldr	r2, [pc, #88]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019c8:	f7ff f950 	bl	8000c6c <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff f94c 	bl	8000c6c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e030      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x734>
 80019ee:	e028      	b.n	8001a42 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2b0c      	cmp	r3, #12
 80019f4:	d023      	beq.n	8001a3e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a08      	ldr	r2, [pc, #32]	@ (8001a1c <HAL_RCC_OscConfig+0x780>)
 80019fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a02:	f7ff f933 	bl	8000c6c <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a08:	e00c      	b.n	8001a24 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7ff f92f 	bl	8000c6c <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d905      	bls.n	8001a24 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e013      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ec      	bne.n	8001a0a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a30:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	4905      	ldr	r1, [pc, #20]	@ (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_RCC_OscConfig+0x7b4>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
 8001a3c:	e001      	b.n	8001a42 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	feeefffc 	.word	0xfeeefffc

08001a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0e7      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a68:	4b75      	ldr	r3, [pc, #468]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d910      	bls.n	8001a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b72      	ldr	r3, [pc, #456]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 0207 	bic.w	r2, r3, #7
 8001a7e:	4970      	ldr	r1, [pc, #448]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b6e      	ldr	r3, [pc, #440]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0cf      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d010      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	4b66      	ldr	r3, [pc, #408]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d908      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b63      	ldr	r3, [pc, #396]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4960      	ldr	r1, [pc, #384]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d04c      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ada:	4b5a      	ldr	r3, [pc, #360]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d121      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0a6      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af2:	4b54      	ldr	r3, [pc, #336]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d115      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e09a      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b0a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e08e      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e086      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b2a:	4b46      	ldr	r3, [pc, #280]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f023 0203 	bic.w	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4943      	ldr	r1, [pc, #268]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b3c:	f7ff f896 	bl	8000c6c <HAL_GetTick>
 8001b40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b44:	f7ff f892 	bl	8000c6c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e06e      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 020c 	and.w	r2, r3, #12
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d1eb      	bne.n	8001b44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d010      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	4b31      	ldr	r3, [pc, #196]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d208      	bcs.n	8001b9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b88:	4b2e      	ldr	r3, [pc, #184]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	492b      	ldr	r1, [pc, #172]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b9a:	4b29      	ldr	r3, [pc, #164]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d210      	bcs.n	8001bca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba8:	4b25      	ldr	r3, [pc, #148]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 0207 	bic.w	r2, r3, #7
 8001bb0:	4923      	ldr	r1, [pc, #140]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb8:	4b21      	ldr	r3, [pc, #132]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e036      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d008      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	4918      	ldr	r1, [pc, #96]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d009      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bf4:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4910      	ldr	r1, [pc, #64]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c08:	f000 f824 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	490b      	ldr	r1, [pc, #44]	@ (8001c48 <HAL_RCC_ClockConfig+0x1f4>)
 8001c1a:	5ccb      	ldrb	r3, [r1, r3]
 8001c1c:	f003 031f 	and.w	r3, r3, #31
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
 8001c24:	4a09      	ldr	r2, [pc, #36]	@ (8001c4c <HAL_RCC_ClockConfig+0x1f8>)
 8001c26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c28:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <HAL_RCC_ClockConfig+0x1fc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe ffcd 	bl	8000bcc <HAL_InitTick>
 8001c32:	4603      	mov	r3, r0
 8001c34:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c36:	7afb      	ldrb	r3, [r7, #11]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40022000 	.word	0x40022000
 8001c44:	40021000 	.word	0x40021000
 8001c48:	08005148 	.word	0x08005148
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	@ 0x24
 8001c58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c62:	4b3e      	ldr	r3, [pc, #248]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x34>
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d121      	bne.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d11e      	bne.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c88:	4b34      	ldr	r3, [pc, #208]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c94:	4b31      	ldr	r3, [pc, #196]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	e005      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10d      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d102      	bne.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ccc:	4b25      	ldr	r3, [pc, #148]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	e004      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cd8:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	2b0c      	cmp	r3, #12
 8001ce0:	d134      	bne.n	8001d4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d003      	beq.n	8001cfa <HAL_RCC_GetSysClockFreq+0xa6>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d003      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0xac>
 8001cf8:	e005      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cfc:	617b      	str	r3, [r7, #20]
      break;
 8001cfe:	e005      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d00:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d02:	617b      	str	r3, [r7, #20]
      break;
 8001d04:	e002      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	617b      	str	r3, [r7, #20]
      break;
 8001d0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	3301      	adds	r3, #1
 8001d18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	fb03 f202 	mul.w	r2, r3, r2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	0e5b      	lsrs	r3, r3, #25
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d4c:	69bb      	ldr	r3, [r7, #24]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3724      	adds	r7, #36	@ 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	08005160 	.word	0x08005160
 8001d64:	00f42400 	.word	0x00f42400
 8001d68:	007a1200 	.word	0x007a1200

08001d6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d70:	4b03      	ldr	r3, [pc, #12]	@ (8001d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000000 	.word	0x20000000

08001d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d88:	f7ff fff0 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4904      	ldr	r1, [pc, #16]	@ (8001dac <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08005158 	.word	0x08005158

08001db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001db4:	f7ff ffda 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	0adb      	lsrs	r3, r3, #11
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	4904      	ldr	r1, [pc, #16]	@ (8001dd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dc6:	5ccb      	ldrb	r3, [r1, r3]
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	08005158 	.word	0x08005158

08001ddc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001de8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001df4:	f7ff f9ee 	bl	80011d4 <HAL_PWREx_GetVoltageRange>
 8001df8:	6178      	str	r0, [r7, #20]
 8001dfa:	e014      	b.n	8001e26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dfc:	4b25      	ldr	r3, [pc, #148]	@ (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	4a24      	ldr	r2, [pc, #144]	@ (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e08:	4b22      	ldr	r3, [pc, #136]	@ (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e14:	f7ff f9de 	bl	80011d4 <HAL_PWREx_GetVoltageRange>
 8001e18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1e:	4a1d      	ldr	r2, [pc, #116]	@ (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e2c:	d10b      	bne.n	8001e46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b80      	cmp	r3, #128	@ 0x80
 8001e32:	d919      	bls.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e38:	d902      	bls.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	e013      	b.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e40:	2301      	movs	r3, #1
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	e010      	b.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b80      	cmp	r3, #128	@ 0x80
 8001e4a:	d902      	bls.n	8001e52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	e00a      	b.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b80      	cmp	r3, #128	@ 0x80
 8001e56:	d102      	bne.n	8001e5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e58:	2302      	movs	r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e004      	b.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b70      	cmp	r3, #112	@ 0x70
 8001e62:	d101      	bne.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e64:	2301      	movs	r3, #1
 8001e66:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 0207 	bic.w	r2, r3, #7
 8001e70:	4909      	ldr	r1, [pc, #36]	@ (8001e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e78:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d001      	beq.n	8001e8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40022000 	.word	0x40022000

08001e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d041      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ebc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ec0:	d02a      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ec2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ec6:	d824      	bhi.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ec8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ecc:	d008      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ece:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ed2:	d81e      	bhi.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00a      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ed8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001edc:	d010      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ede:	e018      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ee0:	4b86      	ldr	r3, [pc, #536]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4a85      	ldr	r2, [pc, #532]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eec:	e015      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 fabb 	bl	8002470 <RCCEx_PLLSAI1_Config>
 8001efa:	4603      	mov	r3, r0
 8001efc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001efe:	e00c      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3320      	adds	r3, #32
 8001f04:	2100      	movs	r1, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fba6 	bl	8002658 <RCCEx_PLLSAI2_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f10:	e003      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	74fb      	strb	r3, [r7, #19]
      break;
 8001f16:	e000      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f1a:	7cfb      	ldrb	r3, [r7, #19]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10b      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f20:	4b76      	ldr	r3, [pc, #472]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f2e:	4973      	ldr	r1, [pc, #460]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f36:	e001      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f38:	7cfb      	ldrb	r3, [r7, #19]
 8001f3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d041      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f4c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f50:	d02a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f56:	d824      	bhi.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f5c:	d008      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f62:	d81e      	bhi.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00a      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f6c:	d010      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f6e:	e018      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f70:	4b62      	ldr	r3, [pc, #392]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4a61      	ldr	r2, [pc, #388]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f7c:	e015      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3304      	adds	r3, #4
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fa73 	bl	8002470 <RCCEx_PLLSAI1_Config>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f8e:	e00c      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3320      	adds	r3, #32
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fb5e 	bl	8002658 <RCCEx_PLLSAI2_Config>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fa0:	e003      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fa6:	e000      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001faa:	7cfb      	ldrb	r3, [r7, #19]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10b      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fb0:	4b52      	ldr	r3, [pc, #328]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fbe:	494f      	ldr	r1, [pc, #316]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fc6:	e001      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fc8:	7cfb      	ldrb	r3, [r7, #19]
 8001fca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80a0 	beq.w	800211a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fde:	4b47      	ldr	r3, [pc, #284]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00d      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff4:	4b41      	ldr	r3, [pc, #260]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff8:	4a40      	ldr	r2, [pc, #256]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ffe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002000:	4b3e      	ldr	r3, [pc, #248]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200c:	2301      	movs	r3, #1
 800200e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002010:	4b3b      	ldr	r3, [pc, #236]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a3a      	ldr	r2, [pc, #232]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800201c:	f7fe fe26 	bl	8000c6c <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002022:	e009      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002024:	f7fe fe22 	bl	8000c6c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d902      	bls.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	74fb      	strb	r3, [r7, #19]
        break;
 8002036:	e005      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002038:	4b31      	ldr	r3, [pc, #196]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0ef      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002044:	7cfb      	ldrb	r3, [r7, #19]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d15c      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800204a:	4b2c      	ldr	r3, [pc, #176]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002050:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002054:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01f      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	429a      	cmp	r2, r3
 8002066:	d019      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002068:	4b24      	ldr	r3, [pc, #144]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002072:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002074:	4b21      	ldr	r3, [pc, #132]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207a:	4a20      	ldr	r2, [pc, #128]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002084:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208a:	4a1c      	ldr	r2, [pc, #112]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002094:	4a19      	ldr	r2, [pc, #100]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d016      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7fe fde1 	bl	8000c6c <HAL_GetTick>
 80020aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ac:	e00b      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7fe fddd 	bl	8000c6c <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d902      	bls.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	74fb      	strb	r3, [r7, #19]
            break;
 80020c4:	e006      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c6:	4b0d      	ldr	r3, [pc, #52]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ec      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020d4:	7cfb      	ldrb	r3, [r7, #19]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020da:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020ea:	4904      	ldr	r1, [pc, #16]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020f2:	e009      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	74bb      	strb	r3, [r7, #18]
 80020f8:	e006      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002108:	7c7b      	ldrb	r3, [r7, #17]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d105      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210e:	4b9e      	ldr	r3, [pc, #632]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	4a9d      	ldr	r2, [pc, #628]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002118:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002126:	4b98      	ldr	r3, [pc, #608]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212c:	f023 0203 	bic.w	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002134:	4994      	ldr	r1, [pc, #592]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002148:	4b8f      	ldr	r3, [pc, #572]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214e:	f023 020c 	bic.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002156:	498c      	ldr	r1, [pc, #560]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800216a:	4b87      	ldr	r3, [pc, #540]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002170:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002178:	4983      	ldr	r1, [pc, #524]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800218c:	4b7e      	ldr	r3, [pc, #504]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002192:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219a:	497b      	ldr	r1, [pc, #492]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ae:	4b76      	ldr	r3, [pc, #472]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021bc:	4972      	ldr	r1, [pc, #456]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021d0:	4b6d      	ldr	r3, [pc, #436]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021de:	496a      	ldr	r1, [pc, #424]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021f2:	4b65      	ldr	r3, [pc, #404]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002200:	4961      	ldr	r1, [pc, #388]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002214:	4b5c      	ldr	r3, [pc, #368]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002222:	4959      	ldr	r1, [pc, #356]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002236:	4b54      	ldr	r3, [pc, #336]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002244:	4950      	ldr	r1, [pc, #320]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002258:	4b4b      	ldr	r3, [pc, #300]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002266:	4948      	ldr	r1, [pc, #288]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800227a:	4b43      	ldr	r3, [pc, #268]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002280:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002288:	493f      	ldr	r1, [pc, #252]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d028      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800229c:	4b3a      	ldr	r3, [pc, #232]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022aa:	4937      	ldr	r1, [pc, #220]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ba:	d106      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022bc:	4b32      	ldr	r3, [pc, #200]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a31      	ldr	r2, [pc, #196]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022c6:	60d3      	str	r3, [r2, #12]
 80022c8:	e011      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022d2:	d10c      	bne.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3304      	adds	r3, #4
 80022d8:	2101      	movs	r1, #1
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f8c8 	bl	8002470 <RCCEx_PLLSAI1_Config>
 80022e0:	4603      	mov	r3, r0
 80022e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022ea:	7cfb      	ldrb	r3, [r7, #19]
 80022ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d028      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022fa:	4b23      	ldr	r3, [pc, #140]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002300:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002308:	491f      	ldr	r1, [pc, #124]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002314:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002318:	d106      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800231a:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	4a1a      	ldr	r2, [pc, #104]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002324:	60d3      	str	r3, [r2, #12]
 8002326:	e011      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002330:	d10c      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	2101      	movs	r1, #1
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f899 	bl	8002470 <RCCEx_PLLSAI1_Config>
 800233e:	4603      	mov	r3, r0
 8002340:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002342:	7cfb      	ldrb	r3, [r7, #19]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002348:	7cfb      	ldrb	r3, [r7, #19]
 800234a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d02b      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002358:	4b0b      	ldr	r3, [pc, #44]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002366:	4908      	ldr	r1, [pc, #32]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002372:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002376:	d109      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002378:	4b03      	ldr	r3, [pc, #12]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4a02      	ldr	r2, [pc, #8]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002382:	60d3      	str	r3, [r2, #12]
 8002384:	e014      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002390:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002394:	d10c      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3304      	adds	r3, #4
 800239a:	2101      	movs	r1, #1
 800239c:	4618      	mov	r0, r3
 800239e:	f000 f867 	bl	8002470 <RCCEx_PLLSAI1_Config>
 80023a2:	4603      	mov	r3, r0
 80023a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d02f      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023bc:	4b2b      	ldr	r3, [pc, #172]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023ca:	4928      	ldr	r1, [pc, #160]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023da:	d10d      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	2102      	movs	r1, #2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f844 	bl	8002470 <RCCEx_PLLSAI1_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d014      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	74bb      	strb	r3, [r7, #18]
 80023f6:	e011      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002400:	d10c      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3320      	adds	r3, #32
 8002406:	2102      	movs	r1, #2
 8002408:	4618      	mov	r0, r3
 800240a:	f000 f925 	bl	8002658 <RCCEx_PLLSAI2_Config>
 800240e:	4603      	mov	r3, r0
 8002410:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002412:	7cfb      	ldrb	r3, [r7, #19]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002428:	4b10      	ldr	r3, [pc, #64]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002436:	490d      	ldr	r1, [pc, #52]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800244a:	4b08      	ldr	r3, [pc, #32]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002450:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800245a:	4904      	ldr	r1, [pc, #16]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002462:	7cbb      	ldrb	r3, [r7, #18]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000

08002470 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800247e:	4b75      	ldr	r3, [pc, #468]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d018      	beq.n	80024bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800248a:	4b72      	ldr	r3, [pc, #456]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f003 0203 	and.w	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d10d      	bne.n	80024b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
       ||
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
       ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d047      	beq.n	8002546 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	e044      	b.n	8002546 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d018      	beq.n	80024f6 <RCCEx_PLLSAI1_Config+0x86>
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d825      	bhi.n	8002514 <RCCEx_PLLSAI1_Config+0xa4>
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d002      	beq.n	80024d2 <RCCEx_PLLSAI1_Config+0x62>
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d009      	beq.n	80024e4 <RCCEx_PLLSAI1_Config+0x74>
 80024d0:	e020      	b.n	8002514 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024d2:	4b60      	ldr	r3, [pc, #384]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d11d      	bne.n	800251a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e2:	e01a      	b.n	800251a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024e4:	4b5b      	ldr	r3, [pc, #364]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d116      	bne.n	800251e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f4:	e013      	b.n	800251e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024f6:	4b57      	ldr	r3, [pc, #348]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10f      	bne.n	8002522 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002502:	4b54      	ldr	r3, [pc, #336]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d109      	bne.n	8002522 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002512:	e006      	b.n	8002522 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
      break;
 8002518:	e004      	b.n	8002524 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800251a:	bf00      	nop
 800251c:	e002      	b.n	8002524 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800251e:	bf00      	nop
 8002520:	e000      	b.n	8002524 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002522:	bf00      	nop
    }

    if(status == HAL_OK)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10d      	bne.n	8002546 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800252a:	4b4a      	ldr	r3, [pc, #296]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6819      	ldr	r1, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	430b      	orrs	r3, r1
 8002540:	4944      	ldr	r1, [pc, #272]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d17d      	bne.n	8002648 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800254c:	4b41      	ldr	r3, [pc, #260]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a40      	ldr	r2, [pc, #256]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002552:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002558:	f7fe fb88 	bl	8000c6c <HAL_GetTick>
 800255c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800255e:	e009      	b.n	8002574 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002560:	f7fe fb84 	bl	8000c6c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d902      	bls.n	8002574 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	73fb      	strb	r3, [r7, #15]
        break;
 8002572:	e005      	b.n	8002580 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002574:	4b37      	ldr	r3, [pc, #220]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ef      	bne.n	8002560 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d160      	bne.n	8002648 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d111      	bne.n	80025b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800258c:	4b31      	ldr	r3, [pc, #196]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6892      	ldr	r2, [r2, #8]
 800259c:	0211      	lsls	r1, r2, #8
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68d2      	ldr	r2, [r2, #12]
 80025a2:	0912      	lsrs	r2, r2, #4
 80025a4:	0452      	lsls	r2, r2, #17
 80025a6:	430a      	orrs	r2, r1
 80025a8:	492a      	ldr	r1, [pc, #168]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	610b      	str	r3, [r1, #16]
 80025ae:	e027      	b.n	8002600 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d112      	bne.n	80025dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025b6:	4b27      	ldr	r3, [pc, #156]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80025be:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6892      	ldr	r2, [r2, #8]
 80025c6:	0211      	lsls	r1, r2, #8
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6912      	ldr	r2, [r2, #16]
 80025cc:	0852      	lsrs	r2, r2, #1
 80025ce:	3a01      	subs	r2, #1
 80025d0:	0552      	lsls	r2, r2, #21
 80025d2:	430a      	orrs	r2, r1
 80025d4:	491f      	ldr	r1, [pc, #124]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	610b      	str	r3, [r1, #16]
 80025da:	e011      	b.n	8002600 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80025e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6892      	ldr	r2, [r2, #8]
 80025ec:	0211      	lsls	r1, r2, #8
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6952      	ldr	r2, [r2, #20]
 80025f2:	0852      	lsrs	r2, r2, #1
 80025f4:	3a01      	subs	r2, #1
 80025f6:	0652      	lsls	r2, r2, #25
 80025f8:	430a      	orrs	r2, r1
 80025fa:	4916      	ldr	r1, [pc, #88]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002600:	4b14      	ldr	r3, [pc, #80]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a13      	ldr	r2, [pc, #76]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002606:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800260a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe fb2e 	bl	8000c6c <HAL_GetTick>
 8002610:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002612:	e009      	b.n	8002628 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002614:	f7fe fb2a 	bl	8000c6c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d902      	bls.n	8002628 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	73fb      	strb	r3, [r7, #15]
          break;
 8002626:	e005      	b.n	8002634 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002628:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ef      	beq.n	8002614 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800263a:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	4904      	ldr	r1, [pc, #16]	@ (8002654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000

08002658 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002666:	4b6a      	ldr	r3, [pc, #424]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d018      	beq.n	80026a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002672:	4b67      	ldr	r3, [pc, #412]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0203 	and.w	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d10d      	bne.n	800269e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
       ||
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800268a:	4b61      	ldr	r3, [pc, #388]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
       ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d047      	beq.n	800272e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
 80026a2:	e044      	b.n	800272e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d018      	beq.n	80026de <RCCEx_PLLSAI2_Config+0x86>
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d825      	bhi.n	80026fc <RCCEx_PLLSAI2_Config+0xa4>
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d002      	beq.n	80026ba <RCCEx_PLLSAI2_Config+0x62>
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d009      	beq.n	80026cc <RCCEx_PLLSAI2_Config+0x74>
 80026b8:	e020      	b.n	80026fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ba:	4b55      	ldr	r3, [pc, #340]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d11d      	bne.n	8002702 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ca:	e01a      	b.n	8002702 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026cc:	4b50      	ldr	r3, [pc, #320]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d116      	bne.n	8002706 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026dc:	e013      	b.n	8002706 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026de:	4b4c      	ldr	r3, [pc, #304]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10f      	bne.n	800270a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026ea:	4b49      	ldr	r3, [pc, #292]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026fa:	e006      	b.n	800270a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002700:	e004      	b.n	800270c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002702:	bf00      	nop
 8002704:	e002      	b.n	800270c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002706:	bf00      	nop
 8002708:	e000      	b.n	800270c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800270a:	bf00      	nop
    }

    if(status == HAL_OK)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10d      	bne.n	800272e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002712:	4b3f      	ldr	r3, [pc, #252]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6819      	ldr	r1, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	430b      	orrs	r3, r1
 8002728:	4939      	ldr	r1, [pc, #228]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272a:	4313      	orrs	r3, r2
 800272c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d167      	bne.n	8002804 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002734:	4b36      	ldr	r3, [pc, #216]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a35      	ldr	r2, [pc, #212]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800273e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002740:	f7fe fa94 	bl	8000c6c <HAL_GetTick>
 8002744:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002746:	e009      	b.n	800275c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002748:	f7fe fa90 	bl	8000c6c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d902      	bls.n	800275c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	73fb      	strb	r3, [r7, #15]
        break;
 800275a:	e005      	b.n	8002768 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800275c:	4b2c      	ldr	r3, [pc, #176]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ef      	bne.n	8002748 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d14a      	bne.n	8002804 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d111      	bne.n	8002798 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002774:	4b26      	ldr	r3, [pc, #152]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800277c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6892      	ldr	r2, [r2, #8]
 8002784:	0211      	lsls	r1, r2, #8
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68d2      	ldr	r2, [r2, #12]
 800278a:	0912      	lsrs	r2, r2, #4
 800278c:	0452      	lsls	r2, r2, #17
 800278e:	430a      	orrs	r2, r1
 8002790:	491f      	ldr	r1, [pc, #124]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002792:	4313      	orrs	r3, r2
 8002794:	614b      	str	r3, [r1, #20]
 8002796:	e011      	b.n	80027bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002798:	4b1d      	ldr	r3, [pc, #116]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6892      	ldr	r2, [r2, #8]
 80027a8:	0211      	lsls	r1, r2, #8
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6912      	ldr	r2, [r2, #16]
 80027ae:	0852      	lsrs	r2, r2, #1
 80027b0:	3a01      	subs	r2, #1
 80027b2:	0652      	lsls	r2, r2, #25
 80027b4:	430a      	orrs	r2, r1
 80027b6:	4916      	ldr	r1, [pc, #88]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027bc:	4b14      	ldr	r3, [pc, #80]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a13      	ldr	r2, [pc, #76]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7fe fa50 	bl	8000c6c <HAL_GetTick>
 80027cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027ce:	e009      	b.n	80027e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027d0:	f7fe fa4c 	bl	8000c6c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d902      	bls.n	80027e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	73fb      	strb	r3, [r7, #15]
          break;
 80027e2:	e005      	b.n	80027f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ef      	beq.n	80027d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027f6:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	4904      	ldr	r1, [pc, #16]	@ (8002810 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002800:	4313      	orrs	r3, r2
 8002802:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000

08002814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e040      	b.n	80028a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fe f8b2 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2224      	movs	r2, #36	@ 0x24
 8002840:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fae0 	bl	8002e20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f825 	bl	80028b0 <UART_SetConfig>
 8002866:	4603      	mov	r3, r0
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e01b      	b.n	80028a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800287e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800288e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fb5f 	bl	8002f64 <UART_CheckIdleState>
 80028a6:	4603      	mov	r3, r0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b4:	b08a      	sub	sp, #40	@ 0x28
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4ba4      	ldr	r3, [pc, #656]	@ (8002b70 <UART_SetConfig+0x2c0>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028e8:	430b      	orrs	r3, r1
 80028ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a99      	ldr	r2, [pc, #612]	@ (8002b74 <UART_SetConfig+0x2c4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d004      	beq.n	800291c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002918:	4313      	orrs	r3, r2
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800292c:	430a      	orrs	r2, r1
 800292e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a90      	ldr	r2, [pc, #576]	@ (8002b78 <UART_SetConfig+0x2c8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d126      	bne.n	8002988 <UART_SetConfig+0xd8>
 800293a:	4b90      	ldr	r3, [pc, #576]	@ (8002b7c <UART_SetConfig+0x2cc>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b03      	cmp	r3, #3
 8002946:	d81b      	bhi.n	8002980 <UART_SetConfig+0xd0>
 8002948:	a201      	add	r2, pc, #4	@ (adr r2, 8002950 <UART_SetConfig+0xa0>)
 800294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294e:	bf00      	nop
 8002950:	08002961 	.word	0x08002961
 8002954:	08002971 	.word	0x08002971
 8002958:	08002969 	.word	0x08002969
 800295c:	08002979 	.word	0x08002979
 8002960:	2301      	movs	r3, #1
 8002962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002966:	e116      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002968:	2302      	movs	r3, #2
 800296a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800296e:	e112      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002970:	2304      	movs	r3, #4
 8002972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002976:	e10e      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002978:	2308      	movs	r3, #8
 800297a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800297e:	e10a      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002980:	2310      	movs	r3, #16
 8002982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002986:	e106      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a7c      	ldr	r2, [pc, #496]	@ (8002b80 <UART_SetConfig+0x2d0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d138      	bne.n	8002a04 <UART_SetConfig+0x154>
 8002992:	4b7a      	ldr	r3, [pc, #488]	@ (8002b7c <UART_SetConfig+0x2cc>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b0c      	cmp	r3, #12
 800299e:	d82d      	bhi.n	80029fc <UART_SetConfig+0x14c>
 80029a0:	a201      	add	r2, pc, #4	@ (adr r2, 80029a8 <UART_SetConfig+0xf8>)
 80029a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a6:	bf00      	nop
 80029a8:	080029dd 	.word	0x080029dd
 80029ac:	080029fd 	.word	0x080029fd
 80029b0:	080029fd 	.word	0x080029fd
 80029b4:	080029fd 	.word	0x080029fd
 80029b8:	080029ed 	.word	0x080029ed
 80029bc:	080029fd 	.word	0x080029fd
 80029c0:	080029fd 	.word	0x080029fd
 80029c4:	080029fd 	.word	0x080029fd
 80029c8:	080029e5 	.word	0x080029e5
 80029cc:	080029fd 	.word	0x080029fd
 80029d0:	080029fd 	.word	0x080029fd
 80029d4:	080029fd 	.word	0x080029fd
 80029d8:	080029f5 	.word	0x080029f5
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e2:	e0d8      	b.n	8002b96 <UART_SetConfig+0x2e6>
 80029e4:	2302      	movs	r3, #2
 80029e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ea:	e0d4      	b.n	8002b96 <UART_SetConfig+0x2e6>
 80029ec:	2304      	movs	r3, #4
 80029ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f2:	e0d0      	b.n	8002b96 <UART_SetConfig+0x2e6>
 80029f4:	2308      	movs	r3, #8
 80029f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029fa:	e0cc      	b.n	8002b96 <UART_SetConfig+0x2e6>
 80029fc:	2310      	movs	r3, #16
 80029fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a02:	e0c8      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a5e      	ldr	r2, [pc, #376]	@ (8002b84 <UART_SetConfig+0x2d4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d125      	bne.n	8002a5a <UART_SetConfig+0x1aa>
 8002a0e:	4b5b      	ldr	r3, [pc, #364]	@ (8002b7c <UART_SetConfig+0x2cc>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a18:	2b30      	cmp	r3, #48	@ 0x30
 8002a1a:	d016      	beq.n	8002a4a <UART_SetConfig+0x19a>
 8002a1c:	2b30      	cmp	r3, #48	@ 0x30
 8002a1e:	d818      	bhi.n	8002a52 <UART_SetConfig+0x1a2>
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d00a      	beq.n	8002a3a <UART_SetConfig+0x18a>
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d814      	bhi.n	8002a52 <UART_SetConfig+0x1a2>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <UART_SetConfig+0x182>
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	d008      	beq.n	8002a42 <UART_SetConfig+0x192>
 8002a30:	e00f      	b.n	8002a52 <UART_SetConfig+0x1a2>
 8002a32:	2300      	movs	r3, #0
 8002a34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a38:	e0ad      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a40:	e0a9      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002a42:	2304      	movs	r3, #4
 8002a44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a48:	e0a5      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a50:	e0a1      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002a52:	2310      	movs	r3, #16
 8002a54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a58:	e09d      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8002b88 <UART_SetConfig+0x2d8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d125      	bne.n	8002ab0 <UART_SetConfig+0x200>
 8002a64:	4b45      	ldr	r3, [pc, #276]	@ (8002b7c <UART_SetConfig+0x2cc>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a70:	d016      	beq.n	8002aa0 <UART_SetConfig+0x1f0>
 8002a72:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a74:	d818      	bhi.n	8002aa8 <UART_SetConfig+0x1f8>
 8002a76:	2b80      	cmp	r3, #128	@ 0x80
 8002a78:	d00a      	beq.n	8002a90 <UART_SetConfig+0x1e0>
 8002a7a:	2b80      	cmp	r3, #128	@ 0x80
 8002a7c:	d814      	bhi.n	8002aa8 <UART_SetConfig+0x1f8>
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <UART_SetConfig+0x1d8>
 8002a82:	2b40      	cmp	r3, #64	@ 0x40
 8002a84:	d008      	beq.n	8002a98 <UART_SetConfig+0x1e8>
 8002a86:	e00f      	b.n	8002aa8 <UART_SetConfig+0x1f8>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a8e:	e082      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002a90:	2302      	movs	r3, #2
 8002a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a96:	e07e      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002a98:	2304      	movs	r3, #4
 8002a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a9e:	e07a      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aa6:	e076      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aae:	e072      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a35      	ldr	r2, [pc, #212]	@ (8002b8c <UART_SetConfig+0x2dc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d12a      	bne.n	8002b10 <UART_SetConfig+0x260>
 8002aba:	4b30      	ldr	r3, [pc, #192]	@ (8002b7c <UART_SetConfig+0x2cc>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ac4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ac8:	d01a      	beq.n	8002b00 <UART_SetConfig+0x250>
 8002aca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ace:	d81b      	bhi.n	8002b08 <UART_SetConfig+0x258>
 8002ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ad4:	d00c      	beq.n	8002af0 <UART_SetConfig+0x240>
 8002ad6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ada:	d815      	bhi.n	8002b08 <UART_SetConfig+0x258>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <UART_SetConfig+0x238>
 8002ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ae4:	d008      	beq.n	8002af8 <UART_SetConfig+0x248>
 8002ae6:	e00f      	b.n	8002b08 <UART_SetConfig+0x258>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aee:	e052      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002af0:	2302      	movs	r3, #2
 8002af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002af6:	e04e      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002af8:	2304      	movs	r3, #4
 8002afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002afe:	e04a      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002b00:	2308      	movs	r3, #8
 8002b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b06:	e046      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002b08:	2310      	movs	r3, #16
 8002b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b0e:	e042      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a17      	ldr	r2, [pc, #92]	@ (8002b74 <UART_SetConfig+0x2c4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d13a      	bne.n	8002b90 <UART_SetConfig+0x2e0>
 8002b1a:	4b18      	ldr	r3, [pc, #96]	@ (8002b7c <UART_SetConfig+0x2cc>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b28:	d01a      	beq.n	8002b60 <UART_SetConfig+0x2b0>
 8002b2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b2e:	d81b      	bhi.n	8002b68 <UART_SetConfig+0x2b8>
 8002b30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b34:	d00c      	beq.n	8002b50 <UART_SetConfig+0x2a0>
 8002b36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b3a:	d815      	bhi.n	8002b68 <UART_SetConfig+0x2b8>
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <UART_SetConfig+0x298>
 8002b40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b44:	d008      	beq.n	8002b58 <UART_SetConfig+0x2a8>
 8002b46:	e00f      	b.n	8002b68 <UART_SetConfig+0x2b8>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b4e:	e022      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002b50:	2302      	movs	r3, #2
 8002b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b56:	e01e      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002b58:	2304      	movs	r3, #4
 8002b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b5e:	e01a      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002b60:	2308      	movs	r3, #8
 8002b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b66:	e016      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002b68:	2310      	movs	r3, #16
 8002b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b6e:	e012      	b.n	8002b96 <UART_SetConfig+0x2e6>
 8002b70:	efff69f3 	.word	0xefff69f3
 8002b74:	40008000 	.word	0x40008000
 8002b78:	40013800 	.word	0x40013800
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40004400 	.word	0x40004400
 8002b84:	40004800 	.word	0x40004800
 8002b88:	40004c00 	.word	0x40004c00
 8002b8c:	40005000 	.word	0x40005000
 8002b90:	2310      	movs	r3, #16
 8002b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a9f      	ldr	r2, [pc, #636]	@ (8002e18 <UART_SetConfig+0x568>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d17a      	bne.n	8002c96 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d824      	bhi.n	8002bf2 <UART_SetConfig+0x342>
 8002ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb0 <UART_SetConfig+0x300>)
 8002baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bae:	bf00      	nop
 8002bb0:	08002bd5 	.word	0x08002bd5
 8002bb4:	08002bf3 	.word	0x08002bf3
 8002bb8:	08002bdd 	.word	0x08002bdd
 8002bbc:	08002bf3 	.word	0x08002bf3
 8002bc0:	08002be3 	.word	0x08002be3
 8002bc4:	08002bf3 	.word	0x08002bf3
 8002bc8:	08002bf3 	.word	0x08002bf3
 8002bcc:	08002bf3 	.word	0x08002bf3
 8002bd0:	08002beb 	.word	0x08002beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bd4:	f7ff f8d6 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8002bd8:	61f8      	str	r0, [r7, #28]
        break;
 8002bda:	e010      	b.n	8002bfe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bdc:	4b8f      	ldr	r3, [pc, #572]	@ (8002e1c <UART_SetConfig+0x56c>)
 8002bde:	61fb      	str	r3, [r7, #28]
        break;
 8002be0:	e00d      	b.n	8002bfe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002be2:	f7ff f837 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8002be6:	61f8      	str	r0, [r7, #28]
        break;
 8002be8:	e009      	b.n	8002bfe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bee:	61fb      	str	r3, [r7, #28]
        break;
 8002bf0:	e005      	b.n	8002bfe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002bfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80fb 	beq.w	8002dfc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d305      	bcc.n	8002c22 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d903      	bls.n	8002c2a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c28:	e0e8      	b.n	8002dfc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	461c      	mov	r4, r3
 8002c30:	4615      	mov	r5, r2
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	022b      	lsls	r3, r5, #8
 8002c3c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c40:	0222      	lsls	r2, r4, #8
 8002c42:	68f9      	ldr	r1, [r7, #12]
 8002c44:	6849      	ldr	r1, [r1, #4]
 8002c46:	0849      	lsrs	r1, r1, #1
 8002c48:	2000      	movs	r0, #0
 8002c4a:	4688      	mov	r8, r1
 8002c4c:	4681      	mov	r9, r0
 8002c4e:	eb12 0a08 	adds.w	sl, r2, r8
 8002c52:	eb43 0b09 	adc.w	fp, r3, r9
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c64:	4650      	mov	r0, sl
 8002c66:	4659      	mov	r1, fp
 8002c68:	f7fd fb02 	bl	8000270 <__aeabi_uldivmod>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4613      	mov	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c7a:	d308      	bcc.n	8002c8e <UART_SetConfig+0x3de>
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c82:	d204      	bcs.n	8002c8e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	60da      	str	r2, [r3, #12]
 8002c8c:	e0b6      	b.n	8002dfc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c94:	e0b2      	b.n	8002dfc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c9e:	d15e      	bne.n	8002d5e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d828      	bhi.n	8002cfa <UART_SetConfig+0x44a>
 8002ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb0 <UART_SetConfig+0x400>)
 8002caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cae:	bf00      	nop
 8002cb0:	08002cd5 	.word	0x08002cd5
 8002cb4:	08002cdd 	.word	0x08002cdd
 8002cb8:	08002ce5 	.word	0x08002ce5
 8002cbc:	08002cfb 	.word	0x08002cfb
 8002cc0:	08002ceb 	.word	0x08002ceb
 8002cc4:	08002cfb 	.word	0x08002cfb
 8002cc8:	08002cfb 	.word	0x08002cfb
 8002ccc:	08002cfb 	.word	0x08002cfb
 8002cd0:	08002cf3 	.word	0x08002cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cd4:	f7ff f856 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8002cd8:	61f8      	str	r0, [r7, #28]
        break;
 8002cda:	e014      	b.n	8002d06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cdc:	f7ff f868 	bl	8001db0 <HAL_RCC_GetPCLK2Freq>
 8002ce0:	61f8      	str	r0, [r7, #28]
        break;
 8002ce2:	e010      	b.n	8002d06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8002e1c <UART_SetConfig+0x56c>)
 8002ce6:	61fb      	str	r3, [r7, #28]
        break;
 8002ce8:	e00d      	b.n	8002d06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cea:	f7fe ffb3 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8002cee:	61f8      	str	r0, [r7, #28]
        break;
 8002cf0:	e009      	b.n	8002d06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cf6:	61fb      	str	r3, [r7, #28]
        break;
 8002cf8:	e005      	b.n	8002d06 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d077      	beq.n	8002dfc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005a      	lsls	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	085b      	lsrs	r3, r3, #1
 8002d16:	441a      	add	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2b0f      	cmp	r3, #15
 8002d26:	d916      	bls.n	8002d56 <UART_SetConfig+0x4a6>
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d2e:	d212      	bcs.n	8002d56 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f023 030f 	bic.w	r3, r3, #15
 8002d38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	8afb      	ldrh	r3, [r7, #22]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	8afa      	ldrh	r2, [r7, #22]
 8002d52:	60da      	str	r2, [r3, #12]
 8002d54:	e052      	b.n	8002dfc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d5c:	e04e      	b.n	8002dfc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d827      	bhi.n	8002db6 <UART_SetConfig+0x506>
 8002d66:	a201      	add	r2, pc, #4	@ (adr r2, 8002d6c <UART_SetConfig+0x4bc>)
 8002d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6c:	08002d91 	.word	0x08002d91
 8002d70:	08002d99 	.word	0x08002d99
 8002d74:	08002da1 	.word	0x08002da1
 8002d78:	08002db7 	.word	0x08002db7
 8002d7c:	08002da7 	.word	0x08002da7
 8002d80:	08002db7 	.word	0x08002db7
 8002d84:	08002db7 	.word	0x08002db7
 8002d88:	08002db7 	.word	0x08002db7
 8002d8c:	08002daf 	.word	0x08002daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d90:	f7fe fff8 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8002d94:	61f8      	str	r0, [r7, #28]
        break;
 8002d96:	e014      	b.n	8002dc2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d98:	f7ff f80a 	bl	8001db0 <HAL_RCC_GetPCLK2Freq>
 8002d9c:	61f8      	str	r0, [r7, #28]
        break;
 8002d9e:	e010      	b.n	8002dc2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002da0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e1c <UART_SetConfig+0x56c>)
 8002da2:	61fb      	str	r3, [r7, #28]
        break;
 8002da4:	e00d      	b.n	8002dc2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002da6:	f7fe ff55 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8002daa:	61f8      	str	r0, [r7, #28]
        break;
 8002dac:	e009      	b.n	8002dc2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002db2:	61fb      	str	r3, [r7, #28]
        break;
 8002db4:	e005      	b.n	8002dc2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002dc0:	bf00      	nop
    }

    if (pclk != 0U)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d019      	beq.n	8002dfc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	085a      	lsrs	r2, r3, #1
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	441a      	add	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dda:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b0f      	cmp	r3, #15
 8002de0:	d909      	bls.n	8002df6 <UART_SetConfig+0x546>
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002de8:	d205      	bcs.n	8002df6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60da      	str	r2, [r3, #12]
 8002df4:	e002      	b.n	8002dfc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3728      	adds	r7, #40	@ 0x28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e16:	bf00      	nop
 8002e18:	40008000 	.word	0x40008000
 8002e1c:	00f42400 	.word	0x00f42400

08002e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01a      	beq.n	8002f36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f1e:	d10a      	bne.n	8002f36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	605a      	str	r2, [r3, #4]
  }
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b098      	sub	sp, #96	@ 0x60
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f74:	f7fd fe7a 	bl	8000c6c <HAL_GetTick>
 8002f78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d12e      	bne.n	8002fe6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f90:	2200      	movs	r2, #0
 8002f92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f88c 	bl	80030b4 <UART_WaitOnFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d021      	beq.n	8002fe6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002faa:	e853 3f00 	ldrex	r3, [r3]
 8002fae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fc2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e6      	bne.n	8002fa2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e062      	b.n	80030ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d149      	bne.n	8003088 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ff4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f856 	bl	80030b4 <UART_WaitOnFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d03c      	beq.n	8003088 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	623b      	str	r3, [r7, #32]
   return(result);
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800302c:	633b      	str	r3, [r7, #48]	@ 0x30
 800302e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003030:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003034:	e841 2300 	strex	r3, r2, [r1]
 8003038:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800303a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e6      	bne.n	800300e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3308      	adds	r3, #8
 8003046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0301 	bic.w	r3, r3, #1
 8003056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3308      	adds	r3, #8
 800305e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003060:	61fa      	str	r2, [r7, #28]
 8003062:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	69b9      	ldr	r1, [r7, #24]
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	617b      	str	r3, [r7, #20]
   return(result);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e5      	bne.n	8003040 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e011      	b.n	80030ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2220      	movs	r2, #32
 8003092:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3758      	adds	r7, #88	@ 0x58
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c4:	e04f      	b.n	8003166 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030cc:	d04b      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ce:	f7fd fdcd 	bl	8000c6c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e04e      	b.n	8003186 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d037      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0xb2>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b80      	cmp	r3, #128	@ 0x80
 80030fa:	d034      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0xb2>
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b40      	cmp	r3, #64	@ 0x40
 8003100:	d031      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b08      	cmp	r3, #8
 800310e:	d110      	bne.n	8003132 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2208      	movs	r2, #8
 8003116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f838 	bl	800318e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2208      	movs	r2, #8
 8003122:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e029      	b.n	8003186 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800313c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003140:	d111      	bne.n	8003166 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800314a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f81e 	bl	800318e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e00f      	b.n	8003186 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4013      	ands	r3, r2
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	429a      	cmp	r2, r3
 8003182:	d0a0      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800318e:	b480      	push	{r7}
 8003190:	b095      	sub	sp, #84	@ 0x54
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319e:	e853 3f00 	ldrex	r3, [r3]
 80031a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80031b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031bc:	e841 2300 	strex	r3, r2, [r1]
 80031c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e6      	bne.n	8003196 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3308      	adds	r3, #8
 80031ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	e853 3f00 	ldrex	r3, [r3]
 80031d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3308      	adds	r3, #8
 80031e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031f0:	e841 2300 	strex	r3, r2, [r1]
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e5      	bne.n	80031c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003200:	2b01      	cmp	r3, #1
 8003202:	d118      	bne.n	8003236 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	60bb      	str	r3, [r7, #8]
   return(result);
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f023 0310 	bic.w	r3, r3, #16
 8003218:	647b      	str	r3, [r7, #68]	@ 0x44
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	6979      	ldr	r1, [r7, #20]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	613b      	str	r3, [r7, #16]
   return(result);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1e6      	bne.n	8003204 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800324a:	bf00      	nop
 800324c:	3754      	adds	r7, #84	@ 0x54
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003256:	b480      	push	{r7}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003268:	2b84      	cmp	r3, #132	@ 0x84
 800326a:	d005      	beq.n	8003278 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800326c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4413      	add	r3, r2
 8003274:	3303      	adds	r3, #3
 8003276:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003278:	68fb      	ldr	r3, [r7, #12]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800328a:	f000 fae5 	bl	8003858 <vTaskStartScheduler>
  
  return osOK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}

08003294 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003296:	b089      	sub	sp, #36	@ 0x24
 8003298:	af04      	add	r7, sp, #16
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d020      	beq.n	80032e8 <osThreadCreate+0x54>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d01c      	beq.n	80032e8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685c      	ldr	r4, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691e      	ldr	r6, [r3, #16]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ffc8 	bl	8003256 <makeFreeRtosPriority>
 80032c6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032d0:	9202      	str	r2, [sp, #8]
 80032d2:	9301      	str	r3, [sp, #4]
 80032d4:	9100      	str	r1, [sp, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	4632      	mov	r2, r6
 80032da:	4629      	mov	r1, r5
 80032dc:	4620      	mov	r0, r4
 80032de:	f000 f8ed 	bl	80034bc <xTaskCreateStatic>
 80032e2:	4603      	mov	r3, r0
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	e01c      	b.n	8003322 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685c      	ldr	r4, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032f4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ffaa 	bl	8003256 <makeFreeRtosPriority>
 8003302:	4602      	mov	r2, r0
 8003304:	f107 030c 	add.w	r3, r7, #12
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	9200      	str	r2, [sp, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	4632      	mov	r2, r6
 8003310:	4629      	mov	r1, r5
 8003312:	4620      	mov	r0, r4
 8003314:	f000 f932 	bl	800357c <xTaskCreate>
 8003318:	4603      	mov	r3, r0
 800331a:	2b01      	cmp	r3, #1
 800331c:	d001      	beq.n	8003322 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800331e:	2300      	movs	r3, #0
 8003320:	e000      	b.n	8003324 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003322:	68fb      	ldr	r3, [r7, #12]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800332c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <osDelay+0x16>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	e000      	b.n	8003344 <osDelay+0x18>
 8003342:	2301      	movs	r3, #1
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fa51 	bl	80037ec <vTaskDelay>
  
  return osOK;
 800334a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f103 0208 	add.w	r2, r3, #8
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800336c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f103 0208 	add.w	r2, r3, #8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f103 0208 	add.w	r2, r3, #8
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	601a      	str	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800340c:	d103      	bne.n	8003416 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e00c      	b.n	8003430 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3308      	adds	r3, #8
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e002      	b.n	8003424 <vListInsert+0x2e>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	d2f6      	bcs.n	800341e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	601a      	str	r2, [r3, #0]
}
 800345c:	bf00      	nop
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6892      	ldr	r2, [r2, #8]
 800347e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6852      	ldr	r2, [r2, #4]
 8003488:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	d103      	bne.n	800349c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	1e5a      	subs	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08e      	sub	sp, #56	@ 0x38
 80034c0:	af04      	add	r7, sp, #16
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10b      	bne.n	80034e8 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034e2:	bf00      	nop
 80034e4:	bf00      	nop
 80034e6:	e7fd      	b.n	80034e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10b      	bne.n	8003506 <xTaskCreateStatic+0x4a>
	__asm volatile
 80034ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	61fb      	str	r3, [r7, #28]
}
 8003500:	bf00      	nop
 8003502:	bf00      	nop
 8003504:	e7fd      	b.n	8003502 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003506:	2354      	movs	r3, #84	@ 0x54
 8003508:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b54      	cmp	r3, #84	@ 0x54
 800350e:	d00b      	beq.n	8003528 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	61bb      	str	r3, [r7, #24]
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003528:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800352a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01e      	beq.n	800356e <xTaskCreateStatic+0xb2>
 8003530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01b      	beq.n	800356e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003538:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003548:	2300      	movs	r3, #0
 800354a:	9303      	str	r3, [sp, #12]
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	9302      	str	r3, [sp, #8]
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f850 	bl	8003606 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003566:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003568:	f000 f8d6 	bl	8003718 <prvAddNewTaskToReadyList>
 800356c:	e001      	b.n	8003572 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003572:	697b      	ldr	r3, [r7, #20]
	}
 8003574:	4618      	mov	r0, r3
 8003576:	3728      	adds	r7, #40	@ 0x28
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08c      	sub	sp, #48	@ 0x30
 8003580:	af04      	add	r7, sp, #16
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	4613      	mov	r3, r2
 800358a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fef1 	bl	8004378 <pvPortMalloc>
 8003596:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00e      	beq.n	80035bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800359e:	2054      	movs	r0, #84	@ 0x54
 80035a0:	f000 feea 	bl	8004378 <pvPortMalloc>
 80035a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80035b2:	e005      	b.n	80035c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035b4:	6978      	ldr	r0, [r7, #20]
 80035b6:	f000 ffad 	bl	8004514 <vPortFree>
 80035ba:	e001      	b.n	80035c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d017      	beq.n	80035f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035ce:	88fa      	ldrh	r2, [r7, #6]
 80035d0:	2300      	movs	r3, #0
 80035d2:	9303      	str	r3, [sp, #12]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	9302      	str	r3, [sp, #8]
 80035d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f80e 	bl	8003606 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035ea:	69f8      	ldr	r0, [r7, #28]
 80035ec:	f000 f894 	bl	8003718 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035f0:	2301      	movs	r3, #1
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	e002      	b.n	80035fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035fc:	69bb      	ldr	r3, [r7, #24]
	}
 80035fe:	4618      	mov	r0, r3
 8003600:	3720      	adds	r7, #32
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b088      	sub	sp, #32
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800361e:	3b01      	subs	r3, #1
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f023 0307 	bic.w	r3, r3, #7
 800362c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	617b      	str	r3, [r7, #20]
}
 800364a:	bf00      	nop
 800364c:	bf00      	nop
 800364e:	e7fd      	b.n	800364c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d01f      	beq.n	8003696 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	e012      	b.n	8003682 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	7819      	ldrb	r1, [r3, #0]
 8003664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	3334      	adds	r3, #52	@ 0x34
 800366c:	460a      	mov	r2, r1
 800366e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	4413      	add	r3, r2
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d006      	beq.n	800368a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	3301      	adds	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2b0f      	cmp	r3, #15
 8003686:	d9e9      	bls.n	800365c <prvInitialiseNewTask+0x56>
 8003688:	e000      	b.n	800368c <prvInitialiseNewTask+0x86>
			{
				break;
 800368a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003694:	e003      	b.n	800369e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800369e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a0:	2b06      	cmp	r3, #6
 80036a2:	d901      	bls.n	80036a8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036a4:	2306      	movs	r3, #6
 80036a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036b2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b6:	2200      	movs	r2, #0
 80036b8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036bc:	3304      	adds	r3, #4
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fe68 	bl	8003394 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c6:	3318      	adds	r3, #24
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fe63 	bl	8003394 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d6:	f1c3 0207 	rsb	r2, r3, #7
 80036da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036e2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e6:	2200      	movs	r2, #0
 80036e8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	68f9      	ldr	r1, [r7, #12]
 80036f6:	69b8      	ldr	r0, [r7, #24]
 80036f8:	f000 fc2c 	bl	8003f54 <pxPortInitialiseStack>
 80036fc:	4602      	mov	r2, r0
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800370a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800370e:	bf00      	nop
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003720:	f000 fd4a 	bl	80041b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003724:	4b2a      	ldr	r3, [pc, #168]	@ (80037d0 <prvAddNewTaskToReadyList+0xb8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3301      	adds	r3, #1
 800372a:	4a29      	ldr	r2, [pc, #164]	@ (80037d0 <prvAddNewTaskToReadyList+0xb8>)
 800372c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800372e:	4b29      	ldr	r3, [pc, #164]	@ (80037d4 <prvAddNewTaskToReadyList+0xbc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003736:	4a27      	ldr	r2, [pc, #156]	@ (80037d4 <prvAddNewTaskToReadyList+0xbc>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800373c:	4b24      	ldr	r3, [pc, #144]	@ (80037d0 <prvAddNewTaskToReadyList+0xb8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d110      	bne.n	8003766 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003744:	f000 fac4 	bl	8003cd0 <prvInitialiseTaskLists>
 8003748:	e00d      	b.n	8003766 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800374a:	4b23      	ldr	r3, [pc, #140]	@ (80037d8 <prvAddNewTaskToReadyList+0xc0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003752:	4b20      	ldr	r3, [pc, #128]	@ (80037d4 <prvAddNewTaskToReadyList+0xbc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375c:	429a      	cmp	r2, r3
 800375e:	d802      	bhi.n	8003766 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003760:	4a1c      	ldr	r2, [pc, #112]	@ (80037d4 <prvAddNewTaskToReadyList+0xbc>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003766:	4b1d      	ldr	r3, [pc, #116]	@ (80037dc <prvAddNewTaskToReadyList+0xc4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3301      	adds	r3, #1
 800376c:	4a1b      	ldr	r2, [pc, #108]	@ (80037dc <prvAddNewTaskToReadyList+0xc4>)
 800376e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003774:	2201      	movs	r2, #1
 8003776:	409a      	lsls	r2, r3
 8003778:	4b19      	ldr	r3, [pc, #100]	@ (80037e0 <prvAddNewTaskToReadyList+0xc8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4313      	orrs	r3, r2
 800377e:	4a18      	ldr	r2, [pc, #96]	@ (80037e0 <prvAddNewTaskToReadyList+0xc8>)
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4a15      	ldr	r2, [pc, #84]	@ (80037e4 <prvAddNewTaskToReadyList+0xcc>)
 8003790:	441a      	add	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	4619      	mov	r1, r3
 8003798:	4610      	mov	r0, r2
 800379a:	f7ff fe08 	bl	80033ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800379e:	f000 fd3d 	bl	800421c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037a2:	4b0d      	ldr	r3, [pc, #52]	@ (80037d8 <prvAddNewTaskToReadyList+0xc0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00e      	beq.n	80037c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037aa:	4b0a      	ldr	r3, [pc, #40]	@ (80037d4 <prvAddNewTaskToReadyList+0xbc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d207      	bcs.n	80037c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037b8:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <prvAddNewTaskToReadyList+0xd0>)
 80037ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	2000046c 	.word	0x2000046c
 80037d4:	2000036c 	.word	0x2000036c
 80037d8:	20000478 	.word	0x20000478
 80037dc:	20000488 	.word	0x20000488
 80037e0:	20000474 	.word	0x20000474
 80037e4:	20000370 	.word	0x20000370
 80037e8:	e000ed04 	.word	0xe000ed04

080037ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d018      	beq.n	8003830 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037fe:	4b14      	ldr	r3, [pc, #80]	@ (8003850 <vTaskDelay+0x64>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00b      	beq.n	800381e <vTaskDelay+0x32>
	__asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	60bb      	str	r3, [r7, #8]
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	e7fd      	b.n	800381a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800381e:	f000 f87d 	bl	800391c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003822:	2100      	movs	r1, #0
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fb2f 	bl	8003e88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800382a:	f000 f885 	bl	8003938 <xTaskResumeAll>
 800382e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d107      	bne.n	8003846 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003836:	4b07      	ldr	r3, [pc, #28]	@ (8003854 <vTaskDelay+0x68>)
 8003838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000494 	.word	0x20000494
 8003854:	e000ed04 	.word	0xe000ed04

08003858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	@ 0x28
 800385c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003866:	463a      	mov	r2, r7
 8003868:	1d39      	adds	r1, r7, #4
 800386a:	f107 0308 	add.w	r3, r7, #8
 800386e:	4618      	mov	r0, r3
 8003870:	f7fc fe94 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003874:	6839      	ldr	r1, [r7, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	9202      	str	r2, [sp, #8]
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	2300      	movs	r3, #0
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	2300      	movs	r3, #0
 8003884:	460a      	mov	r2, r1
 8003886:	491f      	ldr	r1, [pc, #124]	@ (8003904 <vTaskStartScheduler+0xac>)
 8003888:	481f      	ldr	r0, [pc, #124]	@ (8003908 <vTaskStartScheduler+0xb0>)
 800388a:	f7ff fe17 	bl	80034bc <xTaskCreateStatic>
 800388e:	4603      	mov	r3, r0
 8003890:	4a1e      	ldr	r2, [pc, #120]	@ (800390c <vTaskStartScheduler+0xb4>)
 8003892:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003894:	4b1d      	ldr	r3, [pc, #116]	@ (800390c <vTaskStartScheduler+0xb4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800389c:	2301      	movs	r3, #1
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e001      	b.n	80038a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d116      	bne.n	80038da <vTaskStartScheduler+0x82>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	613b      	str	r3, [r7, #16]
}
 80038be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038c0:	4b13      	ldr	r3, [pc, #76]	@ (8003910 <vTaskStartScheduler+0xb8>)
 80038c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038c8:	4b12      	ldr	r3, [pc, #72]	@ (8003914 <vTaskStartScheduler+0xbc>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038ce:	4b12      	ldr	r3, [pc, #72]	@ (8003918 <vTaskStartScheduler+0xc0>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038d4:	f000 fbcc 	bl	8004070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038d8:	e00f      	b.n	80038fa <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038e0:	d10b      	bne.n	80038fa <vTaskStartScheduler+0xa2>
	__asm volatile
 80038e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e6:	f383 8811 	msr	BASEPRI, r3
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	60fb      	str	r3, [r7, #12]
}
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop
 80038f8:	e7fd      	b.n	80038f6 <vTaskStartScheduler+0x9e>
}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	08005140 	.word	0x08005140
 8003908:	08003ca1 	.word	0x08003ca1
 800390c:	20000490 	.word	0x20000490
 8003910:	2000048c 	.word	0x2000048c
 8003914:	20000478 	.word	0x20000478
 8003918:	20000470 	.word	0x20000470

0800391c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003920:	4b04      	ldr	r3, [pc, #16]	@ (8003934 <vTaskSuspendAll+0x18>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3301      	adds	r3, #1
 8003926:	4a03      	ldr	r2, [pc, #12]	@ (8003934 <vTaskSuspendAll+0x18>)
 8003928:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800392a:	bf00      	nop
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	20000494 	.word	0x20000494

08003938 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003942:	2300      	movs	r3, #0
 8003944:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003946:	4b42      	ldr	r3, [pc, #264]	@ (8003a50 <xTaskResumeAll+0x118>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <xTaskResumeAll+0x2e>
	__asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	603b      	str	r3, [r7, #0]
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	e7fd      	b.n	8003962 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003966:	f000 fc27 	bl	80041b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800396a:	4b39      	ldr	r3, [pc, #228]	@ (8003a50 <xTaskResumeAll+0x118>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3b01      	subs	r3, #1
 8003970:	4a37      	ldr	r2, [pc, #220]	@ (8003a50 <xTaskResumeAll+0x118>)
 8003972:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003974:	4b36      	ldr	r3, [pc, #216]	@ (8003a50 <xTaskResumeAll+0x118>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d161      	bne.n	8003a40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800397c:	4b35      	ldr	r3, [pc, #212]	@ (8003a54 <xTaskResumeAll+0x11c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d05d      	beq.n	8003a40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003984:	e02e      	b.n	80039e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003986:	4b34      	ldr	r3, [pc, #208]	@ (8003a58 <xTaskResumeAll+0x120>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3318      	adds	r3, #24
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fd68 	bl	8003468 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3304      	adds	r3, #4
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fd63 	bl	8003468 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a6:	2201      	movs	r2, #1
 80039a8:	409a      	lsls	r2, r3
 80039aa:	4b2c      	ldr	r3, [pc, #176]	@ (8003a5c <xTaskResumeAll+0x124>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a5c <xTaskResumeAll+0x124>)
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4a27      	ldr	r2, [pc, #156]	@ (8003a60 <xTaskResumeAll+0x128>)
 80039c2:	441a      	add	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3304      	adds	r3, #4
 80039c8:	4619      	mov	r1, r3
 80039ca:	4610      	mov	r0, r2
 80039cc:	f7ff fcef 	bl	80033ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d4:	4b23      	ldr	r3, [pc, #140]	@ (8003a64 <xTaskResumeAll+0x12c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039da:	429a      	cmp	r2, r3
 80039dc:	d302      	bcc.n	80039e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80039de:	4b22      	ldr	r3, [pc, #136]	@ (8003a68 <xTaskResumeAll+0x130>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a58 <xTaskResumeAll+0x120>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1cc      	bne.n	8003986 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039f2:	f000 fa0b 	bl	8003e0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039f6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a6c <xTaskResumeAll+0x134>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d010      	beq.n	8003a24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a02:	f000 f837 	bl	8003a74 <xTaskIncrementTick>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a0c:	4b16      	ldr	r3, [pc, #88]	@ (8003a68 <xTaskResumeAll+0x130>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f1      	bne.n	8003a02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003a1e:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <xTaskResumeAll+0x134>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a24:	4b10      	ldr	r3, [pc, #64]	@ (8003a68 <xTaskResumeAll+0x130>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d009      	beq.n	8003a40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a30:	4b0f      	ldr	r3, [pc, #60]	@ (8003a70 <xTaskResumeAll+0x138>)
 8003a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a40:	f000 fbec 	bl	800421c <vPortExitCritical>

	return xAlreadyYielded;
 8003a44:	68bb      	ldr	r3, [r7, #8]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000494 	.word	0x20000494
 8003a54:	2000046c 	.word	0x2000046c
 8003a58:	2000042c 	.word	0x2000042c
 8003a5c:	20000474 	.word	0x20000474
 8003a60:	20000370 	.word	0x20000370
 8003a64:	2000036c 	.word	0x2000036c
 8003a68:	20000480 	.word	0x20000480
 8003a6c:	2000047c 	.word	0x2000047c
 8003a70:	e000ed04 	.word	0xe000ed04

08003a74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a7e:	4b4f      	ldr	r3, [pc, #316]	@ (8003bbc <xTaskIncrementTick+0x148>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f040 808f 	bne.w	8003ba6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a88:	4b4d      	ldr	r3, [pc, #308]	@ (8003bc0 <xTaskIncrementTick+0x14c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a90:	4a4b      	ldr	r2, [pc, #300]	@ (8003bc0 <xTaskIncrementTick+0x14c>)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d121      	bne.n	8003ae0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a9c:	4b49      	ldr	r3, [pc, #292]	@ (8003bc4 <xTaskIncrementTick+0x150>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <xTaskIncrementTick+0x4a>
	__asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	603b      	str	r3, [r7, #0]
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	e7fd      	b.n	8003aba <xTaskIncrementTick+0x46>
 8003abe:	4b41      	ldr	r3, [pc, #260]	@ (8003bc4 <xTaskIncrementTick+0x150>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	4b40      	ldr	r3, [pc, #256]	@ (8003bc8 <xTaskIncrementTick+0x154>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a3e      	ldr	r2, [pc, #248]	@ (8003bc4 <xTaskIncrementTick+0x150>)
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	4a3e      	ldr	r2, [pc, #248]	@ (8003bc8 <xTaskIncrementTick+0x154>)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bcc <xTaskIncrementTick+0x158>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	4a3c      	ldr	r2, [pc, #240]	@ (8003bcc <xTaskIncrementTick+0x158>)
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	f000 f996 	bl	8003e0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd0 <xTaskIncrementTick+0x15c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d348      	bcc.n	8003b7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aea:	4b36      	ldr	r3, [pc, #216]	@ (8003bc4 <xTaskIncrementTick+0x150>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d104      	bne.n	8003afe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003af4:	4b36      	ldr	r3, [pc, #216]	@ (8003bd0 <xTaskIncrementTick+0x15c>)
 8003af6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003afa:	601a      	str	r2, [r3, #0]
					break;
 8003afc:	e03e      	b.n	8003b7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003afe:	4b31      	ldr	r3, [pc, #196]	@ (8003bc4 <xTaskIncrementTick+0x150>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d203      	bcs.n	8003b1e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b16:	4a2e      	ldr	r2, [pc, #184]	@ (8003bd0 <xTaskIncrementTick+0x15c>)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b1c:	e02e      	b.n	8003b7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	3304      	adds	r3, #4
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fca0 	bl	8003468 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d004      	beq.n	8003b3a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	3318      	adds	r3, #24
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fc97 	bl	8003468 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3e:	2201      	movs	r2, #1
 8003b40:	409a      	lsls	r2, r3
 8003b42:	4b24      	ldr	r3, [pc, #144]	@ (8003bd4 <xTaskIncrementTick+0x160>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	4a22      	ldr	r2, [pc, #136]	@ (8003bd4 <xTaskIncrementTick+0x160>)
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4a1f      	ldr	r2, [pc, #124]	@ (8003bd8 <xTaskIncrementTick+0x164>)
 8003b5a:	441a      	add	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	3304      	adds	r3, #4
 8003b60:	4619      	mov	r1, r3
 8003b62:	4610      	mov	r0, r2
 8003b64:	f7ff fc23 	bl	80033ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bdc <xTaskIncrementTick+0x168>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d3b9      	bcc.n	8003aea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003b76:	2301      	movs	r3, #1
 8003b78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b7a:	e7b6      	b.n	8003aea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b7c:	4b17      	ldr	r3, [pc, #92]	@ (8003bdc <xTaskIncrementTick+0x168>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b82:	4915      	ldr	r1, [pc, #84]	@ (8003bd8 <xTaskIncrementTick+0x164>)
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d901      	bls.n	8003b98 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003b94:	2301      	movs	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b98:	4b11      	ldr	r3, [pc, #68]	@ (8003be0 <xTaskIncrementTick+0x16c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	e004      	b.n	8003bb0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8003be4 <xTaskIncrementTick+0x170>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3301      	adds	r3, #1
 8003bac:	4a0d      	ldr	r2, [pc, #52]	@ (8003be4 <xTaskIncrementTick+0x170>)
 8003bae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003bb0:	697b      	ldr	r3, [r7, #20]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000494 	.word	0x20000494
 8003bc0:	20000470 	.word	0x20000470
 8003bc4:	20000424 	.word	0x20000424
 8003bc8:	20000428 	.word	0x20000428
 8003bcc:	20000484 	.word	0x20000484
 8003bd0:	2000048c 	.word	0x2000048c
 8003bd4:	20000474 	.word	0x20000474
 8003bd8:	20000370 	.word	0x20000370
 8003bdc:	2000036c 	.word	0x2000036c
 8003be0:	20000480 	.word	0x20000480
 8003be4:	2000047c 	.word	0x2000047c

08003be8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bee:	4b27      	ldr	r3, [pc, #156]	@ (8003c8c <vTaskSwitchContext+0xa4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bf6:	4b26      	ldr	r3, [pc, #152]	@ (8003c90 <vTaskSwitchContext+0xa8>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bfc:	e040      	b.n	8003c80 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003bfe:	4b24      	ldr	r3, [pc, #144]	@ (8003c90 <vTaskSwitchContext+0xa8>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c04:	4b23      	ldr	r3, [pc, #140]	@ (8003c94 <vTaskSwitchContext+0xac>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003c12:	7afb      	ldrb	r3, [r7, #11]
 8003c14:	f1c3 031f 	rsb	r3, r3, #31
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	491f      	ldr	r1, [pc, #124]	@ (8003c98 <vTaskSwitchContext+0xb0>)
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10b      	bne.n	8003c46 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	607b      	str	r3, [r7, #4]
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	e7fd      	b.n	8003c42 <vTaskSwitchContext+0x5a>
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4a11      	ldr	r2, [pc, #68]	@ (8003c98 <vTaskSwitchContext+0xb0>)
 8003c52:	4413      	add	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	605a      	str	r2, [r3, #4]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	3308      	adds	r3, #8
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d104      	bne.n	8003c76 <vTaskSwitchContext+0x8e>
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a07      	ldr	r2, [pc, #28]	@ (8003c9c <vTaskSwitchContext+0xb4>)
 8003c7e:	6013      	str	r3, [r2, #0]
}
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	20000494 	.word	0x20000494
 8003c90:	20000480 	.word	0x20000480
 8003c94:	20000474 	.word	0x20000474
 8003c98:	20000370 	.word	0x20000370
 8003c9c:	2000036c 	.word	0x2000036c

08003ca0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ca8:	f000 f852 	bl	8003d50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003cac:	4b06      	ldr	r3, [pc, #24]	@ (8003cc8 <prvIdleTask+0x28>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d9f9      	bls.n	8003ca8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003cb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ccc <prvIdleTask+0x2c>)
 8003cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003cc4:	e7f0      	b.n	8003ca8 <prvIdleTask+0x8>
 8003cc6:	bf00      	nop
 8003cc8:	20000370 	.word	0x20000370
 8003ccc:	e000ed04 	.word	0xe000ed04

08003cd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	607b      	str	r3, [r7, #4]
 8003cda:	e00c      	b.n	8003cf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4a12      	ldr	r2, [pc, #72]	@ (8003d30 <prvInitialiseTaskLists+0x60>)
 8003ce8:	4413      	add	r3, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fb32 	bl	8003354 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b06      	cmp	r3, #6
 8003cfa:	d9ef      	bls.n	8003cdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cfc:	480d      	ldr	r0, [pc, #52]	@ (8003d34 <prvInitialiseTaskLists+0x64>)
 8003cfe:	f7ff fb29 	bl	8003354 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d02:	480d      	ldr	r0, [pc, #52]	@ (8003d38 <prvInitialiseTaskLists+0x68>)
 8003d04:	f7ff fb26 	bl	8003354 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d08:	480c      	ldr	r0, [pc, #48]	@ (8003d3c <prvInitialiseTaskLists+0x6c>)
 8003d0a:	f7ff fb23 	bl	8003354 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d0e:	480c      	ldr	r0, [pc, #48]	@ (8003d40 <prvInitialiseTaskLists+0x70>)
 8003d10:	f7ff fb20 	bl	8003354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d14:	480b      	ldr	r0, [pc, #44]	@ (8003d44 <prvInitialiseTaskLists+0x74>)
 8003d16:	f7ff fb1d 	bl	8003354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d48 <prvInitialiseTaskLists+0x78>)
 8003d1c:	4a05      	ldr	r2, [pc, #20]	@ (8003d34 <prvInitialiseTaskLists+0x64>)
 8003d1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d20:	4b0a      	ldr	r3, [pc, #40]	@ (8003d4c <prvInitialiseTaskLists+0x7c>)
 8003d22:	4a05      	ldr	r2, [pc, #20]	@ (8003d38 <prvInitialiseTaskLists+0x68>)
 8003d24:	601a      	str	r2, [r3, #0]
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000370 	.word	0x20000370
 8003d34:	200003fc 	.word	0x200003fc
 8003d38:	20000410 	.word	0x20000410
 8003d3c:	2000042c 	.word	0x2000042c
 8003d40:	20000440 	.word	0x20000440
 8003d44:	20000458 	.word	0x20000458
 8003d48:	20000424 	.word	0x20000424
 8003d4c:	20000428 	.word	0x20000428

08003d50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d56:	e019      	b.n	8003d8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d58:	f000 fa2e 	bl	80041b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d5c:	4b10      	ldr	r3, [pc, #64]	@ (8003da0 <prvCheckTasksWaitingTermination+0x50>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3304      	adds	r3, #4
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fb7d 	bl	8003468 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <prvCheckTasksWaitingTermination+0x54>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	4a0b      	ldr	r2, [pc, #44]	@ (8003da4 <prvCheckTasksWaitingTermination+0x54>)
 8003d76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d78:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <prvCheckTasksWaitingTermination+0x58>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003da8 <prvCheckTasksWaitingTermination+0x58>)
 8003d80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d82:	f000 fa4b 	bl	800421c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f810 	bl	8003dac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d8c:	4b06      	ldr	r3, [pc, #24]	@ (8003da8 <prvCheckTasksWaitingTermination+0x58>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e1      	bne.n	8003d58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000440 	.word	0x20000440
 8003da4:	2000046c 	.word	0x2000046c
 8003da8:	20000454 	.word	0x20000454

08003dac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d108      	bne.n	8003dd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fba6 	bl	8004514 <vPortFree>
				vPortFree( pxTCB );
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fba3 	bl	8004514 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003dce:	e019      	b.n	8003e04 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d103      	bne.n	8003de2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fb9a 	bl	8004514 <vPortFree>
	}
 8003de0:	e010      	b.n	8003e04 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d00b      	beq.n	8003e04 <prvDeleteTCB+0x58>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	60fb      	str	r3, [r7, #12]
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <prvDeleteTCB+0x54>
	}
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e12:	4b0c      	ldr	r3, [pc, #48]	@ (8003e44 <prvResetNextTaskUnblockTime+0x38>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d104      	bne.n	8003e26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e48 <prvResetNextTaskUnblockTime+0x3c>)
 8003e1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e24:	e008      	b.n	8003e38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e26:	4b07      	ldr	r3, [pc, #28]	@ (8003e44 <prvResetNextTaskUnblockTime+0x38>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4a04      	ldr	r2, [pc, #16]	@ (8003e48 <prvResetNextTaskUnblockTime+0x3c>)
 8003e36:	6013      	str	r3, [r2, #0]
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	20000424 	.word	0x20000424
 8003e48:	2000048c 	.word	0x2000048c

08003e4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e52:	4b0b      	ldr	r3, [pc, #44]	@ (8003e80 <xTaskGetSchedulerState+0x34>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d102      	bne.n	8003e60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	e008      	b.n	8003e72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e60:	4b08      	ldr	r3, [pc, #32]	@ (8003e84 <xTaskGetSchedulerState+0x38>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	607b      	str	r3, [r7, #4]
 8003e6c:	e001      	b.n	8003e72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e72:	687b      	ldr	r3, [r7, #4]
	}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	20000478 	.word	0x20000478
 8003e84:	20000494 	.word	0x20000494

08003e88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e92:	4b29      	ldr	r3, [pc, #164]	@ (8003f38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e98:	4b28      	ldr	r3, [pc, #160]	@ (8003f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fae2 	bl	8003468 <uxListRemove>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10b      	bne.n	8003ec2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003eaa:	4b24      	ldr	r3, [pc, #144]	@ (8003f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	4b21      	ldr	r3, [pc, #132]	@ (8003f40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	4a20      	ldr	r2, [pc, #128]	@ (8003f40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ec0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ec8:	d10a      	bne.n	8003ee0 <prvAddCurrentTaskToDelayedList+0x58>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	481a      	ldr	r0, [pc, #104]	@ (8003f44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003eda:	f7ff fa68 	bl	80033ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ede:	e026      	b.n	8003f2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ee8:	4b14      	ldr	r3, [pc, #80]	@ (8003f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d209      	bcs.n	8003f0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ef8:	4b13      	ldr	r3, [pc, #76]	@ (8003f48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4b0f      	ldr	r3, [pc, #60]	@ (8003f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3304      	adds	r3, #4
 8003f02:	4619      	mov	r1, r3
 8003f04:	4610      	mov	r0, r2
 8003f06:	f7ff fa76 	bl	80033f6 <vListInsert>
}
 8003f0a:	e010      	b.n	8003f2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4b0a      	ldr	r3, [pc, #40]	@ (8003f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3304      	adds	r3, #4
 8003f16:	4619      	mov	r1, r3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	f7ff fa6c 	bl	80033f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d202      	bcs.n	8003f2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003f28:	4a09      	ldr	r2, [pc, #36]	@ (8003f50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6013      	str	r3, [r2, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000470 	.word	0x20000470
 8003f3c:	2000036c 	.word	0x2000036c
 8003f40:	20000474 	.word	0x20000474
 8003f44:	20000458 	.word	0x20000458
 8003f48:	20000428 	.word	0x20000428
 8003f4c:	20000424 	.word	0x20000424
 8003f50:	2000048c 	.word	0x2000048c

08003f54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3b04      	subs	r3, #4
 8003f64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3b04      	subs	r3, #4
 8003f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f023 0201 	bic.w	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3b04      	subs	r3, #4
 8003f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f84:	4a0c      	ldr	r2, [pc, #48]	@ (8003fb8 <pxPortInitialiseStack+0x64>)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3b14      	subs	r3, #20
 8003f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3b04      	subs	r3, #4
 8003f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f06f 0202 	mvn.w	r2, #2
 8003fa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3b20      	subs	r3, #32
 8003fa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003faa:	68fb      	ldr	r3, [r7, #12]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	08003fbd 	.word	0x08003fbd

08003fbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003fc6:	4b13      	ldr	r3, [pc, #76]	@ (8004014 <prvTaskExitError+0x58>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fce:	d00b      	beq.n	8003fe8 <prvTaskExitError+0x2c>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	60fb      	str	r3, [r7, #12]
}
 8003fe2:	bf00      	nop
 8003fe4:	bf00      	nop
 8003fe6:	e7fd      	b.n	8003fe4 <prvTaskExitError+0x28>
	__asm volatile
 8003fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	60bb      	str	r3, [r7, #8]
}
 8003ffa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003ffc:	bf00      	nop
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0fc      	beq.n	8003ffe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	2000000c 	.word	0x2000000c
	...

08004020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004020:	4b07      	ldr	r3, [pc, #28]	@ (8004040 <pxCurrentTCBConst2>)
 8004022:	6819      	ldr	r1, [r3, #0]
 8004024:	6808      	ldr	r0, [r1, #0]
 8004026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402a:	f380 8809 	msr	PSP, r0
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f04f 0000 	mov.w	r0, #0
 8004036:	f380 8811 	msr	BASEPRI, r0
 800403a:	4770      	bx	lr
 800403c:	f3af 8000 	nop.w

08004040 <pxCurrentTCBConst2>:
 8004040:	2000036c 	.word	0x2000036c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004044:	bf00      	nop
 8004046:	bf00      	nop

08004048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004048:	4808      	ldr	r0, [pc, #32]	@ (800406c <prvPortStartFirstTask+0x24>)
 800404a:	6800      	ldr	r0, [r0, #0]
 800404c:	6800      	ldr	r0, [r0, #0]
 800404e:	f380 8808 	msr	MSP, r0
 8004052:	f04f 0000 	mov.w	r0, #0
 8004056:	f380 8814 	msr	CONTROL, r0
 800405a:	b662      	cpsie	i
 800405c:	b661      	cpsie	f
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	df00      	svc	0
 8004068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800406a:	bf00      	nop
 800406c:	e000ed08 	.word	0xe000ed08

08004070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004076:	4b47      	ldr	r3, [pc, #284]	@ (8004194 <xPortStartScheduler+0x124>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a47      	ldr	r2, [pc, #284]	@ (8004198 <xPortStartScheduler+0x128>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d10b      	bne.n	8004098 <xPortStartScheduler+0x28>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	60fb      	str	r3, [r7, #12]
}
 8004092:	bf00      	nop
 8004094:	bf00      	nop
 8004096:	e7fd      	b.n	8004094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004098:	4b3e      	ldr	r3, [pc, #248]	@ (8004194 <xPortStartScheduler+0x124>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a3f      	ldr	r2, [pc, #252]	@ (800419c <xPortStartScheduler+0x12c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d10b      	bne.n	80040ba <xPortStartScheduler+0x4a>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	613b      	str	r3, [r7, #16]
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	e7fd      	b.n	80040b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040ba:	4b39      	ldr	r3, [pc, #228]	@ (80041a0 <xPortStartScheduler+0x130>)
 80040bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	22ff      	movs	r2, #255	@ 0xff
 80040ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	4b31      	ldr	r3, [pc, #196]	@ (80041a4 <xPortStartScheduler+0x134>)
 80040e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040e2:	4b31      	ldr	r3, [pc, #196]	@ (80041a8 <xPortStartScheduler+0x138>)
 80040e4:	2207      	movs	r2, #7
 80040e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040e8:	e009      	b.n	80040fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80040ea:	4b2f      	ldr	r3, [pc, #188]	@ (80041a8 <xPortStartScheduler+0x138>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	4a2d      	ldr	r2, [pc, #180]	@ (80041a8 <xPortStartScheduler+0x138>)
 80040f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004106:	2b80      	cmp	r3, #128	@ 0x80
 8004108:	d0ef      	beq.n	80040ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800410a:	4b27      	ldr	r3, [pc, #156]	@ (80041a8 <xPortStartScheduler+0x138>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f1c3 0307 	rsb	r3, r3, #7
 8004112:	2b04      	cmp	r3, #4
 8004114:	d00b      	beq.n	800412e <xPortStartScheduler+0xbe>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	60bb      	str	r3, [r7, #8]
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	e7fd      	b.n	800412a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800412e:	4b1e      	ldr	r3, [pc, #120]	@ (80041a8 <xPortStartScheduler+0x138>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	4a1c      	ldr	r2, [pc, #112]	@ (80041a8 <xPortStartScheduler+0x138>)
 8004136:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004138:	4b1b      	ldr	r3, [pc, #108]	@ (80041a8 <xPortStartScheduler+0x138>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004140:	4a19      	ldr	r2, [pc, #100]	@ (80041a8 <xPortStartScheduler+0x138>)
 8004142:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	b2da      	uxtb	r2, r3
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800414c:	4b17      	ldr	r3, [pc, #92]	@ (80041ac <xPortStartScheduler+0x13c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a16      	ldr	r2, [pc, #88]	@ (80041ac <xPortStartScheduler+0x13c>)
 8004152:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004156:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004158:	4b14      	ldr	r3, [pc, #80]	@ (80041ac <xPortStartScheduler+0x13c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a13      	ldr	r2, [pc, #76]	@ (80041ac <xPortStartScheduler+0x13c>)
 800415e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004162:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004164:	f000 f8da 	bl	800431c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004168:	4b11      	ldr	r3, [pc, #68]	@ (80041b0 <xPortStartScheduler+0x140>)
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800416e:	f000 f8f9 	bl	8004364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004172:	4b10      	ldr	r3, [pc, #64]	@ (80041b4 <xPortStartScheduler+0x144>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a0f      	ldr	r2, [pc, #60]	@ (80041b4 <xPortStartScheduler+0x144>)
 8004178:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800417c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800417e:	f7ff ff63 	bl	8004048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004182:	f7ff fd31 	bl	8003be8 <vTaskSwitchContext>
	prvTaskExitError();
 8004186:	f7ff ff19 	bl	8003fbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	e000ed00 	.word	0xe000ed00
 8004198:	410fc271 	.word	0x410fc271
 800419c:	410fc270 	.word	0x410fc270
 80041a0:	e000e400 	.word	0xe000e400
 80041a4:	20000498 	.word	0x20000498
 80041a8:	2000049c 	.word	0x2000049c
 80041ac:	e000ed20 	.word	0xe000ed20
 80041b0:	2000000c 	.word	0x2000000c
 80041b4:	e000ef34 	.word	0xe000ef34

080041b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	607b      	str	r3, [r7, #4]
}
 80041d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041d2:	4b10      	ldr	r3, [pc, #64]	@ (8004214 <vPortEnterCritical+0x5c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3301      	adds	r3, #1
 80041d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004214 <vPortEnterCritical+0x5c>)
 80041da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004214 <vPortEnterCritical+0x5c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d110      	bne.n	8004206 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004218 <vPortEnterCritical+0x60>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <vPortEnterCritical+0x4e>
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	603b      	str	r3, [r7, #0]
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop
 8004204:	e7fd      	b.n	8004202 <vPortEnterCritical+0x4a>
	}
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	2000000c 	.word	0x2000000c
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004222:	4b12      	ldr	r3, [pc, #72]	@ (800426c <vPortExitCritical+0x50>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10b      	bne.n	8004242 <vPortExitCritical+0x26>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	607b      	str	r3, [r7, #4]
}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	e7fd      	b.n	800423e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004242:	4b0a      	ldr	r3, [pc, #40]	@ (800426c <vPortExitCritical+0x50>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3b01      	subs	r3, #1
 8004248:	4a08      	ldr	r2, [pc, #32]	@ (800426c <vPortExitCritical+0x50>)
 800424a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800424c:	4b07      	ldr	r3, [pc, #28]	@ (800426c <vPortExitCritical+0x50>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d105      	bne.n	8004260 <vPortExitCritical+0x44>
 8004254:	2300      	movs	r3, #0
 8004256:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800425e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	2000000c 	.word	0x2000000c

08004270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004270:	f3ef 8009 	mrs	r0, PSP
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	4b15      	ldr	r3, [pc, #84]	@ (80042d0 <pxCurrentTCBConst>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	f01e 0f10 	tst.w	lr, #16
 8004280:	bf08      	it	eq
 8004282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800428a:	6010      	str	r0, [r2, #0]
 800428c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004290:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004294:	f380 8811 	msr	BASEPRI, r0
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f7ff fca2 	bl	8003be8 <vTaskSwitchContext>
 80042a4:	f04f 0000 	mov.w	r0, #0
 80042a8:	f380 8811 	msr	BASEPRI, r0
 80042ac:	bc09      	pop	{r0, r3}
 80042ae:	6819      	ldr	r1, [r3, #0]
 80042b0:	6808      	ldr	r0, [r1, #0]
 80042b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b6:	f01e 0f10 	tst.w	lr, #16
 80042ba:	bf08      	it	eq
 80042bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042c0:	f380 8809 	msr	PSP, r0
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	f3af 8000 	nop.w

080042d0 <pxCurrentTCBConst>:
 80042d0:	2000036c 	.word	0x2000036c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop

080042d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
	__asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	607b      	str	r3, [r7, #4]
}
 80042f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80042f2:	f7ff fbbf 	bl	8003a74 <xTaskIncrementTick>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042fc:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <xPortSysTickHandler+0x40>)
 80042fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	2300      	movs	r3, #0
 8004306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f383 8811 	msr	BASEPRI, r3
}
 800430e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	e000ed04 	.word	0xe000ed04

0800431c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004320:	4b0b      	ldr	r3, [pc, #44]	@ (8004350 <vPortSetupTimerInterrupt+0x34>)
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004326:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <vPortSetupTimerInterrupt+0x38>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800432c:	4b0a      	ldr	r3, [pc, #40]	@ (8004358 <vPortSetupTimerInterrupt+0x3c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a0a      	ldr	r2, [pc, #40]	@ (800435c <vPortSetupTimerInterrupt+0x40>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	099b      	lsrs	r3, r3, #6
 8004338:	4a09      	ldr	r2, [pc, #36]	@ (8004360 <vPortSetupTimerInterrupt+0x44>)
 800433a:	3b01      	subs	r3, #1
 800433c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800433e:	4b04      	ldr	r3, [pc, #16]	@ (8004350 <vPortSetupTimerInterrupt+0x34>)
 8004340:	2207      	movs	r2, #7
 8004342:	601a      	str	r2, [r3, #0]
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	e000e010 	.word	0xe000e010
 8004354:	e000e018 	.word	0xe000e018
 8004358:	20000000 	.word	0x20000000
 800435c:	10624dd3 	.word	0x10624dd3
 8004360:	e000e014 	.word	0xe000e014

08004364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004364:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004374 <vPortEnableVFP+0x10>
 8004368:	6801      	ldr	r1, [r0, #0]
 800436a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800436e:	6001      	str	r1, [r0, #0]
 8004370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004372:	bf00      	nop
 8004374:	e000ed88 	.word	0xe000ed88

08004378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	@ 0x28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004384:	f7ff faca 	bl	800391c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004388:	4b5c      	ldr	r3, [pc, #368]	@ (80044fc <pvPortMalloc+0x184>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004390:	f000 f924 	bl	80045dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004394:	4b5a      	ldr	r3, [pc, #360]	@ (8004500 <pvPortMalloc+0x188>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4013      	ands	r3, r2
 800439c:	2b00      	cmp	r3, #0
 800439e:	f040 8095 	bne.w	80044cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01e      	beq.n	80043e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80043a8:	2208      	movs	r2, #8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d015      	beq.n	80043e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f023 0307 	bic.w	r3, r3, #7
 80043c0:	3308      	adds	r3, #8
 80043c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00b      	beq.n	80043e6 <pvPortMalloc+0x6e>
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	617b      	str	r3, [r7, #20]
}
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop
 80043e4:	e7fd      	b.n	80043e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d06f      	beq.n	80044cc <pvPortMalloc+0x154>
 80043ec:	4b45      	ldr	r3, [pc, #276]	@ (8004504 <pvPortMalloc+0x18c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d86a      	bhi.n	80044cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043f6:	4b44      	ldr	r3, [pc, #272]	@ (8004508 <pvPortMalloc+0x190>)
 80043f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043fa:	4b43      	ldr	r3, [pc, #268]	@ (8004508 <pvPortMalloc+0x190>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004400:	e004      	b.n	800440c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004404:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800440c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	429a      	cmp	r2, r3
 8004414:	d903      	bls.n	800441e <pvPortMalloc+0xa6>
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f1      	bne.n	8004402 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800441e:	4b37      	ldr	r3, [pc, #220]	@ (80044fc <pvPortMalloc+0x184>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004424:	429a      	cmp	r2, r3
 8004426:	d051      	beq.n	80044cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2208      	movs	r2, #8
 800442e:	4413      	add	r3, r2
 8004430:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	1ad2      	subs	r2, r2, r3
 8004442:	2308      	movs	r3, #8
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	429a      	cmp	r2, r3
 8004448:	d920      	bls.n	800448c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800444a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4413      	add	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00b      	beq.n	8004474 <pvPortMalloc+0xfc>
	__asm volatile
 800445c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	613b      	str	r3, [r7, #16]
}
 800446e:	bf00      	nop
 8004470:	bf00      	nop
 8004472:	e7fd      	b.n	8004470 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	1ad2      	subs	r2, r2, r3
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004486:	69b8      	ldr	r0, [r7, #24]
 8004488:	f000 f90a 	bl	80046a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800448c:	4b1d      	ldr	r3, [pc, #116]	@ (8004504 <pvPortMalloc+0x18c>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	4a1b      	ldr	r2, [pc, #108]	@ (8004504 <pvPortMalloc+0x18c>)
 8004498:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800449a:	4b1a      	ldr	r3, [pc, #104]	@ (8004504 <pvPortMalloc+0x18c>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b1b      	ldr	r3, [pc, #108]	@ (800450c <pvPortMalloc+0x194>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d203      	bcs.n	80044ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044a6:	4b17      	ldr	r3, [pc, #92]	@ (8004504 <pvPortMalloc+0x18c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a18      	ldr	r2, [pc, #96]	@ (800450c <pvPortMalloc+0x194>)
 80044ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	4b13      	ldr	r3, [pc, #76]	@ (8004500 <pvPortMalloc+0x188>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80044c2:	4b13      	ldr	r3, [pc, #76]	@ (8004510 <pvPortMalloc+0x198>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3301      	adds	r3, #1
 80044c8:	4a11      	ldr	r2, [pc, #68]	@ (8004510 <pvPortMalloc+0x198>)
 80044ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80044cc:	f7ff fa34 	bl	8003938 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00b      	beq.n	80044f2 <pvPortMalloc+0x17a>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	60fb      	str	r3, [r7, #12]
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	e7fd      	b.n	80044ee <pvPortMalloc+0x176>
	return pvReturn;
 80044f2:	69fb      	ldr	r3, [r7, #28]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3728      	adds	r7, #40	@ 0x28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20001060 	.word	0x20001060
 8004500:	20001074 	.word	0x20001074
 8004504:	20001064 	.word	0x20001064
 8004508:	20001058 	.word	0x20001058
 800450c:	20001068 	.word	0x20001068
 8004510:	2000106c 	.word	0x2000106c

08004514 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d04f      	beq.n	80045c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004526:	2308      	movs	r3, #8
 8004528:	425b      	negs	r3, r3
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4413      	add	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	4b25      	ldr	r3, [pc, #148]	@ (80045d0 <vPortFree+0xbc>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10b      	bne.n	800455a <vPortFree+0x46>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	60fb      	str	r3, [r7, #12]
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop
 8004558:	e7fd      	b.n	8004556 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00b      	beq.n	800457a <vPortFree+0x66>
	__asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	60bb      	str	r3, [r7, #8]
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop
 8004578:	e7fd      	b.n	8004576 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	4b14      	ldr	r3, [pc, #80]	@ (80045d0 <vPortFree+0xbc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01e      	beq.n	80045c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d11a      	bne.n	80045c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	4b0e      	ldr	r3, [pc, #56]	@ (80045d0 <vPortFree+0xbc>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	43db      	mvns	r3, r3
 800459a:	401a      	ands	r2, r3
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045a0:	f7ff f9bc 	bl	800391c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	4b0a      	ldr	r3, [pc, #40]	@ (80045d4 <vPortFree+0xc0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4413      	add	r3, r2
 80045ae:	4a09      	ldr	r2, [pc, #36]	@ (80045d4 <vPortFree+0xc0>)
 80045b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045b2:	6938      	ldr	r0, [r7, #16]
 80045b4:	f000 f874 	bl	80046a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80045b8:	4b07      	ldr	r3, [pc, #28]	@ (80045d8 <vPortFree+0xc4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3301      	adds	r3, #1
 80045be:	4a06      	ldr	r2, [pc, #24]	@ (80045d8 <vPortFree+0xc4>)
 80045c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80045c2:	f7ff f9b9 	bl	8003938 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045c6:	bf00      	nop
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20001074 	.word	0x20001074
 80045d4:	20001064 	.word	0x20001064
 80045d8:	20001070 	.word	0x20001070

080045dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045e2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80045e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045e8:	4b27      	ldr	r3, [pc, #156]	@ (8004688 <prvHeapInit+0xac>)
 80045ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00c      	beq.n	8004610 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3307      	adds	r3, #7
 80045fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0307 	bic.w	r3, r3, #7
 8004602:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	4a1f      	ldr	r2, [pc, #124]	@ (8004688 <prvHeapInit+0xac>)
 800460c:	4413      	add	r3, r2
 800460e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004614:	4a1d      	ldr	r2, [pc, #116]	@ (800468c <prvHeapInit+0xb0>)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800461a:	4b1c      	ldr	r3, [pc, #112]	@ (800468c <prvHeapInit+0xb0>)
 800461c:	2200      	movs	r2, #0
 800461e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	4413      	add	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004628:	2208      	movs	r2, #8
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0307 	bic.w	r3, r3, #7
 8004636:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4a15      	ldr	r2, [pc, #84]	@ (8004690 <prvHeapInit+0xb4>)
 800463c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800463e:	4b14      	ldr	r3, [pc, #80]	@ (8004690 <prvHeapInit+0xb4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2200      	movs	r2, #0
 8004644:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004646:	4b12      	ldr	r3, [pc, #72]	@ (8004690 <prvHeapInit+0xb4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	1ad2      	subs	r2, r2, r3
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800465c:	4b0c      	ldr	r3, [pc, #48]	@ (8004690 <prvHeapInit+0xb4>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4a0a      	ldr	r2, [pc, #40]	@ (8004694 <prvHeapInit+0xb8>)
 800466a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	4a09      	ldr	r2, [pc, #36]	@ (8004698 <prvHeapInit+0xbc>)
 8004672:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004674:	4b09      	ldr	r3, [pc, #36]	@ (800469c <prvHeapInit+0xc0>)
 8004676:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800467a:	601a      	str	r2, [r3, #0]
}
 800467c:	bf00      	nop
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	200004a0 	.word	0x200004a0
 800468c:	20001058 	.word	0x20001058
 8004690:	20001060 	.word	0x20001060
 8004694:	20001068 	.word	0x20001068
 8004698:	20001064 	.word	0x20001064
 800469c:	20001074 	.word	0x20001074

080046a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046a8:	4b28      	ldr	r3, [pc, #160]	@ (800474c <prvInsertBlockIntoFreeList+0xac>)
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	e002      	b.n	80046b4 <prvInsertBlockIntoFreeList+0x14>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d8f7      	bhi.n	80046ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	4413      	add	r3, r2
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d108      	bne.n	80046e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	441a      	add	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	441a      	add	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d118      	bne.n	8004728 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4b15      	ldr	r3, [pc, #84]	@ (8004750 <prvInsertBlockIntoFreeList+0xb0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d00d      	beq.n	800471e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	441a      	add	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	e008      	b.n	8004730 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800471e:	4b0c      	ldr	r3, [pc, #48]	@ (8004750 <prvInsertBlockIntoFreeList+0xb0>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e003      	b.n	8004730 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	429a      	cmp	r2, r3
 8004736:	d002      	beq.n	800473e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20001058 	.word	0x20001058
 8004750:	20001060 	.word	0x20001060

08004754 <_vsniprintf_r>:
 8004754:	b530      	push	{r4, r5, lr}
 8004756:	4614      	mov	r4, r2
 8004758:	2c00      	cmp	r4, #0
 800475a:	b09b      	sub	sp, #108	@ 0x6c
 800475c:	4605      	mov	r5, r0
 800475e:	461a      	mov	r2, r3
 8004760:	da05      	bge.n	800476e <_vsniprintf_r+0x1a>
 8004762:	238b      	movs	r3, #139	@ 0x8b
 8004764:	6003      	str	r3, [r0, #0]
 8004766:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800476a:	b01b      	add	sp, #108	@ 0x6c
 800476c:	bd30      	pop	{r4, r5, pc}
 800476e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004772:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	9319      	str	r3, [sp, #100]	@ 0x64
 800477c:	bf14      	ite	ne
 800477e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004782:	4623      	moveq	r3, r4
 8004784:	9302      	str	r3, [sp, #8]
 8004786:	9305      	str	r3, [sp, #20]
 8004788:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800478c:	9100      	str	r1, [sp, #0]
 800478e:	9104      	str	r1, [sp, #16]
 8004790:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004794:	4669      	mov	r1, sp
 8004796:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8004798:	f000 f8b6 	bl	8004908 <_svfiprintf_r>
 800479c:	1c43      	adds	r3, r0, #1
 800479e:	bfbc      	itt	lt
 80047a0:	238b      	movlt	r3, #139	@ 0x8b
 80047a2:	602b      	strlt	r3, [r5, #0]
 80047a4:	2c00      	cmp	r4, #0
 80047a6:	d0e0      	beq.n	800476a <_vsniprintf_r+0x16>
 80047a8:	9b00      	ldr	r3, [sp, #0]
 80047aa:	2200      	movs	r2, #0
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	e7dc      	b.n	800476a <_vsniprintf_r+0x16>

080047b0 <vsniprintf>:
 80047b0:	b507      	push	{r0, r1, r2, lr}
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	460a      	mov	r2, r1
 80047b8:	4601      	mov	r1, r0
 80047ba:	4803      	ldr	r0, [pc, #12]	@ (80047c8 <vsniprintf+0x18>)
 80047bc:	6800      	ldr	r0, [r0, #0]
 80047be:	f7ff ffc9 	bl	8004754 <_vsniprintf_r>
 80047c2:	b003      	add	sp, #12
 80047c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80047c8:	20000010 	.word	0x20000010

080047cc <memset>:
 80047cc:	4402      	add	r2, r0
 80047ce:	4603      	mov	r3, r0
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d100      	bne.n	80047d6 <memset+0xa>
 80047d4:	4770      	bx	lr
 80047d6:	f803 1b01 	strb.w	r1, [r3], #1
 80047da:	e7f9      	b.n	80047d0 <memset+0x4>

080047dc <__errno>:
 80047dc:	4b01      	ldr	r3, [pc, #4]	@ (80047e4 <__errno+0x8>)
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000010 	.word	0x20000010

080047e8 <__libc_init_array>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004820 <__libc_init_array+0x38>)
 80047ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004824 <__libc_init_array+0x3c>)
 80047ee:	1b64      	subs	r4, r4, r5
 80047f0:	10a4      	asrs	r4, r4, #2
 80047f2:	2600      	movs	r6, #0
 80047f4:	42a6      	cmp	r6, r4
 80047f6:	d109      	bne.n	800480c <__libc_init_array+0x24>
 80047f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004828 <__libc_init_array+0x40>)
 80047fa:	4c0c      	ldr	r4, [pc, #48]	@ (800482c <__libc_init_array+0x44>)
 80047fc:	f000 fc64 	bl	80050c8 <_init>
 8004800:	1b64      	subs	r4, r4, r5
 8004802:	10a4      	asrs	r4, r4, #2
 8004804:	2600      	movs	r6, #0
 8004806:	42a6      	cmp	r6, r4
 8004808:	d105      	bne.n	8004816 <__libc_init_array+0x2e>
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004810:	4798      	blx	r3
 8004812:	3601      	adds	r6, #1
 8004814:	e7ee      	b.n	80047f4 <__libc_init_array+0xc>
 8004816:	f855 3b04 	ldr.w	r3, [r5], #4
 800481a:	4798      	blx	r3
 800481c:	3601      	adds	r6, #1
 800481e:	e7f2      	b.n	8004806 <__libc_init_array+0x1e>
 8004820:	080051cc 	.word	0x080051cc
 8004824:	080051cc 	.word	0x080051cc
 8004828:	080051cc 	.word	0x080051cc
 800482c:	080051d0 	.word	0x080051d0

08004830 <__retarget_lock_acquire_recursive>:
 8004830:	4770      	bx	lr

08004832 <__retarget_lock_release_recursive>:
 8004832:	4770      	bx	lr

08004834 <memcpy>:
 8004834:	440a      	add	r2, r1
 8004836:	4291      	cmp	r1, r2
 8004838:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800483c:	d100      	bne.n	8004840 <memcpy+0xc>
 800483e:	4770      	bx	lr
 8004840:	b510      	push	{r4, lr}
 8004842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800484a:	4291      	cmp	r1, r2
 800484c:	d1f9      	bne.n	8004842 <memcpy+0xe>
 800484e:	bd10      	pop	{r4, pc}

08004850 <__ssputs_r>:
 8004850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004854:	688e      	ldr	r6, [r1, #8]
 8004856:	461f      	mov	r7, r3
 8004858:	42be      	cmp	r6, r7
 800485a:	680b      	ldr	r3, [r1, #0]
 800485c:	4682      	mov	sl, r0
 800485e:	460c      	mov	r4, r1
 8004860:	4690      	mov	r8, r2
 8004862:	d82d      	bhi.n	80048c0 <__ssputs_r+0x70>
 8004864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004868:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800486c:	d026      	beq.n	80048bc <__ssputs_r+0x6c>
 800486e:	6965      	ldr	r5, [r4, #20]
 8004870:	6909      	ldr	r1, [r1, #16]
 8004872:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004876:	eba3 0901 	sub.w	r9, r3, r1
 800487a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800487e:	1c7b      	adds	r3, r7, #1
 8004880:	444b      	add	r3, r9
 8004882:	106d      	asrs	r5, r5, #1
 8004884:	429d      	cmp	r5, r3
 8004886:	bf38      	it	cc
 8004888:	461d      	movcc	r5, r3
 800488a:	0553      	lsls	r3, r2, #21
 800488c:	d527      	bpl.n	80048de <__ssputs_r+0x8e>
 800488e:	4629      	mov	r1, r5
 8004890:	f000 f958 	bl	8004b44 <_malloc_r>
 8004894:	4606      	mov	r6, r0
 8004896:	b360      	cbz	r0, 80048f2 <__ssputs_r+0xa2>
 8004898:	6921      	ldr	r1, [r4, #16]
 800489a:	464a      	mov	r2, r9
 800489c:	f7ff ffca 	bl	8004834 <memcpy>
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80048a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048aa:	81a3      	strh	r3, [r4, #12]
 80048ac:	6126      	str	r6, [r4, #16]
 80048ae:	6165      	str	r5, [r4, #20]
 80048b0:	444e      	add	r6, r9
 80048b2:	eba5 0509 	sub.w	r5, r5, r9
 80048b6:	6026      	str	r6, [r4, #0]
 80048b8:	60a5      	str	r5, [r4, #8]
 80048ba:	463e      	mov	r6, r7
 80048bc:	42be      	cmp	r6, r7
 80048be:	d900      	bls.n	80048c2 <__ssputs_r+0x72>
 80048c0:	463e      	mov	r6, r7
 80048c2:	6820      	ldr	r0, [r4, #0]
 80048c4:	4632      	mov	r2, r6
 80048c6:	4641      	mov	r1, r8
 80048c8:	f000 fb82 	bl	8004fd0 <memmove>
 80048cc:	68a3      	ldr	r3, [r4, #8]
 80048ce:	1b9b      	subs	r3, r3, r6
 80048d0:	60a3      	str	r3, [r4, #8]
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	4433      	add	r3, r6
 80048d6:	6023      	str	r3, [r4, #0]
 80048d8:	2000      	movs	r0, #0
 80048da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048de:	462a      	mov	r2, r5
 80048e0:	f000 fb48 	bl	8004f74 <_realloc_r>
 80048e4:	4606      	mov	r6, r0
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d1e0      	bne.n	80048ac <__ssputs_r+0x5c>
 80048ea:	6921      	ldr	r1, [r4, #16]
 80048ec:	4650      	mov	r0, sl
 80048ee:	f000 fb99 	bl	8005024 <_free_r>
 80048f2:	230c      	movs	r3, #12
 80048f4:	f8ca 3000 	str.w	r3, [sl]
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048fe:	81a3      	strh	r3, [r4, #12]
 8004900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004904:	e7e9      	b.n	80048da <__ssputs_r+0x8a>
	...

08004908 <_svfiprintf_r>:
 8004908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490c:	4698      	mov	r8, r3
 800490e:	898b      	ldrh	r3, [r1, #12]
 8004910:	061b      	lsls	r3, r3, #24
 8004912:	b09d      	sub	sp, #116	@ 0x74
 8004914:	4607      	mov	r7, r0
 8004916:	460d      	mov	r5, r1
 8004918:	4614      	mov	r4, r2
 800491a:	d510      	bpl.n	800493e <_svfiprintf_r+0x36>
 800491c:	690b      	ldr	r3, [r1, #16]
 800491e:	b973      	cbnz	r3, 800493e <_svfiprintf_r+0x36>
 8004920:	2140      	movs	r1, #64	@ 0x40
 8004922:	f000 f90f 	bl	8004b44 <_malloc_r>
 8004926:	6028      	str	r0, [r5, #0]
 8004928:	6128      	str	r0, [r5, #16]
 800492a:	b930      	cbnz	r0, 800493a <_svfiprintf_r+0x32>
 800492c:	230c      	movs	r3, #12
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004934:	b01d      	add	sp, #116	@ 0x74
 8004936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800493a:	2340      	movs	r3, #64	@ 0x40
 800493c:	616b      	str	r3, [r5, #20]
 800493e:	2300      	movs	r3, #0
 8004940:	9309      	str	r3, [sp, #36]	@ 0x24
 8004942:	2320      	movs	r3, #32
 8004944:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004948:	f8cd 800c 	str.w	r8, [sp, #12]
 800494c:	2330      	movs	r3, #48	@ 0x30
 800494e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004aec <_svfiprintf_r+0x1e4>
 8004952:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004956:	f04f 0901 	mov.w	r9, #1
 800495a:	4623      	mov	r3, r4
 800495c:	469a      	mov	sl, r3
 800495e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004962:	b10a      	cbz	r2, 8004968 <_svfiprintf_r+0x60>
 8004964:	2a25      	cmp	r2, #37	@ 0x25
 8004966:	d1f9      	bne.n	800495c <_svfiprintf_r+0x54>
 8004968:	ebba 0b04 	subs.w	fp, sl, r4
 800496c:	d00b      	beq.n	8004986 <_svfiprintf_r+0x7e>
 800496e:	465b      	mov	r3, fp
 8004970:	4622      	mov	r2, r4
 8004972:	4629      	mov	r1, r5
 8004974:	4638      	mov	r0, r7
 8004976:	f7ff ff6b 	bl	8004850 <__ssputs_r>
 800497a:	3001      	adds	r0, #1
 800497c:	f000 80a7 	beq.w	8004ace <_svfiprintf_r+0x1c6>
 8004980:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004982:	445a      	add	r2, fp
 8004984:	9209      	str	r2, [sp, #36]	@ 0x24
 8004986:	f89a 3000 	ldrb.w	r3, [sl]
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 809f 	beq.w	8004ace <_svfiprintf_r+0x1c6>
 8004990:	2300      	movs	r3, #0
 8004992:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004996:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800499a:	f10a 0a01 	add.w	sl, sl, #1
 800499e:	9304      	str	r3, [sp, #16]
 80049a0:	9307      	str	r3, [sp, #28]
 80049a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80049a8:	4654      	mov	r4, sl
 80049aa:	2205      	movs	r2, #5
 80049ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b0:	484e      	ldr	r0, [pc, #312]	@ (8004aec <_svfiprintf_r+0x1e4>)
 80049b2:	f7fb fc0d 	bl	80001d0 <memchr>
 80049b6:	9a04      	ldr	r2, [sp, #16]
 80049b8:	b9d8      	cbnz	r0, 80049f2 <_svfiprintf_r+0xea>
 80049ba:	06d0      	lsls	r0, r2, #27
 80049bc:	bf44      	itt	mi
 80049be:	2320      	movmi	r3, #32
 80049c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049c4:	0711      	lsls	r1, r2, #28
 80049c6:	bf44      	itt	mi
 80049c8:	232b      	movmi	r3, #43	@ 0x2b
 80049ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049ce:	f89a 3000 	ldrb.w	r3, [sl]
 80049d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80049d4:	d015      	beq.n	8004a02 <_svfiprintf_r+0xfa>
 80049d6:	9a07      	ldr	r2, [sp, #28]
 80049d8:	4654      	mov	r4, sl
 80049da:	2000      	movs	r0, #0
 80049dc:	f04f 0c0a 	mov.w	ip, #10
 80049e0:	4621      	mov	r1, r4
 80049e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049e6:	3b30      	subs	r3, #48	@ 0x30
 80049e8:	2b09      	cmp	r3, #9
 80049ea:	d94b      	bls.n	8004a84 <_svfiprintf_r+0x17c>
 80049ec:	b1b0      	cbz	r0, 8004a1c <_svfiprintf_r+0x114>
 80049ee:	9207      	str	r2, [sp, #28]
 80049f0:	e014      	b.n	8004a1c <_svfiprintf_r+0x114>
 80049f2:	eba0 0308 	sub.w	r3, r0, r8
 80049f6:	fa09 f303 	lsl.w	r3, r9, r3
 80049fa:	4313      	orrs	r3, r2
 80049fc:	9304      	str	r3, [sp, #16]
 80049fe:	46a2      	mov	sl, r4
 8004a00:	e7d2      	b.n	80049a8 <_svfiprintf_r+0xa0>
 8004a02:	9b03      	ldr	r3, [sp, #12]
 8004a04:	1d19      	adds	r1, r3, #4
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	9103      	str	r1, [sp, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bfbb      	ittet	lt
 8004a0e:	425b      	neglt	r3, r3
 8004a10:	f042 0202 	orrlt.w	r2, r2, #2
 8004a14:	9307      	strge	r3, [sp, #28]
 8004a16:	9307      	strlt	r3, [sp, #28]
 8004a18:	bfb8      	it	lt
 8004a1a:	9204      	strlt	r2, [sp, #16]
 8004a1c:	7823      	ldrb	r3, [r4, #0]
 8004a1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a20:	d10a      	bne.n	8004a38 <_svfiprintf_r+0x130>
 8004a22:	7863      	ldrb	r3, [r4, #1]
 8004a24:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a26:	d132      	bne.n	8004a8e <_svfiprintf_r+0x186>
 8004a28:	9b03      	ldr	r3, [sp, #12]
 8004a2a:	1d1a      	adds	r2, r3, #4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	9203      	str	r2, [sp, #12]
 8004a30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a34:	3402      	adds	r4, #2
 8004a36:	9305      	str	r3, [sp, #20]
 8004a38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004afc <_svfiprintf_r+0x1f4>
 8004a3c:	7821      	ldrb	r1, [r4, #0]
 8004a3e:	2203      	movs	r2, #3
 8004a40:	4650      	mov	r0, sl
 8004a42:	f7fb fbc5 	bl	80001d0 <memchr>
 8004a46:	b138      	cbz	r0, 8004a58 <_svfiprintf_r+0x150>
 8004a48:	9b04      	ldr	r3, [sp, #16]
 8004a4a:	eba0 000a 	sub.w	r0, r0, sl
 8004a4e:	2240      	movs	r2, #64	@ 0x40
 8004a50:	4082      	lsls	r2, r0
 8004a52:	4313      	orrs	r3, r2
 8004a54:	3401      	adds	r4, #1
 8004a56:	9304      	str	r3, [sp, #16]
 8004a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5c:	4824      	ldr	r0, [pc, #144]	@ (8004af0 <_svfiprintf_r+0x1e8>)
 8004a5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a62:	2206      	movs	r2, #6
 8004a64:	f7fb fbb4 	bl	80001d0 <memchr>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d036      	beq.n	8004ada <_svfiprintf_r+0x1d2>
 8004a6c:	4b21      	ldr	r3, [pc, #132]	@ (8004af4 <_svfiprintf_r+0x1ec>)
 8004a6e:	bb1b      	cbnz	r3, 8004ab8 <_svfiprintf_r+0x1b0>
 8004a70:	9b03      	ldr	r3, [sp, #12]
 8004a72:	3307      	adds	r3, #7
 8004a74:	f023 0307 	bic.w	r3, r3, #7
 8004a78:	3308      	adds	r3, #8
 8004a7a:	9303      	str	r3, [sp, #12]
 8004a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a7e:	4433      	add	r3, r6
 8004a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a82:	e76a      	b.n	800495a <_svfiprintf_r+0x52>
 8004a84:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a88:	460c      	mov	r4, r1
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	e7a8      	b.n	80049e0 <_svfiprintf_r+0xd8>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	3401      	adds	r4, #1
 8004a92:	9305      	str	r3, [sp, #20]
 8004a94:	4619      	mov	r1, r3
 8004a96:	f04f 0c0a 	mov.w	ip, #10
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aa0:	3a30      	subs	r2, #48	@ 0x30
 8004aa2:	2a09      	cmp	r2, #9
 8004aa4:	d903      	bls.n	8004aae <_svfiprintf_r+0x1a6>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0c6      	beq.n	8004a38 <_svfiprintf_r+0x130>
 8004aaa:	9105      	str	r1, [sp, #20]
 8004aac:	e7c4      	b.n	8004a38 <_svfiprintf_r+0x130>
 8004aae:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e7f0      	b.n	8004a9a <_svfiprintf_r+0x192>
 8004ab8:	ab03      	add	r3, sp, #12
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	462a      	mov	r2, r5
 8004abe:	4b0e      	ldr	r3, [pc, #56]	@ (8004af8 <_svfiprintf_r+0x1f0>)
 8004ac0:	a904      	add	r1, sp, #16
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	f3af 8000 	nop.w
 8004ac8:	1c42      	adds	r2, r0, #1
 8004aca:	4606      	mov	r6, r0
 8004acc:	d1d6      	bne.n	8004a7c <_svfiprintf_r+0x174>
 8004ace:	89ab      	ldrh	r3, [r5, #12]
 8004ad0:	065b      	lsls	r3, r3, #25
 8004ad2:	f53f af2d 	bmi.w	8004930 <_svfiprintf_r+0x28>
 8004ad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ad8:	e72c      	b.n	8004934 <_svfiprintf_r+0x2c>
 8004ada:	ab03      	add	r3, sp, #12
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	462a      	mov	r2, r5
 8004ae0:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <_svfiprintf_r+0x1f0>)
 8004ae2:	a904      	add	r1, sp, #16
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	f000 f91b 	bl	8004d20 <_printf_i>
 8004aea:	e7ed      	b.n	8004ac8 <_svfiprintf_r+0x1c0>
 8004aec:	08005190 	.word	0x08005190
 8004af0:	0800519a 	.word	0x0800519a
 8004af4:	00000000 	.word	0x00000000
 8004af8:	08004851 	.word	0x08004851
 8004afc:	08005196 	.word	0x08005196

08004b00 <sbrk_aligned>:
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	4e0f      	ldr	r6, [pc, #60]	@ (8004b40 <sbrk_aligned+0x40>)
 8004b04:	460c      	mov	r4, r1
 8004b06:	6831      	ldr	r1, [r6, #0]
 8004b08:	4605      	mov	r5, r0
 8004b0a:	b911      	cbnz	r1, 8004b12 <sbrk_aligned+0x12>
 8004b0c:	f000 fa7a 	bl	8005004 <_sbrk_r>
 8004b10:	6030      	str	r0, [r6, #0]
 8004b12:	4621      	mov	r1, r4
 8004b14:	4628      	mov	r0, r5
 8004b16:	f000 fa75 	bl	8005004 <_sbrk_r>
 8004b1a:	1c43      	adds	r3, r0, #1
 8004b1c:	d103      	bne.n	8004b26 <sbrk_aligned+0x26>
 8004b1e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004b22:	4620      	mov	r0, r4
 8004b24:	bd70      	pop	{r4, r5, r6, pc}
 8004b26:	1cc4      	adds	r4, r0, #3
 8004b28:	f024 0403 	bic.w	r4, r4, #3
 8004b2c:	42a0      	cmp	r0, r4
 8004b2e:	d0f8      	beq.n	8004b22 <sbrk_aligned+0x22>
 8004b30:	1a21      	subs	r1, r4, r0
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 fa66 	bl	8005004 <_sbrk_r>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d1f2      	bne.n	8004b22 <sbrk_aligned+0x22>
 8004b3c:	e7ef      	b.n	8004b1e <sbrk_aligned+0x1e>
 8004b3e:	bf00      	nop
 8004b40:	200011b4 	.word	0x200011b4

08004b44 <_malloc_r>:
 8004b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b48:	1ccd      	adds	r5, r1, #3
 8004b4a:	f025 0503 	bic.w	r5, r5, #3
 8004b4e:	3508      	adds	r5, #8
 8004b50:	2d0c      	cmp	r5, #12
 8004b52:	bf38      	it	cc
 8004b54:	250c      	movcc	r5, #12
 8004b56:	2d00      	cmp	r5, #0
 8004b58:	4606      	mov	r6, r0
 8004b5a:	db01      	blt.n	8004b60 <_malloc_r+0x1c>
 8004b5c:	42a9      	cmp	r1, r5
 8004b5e:	d904      	bls.n	8004b6a <_malloc_r+0x26>
 8004b60:	230c      	movs	r3, #12
 8004b62:	6033      	str	r3, [r6, #0]
 8004b64:	2000      	movs	r0, #0
 8004b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c40 <_malloc_r+0xfc>
 8004b6e:	f000 f9f5 	bl	8004f5c <__malloc_lock>
 8004b72:	f8d8 3000 	ldr.w	r3, [r8]
 8004b76:	461c      	mov	r4, r3
 8004b78:	bb44      	cbnz	r4, 8004bcc <_malloc_r+0x88>
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f7ff ffbf 	bl	8004b00 <sbrk_aligned>
 8004b82:	1c43      	adds	r3, r0, #1
 8004b84:	4604      	mov	r4, r0
 8004b86:	d158      	bne.n	8004c3a <_malloc_r+0xf6>
 8004b88:	f8d8 4000 	ldr.w	r4, [r8]
 8004b8c:	4627      	mov	r7, r4
 8004b8e:	2f00      	cmp	r7, #0
 8004b90:	d143      	bne.n	8004c1a <_malloc_r+0xd6>
 8004b92:	2c00      	cmp	r4, #0
 8004b94:	d04b      	beq.n	8004c2e <_malloc_r+0xea>
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	4639      	mov	r1, r7
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	eb04 0903 	add.w	r9, r4, r3
 8004ba0:	f000 fa30 	bl	8005004 <_sbrk_r>
 8004ba4:	4581      	cmp	r9, r0
 8004ba6:	d142      	bne.n	8004c2e <_malloc_r+0xea>
 8004ba8:	6821      	ldr	r1, [r4, #0]
 8004baa:	1a6d      	subs	r5, r5, r1
 8004bac:	4629      	mov	r1, r5
 8004bae:	4630      	mov	r0, r6
 8004bb0:	f7ff ffa6 	bl	8004b00 <sbrk_aligned>
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d03a      	beq.n	8004c2e <_malloc_r+0xea>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	442b      	add	r3, r5
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	bb62      	cbnz	r2, 8004c20 <_malloc_r+0xdc>
 8004bc6:	f8c8 7000 	str.w	r7, [r8]
 8004bca:	e00f      	b.n	8004bec <_malloc_r+0xa8>
 8004bcc:	6822      	ldr	r2, [r4, #0]
 8004bce:	1b52      	subs	r2, r2, r5
 8004bd0:	d420      	bmi.n	8004c14 <_malloc_r+0xd0>
 8004bd2:	2a0b      	cmp	r2, #11
 8004bd4:	d917      	bls.n	8004c06 <_malloc_r+0xc2>
 8004bd6:	1961      	adds	r1, r4, r5
 8004bd8:	42a3      	cmp	r3, r4
 8004bda:	6025      	str	r5, [r4, #0]
 8004bdc:	bf18      	it	ne
 8004bde:	6059      	strne	r1, [r3, #4]
 8004be0:	6863      	ldr	r3, [r4, #4]
 8004be2:	bf08      	it	eq
 8004be4:	f8c8 1000 	streq.w	r1, [r8]
 8004be8:	5162      	str	r2, [r4, r5]
 8004bea:	604b      	str	r3, [r1, #4]
 8004bec:	4630      	mov	r0, r6
 8004bee:	f000 f9bb 	bl	8004f68 <__malloc_unlock>
 8004bf2:	f104 000b 	add.w	r0, r4, #11
 8004bf6:	1d23      	adds	r3, r4, #4
 8004bf8:	f020 0007 	bic.w	r0, r0, #7
 8004bfc:	1ac2      	subs	r2, r0, r3
 8004bfe:	bf1c      	itt	ne
 8004c00:	1a1b      	subne	r3, r3, r0
 8004c02:	50a3      	strne	r3, [r4, r2]
 8004c04:	e7af      	b.n	8004b66 <_malloc_r+0x22>
 8004c06:	6862      	ldr	r2, [r4, #4]
 8004c08:	42a3      	cmp	r3, r4
 8004c0a:	bf0c      	ite	eq
 8004c0c:	f8c8 2000 	streq.w	r2, [r8]
 8004c10:	605a      	strne	r2, [r3, #4]
 8004c12:	e7eb      	b.n	8004bec <_malloc_r+0xa8>
 8004c14:	4623      	mov	r3, r4
 8004c16:	6864      	ldr	r4, [r4, #4]
 8004c18:	e7ae      	b.n	8004b78 <_malloc_r+0x34>
 8004c1a:	463c      	mov	r4, r7
 8004c1c:	687f      	ldr	r7, [r7, #4]
 8004c1e:	e7b6      	b.n	8004b8e <_malloc_r+0x4a>
 8004c20:	461a      	mov	r2, r3
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	d1fb      	bne.n	8004c20 <_malloc_r+0xdc>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	6053      	str	r3, [r2, #4]
 8004c2c:	e7de      	b.n	8004bec <_malloc_r+0xa8>
 8004c2e:	230c      	movs	r3, #12
 8004c30:	6033      	str	r3, [r6, #0]
 8004c32:	4630      	mov	r0, r6
 8004c34:	f000 f998 	bl	8004f68 <__malloc_unlock>
 8004c38:	e794      	b.n	8004b64 <_malloc_r+0x20>
 8004c3a:	6005      	str	r5, [r0, #0]
 8004c3c:	e7d6      	b.n	8004bec <_malloc_r+0xa8>
 8004c3e:	bf00      	nop
 8004c40:	200011b8 	.word	0x200011b8

08004c44 <_printf_common>:
 8004c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c48:	4616      	mov	r6, r2
 8004c4a:	4698      	mov	r8, r3
 8004c4c:	688a      	ldr	r2, [r1, #8]
 8004c4e:	690b      	ldr	r3, [r1, #16]
 8004c50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c54:	4293      	cmp	r3, r2
 8004c56:	bfb8      	it	lt
 8004c58:	4613      	movlt	r3, r2
 8004c5a:	6033      	str	r3, [r6, #0]
 8004c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c60:	4607      	mov	r7, r0
 8004c62:	460c      	mov	r4, r1
 8004c64:	b10a      	cbz	r2, 8004c6a <_printf_common+0x26>
 8004c66:	3301      	adds	r3, #1
 8004c68:	6033      	str	r3, [r6, #0]
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	0699      	lsls	r1, r3, #26
 8004c6e:	bf42      	ittt	mi
 8004c70:	6833      	ldrmi	r3, [r6, #0]
 8004c72:	3302      	addmi	r3, #2
 8004c74:	6033      	strmi	r3, [r6, #0]
 8004c76:	6825      	ldr	r5, [r4, #0]
 8004c78:	f015 0506 	ands.w	r5, r5, #6
 8004c7c:	d106      	bne.n	8004c8c <_printf_common+0x48>
 8004c7e:	f104 0a19 	add.w	sl, r4, #25
 8004c82:	68e3      	ldr	r3, [r4, #12]
 8004c84:	6832      	ldr	r2, [r6, #0]
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	42ab      	cmp	r3, r5
 8004c8a:	dc26      	bgt.n	8004cda <_printf_common+0x96>
 8004c8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c90:	6822      	ldr	r2, [r4, #0]
 8004c92:	3b00      	subs	r3, #0
 8004c94:	bf18      	it	ne
 8004c96:	2301      	movne	r3, #1
 8004c98:	0692      	lsls	r2, r2, #26
 8004c9a:	d42b      	bmi.n	8004cf4 <_printf_common+0xb0>
 8004c9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	47c8      	blx	r9
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d01e      	beq.n	8004ce8 <_printf_common+0xa4>
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	6922      	ldr	r2, [r4, #16]
 8004cae:	f003 0306 	and.w	r3, r3, #6
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	bf02      	ittt	eq
 8004cb6:	68e5      	ldreq	r5, [r4, #12]
 8004cb8:	6833      	ldreq	r3, [r6, #0]
 8004cba:	1aed      	subeq	r5, r5, r3
 8004cbc:	68a3      	ldr	r3, [r4, #8]
 8004cbe:	bf0c      	ite	eq
 8004cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cc4:	2500      	movne	r5, #0
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	bfc4      	itt	gt
 8004cca:	1a9b      	subgt	r3, r3, r2
 8004ccc:	18ed      	addgt	r5, r5, r3
 8004cce:	2600      	movs	r6, #0
 8004cd0:	341a      	adds	r4, #26
 8004cd2:	42b5      	cmp	r5, r6
 8004cd4:	d11a      	bne.n	8004d0c <_printf_common+0xc8>
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	e008      	b.n	8004cec <_printf_common+0xa8>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	4652      	mov	r2, sl
 8004cde:	4641      	mov	r1, r8
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	47c8      	blx	r9
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	d103      	bne.n	8004cf0 <_printf_common+0xac>
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf0:	3501      	adds	r5, #1
 8004cf2:	e7c6      	b.n	8004c82 <_printf_common+0x3e>
 8004cf4:	18e1      	adds	r1, r4, r3
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	2030      	movs	r0, #48	@ 0x30
 8004cfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cfe:	4422      	add	r2, r4
 8004d00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d08:	3302      	adds	r3, #2
 8004d0a:	e7c7      	b.n	8004c9c <_printf_common+0x58>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	4622      	mov	r2, r4
 8004d10:	4641      	mov	r1, r8
 8004d12:	4638      	mov	r0, r7
 8004d14:	47c8      	blx	r9
 8004d16:	3001      	adds	r0, #1
 8004d18:	d0e6      	beq.n	8004ce8 <_printf_common+0xa4>
 8004d1a:	3601      	adds	r6, #1
 8004d1c:	e7d9      	b.n	8004cd2 <_printf_common+0x8e>
	...

08004d20 <_printf_i>:
 8004d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d24:	7e0f      	ldrb	r7, [r1, #24]
 8004d26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d28:	2f78      	cmp	r7, #120	@ 0x78
 8004d2a:	4691      	mov	r9, r2
 8004d2c:	4680      	mov	r8, r0
 8004d2e:	460c      	mov	r4, r1
 8004d30:	469a      	mov	sl, r3
 8004d32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d36:	d807      	bhi.n	8004d48 <_printf_i+0x28>
 8004d38:	2f62      	cmp	r7, #98	@ 0x62
 8004d3a:	d80a      	bhi.n	8004d52 <_printf_i+0x32>
 8004d3c:	2f00      	cmp	r7, #0
 8004d3e:	f000 80d1 	beq.w	8004ee4 <_printf_i+0x1c4>
 8004d42:	2f58      	cmp	r7, #88	@ 0x58
 8004d44:	f000 80b8 	beq.w	8004eb8 <_printf_i+0x198>
 8004d48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d50:	e03a      	b.n	8004dc8 <_printf_i+0xa8>
 8004d52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d56:	2b15      	cmp	r3, #21
 8004d58:	d8f6      	bhi.n	8004d48 <_printf_i+0x28>
 8004d5a:	a101      	add	r1, pc, #4	@ (adr r1, 8004d60 <_printf_i+0x40>)
 8004d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d60:	08004db9 	.word	0x08004db9
 8004d64:	08004dcd 	.word	0x08004dcd
 8004d68:	08004d49 	.word	0x08004d49
 8004d6c:	08004d49 	.word	0x08004d49
 8004d70:	08004d49 	.word	0x08004d49
 8004d74:	08004d49 	.word	0x08004d49
 8004d78:	08004dcd 	.word	0x08004dcd
 8004d7c:	08004d49 	.word	0x08004d49
 8004d80:	08004d49 	.word	0x08004d49
 8004d84:	08004d49 	.word	0x08004d49
 8004d88:	08004d49 	.word	0x08004d49
 8004d8c:	08004ecb 	.word	0x08004ecb
 8004d90:	08004df7 	.word	0x08004df7
 8004d94:	08004e85 	.word	0x08004e85
 8004d98:	08004d49 	.word	0x08004d49
 8004d9c:	08004d49 	.word	0x08004d49
 8004da0:	08004eed 	.word	0x08004eed
 8004da4:	08004d49 	.word	0x08004d49
 8004da8:	08004df7 	.word	0x08004df7
 8004dac:	08004d49 	.word	0x08004d49
 8004db0:	08004d49 	.word	0x08004d49
 8004db4:	08004e8d 	.word	0x08004e8d
 8004db8:	6833      	ldr	r3, [r6, #0]
 8004dba:	1d1a      	adds	r2, r3, #4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6032      	str	r2, [r6, #0]
 8004dc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e09c      	b.n	8004f06 <_printf_i+0x1e6>
 8004dcc:	6833      	ldr	r3, [r6, #0]
 8004dce:	6820      	ldr	r0, [r4, #0]
 8004dd0:	1d19      	adds	r1, r3, #4
 8004dd2:	6031      	str	r1, [r6, #0]
 8004dd4:	0606      	lsls	r6, r0, #24
 8004dd6:	d501      	bpl.n	8004ddc <_printf_i+0xbc>
 8004dd8:	681d      	ldr	r5, [r3, #0]
 8004dda:	e003      	b.n	8004de4 <_printf_i+0xc4>
 8004ddc:	0645      	lsls	r5, r0, #25
 8004dde:	d5fb      	bpl.n	8004dd8 <_printf_i+0xb8>
 8004de0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004de4:	2d00      	cmp	r5, #0
 8004de6:	da03      	bge.n	8004df0 <_printf_i+0xd0>
 8004de8:	232d      	movs	r3, #45	@ 0x2d
 8004dea:	426d      	negs	r5, r5
 8004dec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004df0:	4858      	ldr	r0, [pc, #352]	@ (8004f54 <_printf_i+0x234>)
 8004df2:	230a      	movs	r3, #10
 8004df4:	e011      	b.n	8004e1a <_printf_i+0xfa>
 8004df6:	6821      	ldr	r1, [r4, #0]
 8004df8:	6833      	ldr	r3, [r6, #0]
 8004dfa:	0608      	lsls	r0, r1, #24
 8004dfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e00:	d402      	bmi.n	8004e08 <_printf_i+0xe8>
 8004e02:	0649      	lsls	r1, r1, #25
 8004e04:	bf48      	it	mi
 8004e06:	b2ad      	uxthmi	r5, r5
 8004e08:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e0a:	4852      	ldr	r0, [pc, #328]	@ (8004f54 <_printf_i+0x234>)
 8004e0c:	6033      	str	r3, [r6, #0]
 8004e0e:	bf14      	ite	ne
 8004e10:	230a      	movne	r3, #10
 8004e12:	2308      	moveq	r3, #8
 8004e14:	2100      	movs	r1, #0
 8004e16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e1a:	6866      	ldr	r6, [r4, #4]
 8004e1c:	60a6      	str	r6, [r4, #8]
 8004e1e:	2e00      	cmp	r6, #0
 8004e20:	db05      	blt.n	8004e2e <_printf_i+0x10e>
 8004e22:	6821      	ldr	r1, [r4, #0]
 8004e24:	432e      	orrs	r6, r5
 8004e26:	f021 0104 	bic.w	r1, r1, #4
 8004e2a:	6021      	str	r1, [r4, #0]
 8004e2c:	d04b      	beq.n	8004ec6 <_printf_i+0x1a6>
 8004e2e:	4616      	mov	r6, r2
 8004e30:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e34:	fb03 5711 	mls	r7, r3, r1, r5
 8004e38:	5dc7      	ldrb	r7, [r0, r7]
 8004e3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e3e:	462f      	mov	r7, r5
 8004e40:	42bb      	cmp	r3, r7
 8004e42:	460d      	mov	r5, r1
 8004e44:	d9f4      	bls.n	8004e30 <_printf_i+0x110>
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d10b      	bne.n	8004e62 <_printf_i+0x142>
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	07df      	lsls	r7, r3, #31
 8004e4e:	d508      	bpl.n	8004e62 <_printf_i+0x142>
 8004e50:	6923      	ldr	r3, [r4, #16]
 8004e52:	6861      	ldr	r1, [r4, #4]
 8004e54:	4299      	cmp	r1, r3
 8004e56:	bfde      	ittt	le
 8004e58:	2330      	movle	r3, #48	@ 0x30
 8004e5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e5e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004e62:	1b92      	subs	r2, r2, r6
 8004e64:	6122      	str	r2, [r4, #16]
 8004e66:	f8cd a000 	str.w	sl, [sp]
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	aa03      	add	r2, sp, #12
 8004e6e:	4621      	mov	r1, r4
 8004e70:	4640      	mov	r0, r8
 8004e72:	f7ff fee7 	bl	8004c44 <_printf_common>
 8004e76:	3001      	adds	r0, #1
 8004e78:	d14a      	bne.n	8004f10 <_printf_i+0x1f0>
 8004e7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e7e:	b004      	add	sp, #16
 8004e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	f043 0320 	orr.w	r3, r3, #32
 8004e8a:	6023      	str	r3, [r4, #0]
 8004e8c:	4832      	ldr	r0, [pc, #200]	@ (8004f58 <_printf_i+0x238>)
 8004e8e:	2778      	movs	r7, #120	@ 0x78
 8004e90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	6831      	ldr	r1, [r6, #0]
 8004e98:	061f      	lsls	r7, r3, #24
 8004e9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e9e:	d402      	bmi.n	8004ea6 <_printf_i+0x186>
 8004ea0:	065f      	lsls	r7, r3, #25
 8004ea2:	bf48      	it	mi
 8004ea4:	b2ad      	uxthmi	r5, r5
 8004ea6:	6031      	str	r1, [r6, #0]
 8004ea8:	07d9      	lsls	r1, r3, #31
 8004eaa:	bf44      	itt	mi
 8004eac:	f043 0320 	orrmi.w	r3, r3, #32
 8004eb0:	6023      	strmi	r3, [r4, #0]
 8004eb2:	b11d      	cbz	r5, 8004ebc <_printf_i+0x19c>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	e7ad      	b.n	8004e14 <_printf_i+0xf4>
 8004eb8:	4826      	ldr	r0, [pc, #152]	@ (8004f54 <_printf_i+0x234>)
 8004eba:	e7e9      	b.n	8004e90 <_printf_i+0x170>
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	f023 0320 	bic.w	r3, r3, #32
 8004ec2:	6023      	str	r3, [r4, #0]
 8004ec4:	e7f6      	b.n	8004eb4 <_printf_i+0x194>
 8004ec6:	4616      	mov	r6, r2
 8004ec8:	e7bd      	b.n	8004e46 <_printf_i+0x126>
 8004eca:	6833      	ldr	r3, [r6, #0]
 8004ecc:	6825      	ldr	r5, [r4, #0]
 8004ece:	6961      	ldr	r1, [r4, #20]
 8004ed0:	1d18      	adds	r0, r3, #4
 8004ed2:	6030      	str	r0, [r6, #0]
 8004ed4:	062e      	lsls	r6, r5, #24
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	d501      	bpl.n	8004ede <_printf_i+0x1be>
 8004eda:	6019      	str	r1, [r3, #0]
 8004edc:	e002      	b.n	8004ee4 <_printf_i+0x1c4>
 8004ede:	0668      	lsls	r0, r5, #25
 8004ee0:	d5fb      	bpl.n	8004eda <_printf_i+0x1ba>
 8004ee2:	8019      	strh	r1, [r3, #0]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	6123      	str	r3, [r4, #16]
 8004ee8:	4616      	mov	r6, r2
 8004eea:	e7bc      	b.n	8004e66 <_printf_i+0x146>
 8004eec:	6833      	ldr	r3, [r6, #0]
 8004eee:	1d1a      	adds	r2, r3, #4
 8004ef0:	6032      	str	r2, [r6, #0]
 8004ef2:	681e      	ldr	r6, [r3, #0]
 8004ef4:	6862      	ldr	r2, [r4, #4]
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	4630      	mov	r0, r6
 8004efa:	f7fb f969 	bl	80001d0 <memchr>
 8004efe:	b108      	cbz	r0, 8004f04 <_printf_i+0x1e4>
 8004f00:	1b80      	subs	r0, r0, r6
 8004f02:	6060      	str	r0, [r4, #4]
 8004f04:	6863      	ldr	r3, [r4, #4]
 8004f06:	6123      	str	r3, [r4, #16]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f0e:	e7aa      	b.n	8004e66 <_printf_i+0x146>
 8004f10:	6923      	ldr	r3, [r4, #16]
 8004f12:	4632      	mov	r2, r6
 8004f14:	4649      	mov	r1, r9
 8004f16:	4640      	mov	r0, r8
 8004f18:	47d0      	blx	sl
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d0ad      	beq.n	8004e7a <_printf_i+0x15a>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	079b      	lsls	r3, r3, #30
 8004f22:	d413      	bmi.n	8004f4c <_printf_i+0x22c>
 8004f24:	68e0      	ldr	r0, [r4, #12]
 8004f26:	9b03      	ldr	r3, [sp, #12]
 8004f28:	4298      	cmp	r0, r3
 8004f2a:	bfb8      	it	lt
 8004f2c:	4618      	movlt	r0, r3
 8004f2e:	e7a6      	b.n	8004e7e <_printf_i+0x15e>
 8004f30:	2301      	movs	r3, #1
 8004f32:	4632      	mov	r2, r6
 8004f34:	4649      	mov	r1, r9
 8004f36:	4640      	mov	r0, r8
 8004f38:	47d0      	blx	sl
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d09d      	beq.n	8004e7a <_printf_i+0x15a>
 8004f3e:	3501      	adds	r5, #1
 8004f40:	68e3      	ldr	r3, [r4, #12]
 8004f42:	9903      	ldr	r1, [sp, #12]
 8004f44:	1a5b      	subs	r3, r3, r1
 8004f46:	42ab      	cmp	r3, r5
 8004f48:	dcf2      	bgt.n	8004f30 <_printf_i+0x210>
 8004f4a:	e7eb      	b.n	8004f24 <_printf_i+0x204>
 8004f4c:	2500      	movs	r5, #0
 8004f4e:	f104 0619 	add.w	r6, r4, #25
 8004f52:	e7f5      	b.n	8004f40 <_printf_i+0x220>
 8004f54:	080051a1 	.word	0x080051a1
 8004f58:	080051b2 	.word	0x080051b2

08004f5c <__malloc_lock>:
 8004f5c:	4801      	ldr	r0, [pc, #4]	@ (8004f64 <__malloc_lock+0x8>)
 8004f5e:	f7ff bc67 	b.w	8004830 <__retarget_lock_acquire_recursive>
 8004f62:	bf00      	nop
 8004f64:	200011b0 	.word	0x200011b0

08004f68 <__malloc_unlock>:
 8004f68:	4801      	ldr	r0, [pc, #4]	@ (8004f70 <__malloc_unlock+0x8>)
 8004f6a:	f7ff bc62 	b.w	8004832 <__retarget_lock_release_recursive>
 8004f6e:	bf00      	nop
 8004f70:	200011b0 	.word	0x200011b0

08004f74 <_realloc_r>:
 8004f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f78:	4607      	mov	r7, r0
 8004f7a:	4614      	mov	r4, r2
 8004f7c:	460d      	mov	r5, r1
 8004f7e:	b921      	cbnz	r1, 8004f8a <_realloc_r+0x16>
 8004f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f84:	4611      	mov	r1, r2
 8004f86:	f7ff bddd 	b.w	8004b44 <_malloc_r>
 8004f8a:	b92a      	cbnz	r2, 8004f98 <_realloc_r+0x24>
 8004f8c:	f000 f84a 	bl	8005024 <_free_r>
 8004f90:	4625      	mov	r5, r4
 8004f92:	4628      	mov	r0, r5
 8004f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f98:	f000 f88e 	bl	80050b8 <_malloc_usable_size_r>
 8004f9c:	4284      	cmp	r4, r0
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	d802      	bhi.n	8004fa8 <_realloc_r+0x34>
 8004fa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004fa6:	d8f4      	bhi.n	8004f92 <_realloc_r+0x1e>
 8004fa8:	4621      	mov	r1, r4
 8004faa:	4638      	mov	r0, r7
 8004fac:	f7ff fdca 	bl	8004b44 <_malloc_r>
 8004fb0:	4680      	mov	r8, r0
 8004fb2:	b908      	cbnz	r0, 8004fb8 <_realloc_r+0x44>
 8004fb4:	4645      	mov	r5, r8
 8004fb6:	e7ec      	b.n	8004f92 <_realloc_r+0x1e>
 8004fb8:	42b4      	cmp	r4, r6
 8004fba:	4622      	mov	r2, r4
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	bf28      	it	cs
 8004fc0:	4632      	movcs	r2, r6
 8004fc2:	f7ff fc37 	bl	8004834 <memcpy>
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4638      	mov	r0, r7
 8004fca:	f000 f82b 	bl	8005024 <_free_r>
 8004fce:	e7f1      	b.n	8004fb4 <_realloc_r+0x40>

08004fd0 <memmove>:
 8004fd0:	4288      	cmp	r0, r1
 8004fd2:	b510      	push	{r4, lr}
 8004fd4:	eb01 0402 	add.w	r4, r1, r2
 8004fd8:	d902      	bls.n	8004fe0 <memmove+0x10>
 8004fda:	4284      	cmp	r4, r0
 8004fdc:	4623      	mov	r3, r4
 8004fde:	d807      	bhi.n	8004ff0 <memmove+0x20>
 8004fe0:	1e43      	subs	r3, r0, #1
 8004fe2:	42a1      	cmp	r1, r4
 8004fe4:	d008      	beq.n	8004ff8 <memmove+0x28>
 8004fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fee:	e7f8      	b.n	8004fe2 <memmove+0x12>
 8004ff0:	4402      	add	r2, r0
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	428a      	cmp	r2, r1
 8004ff6:	d100      	bne.n	8004ffa <memmove+0x2a>
 8004ff8:	bd10      	pop	{r4, pc}
 8004ffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005002:	e7f7      	b.n	8004ff4 <memmove+0x24>

08005004 <_sbrk_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4d06      	ldr	r5, [pc, #24]	@ (8005020 <_sbrk_r+0x1c>)
 8005008:	2300      	movs	r3, #0
 800500a:	4604      	mov	r4, r0
 800500c:	4608      	mov	r0, r1
 800500e:	602b      	str	r3, [r5, #0]
 8005010:	f7fb fd4a 	bl	8000aa8 <_sbrk>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	d102      	bne.n	800501e <_sbrk_r+0x1a>
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	b103      	cbz	r3, 800501e <_sbrk_r+0x1a>
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	bd38      	pop	{r3, r4, r5, pc}
 8005020:	200011bc 	.word	0x200011bc

08005024 <_free_r>:
 8005024:	b538      	push	{r3, r4, r5, lr}
 8005026:	4605      	mov	r5, r0
 8005028:	2900      	cmp	r1, #0
 800502a:	d041      	beq.n	80050b0 <_free_r+0x8c>
 800502c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005030:	1f0c      	subs	r4, r1, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	bfb8      	it	lt
 8005036:	18e4      	addlt	r4, r4, r3
 8005038:	f7ff ff90 	bl	8004f5c <__malloc_lock>
 800503c:	4a1d      	ldr	r2, [pc, #116]	@ (80050b4 <_free_r+0x90>)
 800503e:	6813      	ldr	r3, [r2, #0]
 8005040:	b933      	cbnz	r3, 8005050 <_free_r+0x2c>
 8005042:	6063      	str	r3, [r4, #4]
 8005044:	6014      	str	r4, [r2, #0]
 8005046:	4628      	mov	r0, r5
 8005048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800504c:	f7ff bf8c 	b.w	8004f68 <__malloc_unlock>
 8005050:	42a3      	cmp	r3, r4
 8005052:	d908      	bls.n	8005066 <_free_r+0x42>
 8005054:	6820      	ldr	r0, [r4, #0]
 8005056:	1821      	adds	r1, r4, r0
 8005058:	428b      	cmp	r3, r1
 800505a:	bf01      	itttt	eq
 800505c:	6819      	ldreq	r1, [r3, #0]
 800505e:	685b      	ldreq	r3, [r3, #4]
 8005060:	1809      	addeq	r1, r1, r0
 8005062:	6021      	streq	r1, [r4, #0]
 8005064:	e7ed      	b.n	8005042 <_free_r+0x1e>
 8005066:	461a      	mov	r2, r3
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	b10b      	cbz	r3, 8005070 <_free_r+0x4c>
 800506c:	42a3      	cmp	r3, r4
 800506e:	d9fa      	bls.n	8005066 <_free_r+0x42>
 8005070:	6811      	ldr	r1, [r2, #0]
 8005072:	1850      	adds	r0, r2, r1
 8005074:	42a0      	cmp	r0, r4
 8005076:	d10b      	bne.n	8005090 <_free_r+0x6c>
 8005078:	6820      	ldr	r0, [r4, #0]
 800507a:	4401      	add	r1, r0
 800507c:	1850      	adds	r0, r2, r1
 800507e:	4283      	cmp	r3, r0
 8005080:	6011      	str	r1, [r2, #0]
 8005082:	d1e0      	bne.n	8005046 <_free_r+0x22>
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	6053      	str	r3, [r2, #4]
 800508a:	4408      	add	r0, r1
 800508c:	6010      	str	r0, [r2, #0]
 800508e:	e7da      	b.n	8005046 <_free_r+0x22>
 8005090:	d902      	bls.n	8005098 <_free_r+0x74>
 8005092:	230c      	movs	r3, #12
 8005094:	602b      	str	r3, [r5, #0]
 8005096:	e7d6      	b.n	8005046 <_free_r+0x22>
 8005098:	6820      	ldr	r0, [r4, #0]
 800509a:	1821      	adds	r1, r4, r0
 800509c:	428b      	cmp	r3, r1
 800509e:	bf04      	itt	eq
 80050a0:	6819      	ldreq	r1, [r3, #0]
 80050a2:	685b      	ldreq	r3, [r3, #4]
 80050a4:	6063      	str	r3, [r4, #4]
 80050a6:	bf04      	itt	eq
 80050a8:	1809      	addeq	r1, r1, r0
 80050aa:	6021      	streq	r1, [r4, #0]
 80050ac:	6054      	str	r4, [r2, #4]
 80050ae:	e7ca      	b.n	8005046 <_free_r+0x22>
 80050b0:	bd38      	pop	{r3, r4, r5, pc}
 80050b2:	bf00      	nop
 80050b4:	200011b8 	.word	0x200011b8

080050b8 <_malloc_usable_size_r>:
 80050b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050bc:	1f18      	subs	r0, r3, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	bfbc      	itt	lt
 80050c2:	580b      	ldrlt	r3, [r1, r0]
 80050c4:	18c0      	addlt	r0, r0, r3
 80050c6:	4770      	bx	lr

080050c8 <_init>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	bf00      	nop
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr

080050d4 <_fini>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	bf00      	nop
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr
