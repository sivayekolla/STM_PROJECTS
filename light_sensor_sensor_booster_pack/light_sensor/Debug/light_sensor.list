
light_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800175c  0800175c  0000275c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017ac  080017ac  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080017ac  080017ac  000027ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017b4  080017b4  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017b4  080017b4  000027b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080017b8  080017b8  000027b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080017bc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000054  08001810  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08001810  000031c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001746  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000064f  00000000  00000000  000047ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000268  00000000  00000000  00004e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001b4  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002481  00000000  00000000  0000523c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000026e4  00000000  00000000  000076bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5a32  00000000  00000000  00009da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef7d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e14  00000000  00000000  000ef818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f062c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001744 	.word	0x08001744

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001744 	.word	0x08001744

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <delay_ms>:
#define USART2_CR1      (*(volatile uint32_t*)(USART2_BASE + 0x00))
#define USART2_BRR      (*(volatile uint32_t*)(USART2_BASE + 0x0C))
#define USART2_ISR      (*(volatile uint32_t*)(USART2_BASE + 0x1C))
#define USART2_TDR      (*(volatile uint32_t*)(USART2_BASE + 0x28))

static void delay_ms(uint32_t ms) { for(uint32_t i=0;i<ms*4000;i++) __asm__("nop"); }
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e003      	b.n	80008f2 <delay_ms+0x16>
 80008ea:	bf00      	nop
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d3f3      	bcc.n	80008ea <delay_ms+0xe>
 8000902:	bf00      	nop
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <uart2_init>:



static void uart2_init(void) {
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
    RCC_AHB2ENR |= (1<<0);
 8000914:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <uart2_init+0x60>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a15      	ldr	r2, [pc, #84]	@ (8000970 <uart2_init+0x60>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	6013      	str	r3, [r2, #0]
    RCC_APB1ENR1 |= (1<<17);
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <uart2_init+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a13      	ldr	r2, [pc, #76]	@ (8000974 <uart2_init+0x64>)
 8000926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800092a:	6013      	str	r3, [r2, #0]
    GPIOA_MODER &= ~(3<<(2*2));
 800092c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000936:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800093a:	6013      	str	r3, [r2, #0]
    GPIOA_MODER |=  (2<<(2*2));
 800093c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000946:	f043 0320 	orr.w	r3, r3, #32
 800094a:	6013      	str	r3, [r2, #0]
    GPIOA_AFRL  |=  (7<<(4*2));
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <uart2_init+0x68>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a09      	ldr	r2, [pc, #36]	@ (8000978 <uart2_init+0x68>)
 8000952:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000956:	6013      	str	r3, [r2, #0]
    USART2_BRR = 4000000/115200;
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <uart2_init+0x6c>)
 800095a:	2222      	movs	r2, #34	@ 0x22
 800095c:	601a      	str	r2, [r3, #0]
    USART2_CR1 = (1<<3)|(1<<0);
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <uart2_init+0x70>)
 8000960:	2209      	movs	r2, #9
 8000962:	601a      	str	r2, [r3, #0]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	4002104c 	.word	0x4002104c
 8000974:	40021058 	.word	0x40021058
 8000978:	48000020 	.word	0x48000020
 800097c:	4000440c 	.word	0x4000440c
 8000980:	40004400 	.word	0x40004400

08000984 <uart2_write>:

static void uart2_write(char c) { while(!(USART2_ISR&(1<<7))); USART2_TDR = c; }
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
 800098e:	bf00      	nop
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <uart2_write+0x2c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000998:	2b00      	cmp	r3, #0
 800099a:	d0f9      	beq.n	8000990 <uart2_write+0xc>
 800099c:	4a05      	ldr	r2, [pc, #20]	@ (80009b4 <uart2_write+0x30>)
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	6013      	str	r3, [r2, #0]
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	4000441c 	.word	0x4000441c
 80009b4:	40004428 	.word	0x40004428

080009b8 <uart2_print>:
static void uart2_print(char*s){ while(*s) uart2_write(*s++); }
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	e006      	b.n	80009d0 <uart2_print+0x18>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	607a      	str	r2, [r7, #4]
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffda 	bl	8000984 <uart2_write>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1f4      	bne.n	80009c2 <uart2_print+0xa>
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <i2c1_init>:


static void i2c1_init(void){
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
    RCC_AHB2ENR |= (1<<0);
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <i2c1_init+0x44>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000a28 <i2c1_init+0x44>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	6013      	str	r3, [r2, #0]
    RCC_APB1ENR1 |= (1<<21);
 80009f4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <i2c1_init+0x48>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a2c <i2c1_init+0x48>)
 80009fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009fe:	6013      	str	r3, [r2, #0]
    I2C1_CR1 &= ~(1<<0);
 8000a00:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <i2c1_init+0x4c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <i2c1_init+0x4c>)
 8000a06:	f023 0301 	bic.w	r3, r3, #1
 8000a0a:	6013      	str	r3, [r2, #0]
    I2C1_TIMINGR = 0x00303D5B;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <i2c1_init+0x50>)
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <i2c1_init+0x54>)
 8000a10:	601a      	str	r2, [r3, #0]
    I2C1_CR1 |= (1<<0);
 8000a12:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <i2c1_init+0x4c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a06      	ldr	r2, [pc, #24]	@ (8000a30 <i2c1_init+0x4c>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6013      	str	r3, [r2, #0]
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	4002104c 	.word	0x4002104c
 8000a2c:	40021058 	.word	0x40021058
 8000a30:	40005400 	.word	0x40005400
 8000a34:	40005410 	.word	0x40005410
 8000a38:	00303d5b 	.word	0x00303d5b

08000a3c <i2c1_write>:

static void i2c1_write(uint8_t addr, uint8_t reg, uint16_t data){
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
 8000a46:	460b      	mov	r3, r1
 8000a48:	71bb      	strb	r3, [r7, #6]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	80bb      	strh	r3, [r7, #4]
    while(I2C1_ISR & (1<<15));
 8000a4e:	bf00      	nop
 8000a50:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <i2c1_write+0x98>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1f9      	bne.n	8000a50 <i2c1_write+0x14>
    I2C1_CR2 = (addr<<1)|(3<<16);
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	f443 3240 	orr.w	r2, r3, #196608	@ 0x30000
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <i2c1_write+0x9c>)
 8000a66:	601a      	str	r2, [r3, #0]
    I2C1_CR2 |= (1<<13);
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <i2c1_write+0x9c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ad8 <i2c1_write+0x9c>)
 8000a6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a72:	6013      	str	r3, [r2, #0]
    while(!(I2C1_ISR&(1<<1)));
 8000a74:	bf00      	nop
 8000a76:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <i2c1_write+0x98>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f9      	beq.n	8000a76 <i2c1_write+0x3a>
    I2C1_TXDR = reg;
 8000a82:	4a16      	ldr	r2, [pc, #88]	@ (8000adc <i2c1_write+0xa0>)
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	6013      	str	r3, [r2, #0]
    while(!(I2C1_ISR&(1<<1)));
 8000a88:	bf00      	nop
 8000a8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <i2c1_write+0x98>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d0f9      	beq.n	8000a8a <i2c1_write+0x4e>
    I2C1_TXDR = (data>>8)&0xFF;
 8000a96:	88bb      	ldrh	r3, [r7, #4]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8000adc <i2c1_write+0xa0>)
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	6013      	str	r3, [r2, #0]
    while(!(I2C1_ISR&(1<<1)));
 8000aa2:	bf00      	nop
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <i2c1_write+0x98>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0f9      	beq.n	8000aa4 <i2c1_write+0x68>
    I2C1_TXDR = data & 0xFF;
 8000ab0:	88bb      	ldrh	r3, [r7, #4]
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <i2c1_write+0xa0>)
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	6013      	str	r3, [r2, #0]
    while(!(I2C1_ISR&(1<<6)));
 8000ab8:	bf00      	nop
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <i2c1_write+0x98>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f9      	beq.n	8000aba <i2c1_write+0x7e>
}
 8000ac6:	bf00      	nop
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	40005418 	.word	0x40005418
 8000ad8:	40005404 	.word	0x40005404
 8000adc:	40005428 	.word	0x40005428

08000ae0 <i2c1_read>:

static uint16_t i2c1_read(uint8_t addr, uint8_t reg){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	460a      	mov	r2, r1
 8000aea:	71fb      	strb	r3, [r7, #7]
 8000aec:	4613      	mov	r3, r2
 8000aee:	71bb      	strb	r3, [r7, #6]
    uint16_t val;
    while(I2C1_ISR & (1<<15));
 8000af0:	bf00      	nop
 8000af2:	4b25      	ldr	r3, [pc, #148]	@ (8000b88 <i2c1_read+0xa8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1f9      	bne.n	8000af2 <i2c1_read+0x12>
    I2C1_CR2 = (addr<<1)|(1<<13);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000b06:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <i2c1_read+0xac>)
 8000b08:	601a      	str	r2, [r3, #0]
    while(!(I2C1_ISR&(1<<1)));
 8000b0a:	bf00      	nop
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b88 <i2c1_read+0xa8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0f9      	beq.n	8000b0c <i2c1_read+0x2c>
    I2C1_TXDR = reg;
 8000b18:	4a1d      	ldr	r2, [pc, #116]	@ (8000b90 <i2c1_read+0xb0>)
 8000b1a:	79bb      	ldrb	r3, [r7, #6]
 8000b1c:	6013      	str	r3, [r2, #0]
    while(!(I2C1_ISR&(1<<6)));
 8000b1e:	bf00      	nop
 8000b20:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <i2c1_read+0xa8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d0f9      	beq.n	8000b20 <i2c1_read+0x40>
    I2C1_CR2 = (addr<<1)|(1<<10)|(2<<16)|(1<<13);
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	f443 3209 	orr.w	r2, r3, #140288	@ 0x22400
 8000b34:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <i2c1_read+0xac>)
 8000b36:	601a      	str	r2, [r3, #0]
    while(!(I2C1_ISR&(1<<2)));
 8000b38:	bf00      	nop
 8000b3a:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <i2c1_read+0xa8>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f9      	beq.n	8000b3a <i2c1_read+0x5a>
    val = I2C1_RXDR<<8;
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <i2c1_read+0xb4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	021b      	lsls	r3, r3, #8
 8000b4e:	81fb      	strh	r3, [r7, #14]
    while(!(I2C1_ISR&(1<<2)));
 8000b50:	bf00      	nop
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <i2c1_read+0xa8>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f9      	beq.n	8000b52 <i2c1_read+0x72>
    val |= I2C1_RXDR;
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <i2c1_read+0xb4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	81fb      	strh	r3, [r7, #14]
    while(!(I2C1_ISR&(1<<6)));
 8000b6a:	bf00      	nop
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <i2c1_read+0xa8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0f9      	beq.n	8000b6c <i2c1_read+0x8c>
    return val;
 8000b78:	89fb      	ldrh	r3, [r7, #14]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40005418 	.word	0x40005418
 8000b8c:	40005404 	.word	0x40005404
 8000b90:	40005428 	.word	0x40005428
 8000b94:	40005424 	.word	0x40005424

08000b98 <opt3001_init>:

#define OPT3001_ADDR 0x47
#define OPT3001_CONFIG_REG 0x01
#define OPT3001_RESULT_REG 0x00

static void opt3001_init(void){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
    i2c1_write(OPT3001_ADDR, OPT3001_CONFIG_REG, 0xC410);
 8000b9c:	f24c 4210 	movw	r2, #50192	@ 0xc410
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	2047      	movs	r0, #71	@ 0x47
 8000ba4:	f7ff ff4a 	bl	8000a3c <i2c1_write>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	0000      	movs	r0, r0
	...

08000bb0 <opt3001_read_lux>:

static float opt3001_read_lux(void){
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
    uint16_t raw = i2c1_read(OPT3001_ADDR, OPT3001_RESULT_REG);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2047      	movs	r0, #71	@ 0x47
 8000bba:	f7ff ff91 	bl	8000ae0 <i2c1_read>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	81fb      	strh	r3, [r7, #14]
    uint16_t exp = (raw>>12)&0xF;
 8000bc2:	89fb      	ldrh	r3, [r7, #14]
 8000bc4:	0b1b      	lsrs	r3, r3, #12
 8000bc6:	81bb      	strh	r3, [r7, #12]
    uint16_t mant = raw&0xFFF;
 8000bc8:	89fb      	ldrh	r3, [r7, #14]
 8000bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bce:	817b      	strh	r3, [r7, #10]
    float lux = (0.01 * (1<<exp) * mant);
 8000bd0:	89bb      	ldrh	r3, [r7, #12]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fdc5 	bl	8000768 <__aeabi_i2d>
 8000bde:	a312      	add	r3, pc, #72	@ (adr r3, 8000c28 <opt3001_read_lux+0x78>)
 8000be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be4:	f7ff fb44 	bl	8000270 <__aeabi_dmul>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4614      	mov	r4, r2
 8000bee:	461d      	mov	r5, r3
 8000bf0:	897b      	ldrh	r3, [r7, #10]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fdb8 	bl	8000768 <__aeabi_i2d>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	4629      	mov	r1, r5
 8000c00:	f7ff fb36 	bl	8000270 <__aeabi_dmul>
 8000c04:	4602      	mov	r2, r0
 8000c06:	460b      	mov	r3, r1
 8000c08:	4610      	mov	r0, r2
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f7ff fe16 	bl	800083c <__aeabi_d2f>
 8000c10:	4603      	mov	r3, r0
 8000c12:	607b      	str	r3, [r7, #4]
    return lux;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	ee07 3a90 	vmov	s15, r3
}
 8000c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bdb0      	pop	{r4, r5, r7, pc}
 8000c24:	f3af 8000 	nop.w
 8000c28:	47ae147b 	.word	0x47ae147b
 8000c2c:	3f847ae1 	.word	0x3f847ae1

08000c30 <main>:


int main(void){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b094      	sub	sp, #80	@ 0x50
 8000c34:	af02      	add	r7, sp, #8
    uart2_init();
 8000c36:	f7ff fe6b 	bl	8000910 <uart2_init>
    i2c1_init();
 8000c3a:	f7ff fed3 	bl	80009e4 <i2c1_init>
    opt3001_init();
 8000c3e:	f7ff ffab 	bl	8000b98 <opt3001_init>
    delay_ms(100);
 8000c42:	2064      	movs	r0, #100	@ 0x64
 8000c44:	f7ff fe4a 	bl	80008dc <delay_ms>

    char buf[64];
    while(1){
        float lux = opt3001_read_lux();
 8000c48:	f7ff ffb2 	bl	8000bb0 <opt3001_read_lux>
 8000c4c:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
        snprintf(buf,sizeof(buf),"Ambient Light: %.2f lux\r\n",lux);
 8000c50:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000c52:	f7ff fd9b 	bl	800078c <__aeabi_f2d>
 8000c56:	4602      	mov	r2, r0
 8000c58:	460b      	mov	r3, r1
 8000c5a:	1d38      	adds	r0, r7, #4
 8000c5c:	e9cd 2300 	strd	r2, r3, [sp]
 8000c60:	4a06      	ldr	r2, [pc, #24]	@ (8000c7c <main+0x4c>)
 8000c62:	2140      	movs	r1, #64	@ 0x40
 8000c64:	f000 f8c2 	bl	8000dec <sniprintf>
        uart2_print(buf);
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fea4 	bl	80009b8 <uart2_print>
        delay_ms(1000);
 8000c70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c74:	f7ff fe32 	bl	80008dc <delay_ms>
    while(1){
 8000c78:	bf00      	nop
 8000c7a:	e7e5      	b.n	8000c48 <main+0x18>
 8000c7c:	0800175c 	.word	0x0800175c

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <NMI_Handler+0x4>

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <MemManage_Handler+0x4>

08000c98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd6:	f000 f875 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f000 f8a2 	bl	8000e58 <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20018000 	.word	0x20018000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	20000070 	.word	0x20000070
 8000d48:	200001c0 	.word	0x200001c0

08000d4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d74:	f7ff ffea 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	@ (8000db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <LoopForever+0xe>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	@ (8000dbc <LoopForever+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f000 f861 	bl	8000e64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000da2:	f7ff ff45 	bl	8000c30 <main>

08000da6 <LoopForever>:

LoopForever:
    b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000da8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000db4:	080017bc 	.word	0x080017bc
  ldr r2, =_sbss
 8000db8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000dbc:	200001c0 	.word	0x200001c0

08000dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC1_2_IRQHandler>
	...

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000074 	.word	0x20000074

08000dec <sniprintf>:
 8000dec:	b40c      	push	{r2, r3}
 8000dee:	b530      	push	{r4, r5, lr}
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <sniprintf+0x68>)
 8000df2:	1e0c      	subs	r4, r1, #0
 8000df4:	681d      	ldr	r5, [r3, #0]
 8000df6:	b09d      	sub	sp, #116	@ 0x74
 8000df8:	da08      	bge.n	8000e0c <sniprintf+0x20>
 8000dfa:	238b      	movs	r3, #139	@ 0x8b
 8000dfc:	602b      	str	r3, [r5, #0]
 8000dfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e02:	b01d      	add	sp, #116	@ 0x74
 8000e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000e08:	b002      	add	sp, #8
 8000e0a:	4770      	bx	lr
 8000e0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8000e10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	931b      	str	r3, [sp, #108]	@ 0x6c
 8000e1a:	bf14      	ite	ne
 8000e1c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8000e20:	4623      	moveq	r3, r4
 8000e22:	9304      	str	r3, [sp, #16]
 8000e24:	9307      	str	r3, [sp, #28]
 8000e26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e2a:	9002      	str	r0, [sp, #8]
 8000e2c:	9006      	str	r0, [sp, #24]
 8000e2e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000e32:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8000e34:	ab21      	add	r3, sp, #132	@ 0x84
 8000e36:	a902      	add	r1, sp, #8
 8000e38:	4628      	mov	r0, r5
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	f000 f894 	bl	8000f68 <_svfiprintf_r>
 8000e40:	1c43      	adds	r3, r0, #1
 8000e42:	bfbc      	itt	lt
 8000e44:	238b      	movlt	r3, #139	@ 0x8b
 8000e46:	602b      	strlt	r3, [r5, #0]
 8000e48:	2c00      	cmp	r4, #0
 8000e4a:	d0da      	beq.n	8000e02 <sniprintf+0x16>
 8000e4c:	9b02      	ldr	r3, [sp, #8]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	e7d6      	b.n	8000e02 <sniprintf+0x16>
 8000e54:	20000004 	.word	0x20000004

08000e58 <__errno>:
 8000e58:	4b01      	ldr	r3, [pc, #4]	@ (8000e60 <__errno+0x8>)
 8000e5a:	6818      	ldr	r0, [r3, #0]
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000004 	.word	0x20000004

08000e64 <__libc_init_array>:
 8000e64:	b570      	push	{r4, r5, r6, lr}
 8000e66:	4d0d      	ldr	r5, [pc, #52]	@ (8000e9c <__libc_init_array+0x38>)
 8000e68:	4c0d      	ldr	r4, [pc, #52]	@ (8000ea0 <__libc_init_array+0x3c>)
 8000e6a:	1b64      	subs	r4, r4, r5
 8000e6c:	10a4      	asrs	r4, r4, #2
 8000e6e:	2600      	movs	r6, #0
 8000e70:	42a6      	cmp	r6, r4
 8000e72:	d109      	bne.n	8000e88 <__libc_init_array+0x24>
 8000e74:	4d0b      	ldr	r5, [pc, #44]	@ (8000ea4 <__libc_init_array+0x40>)
 8000e76:	4c0c      	ldr	r4, [pc, #48]	@ (8000ea8 <__libc_init_array+0x44>)
 8000e78:	f000 fc64 	bl	8001744 <_init>
 8000e7c:	1b64      	subs	r4, r4, r5
 8000e7e:	10a4      	asrs	r4, r4, #2
 8000e80:	2600      	movs	r6, #0
 8000e82:	42a6      	cmp	r6, r4
 8000e84:	d105      	bne.n	8000e92 <__libc_init_array+0x2e>
 8000e86:	bd70      	pop	{r4, r5, r6, pc}
 8000e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e8c:	4798      	blx	r3
 8000e8e:	3601      	adds	r6, #1
 8000e90:	e7ee      	b.n	8000e70 <__libc_init_array+0xc>
 8000e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e96:	4798      	blx	r3
 8000e98:	3601      	adds	r6, #1
 8000e9a:	e7f2      	b.n	8000e82 <__libc_init_array+0x1e>
 8000e9c:	080017b4 	.word	0x080017b4
 8000ea0:	080017b4 	.word	0x080017b4
 8000ea4:	080017b4 	.word	0x080017b4
 8000ea8:	080017b8 	.word	0x080017b8

08000eac <__retarget_lock_acquire_recursive>:
 8000eac:	4770      	bx	lr

08000eae <__retarget_lock_release_recursive>:
 8000eae:	4770      	bx	lr

08000eb0 <__ssputs_r>:
 8000eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb4:	688e      	ldr	r6, [r1, #8]
 8000eb6:	461f      	mov	r7, r3
 8000eb8:	42be      	cmp	r6, r7
 8000eba:	680b      	ldr	r3, [r1, #0]
 8000ebc:	4682      	mov	sl, r0
 8000ebe:	460c      	mov	r4, r1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	d82d      	bhi.n	8000f20 <__ssputs_r+0x70>
 8000ec4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000ec8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000ecc:	d026      	beq.n	8000f1c <__ssputs_r+0x6c>
 8000ece:	6965      	ldr	r5, [r4, #20]
 8000ed0:	6909      	ldr	r1, [r1, #16]
 8000ed2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ed6:	eba3 0901 	sub.w	r9, r3, r1
 8000eda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000ede:	1c7b      	adds	r3, r7, #1
 8000ee0:	444b      	add	r3, r9
 8000ee2:	106d      	asrs	r5, r5, #1
 8000ee4:	429d      	cmp	r5, r3
 8000ee6:	bf38      	it	cc
 8000ee8:	461d      	movcc	r5, r3
 8000eea:	0553      	lsls	r3, r2, #21
 8000eec:	d527      	bpl.n	8000f3e <__ssputs_r+0x8e>
 8000eee:	4629      	mov	r1, r5
 8000ef0:	f000 f958 	bl	80011a4 <_malloc_r>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	b360      	cbz	r0, 8000f52 <__ssputs_r+0xa2>
 8000ef8:	6921      	ldr	r1, [r4, #16]
 8000efa:	464a      	mov	r2, r9
 8000efc:	f000 fbc2 	bl	8001684 <memcpy>
 8000f00:	89a3      	ldrh	r3, [r4, #12]
 8000f02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f0a:	81a3      	strh	r3, [r4, #12]
 8000f0c:	6126      	str	r6, [r4, #16]
 8000f0e:	6165      	str	r5, [r4, #20]
 8000f10:	444e      	add	r6, r9
 8000f12:	eba5 0509 	sub.w	r5, r5, r9
 8000f16:	6026      	str	r6, [r4, #0]
 8000f18:	60a5      	str	r5, [r4, #8]
 8000f1a:	463e      	mov	r6, r7
 8000f1c:	42be      	cmp	r6, r7
 8000f1e:	d900      	bls.n	8000f22 <__ssputs_r+0x72>
 8000f20:	463e      	mov	r6, r7
 8000f22:	6820      	ldr	r0, [r4, #0]
 8000f24:	4632      	mov	r2, r6
 8000f26:	4641      	mov	r1, r8
 8000f28:	f000 fb82 	bl	8001630 <memmove>
 8000f2c:	68a3      	ldr	r3, [r4, #8]
 8000f2e:	1b9b      	subs	r3, r3, r6
 8000f30:	60a3      	str	r3, [r4, #8]
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	4433      	add	r3, r6
 8000f36:	6023      	str	r3, [r4, #0]
 8000f38:	2000      	movs	r0, #0
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	462a      	mov	r2, r5
 8000f40:	f000 fb48 	bl	80015d4 <_realloc_r>
 8000f44:	4606      	mov	r6, r0
 8000f46:	2800      	cmp	r0, #0
 8000f48:	d1e0      	bne.n	8000f0c <__ssputs_r+0x5c>
 8000f4a:	6921      	ldr	r1, [r4, #16]
 8000f4c:	4650      	mov	r0, sl
 8000f4e:	f000 fba7 	bl	80016a0 <_free_r>
 8000f52:	230c      	movs	r3, #12
 8000f54:	f8ca 3000 	str.w	r3, [sl]
 8000f58:	89a3      	ldrh	r3, [r4, #12]
 8000f5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f5e:	81a3      	strh	r3, [r4, #12]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f64:	e7e9      	b.n	8000f3a <__ssputs_r+0x8a>
	...

08000f68 <_svfiprintf_r>:
 8000f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f6c:	4698      	mov	r8, r3
 8000f6e:	898b      	ldrh	r3, [r1, #12]
 8000f70:	061b      	lsls	r3, r3, #24
 8000f72:	b09d      	sub	sp, #116	@ 0x74
 8000f74:	4607      	mov	r7, r0
 8000f76:	460d      	mov	r5, r1
 8000f78:	4614      	mov	r4, r2
 8000f7a:	d510      	bpl.n	8000f9e <_svfiprintf_r+0x36>
 8000f7c:	690b      	ldr	r3, [r1, #16]
 8000f7e:	b973      	cbnz	r3, 8000f9e <_svfiprintf_r+0x36>
 8000f80:	2140      	movs	r1, #64	@ 0x40
 8000f82:	f000 f90f 	bl	80011a4 <_malloc_r>
 8000f86:	6028      	str	r0, [r5, #0]
 8000f88:	6128      	str	r0, [r5, #16]
 8000f8a:	b930      	cbnz	r0, 8000f9a <_svfiprintf_r+0x32>
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f94:	b01d      	add	sp, #116	@ 0x74
 8000f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f9a:	2340      	movs	r3, #64	@ 0x40
 8000f9c:	616b      	str	r3, [r5, #20]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8000fa2:	2320      	movs	r3, #32
 8000fa4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000fa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fac:	2330      	movs	r3, #48	@ 0x30
 8000fae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800114c <_svfiprintf_r+0x1e4>
 8000fb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000fb6:	f04f 0901 	mov.w	r9, #1
 8000fba:	4623      	mov	r3, r4
 8000fbc:	469a      	mov	sl, r3
 8000fbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fc2:	b10a      	cbz	r2, 8000fc8 <_svfiprintf_r+0x60>
 8000fc4:	2a25      	cmp	r2, #37	@ 0x25
 8000fc6:	d1f9      	bne.n	8000fbc <_svfiprintf_r+0x54>
 8000fc8:	ebba 0b04 	subs.w	fp, sl, r4
 8000fcc:	d00b      	beq.n	8000fe6 <_svfiprintf_r+0x7e>
 8000fce:	465b      	mov	r3, fp
 8000fd0:	4622      	mov	r2, r4
 8000fd2:	4629      	mov	r1, r5
 8000fd4:	4638      	mov	r0, r7
 8000fd6:	f7ff ff6b 	bl	8000eb0 <__ssputs_r>
 8000fda:	3001      	adds	r0, #1
 8000fdc:	f000 80a7 	beq.w	800112e <_svfiprintf_r+0x1c6>
 8000fe0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000fe2:	445a      	add	r2, fp
 8000fe4:	9209      	str	r2, [sp, #36]	@ 0x24
 8000fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 809f 	beq.w	800112e <_svfiprintf_r+0x1c6>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ff6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ffa:	f10a 0a01 	add.w	sl, sl, #1
 8000ffe:	9304      	str	r3, [sp, #16]
 8001000:	9307      	str	r3, [sp, #28]
 8001002:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001006:	931a      	str	r3, [sp, #104]	@ 0x68
 8001008:	4654      	mov	r4, sl
 800100a:	2205      	movs	r2, #5
 800100c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001010:	484e      	ldr	r0, [pc, #312]	@ (800114c <_svfiprintf_r+0x1e4>)
 8001012:	f7ff f8dd 	bl	80001d0 <memchr>
 8001016:	9a04      	ldr	r2, [sp, #16]
 8001018:	b9d8      	cbnz	r0, 8001052 <_svfiprintf_r+0xea>
 800101a:	06d0      	lsls	r0, r2, #27
 800101c:	bf44      	itt	mi
 800101e:	2320      	movmi	r3, #32
 8001020:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001024:	0711      	lsls	r1, r2, #28
 8001026:	bf44      	itt	mi
 8001028:	232b      	movmi	r3, #43	@ 0x2b
 800102a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800102e:	f89a 3000 	ldrb.w	r3, [sl]
 8001032:	2b2a      	cmp	r3, #42	@ 0x2a
 8001034:	d015      	beq.n	8001062 <_svfiprintf_r+0xfa>
 8001036:	9a07      	ldr	r2, [sp, #28]
 8001038:	4654      	mov	r4, sl
 800103a:	2000      	movs	r0, #0
 800103c:	f04f 0c0a 	mov.w	ip, #10
 8001040:	4621      	mov	r1, r4
 8001042:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001046:	3b30      	subs	r3, #48	@ 0x30
 8001048:	2b09      	cmp	r3, #9
 800104a:	d94b      	bls.n	80010e4 <_svfiprintf_r+0x17c>
 800104c:	b1b0      	cbz	r0, 800107c <_svfiprintf_r+0x114>
 800104e:	9207      	str	r2, [sp, #28]
 8001050:	e014      	b.n	800107c <_svfiprintf_r+0x114>
 8001052:	eba0 0308 	sub.w	r3, r0, r8
 8001056:	fa09 f303 	lsl.w	r3, r9, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	9304      	str	r3, [sp, #16]
 800105e:	46a2      	mov	sl, r4
 8001060:	e7d2      	b.n	8001008 <_svfiprintf_r+0xa0>
 8001062:	9b03      	ldr	r3, [sp, #12]
 8001064:	1d19      	adds	r1, r3, #4
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	9103      	str	r1, [sp, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	bfbb      	ittet	lt
 800106e:	425b      	neglt	r3, r3
 8001070:	f042 0202 	orrlt.w	r2, r2, #2
 8001074:	9307      	strge	r3, [sp, #28]
 8001076:	9307      	strlt	r3, [sp, #28]
 8001078:	bfb8      	it	lt
 800107a:	9204      	strlt	r2, [sp, #16]
 800107c:	7823      	ldrb	r3, [r4, #0]
 800107e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001080:	d10a      	bne.n	8001098 <_svfiprintf_r+0x130>
 8001082:	7863      	ldrb	r3, [r4, #1]
 8001084:	2b2a      	cmp	r3, #42	@ 0x2a
 8001086:	d132      	bne.n	80010ee <_svfiprintf_r+0x186>
 8001088:	9b03      	ldr	r3, [sp, #12]
 800108a:	1d1a      	adds	r2, r3, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	9203      	str	r2, [sp, #12]
 8001090:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001094:	3402      	adds	r4, #2
 8001096:	9305      	str	r3, [sp, #20]
 8001098:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800115c <_svfiprintf_r+0x1f4>
 800109c:	7821      	ldrb	r1, [r4, #0]
 800109e:	2203      	movs	r2, #3
 80010a0:	4650      	mov	r0, sl
 80010a2:	f7ff f895 	bl	80001d0 <memchr>
 80010a6:	b138      	cbz	r0, 80010b8 <_svfiprintf_r+0x150>
 80010a8:	9b04      	ldr	r3, [sp, #16]
 80010aa:	eba0 000a 	sub.w	r0, r0, sl
 80010ae:	2240      	movs	r2, #64	@ 0x40
 80010b0:	4082      	lsls	r2, r0
 80010b2:	4313      	orrs	r3, r2
 80010b4:	3401      	adds	r4, #1
 80010b6:	9304      	str	r3, [sp, #16]
 80010b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010bc:	4824      	ldr	r0, [pc, #144]	@ (8001150 <_svfiprintf_r+0x1e8>)
 80010be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80010c2:	2206      	movs	r2, #6
 80010c4:	f7ff f884 	bl	80001d0 <memchr>
 80010c8:	2800      	cmp	r0, #0
 80010ca:	d036      	beq.n	800113a <_svfiprintf_r+0x1d2>
 80010cc:	4b21      	ldr	r3, [pc, #132]	@ (8001154 <_svfiprintf_r+0x1ec>)
 80010ce:	bb1b      	cbnz	r3, 8001118 <_svfiprintf_r+0x1b0>
 80010d0:	9b03      	ldr	r3, [sp, #12]
 80010d2:	3307      	adds	r3, #7
 80010d4:	f023 0307 	bic.w	r3, r3, #7
 80010d8:	3308      	adds	r3, #8
 80010da:	9303      	str	r3, [sp, #12]
 80010dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80010de:	4433      	add	r3, r6
 80010e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80010e2:	e76a      	b.n	8000fba <_svfiprintf_r+0x52>
 80010e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80010e8:	460c      	mov	r4, r1
 80010ea:	2001      	movs	r0, #1
 80010ec:	e7a8      	b.n	8001040 <_svfiprintf_r+0xd8>
 80010ee:	2300      	movs	r3, #0
 80010f0:	3401      	adds	r4, #1
 80010f2:	9305      	str	r3, [sp, #20]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f04f 0c0a 	mov.w	ip, #10
 80010fa:	4620      	mov	r0, r4
 80010fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001100:	3a30      	subs	r2, #48	@ 0x30
 8001102:	2a09      	cmp	r2, #9
 8001104:	d903      	bls.n	800110e <_svfiprintf_r+0x1a6>
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0c6      	beq.n	8001098 <_svfiprintf_r+0x130>
 800110a:	9105      	str	r1, [sp, #20]
 800110c:	e7c4      	b.n	8001098 <_svfiprintf_r+0x130>
 800110e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001112:	4604      	mov	r4, r0
 8001114:	2301      	movs	r3, #1
 8001116:	e7f0      	b.n	80010fa <_svfiprintf_r+0x192>
 8001118:	ab03      	add	r3, sp, #12
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	462a      	mov	r2, r5
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <_svfiprintf_r+0x1f0>)
 8001120:	a904      	add	r1, sp, #16
 8001122:	4638      	mov	r0, r7
 8001124:	f3af 8000 	nop.w
 8001128:	1c42      	adds	r2, r0, #1
 800112a:	4606      	mov	r6, r0
 800112c:	d1d6      	bne.n	80010dc <_svfiprintf_r+0x174>
 800112e:	89ab      	ldrh	r3, [r5, #12]
 8001130:	065b      	lsls	r3, r3, #25
 8001132:	f53f af2d 	bmi.w	8000f90 <_svfiprintf_r+0x28>
 8001136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001138:	e72c      	b.n	8000f94 <_svfiprintf_r+0x2c>
 800113a:	ab03      	add	r3, sp, #12
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	462a      	mov	r2, r5
 8001140:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <_svfiprintf_r+0x1f0>)
 8001142:	a904      	add	r1, sp, #16
 8001144:	4638      	mov	r0, r7
 8001146:	f000 f91b 	bl	8001380 <_printf_i>
 800114a:	e7ed      	b.n	8001128 <_svfiprintf_r+0x1c0>
 800114c:	08001776 	.word	0x08001776
 8001150:	08001780 	.word	0x08001780
 8001154:	00000000 	.word	0x00000000
 8001158:	08000eb1 	.word	0x08000eb1
 800115c:	0800177c 	.word	0x0800177c

08001160 <sbrk_aligned>:
 8001160:	b570      	push	{r4, r5, r6, lr}
 8001162:	4e0f      	ldr	r6, [pc, #60]	@ (80011a0 <sbrk_aligned+0x40>)
 8001164:	460c      	mov	r4, r1
 8001166:	6831      	ldr	r1, [r6, #0]
 8001168:	4605      	mov	r5, r0
 800116a:	b911      	cbnz	r1, 8001172 <sbrk_aligned+0x12>
 800116c:	f000 fa7a 	bl	8001664 <_sbrk_r>
 8001170:	6030      	str	r0, [r6, #0]
 8001172:	4621      	mov	r1, r4
 8001174:	4628      	mov	r0, r5
 8001176:	f000 fa75 	bl	8001664 <_sbrk_r>
 800117a:	1c43      	adds	r3, r0, #1
 800117c:	d103      	bne.n	8001186 <sbrk_aligned+0x26>
 800117e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001182:	4620      	mov	r0, r4
 8001184:	bd70      	pop	{r4, r5, r6, pc}
 8001186:	1cc4      	adds	r4, r0, #3
 8001188:	f024 0403 	bic.w	r4, r4, #3
 800118c:	42a0      	cmp	r0, r4
 800118e:	d0f8      	beq.n	8001182 <sbrk_aligned+0x22>
 8001190:	1a21      	subs	r1, r4, r0
 8001192:	4628      	mov	r0, r5
 8001194:	f000 fa66 	bl	8001664 <_sbrk_r>
 8001198:	3001      	adds	r0, #1
 800119a:	d1f2      	bne.n	8001182 <sbrk_aligned+0x22>
 800119c:	e7ef      	b.n	800117e <sbrk_aligned+0x1e>
 800119e:	bf00      	nop
 80011a0:	200001b4 	.word	0x200001b4

080011a4 <_malloc_r>:
 80011a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011a8:	1ccd      	adds	r5, r1, #3
 80011aa:	f025 0503 	bic.w	r5, r5, #3
 80011ae:	3508      	adds	r5, #8
 80011b0:	2d0c      	cmp	r5, #12
 80011b2:	bf38      	it	cc
 80011b4:	250c      	movcc	r5, #12
 80011b6:	2d00      	cmp	r5, #0
 80011b8:	4606      	mov	r6, r0
 80011ba:	db01      	blt.n	80011c0 <_malloc_r+0x1c>
 80011bc:	42a9      	cmp	r1, r5
 80011be:	d904      	bls.n	80011ca <_malloc_r+0x26>
 80011c0:	230c      	movs	r3, #12
 80011c2:	6033      	str	r3, [r6, #0]
 80011c4:	2000      	movs	r0, #0
 80011c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80012a0 <_malloc_r+0xfc>
 80011ce:	f000 f9f5 	bl	80015bc <__malloc_lock>
 80011d2:	f8d8 3000 	ldr.w	r3, [r8]
 80011d6:	461c      	mov	r4, r3
 80011d8:	bb44      	cbnz	r4, 800122c <_malloc_r+0x88>
 80011da:	4629      	mov	r1, r5
 80011dc:	4630      	mov	r0, r6
 80011de:	f7ff ffbf 	bl	8001160 <sbrk_aligned>
 80011e2:	1c43      	adds	r3, r0, #1
 80011e4:	4604      	mov	r4, r0
 80011e6:	d158      	bne.n	800129a <_malloc_r+0xf6>
 80011e8:	f8d8 4000 	ldr.w	r4, [r8]
 80011ec:	4627      	mov	r7, r4
 80011ee:	2f00      	cmp	r7, #0
 80011f0:	d143      	bne.n	800127a <_malloc_r+0xd6>
 80011f2:	2c00      	cmp	r4, #0
 80011f4:	d04b      	beq.n	800128e <_malloc_r+0xea>
 80011f6:	6823      	ldr	r3, [r4, #0]
 80011f8:	4639      	mov	r1, r7
 80011fa:	4630      	mov	r0, r6
 80011fc:	eb04 0903 	add.w	r9, r4, r3
 8001200:	f000 fa30 	bl	8001664 <_sbrk_r>
 8001204:	4581      	cmp	r9, r0
 8001206:	d142      	bne.n	800128e <_malloc_r+0xea>
 8001208:	6821      	ldr	r1, [r4, #0]
 800120a:	1a6d      	subs	r5, r5, r1
 800120c:	4629      	mov	r1, r5
 800120e:	4630      	mov	r0, r6
 8001210:	f7ff ffa6 	bl	8001160 <sbrk_aligned>
 8001214:	3001      	adds	r0, #1
 8001216:	d03a      	beq.n	800128e <_malloc_r+0xea>
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	442b      	add	r3, r5
 800121c:	6023      	str	r3, [r4, #0]
 800121e:	f8d8 3000 	ldr.w	r3, [r8]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	bb62      	cbnz	r2, 8001280 <_malloc_r+0xdc>
 8001226:	f8c8 7000 	str.w	r7, [r8]
 800122a:	e00f      	b.n	800124c <_malloc_r+0xa8>
 800122c:	6822      	ldr	r2, [r4, #0]
 800122e:	1b52      	subs	r2, r2, r5
 8001230:	d420      	bmi.n	8001274 <_malloc_r+0xd0>
 8001232:	2a0b      	cmp	r2, #11
 8001234:	d917      	bls.n	8001266 <_malloc_r+0xc2>
 8001236:	1961      	adds	r1, r4, r5
 8001238:	42a3      	cmp	r3, r4
 800123a:	6025      	str	r5, [r4, #0]
 800123c:	bf18      	it	ne
 800123e:	6059      	strne	r1, [r3, #4]
 8001240:	6863      	ldr	r3, [r4, #4]
 8001242:	bf08      	it	eq
 8001244:	f8c8 1000 	streq.w	r1, [r8]
 8001248:	5162      	str	r2, [r4, r5]
 800124a:	604b      	str	r3, [r1, #4]
 800124c:	4630      	mov	r0, r6
 800124e:	f000 f9bb 	bl	80015c8 <__malloc_unlock>
 8001252:	f104 000b 	add.w	r0, r4, #11
 8001256:	1d23      	adds	r3, r4, #4
 8001258:	f020 0007 	bic.w	r0, r0, #7
 800125c:	1ac2      	subs	r2, r0, r3
 800125e:	bf1c      	itt	ne
 8001260:	1a1b      	subne	r3, r3, r0
 8001262:	50a3      	strne	r3, [r4, r2]
 8001264:	e7af      	b.n	80011c6 <_malloc_r+0x22>
 8001266:	6862      	ldr	r2, [r4, #4]
 8001268:	42a3      	cmp	r3, r4
 800126a:	bf0c      	ite	eq
 800126c:	f8c8 2000 	streq.w	r2, [r8]
 8001270:	605a      	strne	r2, [r3, #4]
 8001272:	e7eb      	b.n	800124c <_malloc_r+0xa8>
 8001274:	4623      	mov	r3, r4
 8001276:	6864      	ldr	r4, [r4, #4]
 8001278:	e7ae      	b.n	80011d8 <_malloc_r+0x34>
 800127a:	463c      	mov	r4, r7
 800127c:	687f      	ldr	r7, [r7, #4]
 800127e:	e7b6      	b.n	80011ee <_malloc_r+0x4a>
 8001280:	461a      	mov	r2, r3
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	42a3      	cmp	r3, r4
 8001286:	d1fb      	bne.n	8001280 <_malloc_r+0xdc>
 8001288:	2300      	movs	r3, #0
 800128a:	6053      	str	r3, [r2, #4]
 800128c:	e7de      	b.n	800124c <_malloc_r+0xa8>
 800128e:	230c      	movs	r3, #12
 8001290:	6033      	str	r3, [r6, #0]
 8001292:	4630      	mov	r0, r6
 8001294:	f000 f998 	bl	80015c8 <__malloc_unlock>
 8001298:	e794      	b.n	80011c4 <_malloc_r+0x20>
 800129a:	6005      	str	r5, [r0, #0]
 800129c:	e7d6      	b.n	800124c <_malloc_r+0xa8>
 800129e:	bf00      	nop
 80012a0:	200001b8 	.word	0x200001b8

080012a4 <_printf_common>:
 80012a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012a8:	4616      	mov	r6, r2
 80012aa:	4698      	mov	r8, r3
 80012ac:	688a      	ldr	r2, [r1, #8]
 80012ae:	690b      	ldr	r3, [r1, #16]
 80012b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80012b4:	4293      	cmp	r3, r2
 80012b6:	bfb8      	it	lt
 80012b8:	4613      	movlt	r3, r2
 80012ba:	6033      	str	r3, [r6, #0]
 80012bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80012c0:	4607      	mov	r7, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	b10a      	cbz	r2, 80012ca <_printf_common+0x26>
 80012c6:	3301      	adds	r3, #1
 80012c8:	6033      	str	r3, [r6, #0]
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	0699      	lsls	r1, r3, #26
 80012ce:	bf42      	ittt	mi
 80012d0:	6833      	ldrmi	r3, [r6, #0]
 80012d2:	3302      	addmi	r3, #2
 80012d4:	6033      	strmi	r3, [r6, #0]
 80012d6:	6825      	ldr	r5, [r4, #0]
 80012d8:	f015 0506 	ands.w	r5, r5, #6
 80012dc:	d106      	bne.n	80012ec <_printf_common+0x48>
 80012de:	f104 0a19 	add.w	sl, r4, #25
 80012e2:	68e3      	ldr	r3, [r4, #12]
 80012e4:	6832      	ldr	r2, [r6, #0]
 80012e6:	1a9b      	subs	r3, r3, r2
 80012e8:	42ab      	cmp	r3, r5
 80012ea:	dc26      	bgt.n	800133a <_printf_common+0x96>
 80012ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80012f0:	6822      	ldr	r2, [r4, #0]
 80012f2:	3b00      	subs	r3, #0
 80012f4:	bf18      	it	ne
 80012f6:	2301      	movne	r3, #1
 80012f8:	0692      	lsls	r2, r2, #26
 80012fa:	d42b      	bmi.n	8001354 <_printf_common+0xb0>
 80012fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001300:	4641      	mov	r1, r8
 8001302:	4638      	mov	r0, r7
 8001304:	47c8      	blx	r9
 8001306:	3001      	adds	r0, #1
 8001308:	d01e      	beq.n	8001348 <_printf_common+0xa4>
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	6922      	ldr	r2, [r4, #16]
 800130e:	f003 0306 	and.w	r3, r3, #6
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf02      	ittt	eq
 8001316:	68e5      	ldreq	r5, [r4, #12]
 8001318:	6833      	ldreq	r3, [r6, #0]
 800131a:	1aed      	subeq	r5, r5, r3
 800131c:	68a3      	ldr	r3, [r4, #8]
 800131e:	bf0c      	ite	eq
 8001320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001324:	2500      	movne	r5, #0
 8001326:	4293      	cmp	r3, r2
 8001328:	bfc4      	itt	gt
 800132a:	1a9b      	subgt	r3, r3, r2
 800132c:	18ed      	addgt	r5, r5, r3
 800132e:	2600      	movs	r6, #0
 8001330:	341a      	adds	r4, #26
 8001332:	42b5      	cmp	r5, r6
 8001334:	d11a      	bne.n	800136c <_printf_common+0xc8>
 8001336:	2000      	movs	r0, #0
 8001338:	e008      	b.n	800134c <_printf_common+0xa8>
 800133a:	2301      	movs	r3, #1
 800133c:	4652      	mov	r2, sl
 800133e:	4641      	mov	r1, r8
 8001340:	4638      	mov	r0, r7
 8001342:	47c8      	blx	r9
 8001344:	3001      	adds	r0, #1
 8001346:	d103      	bne.n	8001350 <_printf_common+0xac>
 8001348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800134c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001350:	3501      	adds	r5, #1
 8001352:	e7c6      	b.n	80012e2 <_printf_common+0x3e>
 8001354:	18e1      	adds	r1, r4, r3
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	2030      	movs	r0, #48	@ 0x30
 800135a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800135e:	4422      	add	r2, r4
 8001360:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001364:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001368:	3302      	adds	r3, #2
 800136a:	e7c7      	b.n	80012fc <_printf_common+0x58>
 800136c:	2301      	movs	r3, #1
 800136e:	4622      	mov	r2, r4
 8001370:	4641      	mov	r1, r8
 8001372:	4638      	mov	r0, r7
 8001374:	47c8      	blx	r9
 8001376:	3001      	adds	r0, #1
 8001378:	d0e6      	beq.n	8001348 <_printf_common+0xa4>
 800137a:	3601      	adds	r6, #1
 800137c:	e7d9      	b.n	8001332 <_printf_common+0x8e>
	...

08001380 <_printf_i>:
 8001380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001384:	7e0f      	ldrb	r7, [r1, #24]
 8001386:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001388:	2f78      	cmp	r7, #120	@ 0x78
 800138a:	4691      	mov	r9, r2
 800138c:	4680      	mov	r8, r0
 800138e:	460c      	mov	r4, r1
 8001390:	469a      	mov	sl, r3
 8001392:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001396:	d807      	bhi.n	80013a8 <_printf_i+0x28>
 8001398:	2f62      	cmp	r7, #98	@ 0x62
 800139a:	d80a      	bhi.n	80013b2 <_printf_i+0x32>
 800139c:	2f00      	cmp	r7, #0
 800139e:	f000 80d1 	beq.w	8001544 <_printf_i+0x1c4>
 80013a2:	2f58      	cmp	r7, #88	@ 0x58
 80013a4:	f000 80b8 	beq.w	8001518 <_printf_i+0x198>
 80013a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80013ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80013b0:	e03a      	b.n	8001428 <_printf_i+0xa8>
 80013b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80013b6:	2b15      	cmp	r3, #21
 80013b8:	d8f6      	bhi.n	80013a8 <_printf_i+0x28>
 80013ba:	a101      	add	r1, pc, #4	@ (adr r1, 80013c0 <_printf_i+0x40>)
 80013bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80013c0:	08001419 	.word	0x08001419
 80013c4:	0800142d 	.word	0x0800142d
 80013c8:	080013a9 	.word	0x080013a9
 80013cc:	080013a9 	.word	0x080013a9
 80013d0:	080013a9 	.word	0x080013a9
 80013d4:	080013a9 	.word	0x080013a9
 80013d8:	0800142d 	.word	0x0800142d
 80013dc:	080013a9 	.word	0x080013a9
 80013e0:	080013a9 	.word	0x080013a9
 80013e4:	080013a9 	.word	0x080013a9
 80013e8:	080013a9 	.word	0x080013a9
 80013ec:	0800152b 	.word	0x0800152b
 80013f0:	08001457 	.word	0x08001457
 80013f4:	080014e5 	.word	0x080014e5
 80013f8:	080013a9 	.word	0x080013a9
 80013fc:	080013a9 	.word	0x080013a9
 8001400:	0800154d 	.word	0x0800154d
 8001404:	080013a9 	.word	0x080013a9
 8001408:	08001457 	.word	0x08001457
 800140c:	080013a9 	.word	0x080013a9
 8001410:	080013a9 	.word	0x080013a9
 8001414:	080014ed 	.word	0x080014ed
 8001418:	6833      	ldr	r3, [r6, #0]
 800141a:	1d1a      	adds	r2, r3, #4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6032      	str	r2, [r6, #0]
 8001420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001424:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001428:	2301      	movs	r3, #1
 800142a:	e09c      	b.n	8001566 <_printf_i+0x1e6>
 800142c:	6833      	ldr	r3, [r6, #0]
 800142e:	6820      	ldr	r0, [r4, #0]
 8001430:	1d19      	adds	r1, r3, #4
 8001432:	6031      	str	r1, [r6, #0]
 8001434:	0606      	lsls	r6, r0, #24
 8001436:	d501      	bpl.n	800143c <_printf_i+0xbc>
 8001438:	681d      	ldr	r5, [r3, #0]
 800143a:	e003      	b.n	8001444 <_printf_i+0xc4>
 800143c:	0645      	lsls	r5, r0, #25
 800143e:	d5fb      	bpl.n	8001438 <_printf_i+0xb8>
 8001440:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001444:	2d00      	cmp	r5, #0
 8001446:	da03      	bge.n	8001450 <_printf_i+0xd0>
 8001448:	232d      	movs	r3, #45	@ 0x2d
 800144a:	426d      	negs	r5, r5
 800144c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001450:	4858      	ldr	r0, [pc, #352]	@ (80015b4 <_printf_i+0x234>)
 8001452:	230a      	movs	r3, #10
 8001454:	e011      	b.n	800147a <_printf_i+0xfa>
 8001456:	6821      	ldr	r1, [r4, #0]
 8001458:	6833      	ldr	r3, [r6, #0]
 800145a:	0608      	lsls	r0, r1, #24
 800145c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001460:	d402      	bmi.n	8001468 <_printf_i+0xe8>
 8001462:	0649      	lsls	r1, r1, #25
 8001464:	bf48      	it	mi
 8001466:	b2ad      	uxthmi	r5, r5
 8001468:	2f6f      	cmp	r7, #111	@ 0x6f
 800146a:	4852      	ldr	r0, [pc, #328]	@ (80015b4 <_printf_i+0x234>)
 800146c:	6033      	str	r3, [r6, #0]
 800146e:	bf14      	ite	ne
 8001470:	230a      	movne	r3, #10
 8001472:	2308      	moveq	r3, #8
 8001474:	2100      	movs	r1, #0
 8001476:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800147a:	6866      	ldr	r6, [r4, #4]
 800147c:	60a6      	str	r6, [r4, #8]
 800147e:	2e00      	cmp	r6, #0
 8001480:	db05      	blt.n	800148e <_printf_i+0x10e>
 8001482:	6821      	ldr	r1, [r4, #0]
 8001484:	432e      	orrs	r6, r5
 8001486:	f021 0104 	bic.w	r1, r1, #4
 800148a:	6021      	str	r1, [r4, #0]
 800148c:	d04b      	beq.n	8001526 <_printf_i+0x1a6>
 800148e:	4616      	mov	r6, r2
 8001490:	fbb5 f1f3 	udiv	r1, r5, r3
 8001494:	fb03 5711 	mls	r7, r3, r1, r5
 8001498:	5dc7      	ldrb	r7, [r0, r7]
 800149a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800149e:	462f      	mov	r7, r5
 80014a0:	42bb      	cmp	r3, r7
 80014a2:	460d      	mov	r5, r1
 80014a4:	d9f4      	bls.n	8001490 <_printf_i+0x110>
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d10b      	bne.n	80014c2 <_printf_i+0x142>
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	07df      	lsls	r7, r3, #31
 80014ae:	d508      	bpl.n	80014c2 <_printf_i+0x142>
 80014b0:	6923      	ldr	r3, [r4, #16]
 80014b2:	6861      	ldr	r1, [r4, #4]
 80014b4:	4299      	cmp	r1, r3
 80014b6:	bfde      	ittt	le
 80014b8:	2330      	movle	r3, #48	@ 0x30
 80014ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80014be:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80014c2:	1b92      	subs	r2, r2, r6
 80014c4:	6122      	str	r2, [r4, #16]
 80014c6:	f8cd a000 	str.w	sl, [sp]
 80014ca:	464b      	mov	r3, r9
 80014cc:	aa03      	add	r2, sp, #12
 80014ce:	4621      	mov	r1, r4
 80014d0:	4640      	mov	r0, r8
 80014d2:	f7ff fee7 	bl	80012a4 <_printf_common>
 80014d6:	3001      	adds	r0, #1
 80014d8:	d14a      	bne.n	8001570 <_printf_i+0x1f0>
 80014da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014de:	b004      	add	sp, #16
 80014e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	f043 0320 	orr.w	r3, r3, #32
 80014ea:	6023      	str	r3, [r4, #0]
 80014ec:	4832      	ldr	r0, [pc, #200]	@ (80015b8 <_printf_i+0x238>)
 80014ee:	2778      	movs	r7, #120	@ 0x78
 80014f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	6831      	ldr	r1, [r6, #0]
 80014f8:	061f      	lsls	r7, r3, #24
 80014fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80014fe:	d402      	bmi.n	8001506 <_printf_i+0x186>
 8001500:	065f      	lsls	r7, r3, #25
 8001502:	bf48      	it	mi
 8001504:	b2ad      	uxthmi	r5, r5
 8001506:	6031      	str	r1, [r6, #0]
 8001508:	07d9      	lsls	r1, r3, #31
 800150a:	bf44      	itt	mi
 800150c:	f043 0320 	orrmi.w	r3, r3, #32
 8001510:	6023      	strmi	r3, [r4, #0]
 8001512:	b11d      	cbz	r5, 800151c <_printf_i+0x19c>
 8001514:	2310      	movs	r3, #16
 8001516:	e7ad      	b.n	8001474 <_printf_i+0xf4>
 8001518:	4826      	ldr	r0, [pc, #152]	@ (80015b4 <_printf_i+0x234>)
 800151a:	e7e9      	b.n	80014f0 <_printf_i+0x170>
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	f023 0320 	bic.w	r3, r3, #32
 8001522:	6023      	str	r3, [r4, #0]
 8001524:	e7f6      	b.n	8001514 <_printf_i+0x194>
 8001526:	4616      	mov	r6, r2
 8001528:	e7bd      	b.n	80014a6 <_printf_i+0x126>
 800152a:	6833      	ldr	r3, [r6, #0]
 800152c:	6825      	ldr	r5, [r4, #0]
 800152e:	6961      	ldr	r1, [r4, #20]
 8001530:	1d18      	adds	r0, r3, #4
 8001532:	6030      	str	r0, [r6, #0]
 8001534:	062e      	lsls	r6, r5, #24
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	d501      	bpl.n	800153e <_printf_i+0x1be>
 800153a:	6019      	str	r1, [r3, #0]
 800153c:	e002      	b.n	8001544 <_printf_i+0x1c4>
 800153e:	0668      	lsls	r0, r5, #25
 8001540:	d5fb      	bpl.n	800153a <_printf_i+0x1ba>
 8001542:	8019      	strh	r1, [r3, #0]
 8001544:	2300      	movs	r3, #0
 8001546:	6123      	str	r3, [r4, #16]
 8001548:	4616      	mov	r6, r2
 800154a:	e7bc      	b.n	80014c6 <_printf_i+0x146>
 800154c:	6833      	ldr	r3, [r6, #0]
 800154e:	1d1a      	adds	r2, r3, #4
 8001550:	6032      	str	r2, [r6, #0]
 8001552:	681e      	ldr	r6, [r3, #0]
 8001554:	6862      	ldr	r2, [r4, #4]
 8001556:	2100      	movs	r1, #0
 8001558:	4630      	mov	r0, r6
 800155a:	f7fe fe39 	bl	80001d0 <memchr>
 800155e:	b108      	cbz	r0, 8001564 <_printf_i+0x1e4>
 8001560:	1b80      	subs	r0, r0, r6
 8001562:	6060      	str	r0, [r4, #4]
 8001564:	6863      	ldr	r3, [r4, #4]
 8001566:	6123      	str	r3, [r4, #16]
 8001568:	2300      	movs	r3, #0
 800156a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800156e:	e7aa      	b.n	80014c6 <_printf_i+0x146>
 8001570:	6923      	ldr	r3, [r4, #16]
 8001572:	4632      	mov	r2, r6
 8001574:	4649      	mov	r1, r9
 8001576:	4640      	mov	r0, r8
 8001578:	47d0      	blx	sl
 800157a:	3001      	adds	r0, #1
 800157c:	d0ad      	beq.n	80014da <_printf_i+0x15a>
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	079b      	lsls	r3, r3, #30
 8001582:	d413      	bmi.n	80015ac <_printf_i+0x22c>
 8001584:	68e0      	ldr	r0, [r4, #12]
 8001586:	9b03      	ldr	r3, [sp, #12]
 8001588:	4298      	cmp	r0, r3
 800158a:	bfb8      	it	lt
 800158c:	4618      	movlt	r0, r3
 800158e:	e7a6      	b.n	80014de <_printf_i+0x15e>
 8001590:	2301      	movs	r3, #1
 8001592:	4632      	mov	r2, r6
 8001594:	4649      	mov	r1, r9
 8001596:	4640      	mov	r0, r8
 8001598:	47d0      	blx	sl
 800159a:	3001      	adds	r0, #1
 800159c:	d09d      	beq.n	80014da <_printf_i+0x15a>
 800159e:	3501      	adds	r5, #1
 80015a0:	68e3      	ldr	r3, [r4, #12]
 80015a2:	9903      	ldr	r1, [sp, #12]
 80015a4:	1a5b      	subs	r3, r3, r1
 80015a6:	42ab      	cmp	r3, r5
 80015a8:	dcf2      	bgt.n	8001590 <_printf_i+0x210>
 80015aa:	e7eb      	b.n	8001584 <_printf_i+0x204>
 80015ac:	2500      	movs	r5, #0
 80015ae:	f104 0619 	add.w	r6, r4, #25
 80015b2:	e7f5      	b.n	80015a0 <_printf_i+0x220>
 80015b4:	08001787 	.word	0x08001787
 80015b8:	08001798 	.word	0x08001798

080015bc <__malloc_lock>:
 80015bc:	4801      	ldr	r0, [pc, #4]	@ (80015c4 <__malloc_lock+0x8>)
 80015be:	f7ff bc75 	b.w	8000eac <__retarget_lock_acquire_recursive>
 80015c2:	bf00      	nop
 80015c4:	200001b0 	.word	0x200001b0

080015c8 <__malloc_unlock>:
 80015c8:	4801      	ldr	r0, [pc, #4]	@ (80015d0 <__malloc_unlock+0x8>)
 80015ca:	f7ff bc70 	b.w	8000eae <__retarget_lock_release_recursive>
 80015ce:	bf00      	nop
 80015d0:	200001b0 	.word	0x200001b0

080015d4 <_realloc_r>:
 80015d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015d8:	4607      	mov	r7, r0
 80015da:	4614      	mov	r4, r2
 80015dc:	460d      	mov	r5, r1
 80015de:	b921      	cbnz	r1, 80015ea <_realloc_r+0x16>
 80015e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015e4:	4611      	mov	r1, r2
 80015e6:	f7ff bddd 	b.w	80011a4 <_malloc_r>
 80015ea:	b92a      	cbnz	r2, 80015f8 <_realloc_r+0x24>
 80015ec:	f000 f858 	bl	80016a0 <_free_r>
 80015f0:	4625      	mov	r5, r4
 80015f2:	4628      	mov	r0, r5
 80015f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015f8:	f000 f89c 	bl	8001734 <_malloc_usable_size_r>
 80015fc:	4284      	cmp	r4, r0
 80015fe:	4606      	mov	r6, r0
 8001600:	d802      	bhi.n	8001608 <_realloc_r+0x34>
 8001602:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001606:	d8f4      	bhi.n	80015f2 <_realloc_r+0x1e>
 8001608:	4621      	mov	r1, r4
 800160a:	4638      	mov	r0, r7
 800160c:	f7ff fdca 	bl	80011a4 <_malloc_r>
 8001610:	4680      	mov	r8, r0
 8001612:	b908      	cbnz	r0, 8001618 <_realloc_r+0x44>
 8001614:	4645      	mov	r5, r8
 8001616:	e7ec      	b.n	80015f2 <_realloc_r+0x1e>
 8001618:	42b4      	cmp	r4, r6
 800161a:	4622      	mov	r2, r4
 800161c:	4629      	mov	r1, r5
 800161e:	bf28      	it	cs
 8001620:	4632      	movcs	r2, r6
 8001622:	f000 f82f 	bl	8001684 <memcpy>
 8001626:	4629      	mov	r1, r5
 8001628:	4638      	mov	r0, r7
 800162a:	f000 f839 	bl	80016a0 <_free_r>
 800162e:	e7f1      	b.n	8001614 <_realloc_r+0x40>

08001630 <memmove>:
 8001630:	4288      	cmp	r0, r1
 8001632:	b510      	push	{r4, lr}
 8001634:	eb01 0402 	add.w	r4, r1, r2
 8001638:	d902      	bls.n	8001640 <memmove+0x10>
 800163a:	4284      	cmp	r4, r0
 800163c:	4623      	mov	r3, r4
 800163e:	d807      	bhi.n	8001650 <memmove+0x20>
 8001640:	1e43      	subs	r3, r0, #1
 8001642:	42a1      	cmp	r1, r4
 8001644:	d008      	beq.n	8001658 <memmove+0x28>
 8001646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800164a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800164e:	e7f8      	b.n	8001642 <memmove+0x12>
 8001650:	4402      	add	r2, r0
 8001652:	4601      	mov	r1, r0
 8001654:	428a      	cmp	r2, r1
 8001656:	d100      	bne.n	800165a <memmove+0x2a>
 8001658:	bd10      	pop	{r4, pc}
 800165a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800165e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001662:	e7f7      	b.n	8001654 <memmove+0x24>

08001664 <_sbrk_r>:
 8001664:	b538      	push	{r3, r4, r5, lr}
 8001666:	4d06      	ldr	r5, [pc, #24]	@ (8001680 <_sbrk_r+0x1c>)
 8001668:	2300      	movs	r3, #0
 800166a:	4604      	mov	r4, r0
 800166c:	4608      	mov	r0, r1
 800166e:	602b      	str	r3, [r5, #0]
 8001670:	f7ff fb36 	bl	8000ce0 <_sbrk>
 8001674:	1c43      	adds	r3, r0, #1
 8001676:	d102      	bne.n	800167e <_sbrk_r+0x1a>
 8001678:	682b      	ldr	r3, [r5, #0]
 800167a:	b103      	cbz	r3, 800167e <_sbrk_r+0x1a>
 800167c:	6023      	str	r3, [r4, #0]
 800167e:	bd38      	pop	{r3, r4, r5, pc}
 8001680:	200001bc 	.word	0x200001bc

08001684 <memcpy>:
 8001684:	440a      	add	r2, r1
 8001686:	4291      	cmp	r1, r2
 8001688:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800168c:	d100      	bne.n	8001690 <memcpy+0xc>
 800168e:	4770      	bx	lr
 8001690:	b510      	push	{r4, lr}
 8001692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800169a:	4291      	cmp	r1, r2
 800169c:	d1f9      	bne.n	8001692 <memcpy+0xe>
 800169e:	bd10      	pop	{r4, pc}

080016a0 <_free_r>:
 80016a0:	b538      	push	{r3, r4, r5, lr}
 80016a2:	4605      	mov	r5, r0
 80016a4:	2900      	cmp	r1, #0
 80016a6:	d041      	beq.n	800172c <_free_r+0x8c>
 80016a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016ac:	1f0c      	subs	r4, r1, #4
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bfb8      	it	lt
 80016b2:	18e4      	addlt	r4, r4, r3
 80016b4:	f7ff ff82 	bl	80015bc <__malloc_lock>
 80016b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001730 <_free_r+0x90>)
 80016ba:	6813      	ldr	r3, [r2, #0]
 80016bc:	b933      	cbnz	r3, 80016cc <_free_r+0x2c>
 80016be:	6063      	str	r3, [r4, #4]
 80016c0:	6014      	str	r4, [r2, #0]
 80016c2:	4628      	mov	r0, r5
 80016c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016c8:	f7ff bf7e 	b.w	80015c8 <__malloc_unlock>
 80016cc:	42a3      	cmp	r3, r4
 80016ce:	d908      	bls.n	80016e2 <_free_r+0x42>
 80016d0:	6820      	ldr	r0, [r4, #0]
 80016d2:	1821      	adds	r1, r4, r0
 80016d4:	428b      	cmp	r3, r1
 80016d6:	bf01      	itttt	eq
 80016d8:	6819      	ldreq	r1, [r3, #0]
 80016da:	685b      	ldreq	r3, [r3, #4]
 80016dc:	1809      	addeq	r1, r1, r0
 80016de:	6021      	streq	r1, [r4, #0]
 80016e0:	e7ed      	b.n	80016be <_free_r+0x1e>
 80016e2:	461a      	mov	r2, r3
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	b10b      	cbz	r3, 80016ec <_free_r+0x4c>
 80016e8:	42a3      	cmp	r3, r4
 80016ea:	d9fa      	bls.n	80016e2 <_free_r+0x42>
 80016ec:	6811      	ldr	r1, [r2, #0]
 80016ee:	1850      	adds	r0, r2, r1
 80016f0:	42a0      	cmp	r0, r4
 80016f2:	d10b      	bne.n	800170c <_free_r+0x6c>
 80016f4:	6820      	ldr	r0, [r4, #0]
 80016f6:	4401      	add	r1, r0
 80016f8:	1850      	adds	r0, r2, r1
 80016fa:	4283      	cmp	r3, r0
 80016fc:	6011      	str	r1, [r2, #0]
 80016fe:	d1e0      	bne.n	80016c2 <_free_r+0x22>
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	6053      	str	r3, [r2, #4]
 8001706:	4408      	add	r0, r1
 8001708:	6010      	str	r0, [r2, #0]
 800170a:	e7da      	b.n	80016c2 <_free_r+0x22>
 800170c:	d902      	bls.n	8001714 <_free_r+0x74>
 800170e:	230c      	movs	r3, #12
 8001710:	602b      	str	r3, [r5, #0]
 8001712:	e7d6      	b.n	80016c2 <_free_r+0x22>
 8001714:	6820      	ldr	r0, [r4, #0]
 8001716:	1821      	adds	r1, r4, r0
 8001718:	428b      	cmp	r3, r1
 800171a:	bf04      	itt	eq
 800171c:	6819      	ldreq	r1, [r3, #0]
 800171e:	685b      	ldreq	r3, [r3, #4]
 8001720:	6063      	str	r3, [r4, #4]
 8001722:	bf04      	itt	eq
 8001724:	1809      	addeq	r1, r1, r0
 8001726:	6021      	streq	r1, [r4, #0]
 8001728:	6054      	str	r4, [r2, #4]
 800172a:	e7ca      	b.n	80016c2 <_free_r+0x22>
 800172c:	bd38      	pop	{r3, r4, r5, pc}
 800172e:	bf00      	nop
 8001730:	200001b8 	.word	0x200001b8

08001734 <_malloc_usable_size_r>:
 8001734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001738:	1f18      	subs	r0, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	bfbc      	itt	lt
 800173e:	580b      	ldrlt	r3, [r1, r0]
 8001740:	18c0      	addlt	r0, r0, r3
 8001742:	4770      	bx	lr

08001744 <_init>:
 8001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001746:	bf00      	nop
 8001748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800174a:	bc08      	pop	{r3}
 800174c:	469e      	mov	lr, r3
 800174e:	4770      	bx	lr

08001750 <_fini>:
 8001750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001752:	bf00      	nop
 8001754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001756:	bc08      	pop	{r3}
 8001758:	469e      	mov	lr, r3
 800175a:	4770      	bx	lr
