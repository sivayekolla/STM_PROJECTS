
counting_semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003ed0  08003ed0  00004ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f34  08003f34  0000506c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003f34  08003f34  0000506c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003f34  08003f34  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f34  08003f34  00004f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f38  08003f38  00004f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003f3c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002adc  2000006c  08003fa8  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002b48  08003fa8  00005b48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091e1  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cff  00000000  00000000  0000e27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0000ff80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000067b  00000000  00000000  00010840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ccc  00000000  00000000  00010ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009668  00000000  00000000  00013b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efea8  00000000  00000000  0001d1ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d097  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e8  00000000  00000000  0010d0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0010f8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003eb8 	.word	0x08003eb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08003eb8 	.word	0x08003eb8

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <_write>:

SemaphoreHandle_t countingSem;

/* SWO printf setup */
int _write(int file, char *ptr, int len)
{
 800021e:	b580      	push	{r7, lr}
 8000220:	b086      	sub	sp, #24
 8000222:	af00      	add	r7, sp, #0
 8000224:	60f8      	str	r0, [r7, #12]
 8000226:	60b9      	str	r1, [r7, #8]
 8000228:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	e009      	b.n	8000244 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	1c5a      	adds	r2, r3, #1
 8000234:	60ba      	str	r2, [r7, #8]
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	4618      	mov	r0, r3
 800023a:	f7ff ffc9 	bl	80001d0 <ITM_SendChar>
    for (int i = 0; i < len; i++)
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	3301      	adds	r3, #1
 8000242:	617b      	str	r3, [r7, #20]
 8000244:	697a      	ldr	r2, [r7, #20]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	429a      	cmp	r2, r3
 800024a:	dbf1      	blt.n	8000230 <_write+0x12>
    }
    return len;
 800024c:	687b      	ldr	r3, [r7, #4]
}
 800024e:	4618      	mov	r0, r3
 8000250:	3718      	adds	r7, #24
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <main>:

int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af02      	add	r7, sp, #8
    HAL_Init();
 800025e:	f000 fa09 	bl	8000674 <HAL_Init>
    SystemClock_Config();
 8000262:	f000 f869 	bl	8000338 <SystemClock_Config>

    printf("System Start...\r\n");
 8000266:	4816      	ldr	r0, [pc, #88]	@ (80002c0 <main+0x68>)
 8000268:	f003 fa26 	bl	80036b8 <puts>

    countingSem = xSemaphoreCreateCounting(3, 0);
 800026c:	2100      	movs	r1, #0
 800026e:	2003      	movs	r0, #3
 8000270:	f000 fcca 	bl	8000c08 <xQueueCreateCountingSemaphore>
 8000274:	4603      	mov	r3, r0
 8000276:	4a13      	ldr	r2, [pc, #76]	@ (80002c4 <main+0x6c>)
 8000278:	6013      	str	r3, [r2, #0]
    if (countingSem == NULL)
 800027a:	4b12      	ldr	r3, [pc, #72]	@ (80002c4 <main+0x6c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d104      	bne.n	800028c <main+0x34>
    {
        printf("Semaphore Create Failed!\r\n");
 8000282:	4811      	ldr	r0, [pc, #68]	@ (80002c8 <main+0x70>)
 8000284:	f003 fa18 	bl	80036b8 <puts>
        while(1);
 8000288:	bf00      	nop
 800028a:	e7fd      	b.n	8000288 <main+0x30>
    }

    xTaskCreate(SenderTask, "Sender", 256, NULL, 2, NULL);
 800028c:	2300      	movs	r3, #0
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	2302      	movs	r3, #2
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	2300      	movs	r3, #0
 8000296:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800029a:	490c      	ldr	r1, [pc, #48]	@ (80002cc <main+0x74>)
 800029c:	480c      	ldr	r0, [pc, #48]	@ (80002d0 <main+0x78>)
 800029e:	f001 f9d7 	bl	8001650 <xTaskCreate>
    xTaskCreate(ReceiverTask, "Receiver", 256, NULL, 1, NULL);
 80002a2:	2300      	movs	r3, #0
 80002a4:	9301      	str	r3, [sp, #4]
 80002a6:	2301      	movs	r3, #1
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2300      	movs	r3, #0
 80002ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002b0:	4908      	ldr	r1, [pc, #32]	@ (80002d4 <main+0x7c>)
 80002b2:	4809      	ldr	r0, [pc, #36]	@ (80002d8 <main+0x80>)
 80002b4:	f001 f9cc 	bl	8001650 <xTaskCreate>

    vTaskStartScheduler();
 80002b8:	f001 fb4c 	bl	8001954 <vTaskStartScheduler>

    while(1); // Should never reach here
 80002bc:	bf00      	nop
 80002be:	e7fd      	b.n	80002bc <main+0x64>
 80002c0:	08003ed0 	.word	0x08003ed0
 80002c4:	20000088 	.word	0x20000088
 80002c8:	08003ee4 	.word	0x08003ee4
 80002cc:	08003f00 	.word	0x08003f00
 80002d0:	080002dd 	.word	0x080002dd
 80002d4:	08003f08 	.word	0x08003f08
 80002d8:	0800030d 	.word	0x0800030d

080002dc <SenderTask>:
}

void SenderTask(void *pvParameters)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
    (void) pvParameters;
    while (1)
    {
        printf("Give\r\n");
 80002e4:	4807      	ldr	r0, [pc, #28]	@ (8000304 <SenderTask+0x28>)
 80002e6:	f003 f9e7 	bl	80036b8 <puts>
        xSemaphoreGive(countingSem);
 80002ea:	4b07      	ldr	r3, [pc, #28]	@ (8000308 <SenderTask+0x2c>)
 80002ec:	6818      	ldr	r0, [r3, #0]
 80002ee:	2300      	movs	r3, #0
 80002f0:	2200      	movs	r2, #0
 80002f2:	2100      	movs	r1, #0
 80002f4:	f000 fcbe 	bl	8000c74 <xQueueGenericSend>
        vTaskDelay(pdMS_TO_TICKS(1000));
 80002f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002fc:	f001 faf4 	bl	80018e8 <vTaskDelay>
        printf("Give\r\n");
 8000300:	bf00      	nop
 8000302:	e7ef      	b.n	80002e4 <SenderTask+0x8>
 8000304:	08003f14 	.word	0x08003f14
 8000308:	20000088 	.word	0x20000088

0800030c <ReceiverTask>:
    }
}

void ReceiverTask(void *pvParameters)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
    (void) pvParameters;
    while (1)
    {
        if (xSemaphoreTake(countingSem, portMAX_DELAY))
 8000314:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <ReceiverTask+0x24>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800031c:	4618      	mov	r0, r3
 800031e:	f000 ff2b 	bl	8001178 <xQueueSemaphoreTake>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0f5      	beq.n	8000314 <ReceiverTask+0x8>
        {
            printf("Take\r\n");
 8000328:	4802      	ldr	r0, [pc, #8]	@ (8000334 <ReceiverTask+0x28>)
 800032a:	f003 f9c5 	bl	80036b8 <puts>
        if (xSemaphoreTake(countingSem, portMAX_DELAY))
 800032e:	e7f1      	b.n	8000314 <ReceiverTask+0x8>
 8000330:	20000088 	.word	0x20000088
 8000334:	08003f1c 	.word	0x08003f1c

08000338 <SystemClock_Config>:
        }
    }
}
void SystemClock_Config(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
    /* Enable Power interface clock */
    RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;
 800033c:	4b3f      	ldr	r3, [pc, #252]	@ (800043c <SystemClock_Config+0x104>)
 800033e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000340:	4a3e      	ldr	r2, [pc, #248]	@ (800043c <SystemClock_Config+0x104>)
 8000342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000346:	6593      	str	r3, [r2, #88]	@ 0x58

    /* Set voltage scaling to Scale 1 for high frequency (up to 80MHz) */
    PWR->CR1 &= ~PWR_CR1_VOS;
 8000348:	4b3d      	ldr	r3, [pc, #244]	@ (8000440 <SystemClock_Config+0x108>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a3c      	ldr	r2, [pc, #240]	@ (8000440 <SystemClock_Config+0x108>)
 800034e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000352:	6013      	str	r3, [r2, #0]
    PWR->CR1 |= PWR_CR1_VOS_0; // Scale 1 mode
 8000354:	4b3a      	ldr	r3, [pc, #232]	@ (8000440 <SystemClock_Config+0x108>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a39      	ldr	r2, [pc, #228]	@ (8000440 <SystemClock_Config+0x108>)
 800035a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800035e:	6013      	str	r3, [r2, #0]

    /* Enable MSI clock (default after reset, but ensure) */
    RCC->CR |= RCC_CR_MSION;
 8000360:	4b36      	ldr	r3, [pc, #216]	@ (800043c <SystemClock_Config+0x104>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a35      	ldr	r2, [pc, #212]	@ (800043c <SystemClock_Config+0x104>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_MSIRDY));
 800036c:	bf00      	nop
 800036e:	4b33      	ldr	r3, [pc, #204]	@ (800043c <SystemClock_Config+0x104>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f003 0302 	and.w	r3, r3, #2
 8000376:	2b00      	cmp	r3, #0
 8000378:	d0f9      	beq.n	800036e <SystemClock_Config+0x36>

    /* Configure MSI range to 4 MHz (range = 6) */
    RCC->CR &= ~RCC_CR_MSIRANGE;
 800037a:	4b30      	ldr	r3, [pc, #192]	@ (800043c <SystemClock_Config+0x104>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a2f      	ldr	r2, [pc, #188]	@ (800043c <SystemClock_Config+0x104>)
 8000380:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000384:	6013      	str	r3, [r2, #0]
    RCC->CR |= RCC_CR_MSIRANGE_6; // 4 MHz
 8000386:	4b2d      	ldr	r3, [pc, #180]	@ (800043c <SystemClock_Config+0x104>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a2c      	ldr	r2, [pc, #176]	@ (800043c <SystemClock_Config+0x104>)
 800038c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000390:	6013      	str	r3, [r2, #0]
    RCC->CR |= RCC_CR_MSIRGSEL;   // Use MSIRANGE from CR register
 8000392:	4b2a      	ldr	r3, [pc, #168]	@ (800043c <SystemClock_Config+0x104>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a29      	ldr	r2, [pc, #164]	@ (800043c <SystemClock_Config+0x104>)
 8000398:	f043 0308 	orr.w	r3, r3, #8
 800039c:	6013      	str	r3, [r2, #0]

    /* Disable PLL before configuring */
    RCC->CR &= ~RCC_CR_PLLON;
 800039e:	4b27      	ldr	r3, [pc, #156]	@ (800043c <SystemClock_Config+0x104>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a26      	ldr	r2, [pc, #152]	@ (800043c <SystemClock_Config+0x104>)
 80003a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80003a8:	6013      	str	r3, [r2, #0]
    while (RCC->CR & RCC_CR_PLLRDY);
 80003aa:	bf00      	nop
 80003ac:	4b23      	ldr	r3, [pc, #140]	@ (800043c <SystemClock_Config+0x104>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d1f9      	bne.n	80003ac <SystemClock_Config+0x74>

    /* Configure PLL: source = MSI (4 MHz), M=1, N=40, R=2 → 80 MHz */
    RCC->PLLCFGR = (RCC_PLLCFGR_PLLSRC_MSI | RCC_PLLCFGR_PLLREN |
 80003b8:	4b20      	ldr	r3, [pc, #128]	@ (800043c <SystemClock_Config+0x104>)
 80003ba:	4a22      	ldr	r2, [pc, #136]	@ (8000444 <SystemClock_Config+0x10c>)
 80003bc:	60da      	str	r2, [r3, #12]
                    (1 << RCC_PLLCFGR_PLLM_Pos) |
                    (40 << RCC_PLLCFGR_PLLN_Pos) |
                    (0 << RCC_PLLCFGR_PLLR_Pos)); // PLLR=2

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80003be:	4b1f      	ldr	r3, [pc, #124]	@ (800043c <SystemClock_Config+0x104>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a1e      	ldr	r2, [pc, #120]	@ (800043c <SystemClock_Config+0x104>)
 80003c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003c8:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));  // Wait until PLL ready
 80003ca:	bf00      	nop
 80003cc:	4b1b      	ldr	r3, [pc, #108]	@ (800043c <SystemClock_Config+0x104>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d0f9      	beq.n	80003cc <SystemClock_Config+0x94>

    /* Set flash latency for 80 MHz */
    FLASH->ACR |= FLASH_ACR_LATENCY_4WS;
 80003d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000448 <SystemClock_Config+0x110>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000448 <SystemClock_Config+0x110>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6013      	str	r3, [r2, #0]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLASH_ACR_LATENCY_4WS);
 80003e4:	bf00      	nop
 80003e6:	4b18      	ldr	r3, [pc, #96]	@ (8000448 <SystemClock_Config+0x110>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f003 0307 	and.w	r3, r3, #7
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	d1f9      	bne.n	80003e6 <SystemClock_Config+0xae>

    /* Select PLL as system clock */
    RCC->CFGR &= ~RCC_CFGR_SW;
 80003f2:	4b12      	ldr	r3, [pc, #72]	@ (800043c <SystemClock_Config+0x104>)
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	4a11      	ldr	r2, [pc, #68]	@ (800043c <SystemClock_Config+0x104>)
 80003f8:	f023 0303 	bic.w	r3, r3, #3
 80003fc:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003fe:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <SystemClock_Config+0x104>)
 8000400:	689b      	ldr	r3, [r3, #8]
 8000402:	4a0e      	ldr	r2, [pc, #56]	@ (800043c <SystemClock_Config+0x104>)
 8000404:	f043 0303 	orr.w	r3, r3, #3
 8000408:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800040a:	bf00      	nop
 800040c:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <SystemClock_Config+0x104>)
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	f003 030c 	and.w	r3, r3, #12
 8000414:	2b0c      	cmp	r3, #12
 8000416:	d1f9      	bne.n	800040c <SystemClock_Config+0xd4>

    /* Set AHB and APB prescalers to 1 */
    RCC->CFGR &= ~(RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2);
 8000418:	4b08      	ldr	r3, [pc, #32]	@ (800043c <SystemClock_Config+0x104>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	4a07      	ldr	r2, [pc, #28]	@ (800043c <SystemClock_Config+0x104>)
 800041e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000422:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000426:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV1 | RCC_CFGR_PPRE2_DIV1);
 8000428:	4b04      	ldr	r3, [pc, #16]	@ (800043c <SystemClock_Config+0x104>)
 800042a:	4a04      	ldr	r2, [pc, #16]	@ (800043c <SystemClock_Config+0x104>)
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	6093      	str	r3, [r2, #8]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000
 8000440:	40007000 	.word	0x40007000
 8000444:	01002811 	.word	0x01002811
 8000448:	40022000 	.word	0x40022000

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <HAL_MspInit+0x4c>)
 8000454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000456:	4a10      	ldr	r2, [pc, #64]	@ (8000498 <HAL_MspInit+0x4c>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6613      	str	r3, [r2, #96]	@ 0x60
 800045e:	4b0e      	ldr	r3, [pc, #56]	@ (8000498 <HAL_MspInit+0x4c>)
 8000460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <HAL_MspInit+0x4c>)
 800046c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800046e:	4a0a      	ldr	r2, [pc, #40]	@ (8000498 <HAL_MspInit+0x4c>)
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000474:	6593      	str	r3, [r2, #88]	@ 0x58
 8000476:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <HAL_MspInit+0x4c>)
 8000478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800047a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000482:	2200      	movs	r2, #0
 8000484:	210f      	movs	r1, #15
 8000486:	f06f 0001 	mvn.w	r0, #1
 800048a:	f000 fa20 	bl	80008ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <NMI_Handler+0x4>

080004a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a8:	bf00      	nop
 80004aa:	e7fd      	b.n	80004a8 <HardFault_Handler+0x4>

080004ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <MemManage_Handler+0x4>

080004b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <BusFault_Handler+0x4>

080004bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <UsageFault_Handler+0x4>

080004c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d6:	f000 f929 	bl	800072c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004da:	f001 fe65 	bl	80021a8 <xTaskGetSchedulerState>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d001      	beq.n	80004e8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004e4:	f002 fd58 	bl	8002f98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}

080004ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	e00a      	b.n	8000514 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004fe:	f3af 8000 	nop.w
 8000502:	4601      	mov	r1, r0
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	60ba      	str	r2, [r7, #8]
 800050a:	b2ca      	uxtb	r2, r1
 800050c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3301      	adds	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697a      	ldr	r2, [r7, #20]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	429a      	cmp	r2, r3
 800051a:	dbf0      	blt.n	80004fe <_read+0x12>
  }

  return len;
 800051c:	687b      	ldr	r3, [r7, #4]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800052e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800054e:	605a      	str	r2, [r3, #4]
  return 0;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <_isatty>:

int _isatty(int file)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000580:	2300      	movs	r3, #0
}
 8000582:	4618      	mov	r0, r3
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
	...

08000590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000598:	4a14      	ldr	r2, [pc, #80]	@ (80005ec <_sbrk+0x5c>)
 800059a:	4b15      	ldr	r3, [pc, #84]	@ (80005f0 <_sbrk+0x60>)
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a4:	4b13      	ldr	r3, [pc, #76]	@ (80005f4 <_sbrk+0x64>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d102      	bne.n	80005b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005ac:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <_sbrk+0x64>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	@ (80005f8 <_sbrk+0x68>)
 80005b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005b2:	4b10      	ldr	r3, [pc, #64]	@ (80005f4 <_sbrk+0x64>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d207      	bcs.n	80005d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c0:	f003 f88a 	bl	80036d8 <__errno>
 80005c4:	4603      	mov	r3, r0
 80005c6:	220c      	movs	r2, #12
 80005c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ce:	e009      	b.n	80005e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d0:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005d6:	4b07      	ldr	r3, [pc, #28]	@ (80005f4 <_sbrk+0x64>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	4a05      	ldr	r2, [pc, #20]	@ (80005f4 <_sbrk+0x64>)
 80005e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005e2:	68fb      	ldr	r3, [r7, #12]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20018000 	.word	0x20018000
 80005f0:	00000400 	.word	0x00000400
 80005f4:	2000008c 	.word	0x2000008c
 80005f8:	20002b48 	.word	0x20002b48

080005fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <SystemInit+0x20>)
 8000602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000606:	4a05      	ldr	r2, [pc, #20]	@ (800061c <SystemInit+0x20>)
 8000608:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800060c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000658 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000624:	f7ff ffea 	bl	80005fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000628:	480c      	ldr	r0, [pc, #48]	@ (800065c <LoopForever+0x6>)
  ldr r1, =_edata
 800062a:	490d      	ldr	r1, [pc, #52]	@ (8000660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800062c:	4a0d      	ldr	r2, [pc, #52]	@ (8000664 <LoopForever+0xe>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000630:	e002      	b.n	8000638 <LoopCopyDataInit>

08000632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000636:	3304      	adds	r3, #4

08000638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800063c:	d3f9      	bcc.n	8000632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063e:	4a0a      	ldr	r2, [pc, #40]	@ (8000668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000640:	4c0a      	ldr	r4, [pc, #40]	@ (800066c <LoopForever+0x16>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000644:	e001      	b.n	800064a <LoopFillZerobss>

08000646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000648:	3204      	adds	r2, #4

0800064a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800064c:	d3fb      	bcc.n	8000646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800064e:	f003 f849 	bl	80036e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000652:	f7ff fe01 	bl	8000258 <main>

08000656 <LoopForever>:

LoopForever:
    b LoopForever
 8000656:	e7fe      	b.n	8000656 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000658:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000664:	08003f3c 	.word	0x08003f3c
  ldr r2, =_sbss
 8000668:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800066c:	20002b48 	.word	0x20002b48

08000670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC1_2_IRQHandler>
	...

08000674 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800067a:	2300      	movs	r3, #0
 800067c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800067e:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <HAL_Init+0x3c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a0b      	ldr	r2, [pc, #44]	@ (80006b0 <HAL_Init+0x3c>)
 8000684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000688:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068a:	2003      	movs	r0, #3
 800068c:	f000 f914 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000690:	200f      	movs	r0, #15
 8000692:	f000 f80f 	bl	80006b4 <HAL_InitTick>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800069c:	2301      	movs	r3, #1
 800069e:	71fb      	strb	r3, [r7, #7]
 80006a0:	e001      	b.n	80006a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006a2:	f7ff fed3 	bl	800044c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006a6:	79fb      	ldrb	r3, [r7, #7]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40022000 	.word	0x40022000

080006b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006bc:	2300      	movs	r3, #0
 80006be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006c0:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <HAL_InitTick+0x6c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d023      	beq.n	8000710 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006c8:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <HAL_InitTick+0x70>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <HAL_InitTick+0x6c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006da:	fbb2 f3f3 	udiv	r3, r2, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f911 	bl	8000906 <HAL_SYSTICK_Config>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10f      	bne.n	800070a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d809      	bhi.n	8000704 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f0:	2200      	movs	r2, #0
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006f8:	f000 f8e9 	bl	80008ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000728 <HAL_InitTick+0x74>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
 8000702:	e007      	b.n	8000714 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000704:	2301      	movs	r3, #1
 8000706:	73fb      	strb	r3, [r7, #15]
 8000708:	e004      	b.n	8000714 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	e001      	b.n	8000714 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000710:	2301      	movs	r3, #1
 8000712:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000714:	7bfb      	ldrb	r3, [r7, #15]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000008 	.word	0x20000008
 8000724:	20000000 	.word	0x20000000
 8000728:	20000004 	.word	0x20000004

0800072c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_IncTick+0x20>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <HAL_IncTick+0x24>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4413      	add	r3, r2
 800073c:	4a04      	ldr	r2, [pc, #16]	@ (8000750 <HAL_IncTick+0x24>)
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000008 	.word	0x20000008
 8000750:	20000090 	.word	0x20000090

08000754 <__NVIC_SetPriorityGrouping>:
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	@ (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_SetPriority>:
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	@ (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	@ (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EncodePriority>:
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	@ 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f1c3 0307 	rsb	r3, r3, #7
 8000826:	2b04      	cmp	r3, #4
 8000828:	bf28      	it	cs
 800082a:	2304      	movcs	r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d902      	bls.n	800083c <NVIC_EncodePriority+0x30>
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3b03      	subs	r3, #3
 800083a:	e000      	b.n	800083e <NVIC_EncodePriority+0x32>
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000854:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43d9      	mvns	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	4313      	orrs	r3, r2
}
 8000866:	4618      	mov	r0, r3
 8000868:	3724      	adds	r7, #36	@ 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <SysTick_Config>:
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000884:	d301      	bcc.n	800088a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000886:	2301      	movs	r3, #1
 8000888:	e00f      	b.n	80008aa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088a:	4a0a      	ldr	r2, [pc, #40]	@ (80008b4 <SysTick_Config+0x40>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000892:	210f      	movs	r1, #15
 8000894:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000898:	f7ff ff8e 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089c:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <SysTick_Config+0x40>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	4b04      	ldr	r3, [pc, #16]	@ (80008b4 <SysTick_Config+0x40>)
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ff47 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008e0:	f7ff ff5c 	bl	800079c <__NVIC_GetPriorityGrouping>
 80008e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	6978      	ldr	r0, [r7, #20]
 80008ec:	f7ff ff8e 	bl	800080c <NVIC_EncodePriority>
 80008f0:	4602      	mov	r2, r0
 80008f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff5d 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ffb0 	bl	8000874 <SysTick_Config>
 8000914:	4603      	mov	r3, r0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f103 0208 	add.w	r2, r3, #8
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000936:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f103 0208 	add.w	r2, r3, #8
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f103 0208 	add.w	r2, r3, #8
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	689a      	ldr	r2, [r3, #8]
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	1c5a      	adds	r2, r3, #1
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	601a      	str	r2, [r3, #0]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80009d6:	d103      	bne.n	80009e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	691b      	ldr	r3, [r3, #16]
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	e00c      	b.n	80009fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3308      	adds	r3, #8
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	e002      	b.n	80009ee <vListInsert+0x2e>
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d2f6      	bcs.n	80009e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	685a      	ldr	r2, [r3, #4]
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	683a      	ldr	r2, [r7, #0]
 8000a08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	683a      	ldr	r2, [r7, #0]
 8000a14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a32:	b480      	push	{r7}
 8000a34:	b085      	sub	sp, #20
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	691b      	ldr	r3, [r3, #16]
 8000a3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	6892      	ldr	r2, [r2, #8]
 8000a48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	6852      	ldr	r2, [r2, #4]
 8000a52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d103      	bne.n	8000a66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	1e5a      	subs	r2, r3, #1
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d10b      	bne.n	8000ab4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000aa0:	f383 8811 	msr	BASEPRI, r3
 8000aa4:	f3bf 8f6f 	isb	sy
 8000aa8:	f3bf 8f4f 	dsb	sy
 8000aac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000aae:	bf00      	nop
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000ab4:	f002 f9e0 	bl	8002e78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ac0:	68f9      	ldr	r1, [r7, #12]
 8000ac2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000ac4:	fb01 f303 	mul.w	r3, r1, r3
 8000ac8:	441a      	add	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	68f9      	ldr	r1, [r7, #12]
 8000ae8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000aea:	fb01 f303 	mul.w	r3, r1, r3
 8000aee:	441a      	add	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	22ff      	movs	r2, #255	@ 0xff
 8000af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	22ff      	movs	r2, #255	@ 0xff
 8000b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d114      	bne.n	8000b34 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d01a      	beq.n	8000b48 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3310      	adds	r3, #16
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 f9a0 	bl	8001e5c <xTaskRemoveFromEventList>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d012      	beq.n	8000b48 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <xQueueGenericReset+0xd0>)
 8000b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	f3bf 8f4f 	dsb	sy
 8000b2e:	f3bf 8f6f 	isb	sy
 8000b32:	e009      	b.n	8000b48 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	3310      	adds	r3, #16
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fef0 	bl	800091e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	3324      	adds	r3, #36	@ 0x24
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff feeb 	bl	800091e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000b48:	f002 f9c8 	bl	8002edc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000b4c:	2301      	movs	r3, #1
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	e000ed04 	.word	0xe000ed04

08000b5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	4613      	mov	r3, r2
 8000b68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d10b      	bne.n	8000b88 <xQueueGenericCreate+0x2c>
	__asm volatile
 8000b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b74:	f383 8811 	msr	BASEPRI, r3
 8000b78:	f3bf 8f6f 	isb	sy
 8000b7c:	f3bf 8f4f 	dsb	sy
 8000b80:	613b      	str	r3, [r7, #16]
}
 8000b82:	bf00      	nop
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	fb02 f303 	mul.w	r3, r2, r3
 8000b90:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3348      	adds	r3, #72	@ 0x48
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 fa88 	bl	80030ac <pvPortMalloc>
 8000b9c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d00d      	beq.n	8000bc0 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3348      	adds	r3, #72	@ 0x48
 8000bac:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000bae:	79fa      	ldrb	r2, [r7, #7]
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f000 f805 	bl	8000bca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000bc0:	69bb      	ldr	r3, [r7, #24]
	}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3720      	adds	r7, #32
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d103      	bne.n	8000be6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	e002      	b.n	8000bec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	69b8      	ldr	r0, [r7, #24]
 8000bfc:	f7ff ff44 	bl	8000a88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d10b      	bne.n	8000c30 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8000c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c1c:	f383 8811 	msr	BASEPRI, r3
 8000c20:	f3bf 8f6f 	isb	sy
 8000c24:	f3bf 8f4f 	dsb	sy
 8000c28:	613b      	str	r3, [r7, #16]
}
 8000c2a:	bf00      	nop
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d90b      	bls.n	8000c50 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8000c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c3c:	f383 8811 	msr	BASEPRI, r3
 8000c40:	f3bf 8f6f 	isb	sy
 8000c44:	f3bf 8f4f 	dsb	sy
 8000c48:	60fb      	str	r3, [r7, #12]
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8000c50:	2202      	movs	r2, #2
 8000c52:	2100      	movs	r1, #0
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff81 	bl	8000b5c <xQueueGenericCreate>
 8000c5a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8000c68:	697b      	ldr	r3, [r7, #20]
	}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08e      	sub	sp, #56	@ 0x38
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000c82:	2300      	movs	r3, #0
 8000c84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8000c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10b      	bne.n	8000ca8 <xQueueGenericSend+0x34>
	__asm volatile
 8000c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c94:	f383 8811 	msr	BASEPRI, r3
 8000c98:	f3bf 8f6f 	isb	sy
 8000c9c:	f3bf 8f4f 	dsb	sy
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d103      	bne.n	8000cb6 <xQueueGenericSend+0x42>
 8000cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <xQueueGenericSend+0x46>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e000      	b.n	8000cbc <xQueueGenericSend+0x48>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10b      	bne.n	8000cd8 <xQueueGenericSend+0x64>
	__asm volatile
 8000cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cc4:	f383 8811 	msr	BASEPRI, r3
 8000cc8:	f3bf 8f6f 	isb	sy
 8000ccc:	f3bf 8f4f 	dsb	sy
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d103      	bne.n	8000ce6 <xQueueGenericSend+0x72>
 8000cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d101      	bne.n	8000cea <xQueueGenericSend+0x76>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <xQueueGenericSend+0x78>
 8000cea:	2300      	movs	r3, #0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10b      	bne.n	8000d08 <xQueueGenericSend+0x94>
	__asm volatile
 8000cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cf4:	f383 8811 	msr	BASEPRI, r3
 8000cf8:	f3bf 8f6f 	isb	sy
 8000cfc:	f3bf 8f4f 	dsb	sy
 8000d00:	623b      	str	r3, [r7, #32]
}
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d08:	f001 fa4e 	bl	80021a8 <xTaskGetSchedulerState>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d102      	bne.n	8000d18 <xQueueGenericSend+0xa4>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d101      	bne.n	8000d1c <xQueueGenericSend+0xa8>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <xQueueGenericSend+0xaa>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10b      	bne.n	8000d3a <xQueueGenericSend+0xc6>
	__asm volatile
 8000d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d26:	f383 8811 	msr	BASEPRI, r3
 8000d2a:	f3bf 8f6f 	isb	sy
 8000d2e:	f3bf 8f4f 	dsb	sy
 8000d32:	61fb      	str	r3, [r7, #28]
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	e7fd      	b.n	8000d36 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d3a:	f002 f89d 	bl	8002e78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d302      	bcc.n	8000d50 <xQueueGenericSend+0xdc>
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d129      	bne.n	8000da4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	68b9      	ldr	r1, [r7, #8]
 8000d54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000d56:	f000 fb37 	bl	80013c8 <prvCopyDataToQueue>
 8000d5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d010      	beq.n	8000d86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d66:	3324      	adds	r3, #36	@ 0x24
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 f877 	bl	8001e5c <xTaskRemoveFromEventList>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d013      	beq.n	8000d9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000d74:	4b3f      	ldr	r3, [pc, #252]	@ (8000e74 <xQueueGenericSend+0x200>)
 8000d76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	f3bf 8f4f 	dsb	sy
 8000d80:	f3bf 8f6f 	isb	sy
 8000d84:	e00a      	b.n	8000d9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d007      	beq.n	8000d9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000d8c:	4b39      	ldr	r3, [pc, #228]	@ (8000e74 <xQueueGenericSend+0x200>)
 8000d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	f3bf 8f4f 	dsb	sy
 8000d98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000d9c:	f002 f89e 	bl	8002edc <vPortExitCritical>
				return pdPASS;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e063      	b.n	8000e6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d103      	bne.n	8000db2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000daa:	f002 f897 	bl	8002edc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e05c      	b.n	8000e6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d106      	bne.n	8000dc6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 f8b1 	bl	8001f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000dc6:	f002 f889 	bl	8002edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000dca:	f000 fe1b 	bl	8001a04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000dce:	f002 f853 	bl	8002e78 <vPortEnterCritical>
 8000dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000dd8:	b25b      	sxtb	r3, r3
 8000dda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dde:	d103      	bne.n	8000de8 <xQueueGenericSend+0x174>
 8000de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000dea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000df4:	d103      	bne.n	8000dfe <xQueueGenericSend+0x18a>
 8000df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000dfe:	f002 f86d 	bl	8002edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e02:	1d3a      	adds	r2, r7, #4
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 f8a0 	bl	8001f50 <xTaskCheckForTimeOut>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d124      	bne.n	8000e60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000e18:	f000 fbce 	bl	80015b8 <prvIsQueueFull>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d018      	beq.n	8000e54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e24:	3310      	adds	r3, #16
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 ffc4 	bl	8001db8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000e30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000e32:	f000 fb59 	bl	80014e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000e36:	f000 fdf3 	bl	8001a20 <xTaskResumeAll>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f47f af7c 	bne.w	8000d3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <xQueueGenericSend+0x200>)
 8000e44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	f3bf 8f4f 	dsb	sy
 8000e4e:	f3bf 8f6f 	isb	sy
 8000e52:	e772      	b.n	8000d3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000e54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000e56:	f000 fb47 	bl	80014e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e5a:	f000 fde1 	bl	8001a20 <xTaskResumeAll>
 8000e5e:	e76c      	b.n	8000d3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000e60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000e62:	f000 fb41 	bl	80014e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e66:	f000 fddb 	bl	8001a20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000e6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3738      	adds	r7, #56	@ 0x38
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	e000ed04 	.word	0xe000ed04

08000e78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b090      	sub	sp, #64	@ 0x40
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8000e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d10b      	bne.n	8000ea8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8000e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e94:	f383 8811 	msr	BASEPRI, r3
 8000e98:	f3bf 8f6f 	isb	sy
 8000e9c:	f3bf 8f4f 	dsb	sy
 8000ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d103      	bne.n	8000eb6 <xQueueGenericSendFromISR+0x3e>
 8000eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <xQueueGenericSendFromISR+0x42>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <xQueueGenericSendFromISR+0x44>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10b      	bne.n	8000ed8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8000ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ec4:	f383 8811 	msr	BASEPRI, r3
 8000ec8:	f3bf 8f6f 	isb	sy
 8000ecc:	f3bf 8f4f 	dsb	sy
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d103      	bne.n	8000ee6 <xQueueGenericSendFromISR+0x6e>
 8000ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d101      	bne.n	8000eea <xQueueGenericSendFromISR+0x72>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <xQueueGenericSendFromISR+0x74>
 8000eea:	2300      	movs	r3, #0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10b      	bne.n	8000f08 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8000ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ef4:	f383 8811 	msr	BASEPRI, r3
 8000ef8:	f3bf 8f6f 	isb	sy
 8000efc:	f3bf 8f4f 	dsb	sy
 8000f00:	623b      	str	r3, [r7, #32]
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f08:	f002 f88e 	bl	8003028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000f0c:	f3ef 8211 	mrs	r2, BASEPRI
 8000f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f14:	f383 8811 	msr	BASEPRI, r3
 8000f18:	f3bf 8f6f 	isb	sy
 8000f1c:	f3bf 8f4f 	dsb	sy
 8000f20:	61fa      	str	r2, [r7, #28]
 8000f22:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000f24:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f26:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d302      	bcc.n	8000f3a <xQueueGenericSendFromISR+0xc2>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d12f      	bne.n	8000f9a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000f40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000f50:	f000 fa3a 	bl	80013c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000f54:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f5c:	d112      	bne.n	8000f84 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d016      	beq.n	8000f94 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f68:	3324      	adds	r3, #36	@ 0x24
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 ff76 	bl	8001e5c <xTaskRemoveFromEventList>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00e      	beq.n	8000f94 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00b      	beq.n	8000f94 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	e007      	b.n	8000f94 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000f84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	b25a      	sxtb	r2, r3
 8000f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8000f94:	2301      	movs	r3, #1
 8000f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8000f98:	e001      	b.n	8000f9e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fa0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000fa8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3740      	adds	r7, #64	@ 0x40
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	@ 0x30
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10b      	bne.n	8000fe6 <xQueueReceive+0x32>
	__asm volatile
 8000fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fd2:	f383 8811 	msr	BASEPRI, r3
 8000fd6:	f3bf 8f6f 	isb	sy
 8000fda:	f3bf 8f4f 	dsb	sy
 8000fde:	623b      	str	r3, [r7, #32]
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	e7fd      	b.n	8000fe2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d103      	bne.n	8000ff4 <xQueueReceive+0x40>
 8000fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <xQueueReceive+0x44>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <xQueueReceive+0x46>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10b      	bne.n	8001016 <xQueueReceive+0x62>
	__asm volatile
 8000ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001002:	f383 8811 	msr	BASEPRI, r3
 8001006:	f3bf 8f6f 	isb	sy
 800100a:	f3bf 8f4f 	dsb	sy
 800100e:	61fb      	str	r3, [r7, #28]
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	e7fd      	b.n	8001012 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001016:	f001 f8c7 	bl	80021a8 <xTaskGetSchedulerState>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <xQueueReceive+0x72>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <xQueueReceive+0x76>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <xQueueReceive+0x78>
 800102a:	2300      	movs	r3, #0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10b      	bne.n	8001048 <xQueueReceive+0x94>
	__asm volatile
 8001030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001034:	f383 8811 	msr	BASEPRI, r3
 8001038:	f3bf 8f6f 	isb	sy
 800103c:	f3bf 8f4f 	dsb	sy
 8001040:	61bb      	str	r3, [r7, #24]
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001048:	f001 ff16 	bl	8002e78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800104c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01f      	beq.n	8001098 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800105c:	f000 fa1e 	bl	800149c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001062:	1e5a      	subs	r2, r3, #1
 8001064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001066:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00f      	beq.n	8001090 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001072:	3310      	adds	r3, #16
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fef1 	bl	8001e5c <xTaskRemoveFromEventList>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d007      	beq.n	8001090 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001080:	4b3c      	ldr	r3, [pc, #240]	@ (8001174 <xQueueReceive+0x1c0>)
 8001082:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	f3bf 8f4f 	dsb	sy
 800108c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001090:	f001 ff24 	bl	8002edc <vPortExitCritical>
				return pdPASS;
 8001094:	2301      	movs	r3, #1
 8001096:	e069      	b.n	800116c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d103      	bne.n	80010a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800109e:	f001 ff1d 	bl	8002edc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e062      	b.n	800116c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80010a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d106      	bne.n	80010ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 ff37 	bl	8001f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80010b6:	2301      	movs	r3, #1
 80010b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80010ba:	f001 ff0f 	bl	8002edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80010be:	f000 fca1 	bl	8001a04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80010c2:	f001 fed9 	bl	8002e78 <vPortEnterCritical>
 80010c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010d2:	d103      	bne.n	80010dc <xQueueReceive+0x128>
 80010d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80010dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010e8:	d103      	bne.n	80010f2 <xQueueReceive+0x13e>
 80010ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80010f2:	f001 fef3 	bl	8002edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80010f6:	1d3a      	adds	r2, r7, #4
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 ff26 	bl	8001f50 <xTaskCheckForTimeOut>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d123      	bne.n	8001152 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800110a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800110c:	f000 fa3e 	bl	800158c <prvIsQueueEmpty>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d017      	beq.n	8001146 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001118:	3324      	adds	r3, #36	@ 0x24
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fe4a 	bl	8001db8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001124:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001126:	f000 f9df 	bl	80014e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800112a:	f000 fc79 	bl	8001a20 <xTaskResumeAll>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d189      	bne.n	8001048 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8001134:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <xQueueReceive+0x1c0>)
 8001136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	f3bf 8f4f 	dsb	sy
 8001140:	f3bf 8f6f 	isb	sy
 8001144:	e780      	b.n	8001048 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001146:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001148:	f000 f9ce 	bl	80014e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800114c:	f000 fc68 	bl	8001a20 <xTaskResumeAll>
 8001150:	e77a      	b.n	8001048 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001154:	f000 f9c8 	bl	80014e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001158:	f000 fc62 	bl	8001a20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800115c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800115e:	f000 fa15 	bl	800158c <prvIsQueueEmpty>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	f43f af6f 	beq.w	8001048 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800116a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800116c:	4618      	mov	r0, r3
 800116e:	3730      	adds	r7, #48	@ 0x30
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	e000ed04 	.word	0xe000ed04

08001178 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	@ 0x38
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800118a:	2300      	movs	r3, #0
 800118c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800118e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10b      	bne.n	80011ac <xQueueSemaphoreTake+0x34>
	__asm volatile
 8001194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001198:	f383 8811 	msr	BASEPRI, r3
 800119c:	f3bf 8f6f 	isb	sy
 80011a0:	f3bf 8f4f 	dsb	sy
 80011a4:	623b      	str	r3, [r7, #32]
}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80011ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00b      	beq.n	80011cc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80011b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011b8:	f383 8811 	msr	BASEPRI, r3
 80011bc:	f3bf 8f6f 	isb	sy
 80011c0:	f3bf 8f4f 	dsb	sy
 80011c4:	61fb      	str	r3, [r7, #28]
}
 80011c6:	bf00      	nop
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80011cc:	f000 ffec 	bl	80021a8 <xTaskGetSchedulerState>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d102      	bne.n	80011dc <xQueueSemaphoreTake+0x64>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <xQueueSemaphoreTake+0x68>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <xQueueSemaphoreTake+0x6a>
 80011e0:	2300      	movs	r3, #0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10b      	bne.n	80011fe <xQueueSemaphoreTake+0x86>
	__asm volatile
 80011e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ea:	f383 8811 	msr	BASEPRI, r3
 80011ee:	f3bf 8f6f 	isb	sy
 80011f2:	f3bf 8f4f 	dsb	sy
 80011f6:	61bb      	str	r3, [r7, #24]
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	e7fd      	b.n	80011fa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80011fe:	f001 fe3b 	bl	8002e78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800120a:	2b00      	cmp	r3, #0
 800120c:	d024      	beq.n	8001258 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800120e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001210:	1e5a      	subs	r2, r3, #1
 8001212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001214:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d104      	bne.n	8001228 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800121e:	f001 f96f 	bl	8002500 <pvTaskIncrementMutexHeldCount>
 8001222:	4602      	mov	r2, r0
 8001224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001226:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00f      	beq.n	8001250 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001232:	3310      	adds	r3, #16
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fe11 	bl	8001e5c <xTaskRemoveFromEventList>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001240:	4b54      	ldr	r3, [pc, #336]	@ (8001394 <xQueueSemaphoreTake+0x21c>)
 8001242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	f3bf 8f4f 	dsb	sy
 800124c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001250:	f001 fe44 	bl	8002edc <vPortExitCritical>
				return pdPASS;
 8001254:	2301      	movs	r3, #1
 8001256:	e098      	b.n	800138a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d112      	bne.n	8001284 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800125e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00b      	beq.n	800127c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8001264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001268:	f383 8811 	msr	BASEPRI, r3
 800126c:	f3bf 8f6f 	isb	sy
 8001270:	f3bf 8f4f 	dsb	sy
 8001274:	617b      	str	r3, [r7, #20]
}
 8001276:	bf00      	nop
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800127c:	f001 fe2e 	bl	8002edc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001280:	2300      	movs	r3, #0
 8001282:	e082      	b.n	800138a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001286:	2b00      	cmp	r3, #0
 8001288:	d106      	bne.n	8001298 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fe48 	bl	8001f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001294:	2301      	movs	r3, #1
 8001296:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001298:	f001 fe20 	bl	8002edc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800129c:	f000 fbb2 	bl	8001a04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80012a0:	f001 fdea 	bl	8002e78 <vPortEnterCritical>
 80012a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012b0:	d103      	bne.n	80012ba <xQueueSemaphoreTake+0x142>
 80012b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80012ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012c6:	d103      	bne.n	80012d0 <xQueueSemaphoreTake+0x158>
 80012c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80012d0:	f001 fe04 	bl	8002edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80012d4:	463a      	mov	r2, r7
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fe37 	bl	8001f50 <xTaskCheckForTimeOut>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d132      	bne.n	800134e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012ea:	f000 f94f 	bl	800158c <prvIsQueueEmpty>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d026      	beq.n	8001342 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80012f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d109      	bne.n	8001310 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80012fc:	f001 fdbc 	bl	8002e78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 ff6d 	bl	80021e4 <xTaskPriorityInherit>
 800130a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800130c:	f001 fde6 	bl	8002edc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001312:	3324      	adds	r3, #36	@ 0x24
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fd4d 	bl	8001db8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800131e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001320:	f000 f8e2 	bl	80014e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001324:	f000 fb7c 	bl	8001a20 <xTaskResumeAll>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	f47f af67 	bne.w	80011fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <xQueueSemaphoreTake+0x21c>)
 8001332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	f3bf 8f4f 	dsb	sy
 800133c:	f3bf 8f6f 	isb	sy
 8001340:	e75d      	b.n	80011fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8001342:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001344:	f000 f8d0 	bl	80014e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001348:	f000 fb6a 	bl	8001a20 <xTaskResumeAll>
 800134c:	e757      	b.n	80011fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800134e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001350:	f000 f8ca 	bl	80014e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001354:	f000 fb64 	bl	8001a20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001358:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800135a:	f000 f917 	bl	800158c <prvIsQueueEmpty>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	f43f af4c 	beq.w	80011fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8001366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00d      	beq.n	8001388 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800136c:	f001 fd84 	bl	8002e78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001370:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001372:	f000 f811 	bl	8001398 <prvGetDisinheritPriorityAfterTimeout>
 8001376:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800137e:	4618      	mov	r0, r3
 8001380:	f001 f82e 	bl	80023e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001384:	f001 fdaa 	bl	8002edc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001388:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800138a:	4618      	mov	r0, r3
 800138c:	3738      	adds	r7, #56	@ 0x38
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000ed04 	.word	0xe000ed04

08001398 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d006      	beq.n	80013b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f1c3 0305 	rsb	r3, r3, #5
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e001      	b.n	80013ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80013ba:	68fb      	ldr	r3, [r7, #12]
	}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10d      	bne.n	8001402 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d14d      	bne.n	800148a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 ff6c 	bl	80022d0 <xTaskPriorityDisinherit>
 80013f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	e043      	b.n	800148a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d119      	bne.n	800143c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6858      	ldr	r0, [r3, #4]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	461a      	mov	r2, r3
 8001412:	68b9      	ldr	r1, [r7, #8]
 8001414:	f002 f9ec 	bl	80037f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001420:	441a      	add	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	429a      	cmp	r2, r3
 8001430:	d32b      	bcc.n	800148a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	e026      	b.n	800148a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	68d8      	ldr	r0, [r3, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	461a      	mov	r2, r3
 8001446:	68b9      	ldr	r1, [r7, #8]
 8001448:	f002 f9d2 	bl	80037f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	425b      	negs	r3, r3
 8001456:	441a      	add	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d207      	bcs.n	8001478 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	425b      	negs	r3, r3
 8001472:	441a      	add	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d105      	bne.n	800148a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d002      	beq.n	800148a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	3b01      	subs	r3, #1
 8001488:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8001492:	697b      	ldr	r3, [r7, #20]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d018      	beq.n	80014e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	441a      	add	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d303      	bcc.n	80014d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68d9      	ldr	r1, [r3, #12]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	461a      	mov	r2, r3
 80014da:	6838      	ldr	r0, [r7, #0]
 80014dc:	f002 f988 	bl	80037f0 <memcpy>
	}
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80014f0:	f001 fcc2 	bl	8002e78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80014fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80014fc:	e011      	b.n	8001522 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001502:	2b00      	cmp	r3, #0
 8001504:	d012      	beq.n	800152c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3324      	adds	r3, #36	@ 0x24
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fca6 	bl	8001e5c <xTaskRemoveFromEventList>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001516:	f000 fd7f 	bl	8002018 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	3b01      	subs	r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	dce9      	bgt.n	80014fe <prvUnlockQueue+0x16>
 800152a:	e000      	b.n	800152e <prvUnlockQueue+0x46>
					break;
 800152c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	22ff      	movs	r2, #255	@ 0xff
 8001532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8001536:	f001 fcd1 	bl	8002edc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800153a:	f001 fc9d 	bl	8002e78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001544:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001546:	e011      	b.n	800156c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d012      	beq.n	8001576 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3310      	adds	r3, #16
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fc81 	bl	8001e5c <xTaskRemoveFromEventList>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001560:	f000 fd5a 	bl	8002018 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	3b01      	subs	r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800156c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001570:	2b00      	cmp	r3, #0
 8001572:	dce9      	bgt.n	8001548 <prvUnlockQueue+0x60>
 8001574:	e000      	b.n	8001578 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001576:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	22ff      	movs	r2, #255	@ 0xff
 800157c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8001580:	f001 fcac 	bl	8002edc <vPortExitCritical>
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001594:	f001 fc70 	bl	8002e78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80015a0:	2301      	movs	r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	e001      	b.n	80015aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80015aa:	f001 fc97 	bl	8002edc <vPortExitCritical>

	return xReturn;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80015c0:	f001 fc5a 	bl	8002e78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d102      	bne.n	80015d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80015d0:	2301      	movs	r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	e001      	b.n	80015da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80015da:	f001 fc7f 	bl	8002edc <vPortExitCritical>

	return xReturn;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80015f8:	f001 fc3e 	bl	8002e78 <vPortEnterCritical>
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001602:	b25b      	sxtb	r3, r3
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001608:	d103      	bne.n	8001612 <vQueueWaitForMessageRestricted+0x2a>
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001618:	b25b      	sxtb	r3, r3
 800161a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800161e:	d103      	bne.n	8001628 <vQueueWaitForMessageRestricted+0x40>
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001628:	f001 fc58 	bl	8002edc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001630:	2b00      	cmp	r3, #0
 8001632:	d106      	bne.n	8001642 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3324      	adds	r3, #36	@ 0x24
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fbe1 	bl	8001e04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff50 	bl	80014e8 <prvUnlockQueue>
	}
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08c      	sub	sp, #48	@ 0x30
 8001654:	af04      	add	r7, sp, #16
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	4613      	mov	r3, r2
 800165e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4618      	mov	r0, r3
 8001666:	f001 fd21 	bl	80030ac <pvPortMalloc>
 800166a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00e      	beq.n	8001690 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001672:	20a0      	movs	r0, #160	@ 0xa0
 8001674:	f001 fd1a 	bl	80030ac <pvPortMalloc>
 8001678:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	631a      	str	r2, [r3, #48]	@ 0x30
 8001686:	e005      	b.n	8001694 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001688:	6978      	ldr	r0, [r7, #20]
 800168a:	f001 fddd 	bl	8003248 <vPortFree>
 800168e:	e001      	b.n	8001694 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d013      	beq.n	80016c2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800169a:	88fa      	ldrh	r2, [r7, #6]
 800169c:	2300      	movs	r3, #0
 800169e:	9303      	str	r3, [sp, #12]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	9302      	str	r3, [sp, #8]
 80016a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68b9      	ldr	r1, [r7, #8]
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 f80f 	bl	80016d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80016b6:	69f8      	ldr	r0, [r7, #28]
 80016b8:	f000 f8ac 	bl	8001814 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80016bc:	2301      	movs	r3, #1
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	e002      	b.n	80016c8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80016c8:	69bb      	ldr	r3, [r7, #24]
	}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80016e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80016ec:	3b01      	subs	r3, #1
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	f023 0307 	bic.w	r3, r3, #7
 80016fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00b      	beq.n	800171e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8001706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800170a:	f383 8811 	msr	BASEPRI, r3
 800170e:	f3bf 8f6f 	isb	sy
 8001712:	f3bf 8f4f 	dsb	sy
 8001716:	617b      	str	r3, [r7, #20]
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	e7fd      	b.n	800171a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d01f      	beq.n	8001764 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
 8001728:	e012      	b.n	8001750 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	4413      	add	r3, r2
 8001730:	7819      	ldrb	r1, [r3, #0]
 8001732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	4413      	add	r3, r2
 8001738:	3334      	adds	r3, #52	@ 0x34
 800173a:	460a      	mov	r2, r1
 800173c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d006      	beq.n	8001758 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3301      	adds	r3, #1
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	2b0f      	cmp	r3, #15
 8001754:	d9e9      	bls.n	800172a <prvInitialiseNewTask+0x56>
 8001756:	e000      	b.n	800175a <prvInitialiseNewTask+0x86>
			{
				break;
 8001758:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800175a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001762:	e003      	b.n	800176c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800176c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800176e:	2b04      	cmp	r3, #4
 8001770:	d901      	bls.n	8001776 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001772:	2304      	movs	r3, #4
 8001774:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800177a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800177c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800177e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001780:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001784:	2200      	movs	r2, #0
 8001786:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800178a:	3304      	adds	r3, #4
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff f8e6 	bl	800095e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001794:	3318      	adds	r3, #24
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f8e1 	bl	800095e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800179c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800179e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a4:	f1c3 0205 	rsb	r2, r3, #5
 80017a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80017ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80017b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017b4:	2200      	movs	r2, #0
 80017b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80017ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80017c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017c4:	334c      	adds	r3, #76	@ 0x4c
 80017c6:	224c      	movs	r2, #76	@ 0x4c
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f001 ff7c 	bl	80036c8 <memset>
 80017d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <prvInitialiseNewTask+0x134>)
 80017d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80017d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017d8:	4a0c      	ldr	r2, [pc, #48]	@ (800180c <prvInitialiseNewTask+0x138>)
 80017da:	655a      	str	r2, [r3, #84]	@ 0x54
 80017dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017de:	4a0c      	ldr	r2, [pc, #48]	@ (8001810 <prvInitialiseNewTask+0x13c>)
 80017e0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	68f9      	ldr	r1, [r7, #12]
 80017e6:	69b8      	ldr	r0, [r7, #24]
 80017e8:	f001 fa14 	bl	8002c14 <pxPortInitialiseStack>
 80017ec:	4602      	mov	r2, r0
 80017ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80017f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80017f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80017fe:	bf00      	nop
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200029fc 	.word	0x200029fc
 800180c:	20002a64 	.word	0x20002a64
 8001810:	20002acc 	.word	0x20002acc

08001814 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800181c:	f001 fb2c 	bl	8002e78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001820:	4b2a      	ldr	r3, [pc, #168]	@ (80018cc <prvAddNewTaskToReadyList+0xb8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	4a29      	ldr	r2, [pc, #164]	@ (80018cc <prvAddNewTaskToReadyList+0xb8>)
 8001828:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800182a:	4b29      	ldr	r3, [pc, #164]	@ (80018d0 <prvAddNewTaskToReadyList+0xbc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001832:	4a27      	ldr	r2, [pc, #156]	@ (80018d0 <prvAddNewTaskToReadyList+0xbc>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001838:	4b24      	ldr	r3, [pc, #144]	@ (80018cc <prvAddNewTaskToReadyList+0xb8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d110      	bne.n	8001862 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001840:	f000 fc0e 	bl	8002060 <prvInitialiseTaskLists>
 8001844:	e00d      	b.n	8001862 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <prvAddNewTaskToReadyList+0xc0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800184e:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <prvAddNewTaskToReadyList+0xbc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001858:	429a      	cmp	r2, r3
 800185a:	d802      	bhi.n	8001862 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800185c:	4a1c      	ldr	r2, [pc, #112]	@ (80018d0 <prvAddNewTaskToReadyList+0xbc>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001862:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <prvAddNewTaskToReadyList+0xc4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	4a1b      	ldr	r2, [pc, #108]	@ (80018d8 <prvAddNewTaskToReadyList+0xc4>)
 800186a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	2201      	movs	r2, #1
 8001872:	409a      	lsls	r2, r3
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <prvAddNewTaskToReadyList+0xc8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4313      	orrs	r3, r2
 800187a:	4a18      	ldr	r2, [pc, #96]	@ (80018dc <prvAddNewTaskToReadyList+0xc8>)
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4a15      	ldr	r2, [pc, #84]	@ (80018e0 <prvAddNewTaskToReadyList+0xcc>)
 800188c:	441a      	add	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3304      	adds	r3, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4610      	mov	r0, r2
 8001896:	f7ff f86f 	bl	8000978 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800189a:	f001 fb1f 	bl	8002edc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <prvAddNewTaskToReadyList+0xc0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00e      	beq.n	80018c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80018a6:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <prvAddNewTaskToReadyList+0xbc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d207      	bcs.n	80018c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <prvAddNewTaskToReadyList+0xd0>)
 80018b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	f3bf 8f4f 	dsb	sy
 80018c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2000016c 	.word	0x2000016c
 80018d0:	20000094 	.word	0x20000094
 80018d4:	20000178 	.word	0x20000178
 80018d8:	20000188 	.word	0x20000188
 80018dc:	20000174 	.word	0x20000174
 80018e0:	20000098 	.word	0x20000098
 80018e4:	e000ed04 	.word	0xe000ed04

080018e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d018      	beq.n	800192c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80018fa:	4b14      	ldr	r3, [pc, #80]	@ (800194c <vTaskDelay+0x64>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <vTaskDelay+0x32>
	__asm volatile
 8001902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001906:	f383 8811 	msr	BASEPRI, r3
 800190a:	f3bf 8f6f 	isb	sy
 800190e:	f3bf 8f4f 	dsb	sy
 8001912:	60bb      	str	r3, [r7, #8]
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	e7fd      	b.n	8001916 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800191a:	f000 f873 	bl	8001a04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800191e:	2100      	movs	r1, #0
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 fe01 	bl	8002528 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001926:	f000 f87b 	bl	8001a20 <xTaskResumeAll>
 800192a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d107      	bne.n	8001942 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <vTaskDelay+0x68>)
 8001934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	f3bf 8f4f 	dsb	sy
 800193e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000194 	.word	0x20000194
 8001950:	e000ed04 	.word	0xe000ed04

08001954 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800195a:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <vTaskStartScheduler+0x90>)
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	2300      	movs	r3, #0
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2300      	movs	r3, #0
 8001964:	2280      	movs	r2, #128	@ 0x80
 8001966:	4920      	ldr	r1, [pc, #128]	@ (80019e8 <vTaskStartScheduler+0x94>)
 8001968:	4820      	ldr	r0, [pc, #128]	@ (80019ec <vTaskStartScheduler+0x98>)
 800196a:	f7ff fe71 	bl	8001650 <xTaskCreate>
 800196e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d102      	bne.n	800197c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001976:	f000 fe3d 	bl	80025f4 <xTimerCreateTimerTask>
 800197a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d11b      	bne.n	80019ba <vTaskStartScheduler+0x66>
	__asm volatile
 8001982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001986:	f383 8811 	msr	BASEPRI, r3
 800198a:	f3bf 8f6f 	isb	sy
 800198e:	f3bf 8f4f 	dsb	sy
 8001992:	60bb      	str	r3, [r7, #8]
}
 8001994:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001996:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <vTaskStartScheduler+0x9c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	334c      	adds	r3, #76	@ 0x4c
 800199c:	4a15      	ldr	r2, [pc, #84]	@ (80019f4 <vTaskStartScheduler+0xa0>)
 800199e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80019a0:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <vTaskStartScheduler+0xa4>)
 80019a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80019a8:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <vTaskStartScheduler+0xa8>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80019ae:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <vTaskStartScheduler+0xac>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80019b4:	f001 f9bc 	bl	8002d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80019b8:	e00f      	b.n	80019da <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019c0:	d10b      	bne.n	80019da <vTaskStartScheduler+0x86>
	__asm volatile
 80019c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019c6:	f383 8811 	msr	BASEPRI, r3
 80019ca:	f3bf 8f6f 	isb	sy
 80019ce:	f3bf 8f4f 	dsb	sy
 80019d2:	607b      	str	r3, [r7, #4]
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	e7fd      	b.n	80019d6 <vTaskStartScheduler+0x82>
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000190 	.word	0x20000190
 80019e8:	08003f24 	.word	0x08003f24
 80019ec:	08002031 	.word	0x08002031
 80019f0:	20000094 	.word	0x20000094
 80019f4:	2000001c 	.word	0x2000001c
 80019f8:	2000018c 	.word	0x2000018c
 80019fc:	20000178 	.word	0x20000178
 8001a00:	20000170 	.word	0x20000170

08001a04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001a08:	4b04      	ldr	r3, [pc, #16]	@ (8001a1c <vTaskSuspendAll+0x18>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	4a03      	ldr	r2, [pc, #12]	@ (8001a1c <vTaskSuspendAll+0x18>)
 8001a10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	20000194 	.word	0x20000194

08001a20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001a2e:	4b42      	ldr	r3, [pc, #264]	@ (8001b38 <xTaskResumeAll+0x118>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10b      	bne.n	8001a4e <xTaskResumeAll+0x2e>
	__asm volatile
 8001a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a3a:	f383 8811 	msr	BASEPRI, r3
 8001a3e:	f3bf 8f6f 	isb	sy
 8001a42:	f3bf 8f4f 	dsb	sy
 8001a46:	603b      	str	r3, [r7, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	e7fd      	b.n	8001a4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001a4e:	f001 fa13 	bl	8002e78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001a52:	4b39      	ldr	r3, [pc, #228]	@ (8001b38 <xTaskResumeAll+0x118>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	4a37      	ldr	r2, [pc, #220]	@ (8001b38 <xTaskResumeAll+0x118>)
 8001a5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a5c:	4b36      	ldr	r3, [pc, #216]	@ (8001b38 <xTaskResumeAll+0x118>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d161      	bne.n	8001b28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001a64:	4b35      	ldr	r3, [pc, #212]	@ (8001b3c <xTaskResumeAll+0x11c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d05d      	beq.n	8001b28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a6c:	e02e      	b.n	8001acc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a6e:	4b34      	ldr	r3, [pc, #208]	@ (8001b40 <xTaskResumeAll+0x120>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3318      	adds	r3, #24
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe ffd9 	bl	8000a32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3304      	adds	r3, #4
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe ffd4 	bl	8000a32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	2201      	movs	r2, #1
 8001a90:	409a      	lsls	r2, r3
 8001a92:	4b2c      	ldr	r3, [pc, #176]	@ (8001b44 <xTaskResumeAll+0x124>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	4a2a      	ldr	r2, [pc, #168]	@ (8001b44 <xTaskResumeAll+0x124>)
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4a27      	ldr	r2, [pc, #156]	@ (8001b48 <xTaskResumeAll+0x128>)
 8001aaa:	441a      	add	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3304      	adds	r3, #4
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	f7fe ff60 	bl	8000978 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001abc:	4b23      	ldr	r3, [pc, #140]	@ (8001b4c <xTaskResumeAll+0x12c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d302      	bcc.n	8001acc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001ac6:	4b22      	ldr	r3, [pc, #136]	@ (8001b50 <xTaskResumeAll+0x130>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001acc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b40 <xTaskResumeAll+0x120>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1cc      	bne.n	8001a6e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001ada:	f000 fb45 	bl	8002168 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001ade:	4b1d      	ldr	r3, [pc, #116]	@ (8001b54 <xTaskResumeAll+0x134>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d010      	beq.n	8001b0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001aea:	f000 f847 	bl	8001b7c <xTaskIncrementTick>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001af4:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <xTaskResumeAll+0x130>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f1      	bne.n	8001aea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001b06:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <xTaskResumeAll+0x134>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001b0c:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <xTaskResumeAll+0x130>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d009      	beq.n	8001b28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001b14:	2301      	movs	r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001b18:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <xTaskResumeAll+0x138>)
 8001b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	f3bf 8f4f 	dsb	sy
 8001b24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001b28:	f001 f9d8 	bl	8002edc <vPortExitCritical>

	return xAlreadyYielded;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000194 	.word	0x20000194
 8001b3c:	2000016c 	.word	0x2000016c
 8001b40:	2000012c 	.word	0x2000012c
 8001b44:	20000174 	.word	0x20000174
 8001b48:	20000098 	.word	0x20000098
 8001b4c:	20000094 	.word	0x20000094
 8001b50:	20000180 	.word	0x20000180
 8001b54:	2000017c 	.word	0x2000017c
 8001b58:	e000ed04 	.word	0xe000ed04

08001b5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001b62:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <xTaskGetTickCount+0x1c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001b68:	687b      	ldr	r3, [r7, #4]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000170 	.word	0x20000170

08001b7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b86:	4b4f      	ldr	r3, [pc, #316]	@ (8001cc4 <xTaskIncrementTick+0x148>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 808f 	bne.w	8001cae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b90:	4b4d      	ldr	r3, [pc, #308]	@ (8001cc8 <xTaskIncrementTick+0x14c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001b98:	4a4b      	ldr	r2, [pc, #300]	@ (8001cc8 <xTaskIncrementTick+0x14c>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d121      	bne.n	8001be8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001ba4:	4b49      	ldr	r3, [pc, #292]	@ (8001ccc <xTaskIncrementTick+0x150>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00b      	beq.n	8001bc6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8001bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bb2:	f383 8811 	msr	BASEPRI, r3
 8001bb6:	f3bf 8f6f 	isb	sy
 8001bba:	f3bf 8f4f 	dsb	sy
 8001bbe:	603b      	str	r3, [r7, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	e7fd      	b.n	8001bc2 <xTaskIncrementTick+0x46>
 8001bc6:	4b41      	ldr	r3, [pc, #260]	@ (8001ccc <xTaskIncrementTick+0x150>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	4b40      	ldr	r3, [pc, #256]	@ (8001cd0 <xTaskIncrementTick+0x154>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a3e      	ldr	r2, [pc, #248]	@ (8001ccc <xTaskIncrementTick+0x150>)
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4a3e      	ldr	r2, [pc, #248]	@ (8001cd0 <xTaskIncrementTick+0x154>)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd4 <xTaskIncrementTick+0x158>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	4a3c      	ldr	r2, [pc, #240]	@ (8001cd4 <xTaskIncrementTick+0x158>)
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	f000 fac0 	bl	8002168 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001be8:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd8 <xTaskIncrementTick+0x15c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d348      	bcc.n	8001c84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bf2:	4b36      	ldr	r3, [pc, #216]	@ (8001ccc <xTaskIncrementTick+0x150>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d104      	bne.n	8001c06 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bfc:	4b36      	ldr	r3, [pc, #216]	@ (8001cd8 <xTaskIncrementTick+0x15c>)
 8001bfe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c02:	601a      	str	r2, [r3, #0]
					break;
 8001c04:	e03e      	b.n	8001c84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c06:	4b31      	ldr	r3, [pc, #196]	@ (8001ccc <xTaskIncrementTick+0x150>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d203      	bcs.n	8001c26 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001c1e:	4a2e      	ldr	r2, [pc, #184]	@ (8001cd8 <xTaskIncrementTick+0x15c>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001c24:	e02e      	b.n	8001c84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe ff01 	bl	8000a32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d004      	beq.n	8001c42 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	3318      	adds	r3, #24
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fef8 	bl	8000a32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c46:	2201      	movs	r2, #1
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	4b24      	ldr	r3, [pc, #144]	@ (8001cdc <xTaskIncrementTick+0x160>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	4a22      	ldr	r2, [pc, #136]	@ (8001cdc <xTaskIncrementTick+0x160>)
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4a1f      	ldr	r2, [pc, #124]	@ (8001ce0 <xTaskIncrementTick+0x164>)
 8001c62:	441a      	add	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	3304      	adds	r3, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	f7fe fe84 	bl	8000978 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce4 <xTaskIncrementTick+0x168>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d3b9      	bcc.n	8001bf2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c82:	e7b6      	b.n	8001bf2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c84:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <xTaskIncrementTick+0x168>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c8a:	4915      	ldr	r1, [pc, #84]	@ (8001ce0 <xTaskIncrementTick+0x164>)
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d901      	bls.n	8001ca0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001ca0:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <xTaskIncrementTick+0x16c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	e004      	b.n	8001cb8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001cae:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <xTaskIncrementTick+0x170>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <xTaskIncrementTick+0x170>)
 8001cb6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001cb8:	697b      	ldr	r3, [r7, #20]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000194 	.word	0x20000194
 8001cc8:	20000170 	.word	0x20000170
 8001ccc:	20000124 	.word	0x20000124
 8001cd0:	20000128 	.word	0x20000128
 8001cd4:	20000184 	.word	0x20000184
 8001cd8:	2000018c 	.word	0x2000018c
 8001cdc:	20000174 	.word	0x20000174
 8001ce0:	20000098 	.word	0x20000098
 8001ce4:	20000094 	.word	0x20000094
 8001ce8:	20000180 	.word	0x20000180
 8001cec:	2000017c 	.word	0x2000017c

08001cf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8001da0 <vTaskSwitchContext+0xb0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001cfe:	4b29      	ldr	r3, [pc, #164]	@ (8001da4 <vTaskSwitchContext+0xb4>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001d04:	e045      	b.n	8001d92 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8001d06:	4b27      	ldr	r3, [pc, #156]	@ (8001da4 <vTaskSwitchContext+0xb4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d0c:	4b26      	ldr	r3, [pc, #152]	@ (8001da8 <vTaskSwitchContext+0xb8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
 8001d1c:	f1c3 031f 	rsb	r3, r3, #31
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	4922      	ldr	r1, [pc, #136]	@ (8001dac <vTaskSwitchContext+0xbc>)
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10b      	bne.n	8001d4e <vTaskSwitchContext+0x5e>
	__asm volatile
 8001d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d3a:	f383 8811 	msr	BASEPRI, r3
 8001d3e:	f3bf 8f6f 	isb	sy
 8001d42:	f3bf 8f4f 	dsb	sy
 8001d46:	607b      	str	r3, [r7, #4]
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	e7fd      	b.n	8001d4a <vTaskSwitchContext+0x5a>
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4a14      	ldr	r2, [pc, #80]	@ (8001dac <vTaskSwitchContext+0xbc>)
 8001d5a:	4413      	add	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	3308      	adds	r3, #8
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d104      	bne.n	8001d7e <vTaskSwitchContext+0x8e>
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <vTaskSwitchContext+0xc0>)
 8001d86:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001d88:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <vTaskSwitchContext+0xc0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	334c      	adds	r3, #76	@ 0x4c
 8001d8e:	4a09      	ldr	r2, [pc, #36]	@ (8001db4 <vTaskSwitchContext+0xc4>)
 8001d90:	6013      	str	r3, [r2, #0]
}
 8001d92:	bf00      	nop
 8001d94:	371c      	adds	r7, #28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000194 	.word	0x20000194
 8001da4:	20000180 	.word	0x20000180
 8001da8:	20000174 	.word	0x20000174
 8001dac:	20000098 	.word	0x20000098
 8001db0:	20000094 	.word	0x20000094
 8001db4:	2000001c 	.word	0x2000001c

08001db8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10b      	bne.n	8001de0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8001dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dcc:	f383 8811 	msr	BASEPRI, r3
 8001dd0:	f3bf 8f6f 	isb	sy
 8001dd4:	f3bf 8f4f 	dsb	sy
 8001dd8:	60fb      	str	r3, [r7, #12]
}
 8001dda:	bf00      	nop
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001de0:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <vTaskPlaceOnEventList+0x48>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	3318      	adds	r3, #24
 8001de6:	4619      	mov	r1, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7fe fde9 	bl	80009c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001dee:	2101      	movs	r1, #1
 8001df0:	6838      	ldr	r0, [r7, #0]
 8001df2:	f000 fb99 	bl	8002528 <prvAddCurrentTaskToDelayedList>
}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000094 	.word	0x20000094

08001e04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10b      	bne.n	8001e2e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8001e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e1a:	f383 8811 	msr	BASEPRI, r3
 8001e1e:	f3bf 8f6f 	isb	sy
 8001e22:	f3bf 8f4f 	dsb	sy
 8001e26:	617b      	str	r3, [r7, #20]
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	e7fd      	b.n	8001e2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <vTaskPlaceOnEventListRestricted+0x54>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3318      	adds	r3, #24
 8001e34:	4619      	mov	r1, r3
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7fe fd9e 	bl	8000978 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	68b8      	ldr	r0, [r7, #8]
 8001e4c:	f000 fb6c 	bl	8002528 <prvAddCurrentTaskToDelayedList>
	}
 8001e50:	bf00      	nop
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000094 	.word	0x20000094

08001e5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10b      	bne.n	8001e8a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8001e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e76:	f383 8811 	msr	BASEPRI, r3
 8001e7a:	f3bf 8f6f 	isb	sy
 8001e7e:	f3bf 8f4f 	dsb	sy
 8001e82:	60fb      	str	r3, [r7, #12]
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	e7fd      	b.n	8001e86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	3318      	adds	r3, #24
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fdcf 	bl	8000a32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e94:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <xTaskRemoveFromEventList+0xb0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d11c      	bne.n	8001ed6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fdc6 	bl	8000a32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eaa:	2201      	movs	r2, #1
 8001eac:	409a      	lsls	r2, r3
 8001eae:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <xTaskRemoveFromEventList+0xb4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	4a16      	ldr	r2, [pc, #88]	@ (8001f10 <xTaskRemoveFromEventList+0xb4>)
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4a13      	ldr	r2, [pc, #76]	@ (8001f14 <xTaskRemoveFromEventList+0xb8>)
 8001ec6:	441a      	add	r2, r3
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f7fe fd52 	bl	8000978 <vListInsertEnd>
 8001ed4:	e005      	b.n	8001ee2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	3318      	adds	r3, #24
 8001eda:	4619      	mov	r1, r3
 8001edc:	480e      	ldr	r0, [pc, #56]	@ (8001f18 <xTaskRemoveFromEventList+0xbc>)
 8001ede:	f7fe fd4b 	bl	8000978 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <xTaskRemoveFromEventList+0xc0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d905      	bls.n	8001efc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <xTaskRemoveFromEventList+0xc4>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e001      	b.n	8001f00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001f00:	697b      	ldr	r3, [r7, #20]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000194 	.word	0x20000194
 8001f10:	20000174 	.word	0x20000174
 8001f14:	20000098 	.word	0x20000098
 8001f18:	2000012c 	.word	0x2000012c
 8001f1c:	20000094 	.word	0x20000094
 8001f20:	20000180 	.word	0x20000180

08001f24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <vTaskInternalSetTimeOutState+0x24>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <vTaskInternalSetTimeOutState+0x28>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	605a      	str	r2, [r3, #4]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	20000184 	.word	0x20000184
 8001f4c:	20000170 	.word	0x20000170

08001f50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10b      	bne.n	8001f78 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8001f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f64:	f383 8811 	msr	BASEPRI, r3
 8001f68:	f3bf 8f6f 	isb	sy
 8001f6c:	f3bf 8f4f 	dsb	sy
 8001f70:	613b      	str	r3, [r7, #16]
}
 8001f72:	bf00      	nop
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10b      	bne.n	8001f96 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8001f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f82:	f383 8811 	msr	BASEPRI, r3
 8001f86:	f3bf 8f6f 	isb	sy
 8001f8a:	f3bf 8f4f 	dsb	sy
 8001f8e:	60fb      	str	r3, [r7, #12]
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	e7fd      	b.n	8001f92 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8001f96:	f000 ff6f 	bl	8002e78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <xTaskCheckForTimeOut+0xc0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fb2:	d102      	bne.n	8001fba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	e023      	b.n	8002002 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	4b15      	ldr	r3, [pc, #84]	@ (8002014 <xTaskCheckForTimeOut+0xc4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d007      	beq.n	8001fd6 <xTaskCheckForTimeOut+0x86>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d302      	bcc.n	8001fd6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	e015      	b.n	8002002 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d20b      	bcs.n	8001ff8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	1ad2      	subs	r2, r2, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff99 	bl	8001f24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	e004      	b.n	8002002 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001ffe:	2301      	movs	r3, #1
 8002000:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002002:	f000 ff6b 	bl	8002edc <vPortExitCritical>

	return xReturn;
 8002006:	69fb      	ldr	r3, [r7, #28]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3720      	adds	r7, #32
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000170 	.word	0x20000170
 8002014:	20000184 	.word	0x20000184

08002018 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800201c:	4b03      	ldr	r3, [pc, #12]	@ (800202c <vTaskMissedYield+0x14>)
 800201e:	2201      	movs	r2, #1
 8002020:	601a      	str	r2, [r3, #0]
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	20000180 	.word	0x20000180

08002030 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002038:	f000 f852 	bl	80020e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <prvIdleTask+0x28>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d9f9      	bls.n	8002038 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <prvIdleTask+0x2c>)
 8002046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	f3bf 8f4f 	dsb	sy
 8002050:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002054:	e7f0      	b.n	8002038 <prvIdleTask+0x8>
 8002056:	bf00      	nop
 8002058:	20000098 	.word	0x20000098
 800205c:	e000ed04 	.word	0xe000ed04

08002060 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	e00c      	b.n	8002086 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <prvInitialiseTaskLists+0x60>)
 8002078:	4413      	add	r3, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fc4f 	bl	800091e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3301      	adds	r3, #1
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b04      	cmp	r3, #4
 800208a:	d9ef      	bls.n	800206c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800208c:	480d      	ldr	r0, [pc, #52]	@ (80020c4 <prvInitialiseTaskLists+0x64>)
 800208e:	f7fe fc46 	bl	800091e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002092:	480d      	ldr	r0, [pc, #52]	@ (80020c8 <prvInitialiseTaskLists+0x68>)
 8002094:	f7fe fc43 	bl	800091e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002098:	480c      	ldr	r0, [pc, #48]	@ (80020cc <prvInitialiseTaskLists+0x6c>)
 800209a:	f7fe fc40 	bl	800091e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800209e:	480c      	ldr	r0, [pc, #48]	@ (80020d0 <prvInitialiseTaskLists+0x70>)
 80020a0:	f7fe fc3d 	bl	800091e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80020a4:	480b      	ldr	r0, [pc, #44]	@ (80020d4 <prvInitialiseTaskLists+0x74>)
 80020a6:	f7fe fc3a 	bl	800091e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <prvInitialiseTaskLists+0x78>)
 80020ac:	4a05      	ldr	r2, [pc, #20]	@ (80020c4 <prvInitialiseTaskLists+0x64>)
 80020ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80020b0:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <prvInitialiseTaskLists+0x7c>)
 80020b2:	4a05      	ldr	r2, [pc, #20]	@ (80020c8 <prvInitialiseTaskLists+0x68>)
 80020b4:	601a      	str	r2, [r3, #0]
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000098 	.word	0x20000098
 80020c4:	200000fc 	.word	0x200000fc
 80020c8:	20000110 	.word	0x20000110
 80020cc:	2000012c 	.word	0x2000012c
 80020d0:	20000140 	.word	0x20000140
 80020d4:	20000158 	.word	0x20000158
 80020d8:	20000124 	.word	0x20000124
 80020dc:	20000128 	.word	0x20000128

080020e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020e6:	e019      	b.n	800211c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80020e8:	f000 fec6 	bl	8002e78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020ec:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <prvCheckTasksWaitingTermination+0x50>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3304      	adds	r3, #4
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fc9a 	bl	8000a32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80020fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002134 <prvCheckTasksWaitingTermination+0x54>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3b01      	subs	r3, #1
 8002104:	4a0b      	ldr	r2, [pc, #44]	@ (8002134 <prvCheckTasksWaitingTermination+0x54>)
 8002106:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002108:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <prvCheckTasksWaitingTermination+0x58>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3b01      	subs	r3, #1
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <prvCheckTasksWaitingTermination+0x58>)
 8002110:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002112:	f000 fee3 	bl	8002edc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f810 	bl	800213c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800211c:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <prvCheckTasksWaitingTermination+0x58>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1e1      	bne.n	80020e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000140 	.word	0x20000140
 8002134:	2000016c 	.word	0x2000016c
 8002138:	20000154 	.word	0x20000154

0800213c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	334c      	adds	r3, #76	@ 0x4c
 8002148:	4618      	mov	r0, r3
 800214a:	f001 faf3 	bl	8003734 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4618      	mov	r0, r3
 8002154:	f001 f878 	bl	8003248 <vPortFree>
			vPortFree( pxTCB );
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f001 f875 	bl	8003248 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800216e:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <prvResetNextTaskUnblockTime+0x38>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d104      	bne.n	8002182 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002178:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <prvResetNextTaskUnblockTime+0x3c>)
 800217a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800217e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002180:	e008      	b.n	8002194 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002182:	4b07      	ldr	r3, [pc, #28]	@ (80021a0 <prvResetNextTaskUnblockTime+0x38>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a04      	ldr	r2, [pc, #16]	@ (80021a4 <prvResetNextTaskUnblockTime+0x3c>)
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	20000124 	.word	0x20000124
 80021a4:	2000018c 	.word	0x2000018c

080021a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80021ae:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <xTaskGetSchedulerState+0x34>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d102      	bne.n	80021bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80021b6:	2301      	movs	r3, #1
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	e008      	b.n	80021ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021bc:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <xTaskGetSchedulerState+0x38>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d102      	bne.n	80021ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80021c4:	2302      	movs	r3, #2
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	e001      	b.n	80021ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80021ce:	687b      	ldr	r3, [r7, #4]
	}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	20000178 	.word	0x20000178
 80021e0:	20000194 	.word	0x20000194

080021e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d05e      	beq.n	80022b8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021fe:	4b31      	ldr	r3, [pc, #196]	@ (80022c4 <xTaskPriorityInherit+0xe0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002204:	429a      	cmp	r2, r3
 8002206:	d24e      	bcs.n	80022a6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	db06      	blt.n	800221e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002210:	4b2c      	ldr	r3, [pc, #176]	@ (80022c4 <xTaskPriorityInherit+0xe0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002216:	f1c3 0205 	rsb	r2, r3, #5
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	6959      	ldr	r1, [r3, #20]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4a26      	ldr	r2, [pc, #152]	@ (80022c8 <xTaskPriorityInherit+0xe4>)
 8002230:	4413      	add	r3, r2
 8002232:	4299      	cmp	r1, r3
 8002234:	d12f      	bne.n	8002296 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	3304      	adds	r3, #4
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fbf9 	bl	8000a32 <uxListRemove>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10a      	bne.n	800225c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224a:	2201      	movs	r2, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43da      	mvns	r2, r3
 8002252:	4b1e      	ldr	r3, [pc, #120]	@ (80022cc <xTaskPriorityInherit+0xe8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4013      	ands	r3, r2
 8002258:	4a1c      	ldr	r2, [pc, #112]	@ (80022cc <xTaskPriorityInherit+0xe8>)
 800225a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800225c:	4b19      	ldr	r3, [pc, #100]	@ (80022c4 <xTaskPriorityInherit+0xe0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	2201      	movs	r2, #1
 800226c:	409a      	lsls	r2, r3
 800226e:	4b17      	ldr	r3, [pc, #92]	@ (80022cc <xTaskPriorityInherit+0xe8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	4a15      	ldr	r2, [pc, #84]	@ (80022cc <xTaskPriorityInherit+0xe8>)
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4a10      	ldr	r2, [pc, #64]	@ (80022c8 <xTaskPriorityInherit+0xe4>)
 8002286:	441a      	add	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	3304      	adds	r3, #4
 800228c:	4619      	mov	r1, r3
 800228e:	4610      	mov	r0, r2
 8002290:	f7fe fb72 	bl	8000978 <vListInsertEnd>
 8002294:	e004      	b.n	80022a0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002296:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <xTaskPriorityInherit+0xe0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80022a0:	2301      	movs	r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	e008      	b.n	80022b8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022aa:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <xTaskPriorityInherit+0xe0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d201      	bcs.n	80022b8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80022b4:	2301      	movs	r3, #1
 80022b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80022b8:	68fb      	ldr	r3, [r7, #12]
	}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000094 	.word	0x20000094
 80022c8:	20000098 	.word	0x20000098
 80022cc:	20000174 	.word	0x20000174

080022d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d070      	beq.n	80023c8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80022e6:	4b3b      	ldr	r3, [pc, #236]	@ (80023d4 <xTaskPriorityDisinherit+0x104>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d00b      	beq.n	8002308 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80022f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f4:	f383 8811 	msr	BASEPRI, r3
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	60fb      	str	r3, [r7, #12]
}
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10b      	bne.n	8002328 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8002310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002314:	f383 8811 	msr	BASEPRI, r3
 8002318:	f3bf 8f6f 	isb	sy
 800231c:	f3bf 8f4f 	dsb	sy
 8002320:	60bb      	str	r3, [r7, #8]
}
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	e7fd      	b.n	8002324 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800232c:	1e5a      	subs	r2, r3, #1
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	429a      	cmp	r2, r3
 800233c:	d044      	beq.n	80023c8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002342:	2b00      	cmp	r3, #0
 8002344:	d140      	bne.n	80023c8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	3304      	adds	r3, #4
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fb71 	bl	8000a32 <uxListRemove>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d115      	bne.n	8002382 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800235a:	491f      	ldr	r1, [pc, #124]	@ (80023d8 <xTaskPriorityDisinherit+0x108>)
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10a      	bne.n	8002382 <xTaskPriorityDisinherit+0xb2>
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002370:	2201      	movs	r2, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	4b18      	ldr	r3, [pc, #96]	@ (80023dc <xTaskPriorityDisinherit+0x10c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4013      	ands	r3, r2
 800237e:	4a17      	ldr	r2, [pc, #92]	@ (80023dc <xTaskPriorityDisinherit+0x10c>)
 8002380:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238e:	f1c3 0205 	rsb	r2, r3, #5
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239a:	2201      	movs	r2, #1
 800239c:	409a      	lsls	r2, r3
 800239e:	4b0f      	ldr	r3, [pc, #60]	@ (80023dc <xTaskPriorityDisinherit+0x10c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <xTaskPriorityDisinherit+0x10c>)
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4a08      	ldr	r2, [pc, #32]	@ (80023d8 <xTaskPriorityDisinherit+0x108>)
 80023b6:	441a      	add	r2, r3
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	3304      	adds	r3, #4
 80023bc:	4619      	mov	r1, r3
 80023be:	4610      	mov	r0, r2
 80023c0:	f7fe fada 	bl	8000978 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80023c4:	2301      	movs	r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80023c8:	697b      	ldr	r3, [r7, #20]
	}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000094 	.word	0x20000094
 80023d8:	20000098 	.word	0x20000098
 80023dc:	20000174 	.word	0x20000174

080023e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80023ee:	2301      	movs	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d079      	beq.n	80024ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	60fb      	str	r3, [r7, #12]
}
 8002412:	bf00      	nop
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d902      	bls.n	8002428 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	e002      	b.n	800242e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	429a      	cmp	r2, r3
 8002436:	d059      	beq.n	80024ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	429a      	cmp	r2, r3
 8002440:	d154      	bne.n	80024ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8002442:	4b2c      	ldr	r3, [pc, #176]	@ (80024f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	429a      	cmp	r2, r3
 800244a:	d10b      	bne.n	8002464 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800244c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	60bb      	str	r3, [r7, #8]
}
 800245e:	bf00      	nop
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002468:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	db04      	blt.n	8002482 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f1c3 0205 	rsb	r2, r3, #5
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	6959      	ldr	r1, [r3, #20]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4a19      	ldr	r2, [pc, #100]	@ (80024f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002492:	4413      	add	r3, r2
 8002494:	4299      	cmp	r1, r3
 8002496:	d129      	bne.n	80024ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	3304      	adds	r3, #4
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fac8 	bl	8000a32 <uxListRemove>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10a      	bne.n	80024be <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ac:	2201      	movs	r2, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	4b11      	ldr	r3, [pc, #68]	@ (80024fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4013      	ands	r3, r2
 80024ba:	4a10      	ldr	r2, [pc, #64]	@ (80024fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80024bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c2:	2201      	movs	r2, #1
 80024c4:	409a      	lsls	r2, r3
 80024c6:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	4a0b      	ldr	r2, [pc, #44]	@ (80024fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4a06      	ldr	r2, [pc, #24]	@ (80024f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80024de:	441a      	add	r2, r3
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	3304      	adds	r3, #4
 80024e4:	4619      	mov	r1, r3
 80024e6:	4610      	mov	r0, r2
 80024e8:	f7fe fa46 	bl	8000978 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80024ec:	bf00      	nop
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000094 	.word	0x20000094
 80024f8:	20000098 	.word	0x20000098
 80024fc:	20000174 	.word	0x20000174

08002500 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002504:	4b07      	ldr	r3, [pc, #28]	@ (8002524 <pvTaskIncrementMutexHeldCount+0x24>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800250c:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <pvTaskIncrementMutexHeldCount+0x24>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002512:	3201      	adds	r2, #1
 8002514:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8002516:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <pvTaskIncrementMutexHeldCount+0x24>)
 8002518:	681b      	ldr	r3, [r3, #0]
	}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	20000094 	.word	0x20000094

08002528 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002532:	4b29      	ldr	r3, [pc, #164]	@ (80025d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002538:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3304      	adds	r3, #4
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe fa77 	bl	8000a32 <uxListRemove>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10b      	bne.n	8002562 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800254a:	4b24      	ldr	r3, [pc, #144]	@ (80025dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002550:	2201      	movs	r2, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43da      	mvns	r2, r3
 8002558:	4b21      	ldr	r3, [pc, #132]	@ (80025e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4013      	ands	r3, r2
 800255e:	4a20      	ldr	r2, [pc, #128]	@ (80025e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002560:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002568:	d10a      	bne.n	8002580 <prvAddCurrentTaskToDelayedList+0x58>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d007      	beq.n	8002580 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002570:	4b1a      	ldr	r3, [pc, #104]	@ (80025dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3304      	adds	r3, #4
 8002576:	4619      	mov	r1, r3
 8002578:	481a      	ldr	r0, [pc, #104]	@ (80025e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800257a:	f7fe f9fd 	bl	8000978 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800257e:	e026      	b.n	80025ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002588:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	d209      	bcs.n	80025ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002598:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b0f      	ldr	r3, [pc, #60]	@ (80025dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3304      	adds	r3, #4
 80025a2:	4619      	mov	r1, r3
 80025a4:	4610      	mov	r0, r2
 80025a6:	f7fe fa0b 	bl	80009c0 <vListInsert>
}
 80025aa:	e010      	b.n	80025ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025ac:	4b0f      	ldr	r3, [pc, #60]	@ (80025ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	3304      	adds	r3, #4
 80025b6:	4619      	mov	r1, r3
 80025b8:	4610      	mov	r0, r2
 80025ba:	f7fe fa01 	bl	80009c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80025be:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d202      	bcs.n	80025ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80025c8:	4a09      	ldr	r2, [pc, #36]	@ (80025f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	6013      	str	r3, [r2, #0]
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000170 	.word	0x20000170
 80025dc:	20000094 	.word	0x20000094
 80025e0:	20000174 	.word	0x20000174
 80025e4:	20000158 	.word	0x20000158
 80025e8:	20000128 	.word	0x20000128
 80025ec:	20000124 	.word	0x20000124
 80025f0:	2000018c 	.word	0x2000018c

080025f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80025fe:	f000 fadf 	bl	8002bc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002602:	4b11      	ldr	r3, [pc, #68]	@ (8002648 <xTimerCreateTimerTask+0x54>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800260a:	4b10      	ldr	r3, [pc, #64]	@ (800264c <xTimerCreateTimerTask+0x58>)
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	2302      	movs	r3, #2
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2300      	movs	r3, #0
 8002614:	2280      	movs	r2, #128	@ 0x80
 8002616:	490e      	ldr	r1, [pc, #56]	@ (8002650 <xTimerCreateTimerTask+0x5c>)
 8002618:	480e      	ldr	r0, [pc, #56]	@ (8002654 <xTimerCreateTimerTask+0x60>)
 800261a:	f7ff f819 	bl	8001650 <xTaskCreate>
 800261e:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10b      	bne.n	800263e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8002626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	603b      	str	r3, [r7, #0]
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	e7fd      	b.n	800263a <xTimerCreateTimerTask+0x46>
	return xReturn;
 800263e:	687b      	ldr	r3, [r7, #4]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	200001c8 	.word	0x200001c8
 800264c:	200001cc 	.word	0x200001cc
 8002650:	08003f2c 	.word	0x08003f2c
 8002654:	08002791 	.word	0x08002791

08002658 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	@ 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10b      	bne.n	8002688 <xTimerGenericCommand+0x30>
	__asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	623b      	str	r3, [r7, #32]
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002688:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <xTimerGenericCommand+0x98>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d02a      	beq.n	80026e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b05      	cmp	r3, #5
 80026a0:	dc18      	bgt.n	80026d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80026a2:	f7ff fd81 	bl	80021a8 <xTaskGetSchedulerState>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d109      	bne.n	80026c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80026ac:	4b10      	ldr	r3, [pc, #64]	@ (80026f0 <xTimerGenericCommand+0x98>)
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	f107 0114 	add.w	r1, r7, #20
 80026b4:	2300      	movs	r3, #0
 80026b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026b8:	f7fe fadc 	bl	8000c74 <xQueueGenericSend>
 80026bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80026be:	e012      	b.n	80026e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80026c0:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <xTimerGenericCommand+0x98>)
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	f107 0114 	add.w	r1, r7, #20
 80026c8:	2300      	movs	r3, #0
 80026ca:	2200      	movs	r2, #0
 80026cc:	f7fe fad2 	bl	8000c74 <xQueueGenericSend>
 80026d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80026d2:	e008      	b.n	80026e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80026d4:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <xTimerGenericCommand+0x98>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	f107 0114 	add.w	r1, r7, #20
 80026dc:	2300      	movs	r3, #0
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	f7fe fbca 	bl	8000e78 <xQueueGenericSendFromISR>
 80026e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3728      	adds	r7, #40	@ 0x28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	200001c8 	.word	0x200001c8

080026f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026fe:	4b23      	ldr	r3, [pc, #140]	@ (800278c <prvProcessExpiredTimer+0x98>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	3304      	adds	r3, #4
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe f990 	bl	8000a32 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d023      	beq.n	8002768 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	699a      	ldr	r2, [r3, #24]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	18d1      	adds	r1, r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	6978      	ldr	r0, [r7, #20]
 800272e:	f000 f8d5 	bl	80028dc <prvInsertTimerInActiveList>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002738:	2300      	movs	r3, #0
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	2300      	movs	r3, #0
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	2100      	movs	r1, #0
 8002742:	6978      	ldr	r0, [r7, #20]
 8002744:	f7ff ff88 	bl	8002658 <xTimerGenericCommand>
 8002748:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d114      	bne.n	800277a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	60fb      	str	r3, [r7, #12]
}
 8002762:	bf00      	nop
 8002764:	bf00      	nop
 8002766:	e7fd      	b.n	8002764 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	b2da      	uxtb	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	6978      	ldr	r0, [r7, #20]
 8002780:	4798      	blx	r3
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200001c0 	.word	0x200001c0

08002790 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002798:	f107 0308 	add.w	r3, r7, #8
 800279c:	4618      	mov	r0, r3
 800279e:	f000 f859 	bl	8002854 <prvGetNextExpireTime>
 80027a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4619      	mov	r1, r3
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f805 	bl	80027b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80027ae:	f000 f8d7 	bl	8002960 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80027b2:	bf00      	nop
 80027b4:	e7f0      	b.n	8002798 <prvTimerTask+0x8>
	...

080027b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80027c2:	f7ff f91f 	bl	8001a04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f866 	bl	800289c <prvSampleTimeNow>
 80027d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d130      	bne.n	800283a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10a      	bne.n	80027f4 <prvProcessTimerOrBlockTask+0x3c>
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d806      	bhi.n	80027f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80027e6:	f7ff f91b 	bl	8001a20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80027ea:	68f9      	ldr	r1, [r7, #12]
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff81 	bl	80026f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80027f2:	e024      	b.n	800283e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80027fa:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <prvProcessTimerOrBlockTask+0x90>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <prvProcessTimerOrBlockTask+0x50>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <prvProcessTimerOrBlockTask+0x52>
 8002808:	2300      	movs	r3, #0
 800280a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800280c:	4b0f      	ldr	r3, [pc, #60]	@ (800284c <prvProcessTimerOrBlockTask+0x94>)
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	4619      	mov	r1, r3
 800281a:	f7fe fee5 	bl	80015e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800281e:	f7ff f8ff 	bl	8001a20 <xTaskResumeAll>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002828:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <prvProcessTimerOrBlockTask+0x98>)
 800282a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	f3bf 8f6f 	isb	sy
}
 8002838:	e001      	b.n	800283e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800283a:	f7ff f8f1 	bl	8001a20 <xTaskResumeAll>
}
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200001c4 	.word	0x200001c4
 800284c:	200001c8 	.word	0x200001c8
 8002850:	e000ed04 	.word	0xe000ed04

08002854 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800285c:	4b0e      	ldr	r3, [pc, #56]	@ (8002898 <prvGetNextExpireTime+0x44>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <prvGetNextExpireTime+0x16>
 8002866:	2201      	movs	r2, #1
 8002868:	e000      	b.n	800286c <prvGetNextExpireTime+0x18>
 800286a:	2200      	movs	r2, #0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002878:	4b07      	ldr	r3, [pc, #28]	@ (8002898 <prvGetNextExpireTime+0x44>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e001      	b.n	8002888 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002888:	68fb      	ldr	r3, [r7, #12]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	200001c0 	.word	0x200001c0

0800289c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80028a4:	f7ff f95a 	bl	8001b5c <xTaskGetTickCount>
 80028a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80028aa:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <prvSampleTimeNow+0x3c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d205      	bcs.n	80028c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80028b4:	f000 f91e 	bl	8002af4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	e002      	b.n	80028c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80028c6:	4a04      	ldr	r2, [pc, #16]	@ (80028d8 <prvSampleTimeNow+0x3c>)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80028cc:	68fb      	ldr	r3, [r7, #12]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200001d0 	.word	0x200001d0

080028dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d812      	bhi.n	8002928 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	1ad2      	subs	r2, r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	429a      	cmp	r2, r3
 800290e:	d302      	bcc.n	8002916 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002910:	2301      	movs	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	e01b      	b.n	800294e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002916:	4b10      	ldr	r3, [pc, #64]	@ (8002958 <prvInsertTimerInActiveList+0x7c>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3304      	adds	r3, #4
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f7fe f84d 	bl	80009c0 <vListInsert>
 8002926:	e012      	b.n	800294e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d206      	bcs.n	800293e <prvInsertTimerInActiveList+0x62>
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d302      	bcc.n	800293e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002938:	2301      	movs	r3, #1
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	e007      	b.n	800294e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800293e:	4b07      	ldr	r3, [pc, #28]	@ (800295c <prvInsertTimerInActiveList+0x80>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3304      	adds	r3, #4
 8002946:	4619      	mov	r1, r3
 8002948:	4610      	mov	r0, r2
 800294a:	f7fe f839 	bl	80009c0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800294e:	697b      	ldr	r3, [r7, #20]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200001c4 	.word	0x200001c4
 800295c:	200001c0 	.word	0x200001c0

08002960 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	@ 0x30
 8002964:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002966:	e0b2      	b.n	8002ace <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f2c0 80af 	blt.w	8002ace <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d004      	beq.n	8002986 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297e:	3304      	adds	r3, #4
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe f856 	bl	8000a32 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002986:	1d3b      	adds	r3, r7, #4
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff87 	bl	800289c <prvSampleTimeNow>
 800298e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b09      	cmp	r3, #9
 8002994:	f200 8098 	bhi.w	8002ac8 <prvProcessReceivedCommands+0x168>
 8002998:	a201      	add	r2, pc, #4	@ (adr r2, 80029a0 <prvProcessReceivedCommands+0x40>)
 800299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299e:	bf00      	nop
 80029a0:	080029c9 	.word	0x080029c9
 80029a4:	080029c9 	.word	0x080029c9
 80029a8:	080029c9 	.word	0x080029c9
 80029ac:	08002a3f 	.word	0x08002a3f
 80029b0:	08002a53 	.word	0x08002a53
 80029b4:	08002a9f 	.word	0x08002a9f
 80029b8:	080029c9 	.word	0x080029c9
 80029bc:	080029c9 	.word	0x080029c9
 80029c0:	08002a3f 	.word	0x08002a3f
 80029c4:	08002a53 	.word	0x08002a53
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	18d1      	adds	r1, r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a3a      	ldr	r2, [r7, #32]
 80029e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029e8:	f7ff ff78 	bl	80028dc <prvInsertTimerInActiveList>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d06c      	beq.n	8002acc <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d061      	beq.n	8002acc <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	441a      	add	r2, r3
 8002a10:	2300      	movs	r3, #0
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2300      	movs	r3, #0
 8002a16:	2100      	movs	r1, #0
 8002a18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a1a:	f7ff fe1d 	bl	8002658 <xTimerGenericCommand>
 8002a1e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d152      	bne.n	8002acc <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8002a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a2a:	f383 8811 	msr	BASEPRI, r3
 8002a2e:	f3bf 8f6f 	isb	sy
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	61bb      	str	r3, [r7, #24]
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	e7fd      	b.n	8002a3a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8002a50:	e03d      	b.n	8002ace <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10b      	bne.n	8002a8a <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8002a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	617b      	str	r3, [r7, #20]
}
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
 8002a88:	e7fd      	b.n	8002a86 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	18d1      	adds	r1, r2, r3
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	6a3a      	ldr	r2, [r7, #32]
 8002a96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a98:	f7ff ff20 	bl	80028dc <prvInsertTimerInActiveList>
					break;
 8002a9c:	e017      	b.n	8002ace <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d103      	bne.n	8002ab4 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8002aac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002aae:	f000 fbcb 	bl	8003248 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002ab2:	e00c      	b.n	8002ace <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8002ac6:	e002      	b.n	8002ace <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8002ac8:	bf00      	nop
 8002aca:	e000      	b.n	8002ace <prvProcessReceivedCommands+0x16e>
					break;
 8002acc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002ace:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <prvProcessReceivedCommands+0x190>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f107 0108 	add.w	r1, r7, #8
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe fa6b 	bl	8000fb4 <xQueueReceive>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f47f af41 	bne.w	8002968 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002ae6:	bf00      	nop
 8002ae8:	bf00      	nop
 8002aea:	3728      	adds	r7, #40	@ 0x28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	200001c8 	.word	0x200001c8

08002af4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002afa:	e049      	b.n	8002b90 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002afc:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb8 <prvSwitchTimerLists+0xc4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b06:	4b2c      	ldr	r3, [pc, #176]	@ (8002bb8 <prvSwitchTimerLists+0xc4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3304      	adds	r3, #4
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fd ff8c 	bl	8000a32 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d02f      	beq.n	8002b90 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d90e      	bls.n	8002b60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb8 <prvSwitchTimerLists+0xc4>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3304      	adds	r3, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	4610      	mov	r0, r2
 8002b5a:	f7fd ff31 	bl	80009c0 <vListInsert>
 8002b5e:	e017      	b.n	8002b90 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002b60:	2300      	movs	r3, #0
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2300      	movs	r3, #0
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	2100      	movs	r1, #0
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f7ff fd74 	bl	8002658 <xTimerGenericCommand>
 8002b70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10b      	bne.n	8002b90 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8002b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	603b      	str	r3, [r7, #0]
}
 8002b8a:	bf00      	nop
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002b90:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <prvSwitchTimerLists+0xc4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1b0      	bne.n	8002afc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002b9a:	4b07      	ldr	r3, [pc, #28]	@ (8002bb8 <prvSwitchTimerLists+0xc4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <prvSwitchTimerLists+0xc8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a04      	ldr	r2, [pc, #16]	@ (8002bb8 <prvSwitchTimerLists+0xc4>)
 8002ba6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002ba8:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <prvSwitchTimerLists+0xc8>)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	6013      	str	r3, [r2, #0]
}
 8002bae:	bf00      	nop
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	200001c0 	.word	0x200001c0
 8002bbc:	200001c4 	.word	0x200001c4

08002bc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002bc4:	f000 f958 	bl	8002e78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002c00 <prvCheckForValidListAndQueue+0x40>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d113      	bne.n	8002bf8 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8002bd0:	480c      	ldr	r0, [pc, #48]	@ (8002c04 <prvCheckForValidListAndQueue+0x44>)
 8002bd2:	f7fd fea4 	bl	800091e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002bd6:	480c      	ldr	r0, [pc, #48]	@ (8002c08 <prvCheckForValidListAndQueue+0x48>)
 8002bd8:	f7fd fea1 	bl	800091e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <prvCheckForValidListAndQueue+0x4c>)
 8002bde:	4a09      	ldr	r2, [pc, #36]	@ (8002c04 <prvCheckForValidListAndQueue+0x44>)
 8002be0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002be2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <prvCheckForValidListAndQueue+0x50>)
 8002be4:	4a08      	ldr	r2, [pc, #32]	@ (8002c08 <prvCheckForValidListAndQueue+0x48>)
 8002be6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002be8:	2200      	movs	r2, #0
 8002bea:	210c      	movs	r1, #12
 8002bec:	2005      	movs	r0, #5
 8002bee:	f7fd ffb5 	bl	8000b5c <xQueueGenericCreate>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4a02      	ldr	r2, [pc, #8]	@ (8002c00 <prvCheckForValidListAndQueue+0x40>)
 8002bf6:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002bf8:	f000 f970 	bl	8002edc <vPortExitCritical>
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	200001c8 	.word	0x200001c8
 8002c04:	20000198 	.word	0x20000198
 8002c08:	200001ac 	.word	0x200001ac
 8002c0c:	200001c0 	.word	0x200001c0
 8002c10:	200001c4 	.word	0x200001c4

08002c14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	3b04      	subs	r3, #4
 8002c24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3b04      	subs	r3, #4
 8002c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f023 0201 	bic.w	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3b04      	subs	r3, #4
 8002c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002c44:	4a0c      	ldr	r2, [pc, #48]	@ (8002c78 <pxPortInitialiseStack+0x64>)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3b14      	subs	r3, #20
 8002c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3b04      	subs	r3, #4
 8002c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f06f 0202 	mvn.w	r2, #2
 8002c62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3b20      	subs	r3, #32
 8002c68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	08002c7d 	.word	0x08002c7d

08002c7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002c86:	4b13      	ldr	r3, [pc, #76]	@ (8002cd4 <prvTaskExitError+0x58>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c8e:	d00b      	beq.n	8002ca8 <prvTaskExitError+0x2c>
	__asm volatile
 8002c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c94:	f383 8811 	msr	BASEPRI, r3
 8002c98:	f3bf 8f6f 	isb	sy
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	60fb      	str	r3, [r7, #12]
}
 8002ca2:	bf00      	nop
 8002ca4:	bf00      	nop
 8002ca6:	e7fd      	b.n	8002ca4 <prvTaskExitError+0x28>
	__asm volatile
 8002ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cac:	f383 8811 	msr	BASEPRI, r3
 8002cb0:	f3bf 8f6f 	isb	sy
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	60bb      	str	r3, [r7, #8]
}
 8002cba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002cbc:	bf00      	nop
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0fc      	beq.n	8002cbe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	2000000c 	.word	0x2000000c
	...

08002ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002ce0:	4b07      	ldr	r3, [pc, #28]	@ (8002d00 <pxCurrentTCBConst2>)
 8002ce2:	6819      	ldr	r1, [r3, #0]
 8002ce4:	6808      	ldr	r0, [r1, #0]
 8002ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cea:	f380 8809 	msr	PSP, r0
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f04f 0000 	mov.w	r0, #0
 8002cf6:	f380 8811 	msr	BASEPRI, r0
 8002cfa:	4770      	bx	lr
 8002cfc:	f3af 8000 	nop.w

08002d00 <pxCurrentTCBConst2>:
 8002d00:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop

08002d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002d08:	4808      	ldr	r0, [pc, #32]	@ (8002d2c <prvPortStartFirstTask+0x24>)
 8002d0a:	6800      	ldr	r0, [r0, #0]
 8002d0c:	6800      	ldr	r0, [r0, #0]
 8002d0e:	f380 8808 	msr	MSP, r0
 8002d12:	f04f 0000 	mov.w	r0, #0
 8002d16:	f380 8814 	msr	CONTROL, r0
 8002d1a:	b662      	cpsie	i
 8002d1c:	b661      	cpsie	f
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	df00      	svc	0
 8002d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002d2a:	bf00      	nop
 8002d2c:	e000ed08 	.word	0xe000ed08

08002d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d36:	4b47      	ldr	r3, [pc, #284]	@ (8002e54 <xPortStartScheduler+0x124>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a47      	ldr	r2, [pc, #284]	@ (8002e58 <xPortStartScheduler+0x128>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d10b      	bne.n	8002d58 <xPortStartScheduler+0x28>
	__asm volatile
 8002d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d44:	f383 8811 	msr	BASEPRI, r3
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	60fb      	str	r3, [r7, #12]
}
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d58:	4b3e      	ldr	r3, [pc, #248]	@ (8002e54 <xPortStartScheduler+0x124>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a3f      	ldr	r2, [pc, #252]	@ (8002e5c <xPortStartScheduler+0x12c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10b      	bne.n	8002d7a <xPortStartScheduler+0x4a>
	__asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	613b      	str	r3, [r7, #16]
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	e7fd      	b.n	8002d76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d7a:	4b39      	ldr	r3, [pc, #228]	@ (8002e60 <xPortStartScheduler+0x130>)
 8002d7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	22ff      	movs	r2, #255	@ 0xff
 8002d8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b31      	ldr	r3, [pc, #196]	@ (8002e64 <xPortStartScheduler+0x134>)
 8002da0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002da2:	4b31      	ldr	r3, [pc, #196]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002da4:	2207      	movs	r2, #7
 8002da6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002da8:	e009      	b.n	8002dbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8002daa:	4b2f      	ldr	r3, [pc, #188]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	4a2d      	ldr	r2, [pc, #180]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002db2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc6:	2b80      	cmp	r3, #128	@ 0x80
 8002dc8:	d0ef      	beq.n	8002daa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002dca:	4b27      	ldr	r3, [pc, #156]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d00b      	beq.n	8002dee <xPortStartScheduler+0xbe>
	__asm volatile
 8002dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	60bb      	str	r3, [r7, #8]
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	e7fd      	b.n	8002dea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002dee:	4b1e      	ldr	r3, [pc, #120]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002df6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002df8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e00:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <xPortStartScheduler+0x138>)
 8002e02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002e0c:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <xPortStartScheduler+0x13c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a16      	ldr	r2, [pc, #88]	@ (8002e6c <xPortStartScheduler+0x13c>)
 8002e12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002e18:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <xPortStartScheduler+0x13c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a13      	ldr	r2, [pc, #76]	@ (8002e6c <xPortStartScheduler+0x13c>)
 8002e1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002e22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002e24:	f000 f8da 	bl	8002fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002e28:	4b11      	ldr	r3, [pc, #68]	@ (8002e70 <xPortStartScheduler+0x140>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002e2e:	f000 f8f1 	bl	8003014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e32:	4b10      	ldr	r3, [pc, #64]	@ (8002e74 <xPortStartScheduler+0x144>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a0f      	ldr	r2, [pc, #60]	@ (8002e74 <xPortStartScheduler+0x144>)
 8002e38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002e3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002e3e:	f7ff ff63 	bl	8002d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002e42:	f7fe ff55 	bl	8001cf0 <vTaskSwitchContext>
	prvTaskExitError();
 8002e46:	f7ff ff19 	bl	8002c7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	e000ed00 	.word	0xe000ed00
 8002e58:	410fc271 	.word	0x410fc271
 8002e5c:	410fc270 	.word	0x410fc270
 8002e60:	e000e400 	.word	0xe000e400
 8002e64:	200001d4 	.word	0x200001d4
 8002e68:	200001d8 	.word	0x200001d8
 8002e6c:	e000ed20 	.word	0xe000ed20
 8002e70:	2000000c 	.word	0x2000000c
 8002e74:	e000ef34 	.word	0xe000ef34

08002e78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	607b      	str	r3, [r7, #4]
}
 8002e90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002e92:	4b10      	ldr	r3, [pc, #64]	@ (8002ed4 <vPortEnterCritical+0x5c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3301      	adds	r3, #1
 8002e98:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed4 <vPortEnterCritical+0x5c>)
 8002e9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed4 <vPortEnterCritical+0x5c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d110      	bne.n	8002ec6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <vPortEnterCritical+0x60>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <vPortEnterCritical+0x4e>
	__asm volatile
 8002eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	603b      	str	r3, [r7, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	e7fd      	b.n	8002ec2 <vPortEnterCritical+0x4a>
	}
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	2000000c 	.word	0x2000000c
 8002ed8:	e000ed04 	.word	0xe000ed04

08002edc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002ee2:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <vPortExitCritical+0x50>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10b      	bne.n	8002f02 <vPortExitCritical+0x26>
	__asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	607b      	str	r3, [r7, #4]
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	e7fd      	b.n	8002efe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002f02:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <vPortExitCritical+0x50>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	4a08      	ldr	r2, [pc, #32]	@ (8002f2c <vPortExitCritical+0x50>)
 8002f0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <vPortExitCritical+0x50>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <vPortExitCritical+0x44>
 8002f14:	2300      	movs	r3, #0
 8002f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f383 8811 	msr	BASEPRI, r3
}
 8002f1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	2000000c 	.word	0x2000000c

08002f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f30:	f3ef 8009 	mrs	r0, PSP
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	4b15      	ldr	r3, [pc, #84]	@ (8002f90 <pxCurrentTCBConst>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	f01e 0f10 	tst.w	lr, #16
 8002f40:	bf08      	it	eq
 8002f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4a:	6010      	str	r0, [r2, #0]
 8002f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002f54:	f380 8811 	msr	BASEPRI, r0
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f7fe fec6 	bl	8001cf0 <vTaskSwitchContext>
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	f380 8811 	msr	BASEPRI, r0
 8002f6c:	bc09      	pop	{r0, r3}
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	6808      	ldr	r0, [r1, #0]
 8002f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f76:	f01e 0f10 	tst.w	lr, #16
 8002f7a:	bf08      	it	eq
 8002f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f80:	f380 8809 	msr	PSP, r0
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	f3af 8000 	nop.w

08002f90 <pxCurrentTCBConst>:
 8002f90:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop

08002f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	607b      	str	r3, [r7, #4]
}
 8002fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002fb2:	f7fe fde3 	bl	8001b7c <xTaskIncrementTick>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <xPortSysTickHandler+0x40>)
 8002fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f383 8811 	msr	BASEPRI, r3
}
 8002fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	e000ed04 	.word	0xe000ed04

08002fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002fe0:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <vPortSetupTimerInterrupt+0x28>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002fe6:	4b08      	ldr	r3, [pc, #32]	@ (8003008 <vPortSetupTimerInterrupt+0x2c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002fec:	4b07      	ldr	r3, [pc, #28]	@ (800300c <vPortSetupTimerInterrupt+0x30>)
 8002fee:	4a08      	ldr	r2, [pc, #32]	@ (8003010 <vPortSetupTimerInterrupt+0x34>)
 8002ff0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ff2:	4b04      	ldr	r3, [pc, #16]	@ (8003004 <vPortSetupTimerInterrupt+0x28>)
 8002ff4:	2207      	movs	r2, #7
 8002ff6:	601a      	str	r2, [r3, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	e000e010 	.word	0xe000e010
 8003008:	e000e018 	.word	0xe000e018
 800300c:	e000e014 	.word	0xe000e014
 8003010:	0001387f 	.word	0x0001387f

08003014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003014:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003024 <vPortEnableVFP+0x10>
 8003018:	6801      	ldr	r1, [r0, #0]
 800301a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800301e:	6001      	str	r1, [r0, #0]
 8003020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003022:	bf00      	nop
 8003024:	e000ed88 	.word	0xe000ed88

08003028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800302e:	f3ef 8305 	mrs	r3, IPSR
 8003032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b0f      	cmp	r3, #15
 8003038:	d915      	bls.n	8003066 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800303a:	4a18      	ldr	r2, [pc, #96]	@ (800309c <vPortValidateInterruptPriority+0x74>)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003044:	4b16      	ldr	r3, [pc, #88]	@ (80030a0 <vPortValidateInterruptPriority+0x78>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	7afa      	ldrb	r2, [r7, #11]
 800304a:	429a      	cmp	r2, r3
 800304c:	d20b      	bcs.n	8003066 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	607b      	str	r3, [r7, #4]
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	e7fd      	b.n	8003062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003066:	4b0f      	ldr	r3, [pc, #60]	@ (80030a4 <vPortValidateInterruptPriority+0x7c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800306e:	4b0e      	ldr	r3, [pc, #56]	@ (80030a8 <vPortValidateInterruptPriority+0x80>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d90b      	bls.n	800308e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	603b      	str	r3, [r7, #0]
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	e7fd      	b.n	800308a <vPortValidateInterruptPriority+0x62>
	}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000e3f0 	.word	0xe000e3f0
 80030a0:	200001d4 	.word	0x200001d4
 80030a4:	e000ed0c 	.word	0xe000ed0c
 80030a8:	200001d8 	.word	0x200001d8

080030ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80030b8:	f7fe fca4 	bl	8001a04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80030bc:	4b5c      	ldr	r3, [pc, #368]	@ (8003230 <pvPortMalloc+0x184>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80030c4:	f000 f924 	bl	8003310 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80030c8:	4b5a      	ldr	r3, [pc, #360]	@ (8003234 <pvPortMalloc+0x188>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f040 8095 	bne.w	8003200 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01e      	beq.n	800311a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80030dc:	2208      	movs	r2, #8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d015      	beq.n	800311a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f023 0307 	bic.w	r3, r3, #7
 80030f4:	3308      	adds	r3, #8
 80030f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00b      	beq.n	800311a <pvPortMalloc+0x6e>
	__asm volatile
 8003102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	617b      	str	r3, [r7, #20]
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	e7fd      	b.n	8003116 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d06f      	beq.n	8003200 <pvPortMalloc+0x154>
 8003120:	4b45      	ldr	r3, [pc, #276]	@ (8003238 <pvPortMalloc+0x18c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	d86a      	bhi.n	8003200 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800312a:	4b44      	ldr	r3, [pc, #272]	@ (800323c <pvPortMalloc+0x190>)
 800312c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800312e:	4b43      	ldr	r3, [pc, #268]	@ (800323c <pvPortMalloc+0x190>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003134:	e004      	b.n	8003140 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003138:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d903      	bls.n	8003152 <pvPortMalloc+0xa6>
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f1      	bne.n	8003136 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003152:	4b37      	ldr	r3, [pc, #220]	@ (8003230 <pvPortMalloc+0x184>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003158:	429a      	cmp	r2, r3
 800315a:	d051      	beq.n	8003200 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2208      	movs	r2, #8
 8003162:	4413      	add	r3, r2
 8003164:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	1ad2      	subs	r2, r2, r3
 8003176:	2308      	movs	r3, #8
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	429a      	cmp	r2, r3
 800317c:	d920      	bls.n	80031c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800317e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4413      	add	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00b      	beq.n	80031a8 <pvPortMalloc+0xfc>
	__asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	613b      	str	r3, [r7, #16]
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	1ad2      	subs	r2, r2, r3
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80031ba:	69b8      	ldr	r0, [r7, #24]
 80031bc:	f000 f90a 	bl	80033d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003238 <pvPortMalloc+0x18c>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003238 <pvPortMalloc+0x18c>)
 80031cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003238 <pvPortMalloc+0x18c>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <pvPortMalloc+0x194>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d203      	bcs.n	80031e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031da:	4b17      	ldr	r3, [pc, #92]	@ (8003238 <pvPortMalloc+0x18c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a18      	ldr	r2, [pc, #96]	@ (8003240 <pvPortMalloc+0x194>)
 80031e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	4b13      	ldr	r3, [pc, #76]	@ (8003234 <pvPortMalloc+0x188>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80031f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80031f6:	4b13      	ldr	r3, [pc, #76]	@ (8003244 <pvPortMalloc+0x198>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	4a11      	ldr	r2, [pc, #68]	@ (8003244 <pvPortMalloc+0x198>)
 80031fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003200:	f7fe fc0e 	bl	8001a20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <pvPortMalloc+0x17a>
	__asm volatile
 800320e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	60fb      	str	r3, [r7, #12]
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	e7fd      	b.n	8003222 <pvPortMalloc+0x176>
	return pvReturn;
 8003226:	69fb      	ldr	r3, [r7, #28]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3728      	adds	r7, #40	@ 0x28
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	200029e4 	.word	0x200029e4
 8003234:	200029f8 	.word	0x200029f8
 8003238:	200029e8 	.word	0x200029e8
 800323c:	200029dc 	.word	0x200029dc
 8003240:	200029ec 	.word	0x200029ec
 8003244:	200029f0 	.word	0x200029f0

08003248 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d04f      	beq.n	80032fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800325a:	2308      	movs	r3, #8
 800325c:	425b      	negs	r3, r3
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4413      	add	r3, r2
 8003262:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	4b25      	ldr	r3, [pc, #148]	@ (8003304 <vPortFree+0xbc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10b      	bne.n	800328e <vPortFree+0x46>
	__asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	60fb      	str	r3, [r7, #12]
}
 8003288:	bf00      	nop
 800328a:	bf00      	nop
 800328c:	e7fd      	b.n	800328a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <vPortFree+0x66>
	__asm volatile
 8003296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	60bb      	str	r3, [r7, #8]
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	e7fd      	b.n	80032aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	4b14      	ldr	r3, [pc, #80]	@ (8003304 <vPortFree+0xbc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d01e      	beq.n	80032fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d11a      	bne.n	80032fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003304 <vPortFree+0xbc>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	401a      	ands	r2, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80032d4:	f7fe fb96 	bl	8001a04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003308 <vPortFree+0xc0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4413      	add	r3, r2
 80032e2:	4a09      	ldr	r2, [pc, #36]	@ (8003308 <vPortFree+0xc0>)
 80032e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032e6:	6938      	ldr	r0, [r7, #16]
 80032e8:	f000 f874 	bl	80033d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80032ec:	4b07      	ldr	r3, [pc, #28]	@ (800330c <vPortFree+0xc4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	4a06      	ldr	r2, [pc, #24]	@ (800330c <vPortFree+0xc4>)
 80032f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80032f6:	f7fe fb93 	bl	8001a20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80032fa:	bf00      	nop
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200029f8 	.word	0x200029f8
 8003308:	200029e8 	.word	0x200029e8
 800330c:	200029f4 	.word	0x200029f4

08003310 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003316:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800331a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800331c:	4b27      	ldr	r3, [pc, #156]	@ (80033bc <prvHeapInit+0xac>)
 800331e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00c      	beq.n	8003344 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	3307      	adds	r3, #7
 800332e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0307 	bic.w	r3, r3, #7
 8003336:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	4a1f      	ldr	r2, [pc, #124]	@ (80033bc <prvHeapInit+0xac>)
 8003340:	4413      	add	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003348:	4a1d      	ldr	r2, [pc, #116]	@ (80033c0 <prvHeapInit+0xb0>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800334e:	4b1c      	ldr	r3, [pc, #112]	@ (80033c0 <prvHeapInit+0xb0>)
 8003350:	2200      	movs	r2, #0
 8003352:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	4413      	add	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800335c:	2208      	movs	r2, #8
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0307 	bic.w	r3, r3, #7
 800336a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4a15      	ldr	r2, [pc, #84]	@ (80033c4 <prvHeapInit+0xb4>)
 8003370:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003372:	4b14      	ldr	r3, [pc, #80]	@ (80033c4 <prvHeapInit+0xb4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2200      	movs	r2, #0
 8003378:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800337a:	4b12      	ldr	r3, [pc, #72]	@ (80033c4 <prvHeapInit+0xb4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	1ad2      	subs	r2, r2, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003390:	4b0c      	ldr	r3, [pc, #48]	@ (80033c4 <prvHeapInit+0xb4>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4a0a      	ldr	r2, [pc, #40]	@ (80033c8 <prvHeapInit+0xb8>)
 800339e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4a09      	ldr	r2, [pc, #36]	@ (80033cc <prvHeapInit+0xbc>)
 80033a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80033a8:	4b09      	ldr	r3, [pc, #36]	@ (80033d0 <prvHeapInit+0xc0>)
 80033aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80033ae:	601a      	str	r2, [r3, #0]
}
 80033b0:	bf00      	nop
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	200001dc 	.word	0x200001dc
 80033c0:	200029dc 	.word	0x200029dc
 80033c4:	200029e4 	.word	0x200029e4
 80033c8:	200029ec 	.word	0x200029ec
 80033cc:	200029e8 	.word	0x200029e8
 80033d0:	200029f8 	.word	0x200029f8

080033d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033dc:	4b28      	ldr	r3, [pc, #160]	@ (8003480 <prvInsertBlockIntoFreeList+0xac>)
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	e002      	b.n	80033e8 <prvInsertBlockIntoFreeList+0x14>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d8f7      	bhi.n	80033e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	4413      	add	r3, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	429a      	cmp	r2, r3
 8003402:	d108      	bne.n	8003416 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	441a      	add	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	441a      	add	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d118      	bne.n	800345c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b15      	ldr	r3, [pc, #84]	@ (8003484 <prvInsertBlockIntoFreeList+0xb0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d00d      	beq.n	8003452 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	441a      	add	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e008      	b.n	8003464 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003452:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <prvInsertBlockIntoFreeList+0xb0>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e003      	b.n	8003464 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	429a      	cmp	r2, r3
 800346a:	d002      	beq.n	8003472 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	200029dc 	.word	0x200029dc
 8003484:	200029e4 	.word	0x200029e4

08003488 <std>:
 8003488:	2300      	movs	r3, #0
 800348a:	b510      	push	{r4, lr}
 800348c:	4604      	mov	r4, r0
 800348e:	e9c0 3300 	strd	r3, r3, [r0]
 8003492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003496:	6083      	str	r3, [r0, #8]
 8003498:	8181      	strh	r1, [r0, #12]
 800349a:	6643      	str	r3, [r0, #100]	@ 0x64
 800349c:	81c2      	strh	r2, [r0, #14]
 800349e:	6183      	str	r3, [r0, #24]
 80034a0:	4619      	mov	r1, r3
 80034a2:	2208      	movs	r2, #8
 80034a4:	305c      	adds	r0, #92	@ 0x5c
 80034a6:	f000 f90f 	bl	80036c8 <memset>
 80034aa:	4b0d      	ldr	r3, [pc, #52]	@ (80034e0 <std+0x58>)
 80034ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80034ae:	4b0d      	ldr	r3, [pc, #52]	@ (80034e4 <std+0x5c>)
 80034b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80034b2:	4b0d      	ldr	r3, [pc, #52]	@ (80034e8 <std+0x60>)
 80034b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80034b6:	4b0d      	ldr	r3, [pc, #52]	@ (80034ec <std+0x64>)
 80034b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80034ba:	4b0d      	ldr	r3, [pc, #52]	@ (80034f0 <std+0x68>)
 80034bc:	6224      	str	r4, [r4, #32]
 80034be:	429c      	cmp	r4, r3
 80034c0:	d006      	beq.n	80034d0 <std+0x48>
 80034c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80034c6:	4294      	cmp	r4, r2
 80034c8:	d002      	beq.n	80034d0 <std+0x48>
 80034ca:	33d0      	adds	r3, #208	@ 0xd0
 80034cc:	429c      	cmp	r4, r3
 80034ce:	d105      	bne.n	80034dc <std+0x54>
 80034d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80034d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034d8:	f000 b928 	b.w	800372c <__retarget_lock_init_recursive>
 80034dc:	bd10      	pop	{r4, pc}
 80034de:	bf00      	nop
 80034e0:	08003b55 	.word	0x08003b55
 80034e4:	08003b77 	.word	0x08003b77
 80034e8:	08003baf 	.word	0x08003baf
 80034ec:	08003bd3 	.word	0x08003bd3
 80034f0:	200029fc 	.word	0x200029fc

080034f4 <stdio_exit_handler>:
 80034f4:	4a02      	ldr	r2, [pc, #8]	@ (8003500 <stdio_exit_handler+0xc>)
 80034f6:	4903      	ldr	r1, [pc, #12]	@ (8003504 <stdio_exit_handler+0x10>)
 80034f8:	4803      	ldr	r0, [pc, #12]	@ (8003508 <stdio_exit_handler+0x14>)
 80034fa:	f000 b869 	b.w	80035d0 <_fwalk_sglue>
 80034fe:	bf00      	nop
 8003500:	20000010 	.word	0x20000010
 8003504:	08003aed 	.word	0x08003aed
 8003508:	20000020 	.word	0x20000020

0800350c <cleanup_stdio>:
 800350c:	6841      	ldr	r1, [r0, #4]
 800350e:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <cleanup_stdio+0x34>)
 8003510:	4299      	cmp	r1, r3
 8003512:	b510      	push	{r4, lr}
 8003514:	4604      	mov	r4, r0
 8003516:	d001      	beq.n	800351c <cleanup_stdio+0x10>
 8003518:	f000 fae8 	bl	8003aec <_fflush_r>
 800351c:	68a1      	ldr	r1, [r4, #8]
 800351e:	4b09      	ldr	r3, [pc, #36]	@ (8003544 <cleanup_stdio+0x38>)
 8003520:	4299      	cmp	r1, r3
 8003522:	d002      	beq.n	800352a <cleanup_stdio+0x1e>
 8003524:	4620      	mov	r0, r4
 8003526:	f000 fae1 	bl	8003aec <_fflush_r>
 800352a:	68e1      	ldr	r1, [r4, #12]
 800352c:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <cleanup_stdio+0x3c>)
 800352e:	4299      	cmp	r1, r3
 8003530:	d004      	beq.n	800353c <cleanup_stdio+0x30>
 8003532:	4620      	mov	r0, r4
 8003534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003538:	f000 bad8 	b.w	8003aec <_fflush_r>
 800353c:	bd10      	pop	{r4, pc}
 800353e:	bf00      	nop
 8003540:	200029fc 	.word	0x200029fc
 8003544:	20002a64 	.word	0x20002a64
 8003548:	20002acc 	.word	0x20002acc

0800354c <global_stdio_init.part.0>:
 800354c:	b510      	push	{r4, lr}
 800354e:	4b0b      	ldr	r3, [pc, #44]	@ (800357c <global_stdio_init.part.0+0x30>)
 8003550:	4c0b      	ldr	r4, [pc, #44]	@ (8003580 <global_stdio_init.part.0+0x34>)
 8003552:	4a0c      	ldr	r2, [pc, #48]	@ (8003584 <global_stdio_init.part.0+0x38>)
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	4620      	mov	r0, r4
 8003558:	2200      	movs	r2, #0
 800355a:	2104      	movs	r1, #4
 800355c:	f7ff ff94 	bl	8003488 <std>
 8003560:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003564:	2201      	movs	r2, #1
 8003566:	2109      	movs	r1, #9
 8003568:	f7ff ff8e 	bl	8003488 <std>
 800356c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003570:	2202      	movs	r2, #2
 8003572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003576:	2112      	movs	r1, #18
 8003578:	f7ff bf86 	b.w	8003488 <std>
 800357c:	20002b34 	.word	0x20002b34
 8003580:	200029fc 	.word	0x200029fc
 8003584:	080034f5 	.word	0x080034f5

08003588 <__sfp_lock_acquire>:
 8003588:	4801      	ldr	r0, [pc, #4]	@ (8003590 <__sfp_lock_acquire+0x8>)
 800358a:	f000 b8d0 	b.w	800372e <__retarget_lock_acquire_recursive>
 800358e:	bf00      	nop
 8003590:	20002b39 	.word	0x20002b39

08003594 <__sfp_lock_release>:
 8003594:	4801      	ldr	r0, [pc, #4]	@ (800359c <__sfp_lock_release+0x8>)
 8003596:	f000 b8cb 	b.w	8003730 <__retarget_lock_release_recursive>
 800359a:	bf00      	nop
 800359c:	20002b39 	.word	0x20002b39

080035a0 <__sinit>:
 80035a0:	b510      	push	{r4, lr}
 80035a2:	4604      	mov	r4, r0
 80035a4:	f7ff fff0 	bl	8003588 <__sfp_lock_acquire>
 80035a8:	6a23      	ldr	r3, [r4, #32]
 80035aa:	b11b      	cbz	r3, 80035b4 <__sinit+0x14>
 80035ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035b0:	f7ff bff0 	b.w	8003594 <__sfp_lock_release>
 80035b4:	4b04      	ldr	r3, [pc, #16]	@ (80035c8 <__sinit+0x28>)
 80035b6:	6223      	str	r3, [r4, #32]
 80035b8:	4b04      	ldr	r3, [pc, #16]	@ (80035cc <__sinit+0x2c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f5      	bne.n	80035ac <__sinit+0xc>
 80035c0:	f7ff ffc4 	bl	800354c <global_stdio_init.part.0>
 80035c4:	e7f2      	b.n	80035ac <__sinit+0xc>
 80035c6:	bf00      	nop
 80035c8:	0800350d 	.word	0x0800350d
 80035cc:	20002b34 	.word	0x20002b34

080035d0 <_fwalk_sglue>:
 80035d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035d4:	4607      	mov	r7, r0
 80035d6:	4688      	mov	r8, r1
 80035d8:	4614      	mov	r4, r2
 80035da:	2600      	movs	r6, #0
 80035dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035e0:	f1b9 0901 	subs.w	r9, r9, #1
 80035e4:	d505      	bpl.n	80035f2 <_fwalk_sglue+0x22>
 80035e6:	6824      	ldr	r4, [r4, #0]
 80035e8:	2c00      	cmp	r4, #0
 80035ea:	d1f7      	bne.n	80035dc <_fwalk_sglue+0xc>
 80035ec:	4630      	mov	r0, r6
 80035ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035f2:	89ab      	ldrh	r3, [r5, #12]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d907      	bls.n	8003608 <_fwalk_sglue+0x38>
 80035f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035fc:	3301      	adds	r3, #1
 80035fe:	d003      	beq.n	8003608 <_fwalk_sglue+0x38>
 8003600:	4629      	mov	r1, r5
 8003602:	4638      	mov	r0, r7
 8003604:	47c0      	blx	r8
 8003606:	4306      	orrs	r6, r0
 8003608:	3568      	adds	r5, #104	@ 0x68
 800360a:	e7e9      	b.n	80035e0 <_fwalk_sglue+0x10>

0800360c <_puts_r>:
 800360c:	6a03      	ldr	r3, [r0, #32]
 800360e:	b570      	push	{r4, r5, r6, lr}
 8003610:	6884      	ldr	r4, [r0, #8]
 8003612:	4605      	mov	r5, r0
 8003614:	460e      	mov	r6, r1
 8003616:	b90b      	cbnz	r3, 800361c <_puts_r+0x10>
 8003618:	f7ff ffc2 	bl	80035a0 <__sinit>
 800361c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800361e:	07db      	lsls	r3, r3, #31
 8003620:	d405      	bmi.n	800362e <_puts_r+0x22>
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	0598      	lsls	r0, r3, #22
 8003626:	d402      	bmi.n	800362e <_puts_r+0x22>
 8003628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800362a:	f000 f880 	bl	800372e <__retarget_lock_acquire_recursive>
 800362e:	89a3      	ldrh	r3, [r4, #12]
 8003630:	0719      	lsls	r1, r3, #28
 8003632:	d502      	bpl.n	800363a <_puts_r+0x2e>
 8003634:	6923      	ldr	r3, [r4, #16]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d135      	bne.n	80036a6 <_puts_r+0x9a>
 800363a:	4621      	mov	r1, r4
 800363c:	4628      	mov	r0, r5
 800363e:	f000 fb0b 	bl	8003c58 <__swsetup_r>
 8003642:	b380      	cbz	r0, 80036a6 <_puts_r+0x9a>
 8003644:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003648:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800364a:	07da      	lsls	r2, r3, #31
 800364c:	d405      	bmi.n	800365a <_puts_r+0x4e>
 800364e:	89a3      	ldrh	r3, [r4, #12]
 8003650:	059b      	lsls	r3, r3, #22
 8003652:	d402      	bmi.n	800365a <_puts_r+0x4e>
 8003654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003656:	f000 f86b 	bl	8003730 <__retarget_lock_release_recursive>
 800365a:	4628      	mov	r0, r5
 800365c:	bd70      	pop	{r4, r5, r6, pc}
 800365e:	2b00      	cmp	r3, #0
 8003660:	da04      	bge.n	800366c <_puts_r+0x60>
 8003662:	69a2      	ldr	r2, [r4, #24]
 8003664:	429a      	cmp	r2, r3
 8003666:	dc17      	bgt.n	8003698 <_puts_r+0x8c>
 8003668:	290a      	cmp	r1, #10
 800366a:	d015      	beq.n	8003698 <_puts_r+0x8c>
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	6022      	str	r2, [r4, #0]
 8003672:	7019      	strb	r1, [r3, #0]
 8003674:	68a3      	ldr	r3, [r4, #8]
 8003676:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800367a:	3b01      	subs	r3, #1
 800367c:	60a3      	str	r3, [r4, #8]
 800367e:	2900      	cmp	r1, #0
 8003680:	d1ed      	bne.n	800365e <_puts_r+0x52>
 8003682:	2b00      	cmp	r3, #0
 8003684:	da11      	bge.n	80036aa <_puts_r+0x9e>
 8003686:	4622      	mov	r2, r4
 8003688:	210a      	movs	r1, #10
 800368a:	4628      	mov	r0, r5
 800368c:	f000 faa5 	bl	8003bda <__swbuf_r>
 8003690:	3001      	adds	r0, #1
 8003692:	d0d7      	beq.n	8003644 <_puts_r+0x38>
 8003694:	250a      	movs	r5, #10
 8003696:	e7d7      	b.n	8003648 <_puts_r+0x3c>
 8003698:	4622      	mov	r2, r4
 800369a:	4628      	mov	r0, r5
 800369c:	f000 fa9d 	bl	8003bda <__swbuf_r>
 80036a0:	3001      	adds	r0, #1
 80036a2:	d1e7      	bne.n	8003674 <_puts_r+0x68>
 80036a4:	e7ce      	b.n	8003644 <_puts_r+0x38>
 80036a6:	3e01      	subs	r6, #1
 80036a8:	e7e4      	b.n	8003674 <_puts_r+0x68>
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	6022      	str	r2, [r4, #0]
 80036b0:	220a      	movs	r2, #10
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e7ee      	b.n	8003694 <_puts_r+0x88>
	...

080036b8 <puts>:
 80036b8:	4b02      	ldr	r3, [pc, #8]	@ (80036c4 <puts+0xc>)
 80036ba:	4601      	mov	r1, r0
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	f7ff bfa5 	b.w	800360c <_puts_r>
 80036c2:	bf00      	nop
 80036c4:	2000001c 	.word	0x2000001c

080036c8 <memset>:
 80036c8:	4402      	add	r2, r0
 80036ca:	4603      	mov	r3, r0
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d100      	bne.n	80036d2 <memset+0xa>
 80036d0:	4770      	bx	lr
 80036d2:	f803 1b01 	strb.w	r1, [r3], #1
 80036d6:	e7f9      	b.n	80036cc <memset+0x4>

080036d8 <__errno>:
 80036d8:	4b01      	ldr	r3, [pc, #4]	@ (80036e0 <__errno+0x8>)
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	2000001c 	.word	0x2000001c

080036e4 <__libc_init_array>:
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	4d0d      	ldr	r5, [pc, #52]	@ (800371c <__libc_init_array+0x38>)
 80036e8:	4c0d      	ldr	r4, [pc, #52]	@ (8003720 <__libc_init_array+0x3c>)
 80036ea:	1b64      	subs	r4, r4, r5
 80036ec:	10a4      	asrs	r4, r4, #2
 80036ee:	2600      	movs	r6, #0
 80036f0:	42a6      	cmp	r6, r4
 80036f2:	d109      	bne.n	8003708 <__libc_init_array+0x24>
 80036f4:	4d0b      	ldr	r5, [pc, #44]	@ (8003724 <__libc_init_array+0x40>)
 80036f6:	4c0c      	ldr	r4, [pc, #48]	@ (8003728 <__libc_init_array+0x44>)
 80036f8:	f000 fbde 	bl	8003eb8 <_init>
 80036fc:	1b64      	subs	r4, r4, r5
 80036fe:	10a4      	asrs	r4, r4, #2
 8003700:	2600      	movs	r6, #0
 8003702:	42a6      	cmp	r6, r4
 8003704:	d105      	bne.n	8003712 <__libc_init_array+0x2e>
 8003706:	bd70      	pop	{r4, r5, r6, pc}
 8003708:	f855 3b04 	ldr.w	r3, [r5], #4
 800370c:	4798      	blx	r3
 800370e:	3601      	adds	r6, #1
 8003710:	e7ee      	b.n	80036f0 <__libc_init_array+0xc>
 8003712:	f855 3b04 	ldr.w	r3, [r5], #4
 8003716:	4798      	blx	r3
 8003718:	3601      	adds	r6, #1
 800371a:	e7f2      	b.n	8003702 <__libc_init_array+0x1e>
 800371c:	08003f34 	.word	0x08003f34
 8003720:	08003f34 	.word	0x08003f34
 8003724:	08003f34 	.word	0x08003f34
 8003728:	08003f38 	.word	0x08003f38

0800372c <__retarget_lock_init_recursive>:
 800372c:	4770      	bx	lr

0800372e <__retarget_lock_acquire_recursive>:
 800372e:	4770      	bx	lr

08003730 <__retarget_lock_release_recursive>:
 8003730:	4770      	bx	lr
	...

08003734 <_reclaim_reent>:
 8003734:	4b2d      	ldr	r3, [pc, #180]	@ (80037ec <_reclaim_reent+0xb8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4283      	cmp	r3, r0
 800373a:	b570      	push	{r4, r5, r6, lr}
 800373c:	4604      	mov	r4, r0
 800373e:	d053      	beq.n	80037e8 <_reclaim_reent+0xb4>
 8003740:	69c3      	ldr	r3, [r0, #28]
 8003742:	b31b      	cbz	r3, 800378c <_reclaim_reent+0x58>
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	b163      	cbz	r3, 8003762 <_reclaim_reent+0x2e>
 8003748:	2500      	movs	r5, #0
 800374a:	69e3      	ldr	r3, [r4, #28]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	5959      	ldr	r1, [r3, r5]
 8003750:	b9b1      	cbnz	r1, 8003780 <_reclaim_reent+0x4c>
 8003752:	3504      	adds	r5, #4
 8003754:	2d80      	cmp	r5, #128	@ 0x80
 8003756:	d1f8      	bne.n	800374a <_reclaim_reent+0x16>
 8003758:	69e3      	ldr	r3, [r4, #28]
 800375a:	4620      	mov	r0, r4
 800375c:	68d9      	ldr	r1, [r3, #12]
 800375e:	f000 f855 	bl	800380c <_free_r>
 8003762:	69e3      	ldr	r3, [r4, #28]
 8003764:	6819      	ldr	r1, [r3, #0]
 8003766:	b111      	cbz	r1, 800376e <_reclaim_reent+0x3a>
 8003768:	4620      	mov	r0, r4
 800376a:	f000 f84f 	bl	800380c <_free_r>
 800376e:	69e3      	ldr	r3, [r4, #28]
 8003770:	689d      	ldr	r5, [r3, #8]
 8003772:	b15d      	cbz	r5, 800378c <_reclaim_reent+0x58>
 8003774:	4629      	mov	r1, r5
 8003776:	4620      	mov	r0, r4
 8003778:	682d      	ldr	r5, [r5, #0]
 800377a:	f000 f847 	bl	800380c <_free_r>
 800377e:	e7f8      	b.n	8003772 <_reclaim_reent+0x3e>
 8003780:	680e      	ldr	r6, [r1, #0]
 8003782:	4620      	mov	r0, r4
 8003784:	f000 f842 	bl	800380c <_free_r>
 8003788:	4631      	mov	r1, r6
 800378a:	e7e1      	b.n	8003750 <_reclaim_reent+0x1c>
 800378c:	6961      	ldr	r1, [r4, #20]
 800378e:	b111      	cbz	r1, 8003796 <_reclaim_reent+0x62>
 8003790:	4620      	mov	r0, r4
 8003792:	f000 f83b 	bl	800380c <_free_r>
 8003796:	69e1      	ldr	r1, [r4, #28]
 8003798:	b111      	cbz	r1, 80037a0 <_reclaim_reent+0x6c>
 800379a:	4620      	mov	r0, r4
 800379c:	f000 f836 	bl	800380c <_free_r>
 80037a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80037a2:	b111      	cbz	r1, 80037aa <_reclaim_reent+0x76>
 80037a4:	4620      	mov	r0, r4
 80037a6:	f000 f831 	bl	800380c <_free_r>
 80037aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037ac:	b111      	cbz	r1, 80037b4 <_reclaim_reent+0x80>
 80037ae:	4620      	mov	r0, r4
 80037b0:	f000 f82c 	bl	800380c <_free_r>
 80037b4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80037b6:	b111      	cbz	r1, 80037be <_reclaim_reent+0x8a>
 80037b8:	4620      	mov	r0, r4
 80037ba:	f000 f827 	bl	800380c <_free_r>
 80037be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80037c0:	b111      	cbz	r1, 80037c8 <_reclaim_reent+0x94>
 80037c2:	4620      	mov	r0, r4
 80037c4:	f000 f822 	bl	800380c <_free_r>
 80037c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80037ca:	b111      	cbz	r1, 80037d2 <_reclaim_reent+0x9e>
 80037cc:	4620      	mov	r0, r4
 80037ce:	f000 f81d 	bl	800380c <_free_r>
 80037d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80037d4:	b111      	cbz	r1, 80037dc <_reclaim_reent+0xa8>
 80037d6:	4620      	mov	r0, r4
 80037d8:	f000 f818 	bl	800380c <_free_r>
 80037dc:	6a23      	ldr	r3, [r4, #32]
 80037de:	b11b      	cbz	r3, 80037e8 <_reclaim_reent+0xb4>
 80037e0:	4620      	mov	r0, r4
 80037e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80037e6:	4718      	bx	r3
 80037e8:	bd70      	pop	{r4, r5, r6, pc}
 80037ea:	bf00      	nop
 80037ec:	2000001c 	.word	0x2000001c

080037f0 <memcpy>:
 80037f0:	440a      	add	r2, r1
 80037f2:	4291      	cmp	r1, r2
 80037f4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80037f8:	d100      	bne.n	80037fc <memcpy+0xc>
 80037fa:	4770      	bx	lr
 80037fc:	b510      	push	{r4, lr}
 80037fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003806:	4291      	cmp	r1, r2
 8003808:	d1f9      	bne.n	80037fe <memcpy+0xe>
 800380a:	bd10      	pop	{r4, pc}

0800380c <_free_r>:
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	4605      	mov	r5, r0
 8003810:	2900      	cmp	r1, #0
 8003812:	d041      	beq.n	8003898 <_free_r+0x8c>
 8003814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003818:	1f0c      	subs	r4, r1, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	bfb8      	it	lt
 800381e:	18e4      	addlt	r4, r4, r3
 8003820:	f000 f98c 	bl	8003b3c <__malloc_lock>
 8003824:	4a1d      	ldr	r2, [pc, #116]	@ (800389c <_free_r+0x90>)
 8003826:	6813      	ldr	r3, [r2, #0]
 8003828:	b933      	cbnz	r3, 8003838 <_free_r+0x2c>
 800382a:	6063      	str	r3, [r4, #4]
 800382c:	6014      	str	r4, [r2, #0]
 800382e:	4628      	mov	r0, r5
 8003830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003834:	f000 b988 	b.w	8003b48 <__malloc_unlock>
 8003838:	42a3      	cmp	r3, r4
 800383a:	d908      	bls.n	800384e <_free_r+0x42>
 800383c:	6820      	ldr	r0, [r4, #0]
 800383e:	1821      	adds	r1, r4, r0
 8003840:	428b      	cmp	r3, r1
 8003842:	bf01      	itttt	eq
 8003844:	6819      	ldreq	r1, [r3, #0]
 8003846:	685b      	ldreq	r3, [r3, #4]
 8003848:	1809      	addeq	r1, r1, r0
 800384a:	6021      	streq	r1, [r4, #0]
 800384c:	e7ed      	b.n	800382a <_free_r+0x1e>
 800384e:	461a      	mov	r2, r3
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	b10b      	cbz	r3, 8003858 <_free_r+0x4c>
 8003854:	42a3      	cmp	r3, r4
 8003856:	d9fa      	bls.n	800384e <_free_r+0x42>
 8003858:	6811      	ldr	r1, [r2, #0]
 800385a:	1850      	adds	r0, r2, r1
 800385c:	42a0      	cmp	r0, r4
 800385e:	d10b      	bne.n	8003878 <_free_r+0x6c>
 8003860:	6820      	ldr	r0, [r4, #0]
 8003862:	4401      	add	r1, r0
 8003864:	1850      	adds	r0, r2, r1
 8003866:	4283      	cmp	r3, r0
 8003868:	6011      	str	r1, [r2, #0]
 800386a:	d1e0      	bne.n	800382e <_free_r+0x22>
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	6053      	str	r3, [r2, #4]
 8003872:	4408      	add	r0, r1
 8003874:	6010      	str	r0, [r2, #0]
 8003876:	e7da      	b.n	800382e <_free_r+0x22>
 8003878:	d902      	bls.n	8003880 <_free_r+0x74>
 800387a:	230c      	movs	r3, #12
 800387c:	602b      	str	r3, [r5, #0]
 800387e:	e7d6      	b.n	800382e <_free_r+0x22>
 8003880:	6820      	ldr	r0, [r4, #0]
 8003882:	1821      	adds	r1, r4, r0
 8003884:	428b      	cmp	r3, r1
 8003886:	bf04      	itt	eq
 8003888:	6819      	ldreq	r1, [r3, #0]
 800388a:	685b      	ldreq	r3, [r3, #4]
 800388c:	6063      	str	r3, [r4, #4]
 800388e:	bf04      	itt	eq
 8003890:	1809      	addeq	r1, r1, r0
 8003892:	6021      	streq	r1, [r4, #0]
 8003894:	6054      	str	r4, [r2, #4]
 8003896:	e7ca      	b.n	800382e <_free_r+0x22>
 8003898:	bd38      	pop	{r3, r4, r5, pc}
 800389a:	bf00      	nop
 800389c:	20002b44 	.word	0x20002b44

080038a0 <sbrk_aligned>:
 80038a0:	b570      	push	{r4, r5, r6, lr}
 80038a2:	4e0f      	ldr	r6, [pc, #60]	@ (80038e0 <sbrk_aligned+0x40>)
 80038a4:	460c      	mov	r4, r1
 80038a6:	6831      	ldr	r1, [r6, #0]
 80038a8:	4605      	mov	r5, r0
 80038aa:	b911      	cbnz	r1, 80038b2 <sbrk_aligned+0x12>
 80038ac:	f000 fac0 	bl	8003e30 <_sbrk_r>
 80038b0:	6030      	str	r0, [r6, #0]
 80038b2:	4621      	mov	r1, r4
 80038b4:	4628      	mov	r0, r5
 80038b6:	f000 fabb 	bl	8003e30 <_sbrk_r>
 80038ba:	1c43      	adds	r3, r0, #1
 80038bc:	d103      	bne.n	80038c6 <sbrk_aligned+0x26>
 80038be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80038c2:	4620      	mov	r0, r4
 80038c4:	bd70      	pop	{r4, r5, r6, pc}
 80038c6:	1cc4      	adds	r4, r0, #3
 80038c8:	f024 0403 	bic.w	r4, r4, #3
 80038cc:	42a0      	cmp	r0, r4
 80038ce:	d0f8      	beq.n	80038c2 <sbrk_aligned+0x22>
 80038d0:	1a21      	subs	r1, r4, r0
 80038d2:	4628      	mov	r0, r5
 80038d4:	f000 faac 	bl	8003e30 <_sbrk_r>
 80038d8:	3001      	adds	r0, #1
 80038da:	d1f2      	bne.n	80038c2 <sbrk_aligned+0x22>
 80038dc:	e7ef      	b.n	80038be <sbrk_aligned+0x1e>
 80038de:	bf00      	nop
 80038e0:	20002b40 	.word	0x20002b40

080038e4 <_malloc_r>:
 80038e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038e8:	1ccd      	adds	r5, r1, #3
 80038ea:	f025 0503 	bic.w	r5, r5, #3
 80038ee:	3508      	adds	r5, #8
 80038f0:	2d0c      	cmp	r5, #12
 80038f2:	bf38      	it	cc
 80038f4:	250c      	movcc	r5, #12
 80038f6:	2d00      	cmp	r5, #0
 80038f8:	4606      	mov	r6, r0
 80038fa:	db01      	blt.n	8003900 <_malloc_r+0x1c>
 80038fc:	42a9      	cmp	r1, r5
 80038fe:	d904      	bls.n	800390a <_malloc_r+0x26>
 8003900:	230c      	movs	r3, #12
 8003902:	6033      	str	r3, [r6, #0]
 8003904:	2000      	movs	r0, #0
 8003906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800390a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80039e0 <_malloc_r+0xfc>
 800390e:	f000 f915 	bl	8003b3c <__malloc_lock>
 8003912:	f8d8 3000 	ldr.w	r3, [r8]
 8003916:	461c      	mov	r4, r3
 8003918:	bb44      	cbnz	r4, 800396c <_malloc_r+0x88>
 800391a:	4629      	mov	r1, r5
 800391c:	4630      	mov	r0, r6
 800391e:	f7ff ffbf 	bl	80038a0 <sbrk_aligned>
 8003922:	1c43      	adds	r3, r0, #1
 8003924:	4604      	mov	r4, r0
 8003926:	d158      	bne.n	80039da <_malloc_r+0xf6>
 8003928:	f8d8 4000 	ldr.w	r4, [r8]
 800392c:	4627      	mov	r7, r4
 800392e:	2f00      	cmp	r7, #0
 8003930:	d143      	bne.n	80039ba <_malloc_r+0xd6>
 8003932:	2c00      	cmp	r4, #0
 8003934:	d04b      	beq.n	80039ce <_malloc_r+0xea>
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	4639      	mov	r1, r7
 800393a:	4630      	mov	r0, r6
 800393c:	eb04 0903 	add.w	r9, r4, r3
 8003940:	f000 fa76 	bl	8003e30 <_sbrk_r>
 8003944:	4581      	cmp	r9, r0
 8003946:	d142      	bne.n	80039ce <_malloc_r+0xea>
 8003948:	6821      	ldr	r1, [r4, #0]
 800394a:	1a6d      	subs	r5, r5, r1
 800394c:	4629      	mov	r1, r5
 800394e:	4630      	mov	r0, r6
 8003950:	f7ff ffa6 	bl	80038a0 <sbrk_aligned>
 8003954:	3001      	adds	r0, #1
 8003956:	d03a      	beq.n	80039ce <_malloc_r+0xea>
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	442b      	add	r3, r5
 800395c:	6023      	str	r3, [r4, #0]
 800395e:	f8d8 3000 	ldr.w	r3, [r8]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	bb62      	cbnz	r2, 80039c0 <_malloc_r+0xdc>
 8003966:	f8c8 7000 	str.w	r7, [r8]
 800396a:	e00f      	b.n	800398c <_malloc_r+0xa8>
 800396c:	6822      	ldr	r2, [r4, #0]
 800396e:	1b52      	subs	r2, r2, r5
 8003970:	d420      	bmi.n	80039b4 <_malloc_r+0xd0>
 8003972:	2a0b      	cmp	r2, #11
 8003974:	d917      	bls.n	80039a6 <_malloc_r+0xc2>
 8003976:	1961      	adds	r1, r4, r5
 8003978:	42a3      	cmp	r3, r4
 800397a:	6025      	str	r5, [r4, #0]
 800397c:	bf18      	it	ne
 800397e:	6059      	strne	r1, [r3, #4]
 8003980:	6863      	ldr	r3, [r4, #4]
 8003982:	bf08      	it	eq
 8003984:	f8c8 1000 	streq.w	r1, [r8]
 8003988:	5162      	str	r2, [r4, r5]
 800398a:	604b      	str	r3, [r1, #4]
 800398c:	4630      	mov	r0, r6
 800398e:	f000 f8db 	bl	8003b48 <__malloc_unlock>
 8003992:	f104 000b 	add.w	r0, r4, #11
 8003996:	1d23      	adds	r3, r4, #4
 8003998:	f020 0007 	bic.w	r0, r0, #7
 800399c:	1ac2      	subs	r2, r0, r3
 800399e:	bf1c      	itt	ne
 80039a0:	1a1b      	subne	r3, r3, r0
 80039a2:	50a3      	strne	r3, [r4, r2]
 80039a4:	e7af      	b.n	8003906 <_malloc_r+0x22>
 80039a6:	6862      	ldr	r2, [r4, #4]
 80039a8:	42a3      	cmp	r3, r4
 80039aa:	bf0c      	ite	eq
 80039ac:	f8c8 2000 	streq.w	r2, [r8]
 80039b0:	605a      	strne	r2, [r3, #4]
 80039b2:	e7eb      	b.n	800398c <_malloc_r+0xa8>
 80039b4:	4623      	mov	r3, r4
 80039b6:	6864      	ldr	r4, [r4, #4]
 80039b8:	e7ae      	b.n	8003918 <_malloc_r+0x34>
 80039ba:	463c      	mov	r4, r7
 80039bc:	687f      	ldr	r7, [r7, #4]
 80039be:	e7b6      	b.n	800392e <_malloc_r+0x4a>
 80039c0:	461a      	mov	r2, r3
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	42a3      	cmp	r3, r4
 80039c6:	d1fb      	bne.n	80039c0 <_malloc_r+0xdc>
 80039c8:	2300      	movs	r3, #0
 80039ca:	6053      	str	r3, [r2, #4]
 80039cc:	e7de      	b.n	800398c <_malloc_r+0xa8>
 80039ce:	230c      	movs	r3, #12
 80039d0:	6033      	str	r3, [r6, #0]
 80039d2:	4630      	mov	r0, r6
 80039d4:	f000 f8b8 	bl	8003b48 <__malloc_unlock>
 80039d8:	e794      	b.n	8003904 <_malloc_r+0x20>
 80039da:	6005      	str	r5, [r0, #0]
 80039dc:	e7d6      	b.n	800398c <_malloc_r+0xa8>
 80039de:	bf00      	nop
 80039e0:	20002b44 	.word	0x20002b44

080039e4 <__sflush_r>:
 80039e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ec:	0716      	lsls	r6, r2, #28
 80039ee:	4605      	mov	r5, r0
 80039f0:	460c      	mov	r4, r1
 80039f2:	d454      	bmi.n	8003a9e <__sflush_r+0xba>
 80039f4:	684b      	ldr	r3, [r1, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	dc02      	bgt.n	8003a00 <__sflush_r+0x1c>
 80039fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	dd48      	ble.n	8003a92 <__sflush_r+0xae>
 8003a00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a02:	2e00      	cmp	r6, #0
 8003a04:	d045      	beq.n	8003a92 <__sflush_r+0xae>
 8003a06:	2300      	movs	r3, #0
 8003a08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003a0c:	682f      	ldr	r7, [r5, #0]
 8003a0e:	6a21      	ldr	r1, [r4, #32]
 8003a10:	602b      	str	r3, [r5, #0]
 8003a12:	d030      	beq.n	8003a76 <__sflush_r+0x92>
 8003a14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a16:	89a3      	ldrh	r3, [r4, #12]
 8003a18:	0759      	lsls	r1, r3, #29
 8003a1a:	d505      	bpl.n	8003a28 <__sflush_r+0x44>
 8003a1c:	6863      	ldr	r3, [r4, #4]
 8003a1e:	1ad2      	subs	r2, r2, r3
 8003a20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a22:	b10b      	cbz	r3, 8003a28 <__sflush_r+0x44>
 8003a24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a26:	1ad2      	subs	r2, r2, r3
 8003a28:	2300      	movs	r3, #0
 8003a2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a2c:	6a21      	ldr	r1, [r4, #32]
 8003a2e:	4628      	mov	r0, r5
 8003a30:	47b0      	blx	r6
 8003a32:	1c43      	adds	r3, r0, #1
 8003a34:	89a3      	ldrh	r3, [r4, #12]
 8003a36:	d106      	bne.n	8003a46 <__sflush_r+0x62>
 8003a38:	6829      	ldr	r1, [r5, #0]
 8003a3a:	291d      	cmp	r1, #29
 8003a3c:	d82b      	bhi.n	8003a96 <__sflush_r+0xb2>
 8003a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ae8 <__sflush_r+0x104>)
 8003a40:	40ca      	lsrs	r2, r1
 8003a42:	07d6      	lsls	r6, r2, #31
 8003a44:	d527      	bpl.n	8003a96 <__sflush_r+0xb2>
 8003a46:	2200      	movs	r2, #0
 8003a48:	6062      	str	r2, [r4, #4]
 8003a4a:	04d9      	lsls	r1, r3, #19
 8003a4c:	6922      	ldr	r2, [r4, #16]
 8003a4e:	6022      	str	r2, [r4, #0]
 8003a50:	d504      	bpl.n	8003a5c <__sflush_r+0x78>
 8003a52:	1c42      	adds	r2, r0, #1
 8003a54:	d101      	bne.n	8003a5a <__sflush_r+0x76>
 8003a56:	682b      	ldr	r3, [r5, #0]
 8003a58:	b903      	cbnz	r3, 8003a5c <__sflush_r+0x78>
 8003a5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a5e:	602f      	str	r7, [r5, #0]
 8003a60:	b1b9      	cbz	r1, 8003a92 <__sflush_r+0xae>
 8003a62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a66:	4299      	cmp	r1, r3
 8003a68:	d002      	beq.n	8003a70 <__sflush_r+0x8c>
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f7ff fece 	bl	800380c <_free_r>
 8003a70:	2300      	movs	r3, #0
 8003a72:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a74:	e00d      	b.n	8003a92 <__sflush_r+0xae>
 8003a76:	2301      	movs	r3, #1
 8003a78:	4628      	mov	r0, r5
 8003a7a:	47b0      	blx	r6
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	1c50      	adds	r0, r2, #1
 8003a80:	d1c9      	bne.n	8003a16 <__sflush_r+0x32>
 8003a82:	682b      	ldr	r3, [r5, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0c6      	beq.n	8003a16 <__sflush_r+0x32>
 8003a88:	2b1d      	cmp	r3, #29
 8003a8a:	d001      	beq.n	8003a90 <__sflush_r+0xac>
 8003a8c:	2b16      	cmp	r3, #22
 8003a8e:	d11e      	bne.n	8003ace <__sflush_r+0xea>
 8003a90:	602f      	str	r7, [r5, #0]
 8003a92:	2000      	movs	r0, #0
 8003a94:	e022      	b.n	8003adc <__sflush_r+0xf8>
 8003a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a9a:	b21b      	sxth	r3, r3
 8003a9c:	e01b      	b.n	8003ad6 <__sflush_r+0xf2>
 8003a9e:	690f      	ldr	r7, [r1, #16]
 8003aa0:	2f00      	cmp	r7, #0
 8003aa2:	d0f6      	beq.n	8003a92 <__sflush_r+0xae>
 8003aa4:	0793      	lsls	r3, r2, #30
 8003aa6:	680e      	ldr	r6, [r1, #0]
 8003aa8:	bf08      	it	eq
 8003aaa:	694b      	ldreq	r3, [r1, #20]
 8003aac:	600f      	str	r7, [r1, #0]
 8003aae:	bf18      	it	ne
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	eba6 0807 	sub.w	r8, r6, r7
 8003ab6:	608b      	str	r3, [r1, #8]
 8003ab8:	f1b8 0f00 	cmp.w	r8, #0
 8003abc:	dde9      	ble.n	8003a92 <__sflush_r+0xae>
 8003abe:	6a21      	ldr	r1, [r4, #32]
 8003ac0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003ac2:	4643      	mov	r3, r8
 8003ac4:	463a      	mov	r2, r7
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	47b0      	blx	r6
 8003aca:	2800      	cmp	r0, #0
 8003acc:	dc08      	bgt.n	8003ae0 <__sflush_r+0xfc>
 8003ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ad6:	81a3      	strh	r3, [r4, #12]
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ae0:	4407      	add	r7, r0
 8003ae2:	eba8 0800 	sub.w	r8, r8, r0
 8003ae6:	e7e7      	b.n	8003ab8 <__sflush_r+0xd4>
 8003ae8:	20400001 	.word	0x20400001

08003aec <_fflush_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	690b      	ldr	r3, [r1, #16]
 8003af0:	4605      	mov	r5, r0
 8003af2:	460c      	mov	r4, r1
 8003af4:	b913      	cbnz	r3, 8003afc <_fflush_r+0x10>
 8003af6:	2500      	movs	r5, #0
 8003af8:	4628      	mov	r0, r5
 8003afa:	bd38      	pop	{r3, r4, r5, pc}
 8003afc:	b118      	cbz	r0, 8003b06 <_fflush_r+0x1a>
 8003afe:	6a03      	ldr	r3, [r0, #32]
 8003b00:	b90b      	cbnz	r3, 8003b06 <_fflush_r+0x1a>
 8003b02:	f7ff fd4d 	bl	80035a0 <__sinit>
 8003b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f3      	beq.n	8003af6 <_fflush_r+0xa>
 8003b0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b10:	07d0      	lsls	r0, r2, #31
 8003b12:	d404      	bmi.n	8003b1e <_fflush_r+0x32>
 8003b14:	0599      	lsls	r1, r3, #22
 8003b16:	d402      	bmi.n	8003b1e <_fflush_r+0x32>
 8003b18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b1a:	f7ff fe08 	bl	800372e <__retarget_lock_acquire_recursive>
 8003b1e:	4628      	mov	r0, r5
 8003b20:	4621      	mov	r1, r4
 8003b22:	f7ff ff5f 	bl	80039e4 <__sflush_r>
 8003b26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b28:	07da      	lsls	r2, r3, #31
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	d4e4      	bmi.n	8003af8 <_fflush_r+0xc>
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	059b      	lsls	r3, r3, #22
 8003b32:	d4e1      	bmi.n	8003af8 <_fflush_r+0xc>
 8003b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b36:	f7ff fdfb 	bl	8003730 <__retarget_lock_release_recursive>
 8003b3a:	e7dd      	b.n	8003af8 <_fflush_r+0xc>

08003b3c <__malloc_lock>:
 8003b3c:	4801      	ldr	r0, [pc, #4]	@ (8003b44 <__malloc_lock+0x8>)
 8003b3e:	f7ff bdf6 	b.w	800372e <__retarget_lock_acquire_recursive>
 8003b42:	bf00      	nop
 8003b44:	20002b38 	.word	0x20002b38

08003b48 <__malloc_unlock>:
 8003b48:	4801      	ldr	r0, [pc, #4]	@ (8003b50 <__malloc_unlock+0x8>)
 8003b4a:	f7ff bdf1 	b.w	8003730 <__retarget_lock_release_recursive>
 8003b4e:	bf00      	nop
 8003b50:	20002b38 	.word	0x20002b38

08003b54 <__sread>:
 8003b54:	b510      	push	{r4, lr}
 8003b56:	460c      	mov	r4, r1
 8003b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b5c:	f000 f956 	bl	8003e0c <_read_r>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	bfab      	itete	ge
 8003b64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b66:	89a3      	ldrhlt	r3, [r4, #12]
 8003b68:	181b      	addge	r3, r3, r0
 8003b6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003b6e:	bfac      	ite	ge
 8003b70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003b72:	81a3      	strhlt	r3, [r4, #12]
 8003b74:	bd10      	pop	{r4, pc}

08003b76 <__swrite>:
 8003b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b7a:	461f      	mov	r7, r3
 8003b7c:	898b      	ldrh	r3, [r1, #12]
 8003b7e:	05db      	lsls	r3, r3, #23
 8003b80:	4605      	mov	r5, r0
 8003b82:	460c      	mov	r4, r1
 8003b84:	4616      	mov	r6, r2
 8003b86:	d505      	bpl.n	8003b94 <__swrite+0x1e>
 8003b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f000 f92a 	bl	8003de8 <_lseek_r>
 8003b94:	89a3      	ldrh	r3, [r4, #12]
 8003b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b9e:	81a3      	strh	r3, [r4, #12]
 8003ba0:	4632      	mov	r2, r6
 8003ba2:	463b      	mov	r3, r7
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003baa:	f000 b951 	b.w	8003e50 <_write_r>

08003bae <__sseek>:
 8003bae:	b510      	push	{r4, lr}
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb6:	f000 f917 	bl	8003de8 <_lseek_r>
 8003bba:	1c43      	adds	r3, r0, #1
 8003bbc:	89a3      	ldrh	r3, [r4, #12]
 8003bbe:	bf15      	itete	ne
 8003bc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003bc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003bc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003bca:	81a3      	strheq	r3, [r4, #12]
 8003bcc:	bf18      	it	ne
 8003bce:	81a3      	strhne	r3, [r4, #12]
 8003bd0:	bd10      	pop	{r4, pc}

08003bd2 <__sclose>:
 8003bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bd6:	f000 b94d 	b.w	8003e74 <_close_r>

08003bda <__swbuf_r>:
 8003bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bdc:	460e      	mov	r6, r1
 8003bde:	4614      	mov	r4, r2
 8003be0:	4605      	mov	r5, r0
 8003be2:	b118      	cbz	r0, 8003bec <__swbuf_r+0x12>
 8003be4:	6a03      	ldr	r3, [r0, #32]
 8003be6:	b90b      	cbnz	r3, 8003bec <__swbuf_r+0x12>
 8003be8:	f7ff fcda 	bl	80035a0 <__sinit>
 8003bec:	69a3      	ldr	r3, [r4, #24]
 8003bee:	60a3      	str	r3, [r4, #8]
 8003bf0:	89a3      	ldrh	r3, [r4, #12]
 8003bf2:	071a      	lsls	r2, r3, #28
 8003bf4:	d501      	bpl.n	8003bfa <__swbuf_r+0x20>
 8003bf6:	6923      	ldr	r3, [r4, #16]
 8003bf8:	b943      	cbnz	r3, 8003c0c <__swbuf_r+0x32>
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f000 f82b 	bl	8003c58 <__swsetup_r>
 8003c02:	b118      	cbz	r0, 8003c0c <__swbuf_r+0x32>
 8003c04:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003c08:	4638      	mov	r0, r7
 8003c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	6922      	ldr	r2, [r4, #16]
 8003c10:	1a98      	subs	r0, r3, r2
 8003c12:	6963      	ldr	r3, [r4, #20]
 8003c14:	b2f6      	uxtb	r6, r6
 8003c16:	4283      	cmp	r3, r0
 8003c18:	4637      	mov	r7, r6
 8003c1a:	dc05      	bgt.n	8003c28 <__swbuf_r+0x4e>
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f7ff ff64 	bl	8003aec <_fflush_r>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d1ed      	bne.n	8003c04 <__swbuf_r+0x2a>
 8003c28:	68a3      	ldr	r3, [r4, #8]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	60a3      	str	r3, [r4, #8]
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	6022      	str	r2, [r4, #0]
 8003c34:	701e      	strb	r6, [r3, #0]
 8003c36:	6962      	ldr	r2, [r4, #20]
 8003c38:	1c43      	adds	r3, r0, #1
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d004      	beq.n	8003c48 <__swbuf_r+0x6e>
 8003c3e:	89a3      	ldrh	r3, [r4, #12]
 8003c40:	07db      	lsls	r3, r3, #31
 8003c42:	d5e1      	bpl.n	8003c08 <__swbuf_r+0x2e>
 8003c44:	2e0a      	cmp	r6, #10
 8003c46:	d1df      	bne.n	8003c08 <__swbuf_r+0x2e>
 8003c48:	4621      	mov	r1, r4
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	f7ff ff4e 	bl	8003aec <_fflush_r>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d0d9      	beq.n	8003c08 <__swbuf_r+0x2e>
 8003c54:	e7d6      	b.n	8003c04 <__swbuf_r+0x2a>
	...

08003c58 <__swsetup_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4b29      	ldr	r3, [pc, #164]	@ (8003d00 <__swsetup_r+0xa8>)
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	460c      	mov	r4, r1
 8003c62:	b118      	cbz	r0, 8003c6c <__swsetup_r+0x14>
 8003c64:	6a03      	ldr	r3, [r0, #32]
 8003c66:	b90b      	cbnz	r3, 8003c6c <__swsetup_r+0x14>
 8003c68:	f7ff fc9a 	bl	80035a0 <__sinit>
 8003c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c70:	0719      	lsls	r1, r3, #28
 8003c72:	d422      	bmi.n	8003cba <__swsetup_r+0x62>
 8003c74:	06da      	lsls	r2, r3, #27
 8003c76:	d407      	bmi.n	8003c88 <__swsetup_r+0x30>
 8003c78:	2209      	movs	r2, #9
 8003c7a:	602a      	str	r2, [r5, #0]
 8003c7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c80:	81a3      	strh	r3, [r4, #12]
 8003c82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c86:	e033      	b.n	8003cf0 <__swsetup_r+0x98>
 8003c88:	0758      	lsls	r0, r3, #29
 8003c8a:	d512      	bpl.n	8003cb2 <__swsetup_r+0x5a>
 8003c8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c8e:	b141      	cbz	r1, 8003ca2 <__swsetup_r+0x4a>
 8003c90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c94:	4299      	cmp	r1, r3
 8003c96:	d002      	beq.n	8003c9e <__swsetup_r+0x46>
 8003c98:	4628      	mov	r0, r5
 8003c9a:	f7ff fdb7 	bl	800380c <_free_r>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ca8:	81a3      	strh	r3, [r4, #12]
 8003caa:	2300      	movs	r3, #0
 8003cac:	6063      	str	r3, [r4, #4]
 8003cae:	6923      	ldr	r3, [r4, #16]
 8003cb0:	6023      	str	r3, [r4, #0]
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	f043 0308 	orr.w	r3, r3, #8
 8003cb8:	81a3      	strh	r3, [r4, #12]
 8003cba:	6923      	ldr	r3, [r4, #16]
 8003cbc:	b94b      	cbnz	r3, 8003cd2 <__swsetup_r+0x7a>
 8003cbe:	89a3      	ldrh	r3, [r4, #12]
 8003cc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cc8:	d003      	beq.n	8003cd2 <__swsetup_r+0x7a>
 8003cca:	4621      	mov	r1, r4
 8003ccc:	4628      	mov	r0, r5
 8003cce:	f000 f83f 	bl	8003d50 <__smakebuf_r>
 8003cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cd6:	f013 0201 	ands.w	r2, r3, #1
 8003cda:	d00a      	beq.n	8003cf2 <__swsetup_r+0x9a>
 8003cdc:	2200      	movs	r2, #0
 8003cde:	60a2      	str	r2, [r4, #8]
 8003ce0:	6962      	ldr	r2, [r4, #20]
 8003ce2:	4252      	negs	r2, r2
 8003ce4:	61a2      	str	r2, [r4, #24]
 8003ce6:	6922      	ldr	r2, [r4, #16]
 8003ce8:	b942      	cbnz	r2, 8003cfc <__swsetup_r+0xa4>
 8003cea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003cee:	d1c5      	bne.n	8003c7c <__swsetup_r+0x24>
 8003cf0:	bd38      	pop	{r3, r4, r5, pc}
 8003cf2:	0799      	lsls	r1, r3, #30
 8003cf4:	bf58      	it	pl
 8003cf6:	6962      	ldrpl	r2, [r4, #20]
 8003cf8:	60a2      	str	r2, [r4, #8]
 8003cfa:	e7f4      	b.n	8003ce6 <__swsetup_r+0x8e>
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	e7f7      	b.n	8003cf0 <__swsetup_r+0x98>
 8003d00:	2000001c 	.word	0x2000001c

08003d04 <__swhatbuf_r>:
 8003d04:	b570      	push	{r4, r5, r6, lr}
 8003d06:	460c      	mov	r4, r1
 8003d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d0c:	2900      	cmp	r1, #0
 8003d0e:	b096      	sub	sp, #88	@ 0x58
 8003d10:	4615      	mov	r5, r2
 8003d12:	461e      	mov	r6, r3
 8003d14:	da0d      	bge.n	8003d32 <__swhatbuf_r+0x2e>
 8003d16:	89a3      	ldrh	r3, [r4, #12]
 8003d18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d1c:	f04f 0100 	mov.w	r1, #0
 8003d20:	bf14      	ite	ne
 8003d22:	2340      	movne	r3, #64	@ 0x40
 8003d24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d28:	2000      	movs	r0, #0
 8003d2a:	6031      	str	r1, [r6, #0]
 8003d2c:	602b      	str	r3, [r5, #0]
 8003d2e:	b016      	add	sp, #88	@ 0x58
 8003d30:	bd70      	pop	{r4, r5, r6, pc}
 8003d32:	466a      	mov	r2, sp
 8003d34:	f000 f8ae 	bl	8003e94 <_fstat_r>
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	dbec      	blt.n	8003d16 <__swhatbuf_r+0x12>
 8003d3c:	9901      	ldr	r1, [sp, #4]
 8003d3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d46:	4259      	negs	r1, r3
 8003d48:	4159      	adcs	r1, r3
 8003d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d4e:	e7eb      	b.n	8003d28 <__swhatbuf_r+0x24>

08003d50 <__smakebuf_r>:
 8003d50:	898b      	ldrh	r3, [r1, #12]
 8003d52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d54:	079d      	lsls	r5, r3, #30
 8003d56:	4606      	mov	r6, r0
 8003d58:	460c      	mov	r4, r1
 8003d5a:	d507      	bpl.n	8003d6c <__smakebuf_r+0x1c>
 8003d5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d60:	6023      	str	r3, [r4, #0]
 8003d62:	6123      	str	r3, [r4, #16]
 8003d64:	2301      	movs	r3, #1
 8003d66:	6163      	str	r3, [r4, #20]
 8003d68:	b003      	add	sp, #12
 8003d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d6c:	ab01      	add	r3, sp, #4
 8003d6e:	466a      	mov	r2, sp
 8003d70:	f7ff ffc8 	bl	8003d04 <__swhatbuf_r>
 8003d74:	9f00      	ldr	r7, [sp, #0]
 8003d76:	4605      	mov	r5, r0
 8003d78:	4639      	mov	r1, r7
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	f7ff fdb2 	bl	80038e4 <_malloc_r>
 8003d80:	b948      	cbnz	r0, 8003d96 <__smakebuf_r+0x46>
 8003d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d86:	059a      	lsls	r2, r3, #22
 8003d88:	d4ee      	bmi.n	8003d68 <__smakebuf_r+0x18>
 8003d8a:	f023 0303 	bic.w	r3, r3, #3
 8003d8e:	f043 0302 	orr.w	r3, r3, #2
 8003d92:	81a3      	strh	r3, [r4, #12]
 8003d94:	e7e2      	b.n	8003d5c <__smakebuf_r+0xc>
 8003d96:	89a3      	ldrh	r3, [r4, #12]
 8003d98:	6020      	str	r0, [r4, #0]
 8003d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d9e:	81a3      	strh	r3, [r4, #12]
 8003da0:	9b01      	ldr	r3, [sp, #4]
 8003da2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003da6:	b15b      	cbz	r3, 8003dc0 <__smakebuf_r+0x70>
 8003da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dac:	4630      	mov	r0, r6
 8003dae:	f000 f80b 	bl	8003dc8 <_isatty_r>
 8003db2:	b128      	cbz	r0, 8003dc0 <__smakebuf_r+0x70>
 8003db4:	89a3      	ldrh	r3, [r4, #12]
 8003db6:	f023 0303 	bic.w	r3, r3, #3
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	81a3      	strh	r3, [r4, #12]
 8003dc0:	89a3      	ldrh	r3, [r4, #12]
 8003dc2:	431d      	orrs	r5, r3
 8003dc4:	81a5      	strh	r5, [r4, #12]
 8003dc6:	e7cf      	b.n	8003d68 <__smakebuf_r+0x18>

08003dc8 <_isatty_r>:
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	4d06      	ldr	r5, [pc, #24]	@ (8003de4 <_isatty_r+0x1c>)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	4604      	mov	r4, r0
 8003dd0:	4608      	mov	r0, r1
 8003dd2:	602b      	str	r3, [r5, #0]
 8003dd4:	f7fc fbc3 	bl	800055e <_isatty>
 8003dd8:	1c43      	adds	r3, r0, #1
 8003dda:	d102      	bne.n	8003de2 <_isatty_r+0x1a>
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	b103      	cbz	r3, 8003de2 <_isatty_r+0x1a>
 8003de0:	6023      	str	r3, [r4, #0]
 8003de2:	bd38      	pop	{r3, r4, r5, pc}
 8003de4:	20002b3c 	.word	0x20002b3c

08003de8 <_lseek_r>:
 8003de8:	b538      	push	{r3, r4, r5, lr}
 8003dea:	4d07      	ldr	r5, [pc, #28]	@ (8003e08 <_lseek_r+0x20>)
 8003dec:	4604      	mov	r4, r0
 8003dee:	4608      	mov	r0, r1
 8003df0:	4611      	mov	r1, r2
 8003df2:	2200      	movs	r2, #0
 8003df4:	602a      	str	r2, [r5, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	f7fc fbbc 	bl	8000574 <_lseek>
 8003dfc:	1c43      	adds	r3, r0, #1
 8003dfe:	d102      	bne.n	8003e06 <_lseek_r+0x1e>
 8003e00:	682b      	ldr	r3, [r5, #0]
 8003e02:	b103      	cbz	r3, 8003e06 <_lseek_r+0x1e>
 8003e04:	6023      	str	r3, [r4, #0]
 8003e06:	bd38      	pop	{r3, r4, r5, pc}
 8003e08:	20002b3c 	.word	0x20002b3c

08003e0c <_read_r>:
 8003e0c:	b538      	push	{r3, r4, r5, lr}
 8003e0e:	4d07      	ldr	r5, [pc, #28]	@ (8003e2c <_read_r+0x20>)
 8003e10:	4604      	mov	r4, r0
 8003e12:	4608      	mov	r0, r1
 8003e14:	4611      	mov	r1, r2
 8003e16:	2200      	movs	r2, #0
 8003e18:	602a      	str	r2, [r5, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f7fc fb66 	bl	80004ec <_read>
 8003e20:	1c43      	adds	r3, r0, #1
 8003e22:	d102      	bne.n	8003e2a <_read_r+0x1e>
 8003e24:	682b      	ldr	r3, [r5, #0]
 8003e26:	b103      	cbz	r3, 8003e2a <_read_r+0x1e>
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	bd38      	pop	{r3, r4, r5, pc}
 8003e2c:	20002b3c 	.word	0x20002b3c

08003e30 <_sbrk_r>:
 8003e30:	b538      	push	{r3, r4, r5, lr}
 8003e32:	4d06      	ldr	r5, [pc, #24]	@ (8003e4c <_sbrk_r+0x1c>)
 8003e34:	2300      	movs	r3, #0
 8003e36:	4604      	mov	r4, r0
 8003e38:	4608      	mov	r0, r1
 8003e3a:	602b      	str	r3, [r5, #0]
 8003e3c:	f7fc fba8 	bl	8000590 <_sbrk>
 8003e40:	1c43      	adds	r3, r0, #1
 8003e42:	d102      	bne.n	8003e4a <_sbrk_r+0x1a>
 8003e44:	682b      	ldr	r3, [r5, #0]
 8003e46:	b103      	cbz	r3, 8003e4a <_sbrk_r+0x1a>
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	bd38      	pop	{r3, r4, r5, pc}
 8003e4c:	20002b3c 	.word	0x20002b3c

08003e50 <_write_r>:
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	4d07      	ldr	r5, [pc, #28]	@ (8003e70 <_write_r+0x20>)
 8003e54:	4604      	mov	r4, r0
 8003e56:	4608      	mov	r0, r1
 8003e58:	4611      	mov	r1, r2
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	602a      	str	r2, [r5, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f7fc f9dd 	bl	800021e <_write>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d102      	bne.n	8003e6e <_write_r+0x1e>
 8003e68:	682b      	ldr	r3, [r5, #0]
 8003e6a:	b103      	cbz	r3, 8003e6e <_write_r+0x1e>
 8003e6c:	6023      	str	r3, [r4, #0]
 8003e6e:	bd38      	pop	{r3, r4, r5, pc}
 8003e70:	20002b3c 	.word	0x20002b3c

08003e74 <_close_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	4d06      	ldr	r5, [pc, #24]	@ (8003e90 <_close_r+0x1c>)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	602b      	str	r3, [r5, #0]
 8003e80:	f7fc fb51 	bl	8000526 <_close>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d102      	bne.n	8003e8e <_close_r+0x1a>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	b103      	cbz	r3, 8003e8e <_close_r+0x1a>
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
 8003e90:	20002b3c 	.word	0x20002b3c

08003e94 <_fstat_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	4d07      	ldr	r5, [pc, #28]	@ (8003eb4 <_fstat_r+0x20>)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	602b      	str	r3, [r5, #0]
 8003ea2:	f7fc fb4c 	bl	800053e <_fstat>
 8003ea6:	1c43      	adds	r3, r0, #1
 8003ea8:	d102      	bne.n	8003eb0 <_fstat_r+0x1c>
 8003eaa:	682b      	ldr	r3, [r5, #0]
 8003eac:	b103      	cbz	r3, 8003eb0 <_fstat_r+0x1c>
 8003eae:	6023      	str	r3, [r4, #0]
 8003eb0:	bd38      	pop	{r3, r4, r5, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20002b3c 	.word	0x20002b3c

08003eb8 <_init>:
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eba:	bf00      	nop
 8003ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ebe:	bc08      	pop	{r3}
 8003ec0:	469e      	mov	lr, r3
 8003ec2:	4770      	bx	lr

08003ec4 <_fini>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	bf00      	nop
 8003ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eca:	bc08      	pop	{r3}
 8003ecc:	469e      	mov	lr, r3
 8003ece:	4770      	bx	lr
