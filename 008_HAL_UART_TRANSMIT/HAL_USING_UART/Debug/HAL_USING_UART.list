
HAL_USING_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800316c  0800316c  0000416c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031c8  080031c8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080031c8  080031c8  000041c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031d0  080031d0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d0  080031d0  000041d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031d4  080031d4  000041d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080031d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080031e4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080031e4  000050b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b09e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ec  00000000  00000000  000100da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00011ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006bc  00000000  00000000  000123a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ff8  00000000  00000000  00012a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab26  00000000  00000000  00037a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3cb4  00000000  00000000  0004257a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012622e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c4  00000000  00000000  00126274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00128538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003154 	.word	0x08003154

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003154 	.word	0x08003154

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
#include "gpio.h"

void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b20      	ldr	r3, [pc, #128]	@ (800057c <MX_GPIO_Init+0x88>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fe:	4a1f      	ldr	r2, [pc, #124]	@ (800057c <MX_GPIO_Init+0x88>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000506:	4b1d      	ldr	r3, [pc, #116]	@ (800057c <MX_GPIO_Init+0x88>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b1a      	ldr	r3, [pc, #104]	@ (800057c <MX_GPIO_Init+0x88>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000516:	4a19      	ldr	r2, [pc, #100]	@ (800057c <MX_GPIO_Init+0x88>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800051e:	4b17      	ldr	r3, [pc, #92]	@ (800057c <MX_GPIO_Init+0x88>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

    // LED PA5
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800053a:	2320      	movs	r3, #32
 800053c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	4619      	mov	r1, r3
 8000550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000554:	f000 fb80 	bl	8000c58 <HAL_GPIO_Init>

    // Button PC13
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000558:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800055c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000562:	2301      	movs	r3, #1
 8000564:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	4619      	mov	r1, r3
 800056c:	4804      	ldr	r0, [pc, #16]	@ (8000580 <MX_GPIO_Init+0x8c>)
 800056e:	f000 fb73 	bl	8000c58 <HAL_GPIO_Init>
}
 8000572:	bf00      	nop
 8000574:	3720      	adds	r7, #32
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000
 8000580:	48000800 	.word	0x48000800

08000584 <SystemClock_Config>:
#include "main.h"
#include "gpio.h"
#include "usart.h"

void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b098      	sub	sp, #96	@ 0x60
 8000588:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2244      	movs	r2, #68	@ 0x44
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fdb1 	bl	80030fa <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	4b23      	ldr	r3, [pc, #140]	@ (8000638 <SystemClock_Config+0xb4>)
 80005aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ac:	4a22      	ldr	r2, [pc, #136]	@ (8000638 <SystemClock_Config+0xb4>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80005b4:	4b20      	ldr	r3, [pc, #128]	@ (8000638 <SystemClock_Config+0xb4>)
 80005b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	4b1e      	ldr	r3, [pc, #120]	@ (800063c <SystemClock_Config+0xb8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80005c8:	4a1c      	ldr	r2, [pc, #112]	@ (800063c <SystemClock_Config+0xb8>)
 80005ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <SystemClock_Config+0xb8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e6:	2310      	movs	r3, #16
 80005e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ee:	2302      	movs	r3, #2
 80005f0:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLM = 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLN = 10;
 80005f6:	230a      	movs	r3, #10
 80005f8:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	657b      	str	r3, [r7, #84]	@ 0x54
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	65bb      	str	r3, [r7, #88]	@ 0x58
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fd0e 	bl	800102c <HAL_RCC_OscConfig>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60bb      	str	r3, [r7, #8]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2303      	movs	r3, #3
 8000616:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2104      	movs	r1, #4
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f8da 	bl	80017e4 <HAL_RCC_ClockConfig>
    }
}
 8000630:	bf00      	nop
 8000632:	3760      	adds	r7, #96	@ 0x60
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000
 800063c:	40007000 	.word	0x40007000

08000640 <Error_Handler>:
void Error_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
    __disable_irq();
    while (1)
    {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000648:	2120      	movs	r1, #32
 800064a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064e:	f000 fcc5 	bl	8000fdc <HAL_GPIO_TogglePin>
        HAL_Delay(200);
 8000652:	20c8      	movs	r0, #200	@ 0xc8
 8000654:	f000 f9f6 	bl	8000a44 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000658:	bf00      	nop
 800065a:	e7f5      	b.n	8000648 <Error_Handler+0x8>

0800065c <main>:
    }
}

int main(void)
{
 800065c:	b5b0      	push	{r4, r5, r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
    HAL_Init();
 8000662:	f000 f973 	bl	800094c <HAL_Init>
    SystemClock_Config();
 8000666:	f7ff ff8d 	bl	8000584 <SystemClock_Config>
    MX_GPIO_Init();
 800066a:	f7ff ff43 	bl	80004f4 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 800066e:	f000 f8e9 	bl	8000844 <MX_USART2_UART_Init>
    //Error_Handler();
    while (1)
    {
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000672:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000676:	480f      	ldr	r0, [pc, #60]	@ (80006b4 <main+0x58>)
 8000678:	f000 fc98 	bl	8000fac <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1f7      	bne.n	8000672 <main+0x16>
        {
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000682:	2120      	movs	r1, #32
 8000684:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000688:	f000 fca8 	bl	8000fdc <HAL_GPIO_TogglePin>
            char msg[] = "Button Pressed\r\n";
 800068c:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <main+0x5c>)
 800068e:	1d3c      	adds	r4, r7, #4
 8000690:	461d      	mov	r5, r3
 8000692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000696:	682b      	ldr	r3, [r5, #0]
 8000698:	7023      	strb	r3, [r4, #0]
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg)-1, HAL_MAX_DELAY);
 800069a:	1d39      	adds	r1, r7, #4
 800069c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006a0:	2210      	movs	r2, #16
 80006a2:	4806      	ldr	r0, [pc, #24]	@ (80006bc <main+0x60>)
 80006a4:	f001 ffcc 	bl	8002640 <HAL_UART_Transmit>
            HAL_Delay(500);
 80006a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006ac:	f000 f9ca 	bl	8000a44 <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80006b0:	e7df      	b.n	8000672 <main+0x16>
 80006b2:	bf00      	nop
 80006b4:	48000800 	.word	0x48000800
 80006b8:	0800316c 	.word	0x0800316c
 80006bc:	20000028 	.word	0x20000028

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <HAL_MspInit+0x44>)
 80006c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000704 <HAL_MspInit+0x44>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <HAL_MspInit+0x44>)
 80006d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <HAL_MspInit+0x44>)
 80006e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e2:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <HAL_MspInit+0x44>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <HAL_MspInit+0x44>)
 80006ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0ac      	sub	sp, #176	@ 0xb0
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2288      	movs	r2, #136	@ 0x88
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f002 fce6 	bl	80030fa <memset>
  if(huart->Instance==USART2)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a21      	ldr	r2, [pc, #132]	@ (80007b8 <HAL_UART_MspInit+0xb0>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d13b      	bne.n	80007b0 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000738:	2302      	movs	r3, #2
 800073a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800073c:	2300      	movs	r3, #0
 800073e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fa71 	bl	8001c2c <HAL_RCCEx_PeriphCLKConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000750:	f7ff ff76 	bl	8000640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000754:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <HAL_UART_MspInit+0xb4>)
 8000756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000758:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <HAL_UART_MspInit+0xb4>)
 800075a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800075e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000760:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <HAL_UART_MspInit+0xb4>)
 8000762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <HAL_UART_MspInit+0xb4>)
 800076e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000770:	4a12      	ldr	r2, [pc, #72]	@ (80007bc <HAL_UART_MspInit+0xb4>)
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <HAL_UART_MspInit+0xb4>)
 800077a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000784:	230c      	movs	r3, #12
 8000786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800079c:	2307      	movs	r3, #7
 800079e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007a6:	4619      	mov	r1, r3
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ac:	f000 fa54 	bl	8000c58 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80007b0:	bf00      	nop
 80007b2:	37b0      	adds	r7, #176	@ 0xb0
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40004400 	.word	0x40004400
 80007bc:	40021000 	.word	0x40021000

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <NMI_Handler+0x4>

080007c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <MemManage_Handler+0x4>

080007d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000816:	f000 f8f5 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <SystemInit+0x20>)
 8000826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800082a:	4a05      	ldr	r2, [pc, #20]	@ (8000840 <SystemInit+0x20>)
 800082c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000830:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <MX_USART2_UART_Init>:
#include "usart.h"

UART_HandleTypeDef huart2;

void MX_USART2_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 800084a:	4b28      	ldr	r3, [pc, #160]	@ (80008ec <MX_USART2_UART_Init+0xa8>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084e:	4a27      	ldr	r2, [pc, #156]	@ (80008ec <MX_USART2_UART_Init+0xa8>)
 8000850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000854:	6593      	str	r3, [r2, #88]	@ 0x58
 8000856:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <MX_USART2_UART_Init+0xa8>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800085a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <MX_USART2_UART_Init+0xa8>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a21      	ldr	r2, [pc, #132]	@ (80008ec <MX_USART2_UART_Init+0xa8>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_USART2_UART_Init+0xa8>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

    // UART2 TX (PA2), RX (PA3)
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800088a:	230c      	movs	r3, #12
 800088c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000892:	2301      	movs	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089a:	2307      	movs	r3, #7
 800089c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	4619      	mov	r1, r3
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a8:	f000 f9d6 	bl	8000c58 <HAL_GPIO_Init>

    huart2.Instance = USART2;
 80008ac:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_USART2_UART_Init+0xac>)
 80008ae:	4a11      	ldr	r2, [pc, #68]	@ (80008f4 <MX_USART2_UART_Init+0xb0>)
 80008b0:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_USART2_UART_Init+0xac>)
 80008b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008b8:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <MX_USART2_UART_Init+0xac>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_USART2_UART_Init+0xac>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <MX_USART2_UART_Init+0xac>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_USART2_UART_Init+0xac>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <MX_USART2_UART_Init+0xac>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <MX_USART2_UART_Init+0xac>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart2);
 80008de:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <MX_USART2_UART_Init+0xac>)
 80008e0:	f001 fe60 	bl	80025a4 <HAL_UART_Init>
}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000
 80008f0:	20000028 	.word	0x20000028
 80008f4:	40004400 	.word	0x40004400

080008f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000930 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008fc:	f7ff ff90 	bl	8000820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480c      	ldr	r0, [pc, #48]	@ (8000934 <LoopForever+0x6>)
  ldr r1, =_edata
 8000902:	490d      	ldr	r1, [pc, #52]	@ (8000938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000904:	4a0d      	ldr	r2, [pc, #52]	@ (800093c <LoopForever+0xe>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000918:	4c0a      	ldr	r4, [pc, #40]	@ (8000944 <LoopForever+0x16>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000926:	f002 fbf1 	bl	800310c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800092a:	f7ff fe97 	bl	800065c <main>

0800092e <LoopForever>:

LoopForever:
    b LoopForever
 800092e:	e7fe      	b.n	800092e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000930:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800093c:	080031d8 	.word	0x080031d8
  ldr r2, =_sbss
 8000940:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000944:	200000b4 	.word	0x200000b4

08000948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_2_IRQHandler>
	...

0800094c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <HAL_Init+0x3c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0b      	ldr	r2, [pc, #44]	@ (8000988 <HAL_Init+0x3c>)
 800095c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000960:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000962:	2003      	movs	r0, #3
 8000964:	f000 f944 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000968:	2000      	movs	r0, #0
 800096a:	f000 f80f 	bl	800098c <HAL_InitTick>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d002      	beq.n	800097a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	71fb      	strb	r3, [r7, #7]
 8000978:	e001      	b.n	800097e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800097a:	f7ff fea1 	bl	80006c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800097e:	79fb      	ldrb	r3, [r7, #7]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40022000 	.word	0x40022000

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000998:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <HAL_InitTick+0x6c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d023      	beq.n	80009e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <HAL_InitTick+0x70>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <HAL_InitTick+0x6c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f941 	bl	8000c3e <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10f      	bne.n	80009e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d809      	bhi.n	80009dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009d0:	f000 f919 	bl	8000c06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <HAL_InitTick+0x74>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	e007      	b.n	80009ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
 80009e0:	e004      	b.n	80009ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	e001      	b.n	80009ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008
 8000a28:	200000b0 	.word	0x200000b0

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	200000b0 	.word	0x200000b0

08000a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff ffee 	bl	8000a2c <HAL_GetTick>
 8000a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a5c:	d005      	beq.n	8000a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <HAL_Delay+0x44>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a6a:	bf00      	nop
 8000a6c:	f7ff ffde 	bl	8000a2c <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d8f7      	bhi.n	8000a6c <HAL_Delay+0x28>
  {
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	@ (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	@ (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	@ 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	@ 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bbc:	d301      	bcc.n	8000bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00f      	b.n	8000be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <SysTick_Config+0x40>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bd0:	f7ff ff8e 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <SysTick_Config+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <SysTick_Config+0x40>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff47 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c18:	f7ff ff5c 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff8e 	bl	8000b44 <NVIC_EncodePriority>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff5d 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffb0 	bl	8000bac <SysTick_Config>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c66:	e17f      	b.n	8000f68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 8171 	beq.w	8000f62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d005      	beq.n	8000c98 <HAL_GPIO_Init+0x40>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d130      	bne.n	8000cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68da      	ldr	r2, [r3, #12]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cce:	2201      	movs	r2, #1
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	091b      	lsrs	r3, r3, #4
 8000ce4:	f003 0201 	and.w	r2, r3, #1
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d118      	bne.n	8000d38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	08db      	lsrs	r3, r3, #3
 8000d22:	f003 0201 	and.w	r2, r3, #1
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d017      	beq.n	8000d74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d123      	bne.n	8000dc8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	08da      	lsrs	r2, r3, #3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3208      	adds	r2, #8
 8000d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	220f      	movs	r2, #15
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	691a      	ldr	r2, [r3, #16]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	08da      	lsrs	r2, r3, #3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3208      	adds	r2, #8
 8000dc2:	6939      	ldr	r1, [r7, #16]
 8000dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0203 	and.w	r2, r3, #3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 80ac 	beq.w	8000f62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8000f88 <HAL_GPIO_Init+0x330>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0e:	4a5e      	ldr	r2, [pc, #376]	@ (8000f88 <HAL_GPIO_Init+0x330>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e16:	4b5c      	ldr	r3, [pc, #368]	@ (8000f88 <HAL_GPIO_Init+0x330>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e22:	4a5a      	ldr	r2, [pc, #360]	@ (8000f8c <HAL_GPIO_Init+0x334>)
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3302      	adds	r3, #2
 8000e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e4c:	d025      	beq.n	8000e9a <HAL_GPIO_Init+0x242>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4f      	ldr	r2, [pc, #316]	@ (8000f90 <HAL_GPIO_Init+0x338>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d01f      	beq.n	8000e96 <HAL_GPIO_Init+0x23e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4e      	ldr	r2, [pc, #312]	@ (8000f94 <HAL_GPIO_Init+0x33c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d019      	beq.n	8000e92 <HAL_GPIO_Init+0x23a>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4d      	ldr	r2, [pc, #308]	@ (8000f98 <HAL_GPIO_Init+0x340>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d013      	beq.n	8000e8e <HAL_GPIO_Init+0x236>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4c      	ldr	r2, [pc, #304]	@ (8000f9c <HAL_GPIO_Init+0x344>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d00d      	beq.n	8000e8a <HAL_GPIO_Init+0x232>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4b      	ldr	r2, [pc, #300]	@ (8000fa0 <HAL_GPIO_Init+0x348>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d007      	beq.n	8000e86 <HAL_GPIO_Init+0x22e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4a      	ldr	r2, [pc, #296]	@ (8000fa4 <HAL_GPIO_Init+0x34c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d101      	bne.n	8000e82 <HAL_GPIO_Init+0x22a>
 8000e7e:	2306      	movs	r3, #6
 8000e80:	e00c      	b.n	8000e9c <HAL_GPIO_Init+0x244>
 8000e82:	2307      	movs	r3, #7
 8000e84:	e00a      	b.n	8000e9c <HAL_GPIO_Init+0x244>
 8000e86:	2305      	movs	r3, #5
 8000e88:	e008      	b.n	8000e9c <HAL_GPIO_Init+0x244>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x244>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x244>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x244>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x244>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	f002 0203 	and.w	r2, r2, #3
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eac:	4937      	ldr	r1, [pc, #220]	@ (8000f8c <HAL_GPIO_Init+0x334>)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eba:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa8 <HAL_GPIO_Init+0x350>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ede:	4a32      	ldr	r2, [pc, #200]	@ (8000fa8 <HAL_GPIO_Init+0x350>)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ee4:	4b30      	ldr	r3, [pc, #192]	@ (8000fa8 <HAL_GPIO_Init+0x350>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f08:	4a27      	ldr	r2, [pc, #156]	@ (8000fa8 <HAL_GPIO_Init+0x350>)
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f0e:	4b26      	ldr	r3, [pc, #152]	@ (8000fa8 <HAL_GPIO_Init+0x350>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f32:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa8 <HAL_GPIO_Init+0x350>)
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <HAL_GPIO_Init+0x350>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f5c:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <HAL_GPIO_Init+0x350>)
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f47f ae78 	bne.w	8000c68 <HAL_GPIO_Init+0x10>
  }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	371c      	adds	r7, #28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	48000400 	.word	0x48000400
 8000f94:	48000800 	.word	0x48000800
 8000f98:	48000c00 	.word	0x48000c00
 8000f9c:	48001000 	.word	0x48001000
 8000fa0:	48001400 	.word	0x48001400
 8000fa4:	48001800 	.word	0x48001800
 8000fa8:	40010400 	.word	0x40010400

08000fac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e001      	b.n	8000fce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	041a      	lsls	r2, r3, #16
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43d9      	mvns	r1, r3
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	400b      	ands	r3, r1
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <HAL_PWREx_GetVoltageRange+0x18>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40007000 	.word	0x40007000

0800102c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e3ca      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800103e:	4b97      	ldr	r3, [pc, #604]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001048:	4b94      	ldr	r3, [pc, #592]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 80e4 	beq.w	8001228 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d007      	beq.n	8001076 <HAL_RCC_OscConfig+0x4a>
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b0c      	cmp	r3, #12
 800106a:	f040 808b 	bne.w	8001184 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2b01      	cmp	r3, #1
 8001072:	f040 8087 	bne.w	8001184 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001076:	4b89      	ldr	r3, [pc, #548]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <HAL_RCC_OscConfig+0x62>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e3a2      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a1a      	ldr	r2, [r3, #32]
 8001092:	4b82      	ldr	r3, [pc, #520]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <HAL_RCC_OscConfig+0x7c>
 800109e:	4b7f      	ldr	r3, [pc, #508]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010a6:	e005      	b.n	80010b4 <HAL_RCC_OscConfig+0x88>
 80010a8:	4b7c      	ldr	r3, [pc, #496]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80010aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d223      	bcs.n	8001100 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fd55 	bl	8001b6c <RCC_SetFlashLatencyFromMSIRange>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e383      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010cc:	4b73      	ldr	r3, [pc, #460]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a72      	ldr	r2, [pc, #456]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b70      	ldr	r3, [pc, #448]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	496d      	ldr	r1, [pc, #436]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ea:	4b6c      	ldr	r3, [pc, #432]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	4968      	ldr	r1, [pc, #416]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	604b      	str	r3, [r1, #4]
 80010fe:	e025      	b.n	800114c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001100:	4b66      	ldr	r3, [pc, #408]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a65      	ldr	r2, [pc, #404]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 8001106:	f043 0308 	orr.w	r3, r3, #8
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b63      	ldr	r3, [pc, #396]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4960      	ldr	r1, [pc, #384]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 800111a:	4313      	orrs	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800111e:	4b5f      	ldr	r3, [pc, #380]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	495b      	ldr	r1, [pc, #364]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 800112e:	4313      	orrs	r3, r2
 8001130:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d109      	bne.n	800114c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fd15 	bl	8001b6c <RCC_SetFlashLatencyFromMSIRange>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e343      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800114c:	f000 fc4a 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 8001150:	4602      	mov	r2, r0
 8001152:	4b52      	ldr	r3, [pc, #328]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	f003 030f 	and.w	r3, r3, #15
 800115c:	4950      	ldr	r1, [pc, #320]	@ (80012a0 <HAL_RCC_OscConfig+0x274>)
 800115e:	5ccb      	ldrb	r3, [r1, r3]
 8001160:	f003 031f 	and.w	r3, r3, #31
 8001164:	fa22 f303 	lsr.w	r3, r2, r3
 8001168:	4a4e      	ldr	r2, [pc, #312]	@ (80012a4 <HAL_RCC_OscConfig+0x278>)
 800116a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800116c:	4b4e      	ldr	r3, [pc, #312]	@ (80012a8 <HAL_RCC_OscConfig+0x27c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fc0b 	bl	800098c <HAL_InitTick>
 8001176:	4603      	mov	r3, r0
 8001178:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d052      	beq.n	8001226 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	e327      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d032      	beq.n	80011f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800118c:	4b43      	ldr	r3, [pc, #268]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a42      	ldr	r2, [pc, #264]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001198:	f7ff fc48 	bl	8000a2c <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011a0:	f7ff fc44 	bl	8000a2c <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e310      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011b2:	4b3a      	ldr	r3, [pc, #232]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011be:	4b37      	ldr	r3, [pc, #220]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a36      	ldr	r2, [pc, #216]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80011c4:	f043 0308 	orr.w	r3, r3, #8
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b34      	ldr	r3, [pc, #208]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4931      	ldr	r1, [pc, #196]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011dc:	4b2f      	ldr	r3, [pc, #188]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	492c      	ldr	r1, [pc, #176]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
 80011f0:	e01a      	b.n	8001228 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011f2:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a29      	ldr	r2, [pc, #164]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80011f8:	f023 0301 	bic.w	r3, r3, #1
 80011fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011fe:	f7ff fc15 	bl	8000a2c <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001206:	f7ff fc11 	bl	8000a2c <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e2dd      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001218:	4b20      	ldr	r3, [pc, #128]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1f0      	bne.n	8001206 <HAL_RCC_OscConfig+0x1da>
 8001224:	e000      	b.n	8001228 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001226:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d074      	beq.n	800131e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2b08      	cmp	r3, #8
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x21a>
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2b0c      	cmp	r3, #12
 800123e:	d10e      	bne.n	800125e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d10b      	bne.n	800125e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d064      	beq.n	800131c <HAL_RCC_OscConfig+0x2f0>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d160      	bne.n	800131c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e2ba      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001266:	d106      	bne.n	8001276 <HAL_RCC_OscConfig+0x24a>
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0b      	ldr	r2, [pc, #44]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 800126e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	e026      	b.n	80012c4 <HAL_RCC_OscConfig+0x298>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800127e:	d115      	bne.n	80012ac <HAL_RCC_OscConfig+0x280>
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a05      	ldr	r2, [pc, #20]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 8001286:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b03      	ldr	r3, [pc, #12]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a02      	ldr	r2, [pc, #8]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 8001292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	e014      	b.n	80012c4 <HAL_RCC_OscConfig+0x298>
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000
 80012a0:	08003180 	.word	0x08003180
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000004 	.word	0x20000004
 80012ac:	4ba0      	ldr	r3, [pc, #640]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a9f      	ldr	r2, [pc, #636]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 80012b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b9d      	ldr	r3, [pc, #628]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a9c      	ldr	r2, [pc, #624]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 80012be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d013      	beq.n	80012f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff fbae 	bl	8000a2c <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fbaa 	bl	8000a2c <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	@ 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e276      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012e6:	4b92      	ldr	r3, [pc, #584]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x2a8>
 80012f2:	e014      	b.n	800131e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fb9a 	bl	8000a2c <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fb96 	bl	8000a2c <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	@ 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e262      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800130e:	4b88      	ldr	r3, [pc, #544]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x2d0>
 800131a:	e000      	b.n	800131e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d060      	beq.n	80013ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	2b04      	cmp	r3, #4
 800132e:	d005      	beq.n	800133c <HAL_RCC_OscConfig+0x310>
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	2b0c      	cmp	r3, #12
 8001334:	d119      	bne.n	800136a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d116      	bne.n	800136a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800133c:	4b7c      	ldr	r3, [pc, #496]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <HAL_RCC_OscConfig+0x328>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e23f      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001354:	4b76      	ldr	r3, [pc, #472]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	061b      	lsls	r3, r3, #24
 8001362:	4973      	ldr	r1, [pc, #460]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001368:	e040      	b.n	80013ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d023      	beq.n	80013ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001372:	4b6f      	ldr	r3, [pc, #444]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a6e      	ldr	r2, [pc, #440]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800137c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137e:	f7ff fb55 	bl	8000a2c <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fb51 	bl	8000a2c <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e21d      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001398:	4b65      	ldr	r3, [pc, #404]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a4:	4b62      	ldr	r3, [pc, #392]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	061b      	lsls	r3, r3, #24
 80013b2:	495f      	ldr	r1, [pc, #380]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
 80013b8:	e018      	b.n	80013ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a5c      	ldr	r2, [pc, #368]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 80013c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff fb31 	bl	8000a2c <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff fb2d 	bl	8000a2c <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e1f9      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e0:	4b53      	ldr	r3, [pc, #332]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f0      	bne.n	80013ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d03c      	beq.n	8001472 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d01c      	beq.n	800143a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001400:	4b4b      	ldr	r3, [pc, #300]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 8001402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001406:	4a4a      	ldr	r2, [pc, #296]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001410:	f7ff fb0c 	bl	8000a2c <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001418:	f7ff fb08 	bl	8000a2c <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e1d4      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800142a:	4b41      	ldr	r3, [pc, #260]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 800142c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0ef      	beq.n	8001418 <HAL_RCC_OscConfig+0x3ec>
 8001438:	e01b      	b.n	8001472 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800143a:	4b3d      	ldr	r3, [pc, #244]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 800143c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001440:	4a3b      	ldr	r2, [pc, #236]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 8001442:	f023 0301 	bic.w	r3, r3, #1
 8001446:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144a:	f7ff faef 	bl	8000a2c <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001452:	f7ff faeb 	bl	8000a2c <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e1b7      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001464:	4b32      	ldr	r3, [pc, #200]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 8001466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1ef      	bne.n	8001452 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80a6 	beq.w	80015cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001484:	4b2a      	ldr	r3, [pc, #168]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 8001486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10d      	bne.n	80014ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001490:	4b27      	ldr	r3, [pc, #156]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 8001492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001494:	4a26      	ldr	r2, [pc, #152]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 8001496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800149a:	6593      	str	r3, [r2, #88]	@ 0x58
 800149c:	4b24      	ldr	r3, [pc, #144]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 800149e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a8:	2301      	movs	r3, #1
 80014aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ac:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <HAL_RCC_OscConfig+0x508>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d118      	bne.n	80014ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <HAL_RCC_OscConfig+0x508>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001534 <HAL_RCC_OscConfig+0x508>)
 80014be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c4:	f7ff fab2 	bl	8000a2c <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014cc:	f7ff faae 	bl	8000a2c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e17a      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <HAL_RCC_OscConfig+0x508>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d108      	bne.n	8001504 <HAL_RCC_OscConfig+0x4d8>
 80014f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 80014f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001502:	e029      	b.n	8001558 <HAL_RCC_OscConfig+0x52c>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b05      	cmp	r3, #5
 800150a:	d115      	bne.n	8001538 <HAL_RCC_OscConfig+0x50c>
 800150c:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001512:	4a07      	ldr	r2, [pc, #28]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800151c:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 800151e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001522:	4a03      	ldr	r2, [pc, #12]	@ (8001530 <HAL_RCC_OscConfig+0x504>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800152c:	e014      	b.n	8001558 <HAL_RCC_OscConfig+0x52c>
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	40007000 	.word	0x40007000
 8001538:	4b9c      	ldr	r3, [pc, #624]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800153e:	4a9b      	ldr	r2, [pc, #620]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001548:	4b98      	ldr	r3, [pc, #608]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 800154a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800154e:	4a97      	ldr	r2, [pc, #604]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 8001550:	f023 0304 	bic.w	r3, r3, #4
 8001554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d016      	beq.n	800158e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fa64 	bl	8000a2c <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fa60 	bl	8000a2c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e12a      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800157e:	4b8b      	ldr	r3, [pc, #556]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 8001580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0ed      	beq.n	8001568 <HAL_RCC_OscConfig+0x53c>
 800158c:	e015      	b.n	80015ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158e:	f7ff fa4d 	bl	8000a2c <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff fa49 	bl	8000a2c <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e113      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015ac:	4b7f      	ldr	r3, [pc, #508]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 80015ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ed      	bne.n	8001596 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ba:	7ffb      	ldrb	r3, [r7, #31]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c0:	4b7a      	ldr	r3, [pc, #488]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	4a79      	ldr	r2, [pc, #484]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 80015c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80fe 	beq.w	80017d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015da:	2b02      	cmp	r3, #2
 80015dc:	f040 80d0 	bne.w	8001780 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015e0:	4b72      	ldr	r3, [pc, #456]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0203 	and.w	r2, r3, #3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d130      	bne.n	8001656 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	3b01      	subs	r3, #1
 8001600:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d127      	bne.n	8001656 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001610:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001612:	429a      	cmp	r2, r3
 8001614:	d11f      	bne.n	8001656 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001620:	2a07      	cmp	r2, #7
 8001622:	bf14      	ite	ne
 8001624:	2201      	movne	r2, #1
 8001626:	2200      	moveq	r2, #0
 8001628:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800162a:	4293      	cmp	r3, r2
 800162c:	d113      	bne.n	8001656 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	3b01      	subs	r3, #1
 800163c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800163e:	429a      	cmp	r2, r3
 8001640:	d109      	bne.n	8001656 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	085b      	lsrs	r3, r3, #1
 800164e:	3b01      	subs	r3, #1
 8001650:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d06e      	beq.n	8001734 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2b0c      	cmp	r3, #12
 800165a:	d069      	beq.n	8001730 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800165c:	4b53      	ldr	r3, [pc, #332]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001668:	4b50      	ldr	r3, [pc, #320]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0ad      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001678:	4b4c      	ldr	r3, [pc, #304]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a4b      	ldr	r2, [pc, #300]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 800167e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001682:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001684:	f7ff f9d2 	bl	8000a2c <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168c:	f7ff f9ce 	bl	8000a2c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e09a      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800169e:	4b43      	ldr	r3, [pc, #268]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016aa:	4b40      	ldr	r3, [pc, #256]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	4b40      	ldr	r3, [pc, #256]	@ (80017b0 <HAL_RCC_OscConfig+0x784>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80016ba:	3a01      	subs	r2, #1
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	4311      	orrs	r1, r2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016c4:	0212      	lsls	r2, r2, #8
 80016c6:	4311      	orrs	r1, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80016cc:	0852      	lsrs	r2, r2, #1
 80016ce:	3a01      	subs	r2, #1
 80016d0:	0552      	lsls	r2, r2, #21
 80016d2:	4311      	orrs	r1, r2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016d8:	0852      	lsrs	r2, r2, #1
 80016da:	3a01      	subs	r2, #1
 80016dc:	0652      	lsls	r2, r2, #25
 80016de:	4311      	orrs	r1, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016e4:	0912      	lsrs	r2, r2, #4
 80016e6:	0452      	lsls	r2, r2, #17
 80016e8:	430a      	orrs	r2, r1
 80016ea:	4930      	ldr	r1, [pc, #192]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016f0:	4b2e      	ldr	r3, [pc, #184]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a2d      	ldr	r2, [pc, #180]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 80016f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016fc:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4a2a      	ldr	r2, [pc, #168]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 8001702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001706:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001708:	f7ff f990 	bl	8000a2c <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff f98c 	bl	8000a2c <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e058      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001722:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800172e:	e050      	b.n	80017d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e04f      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d148      	bne.n	80017d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a19      	ldr	r2, [pc, #100]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 8001746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800174a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800174c:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4a16      	ldr	r2, [pc, #88]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 8001752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001756:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001758:	f7ff f968 	bl	8000a2c <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001760:	f7ff f964 	bl	8000a2c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e030      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001772:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x734>
 800177e:	e028      	b.n	80017d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2b0c      	cmp	r3, #12
 8001784:	d023      	beq.n	80017ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a08      	ldr	r2, [pc, #32]	@ (80017ac <HAL_RCC_OscConfig+0x780>)
 800178c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001792:	f7ff f94b 	bl	8000a2c <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001798:	e00c      	b.n	80017b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179a:	f7ff f947 	bl	8000a2c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d905      	bls.n	80017b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e013      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
 80017ac:	40021000 	.word	0x40021000
 80017b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b4:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_RCC_OscConfig+0x7b0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ec      	bne.n	800179a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_RCC_OscConfig+0x7b0>)
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	4905      	ldr	r1, [pc, #20]	@ (80017dc <HAL_RCC_OscConfig+0x7b0>)
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_RCC_OscConfig+0x7b4>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	60cb      	str	r3, [r1, #12]
 80017cc:	e001      	b.n	80017d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021000 	.word	0x40021000
 80017e0:	feeefffc 	.word	0xfeeefffc

080017e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0e7      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f8:	4b75      	ldr	r3, [pc, #468]	@ (80019d0 <HAL_RCC_ClockConfig+0x1ec>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d910      	bls.n	8001828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b72      	ldr	r3, [pc, #456]	@ (80019d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 0207 	bic.w	r2, r3, #7
 800180e:	4970      	ldr	r1, [pc, #448]	@ (80019d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b6e      	ldr	r3, [pc, #440]	@ (80019d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0cf      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d010      	beq.n	8001856 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	4b66      	ldr	r3, [pc, #408]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001840:	429a      	cmp	r2, r3
 8001842:	d908      	bls.n	8001856 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001844:	4b63      	ldr	r3, [pc, #396]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4960      	ldr	r1, [pc, #384]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d04c      	beq.n	80018fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186a:	4b5a      	ldr	r3, [pc, #360]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d121      	bne.n	80018ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0a6      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001882:	4b54      	ldr	r3, [pc, #336]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d115      	bne.n	80018ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e09a      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d107      	bne.n	80018aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800189a:	4b4e      	ldr	r3, [pc, #312]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e08e      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018aa:	4b4a      	ldr	r3, [pc, #296]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e086      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ba:	4b46      	ldr	r3, [pc, #280]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f023 0203 	bic.w	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4943      	ldr	r1, [pc, #268]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018cc:	f7ff f8ae 	bl	8000a2c <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d4:	f7ff f8aa 	bl	8000a2c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e06e      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ea:	4b3a      	ldr	r3, [pc, #232]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 020c 	and.w	r2, r3, #12
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d1eb      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d010      	beq.n	800192a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	4b31      	ldr	r3, [pc, #196]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001914:	429a      	cmp	r2, r3
 8001916:	d208      	bcs.n	800192a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001918:	4b2e      	ldr	r3, [pc, #184]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	492b      	ldr	r1, [pc, #172]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800192a:	4b29      	ldr	r3, [pc, #164]	@ (80019d0 <HAL_RCC_ClockConfig+0x1ec>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d210      	bcs.n	800195a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001938:	4b25      	ldr	r3, [pc, #148]	@ (80019d0 <HAL_RCC_ClockConfig+0x1ec>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 0207 	bic.w	r2, r3, #7
 8001940:	4923      	ldr	r1, [pc, #140]	@ (80019d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001948:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <HAL_RCC_ClockConfig+0x1ec>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d001      	beq.n	800195a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e036      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	d008      	beq.n	8001978 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001966:	4b1b      	ldr	r3, [pc, #108]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	4918      	ldr	r1, [pc, #96]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d009      	beq.n	8001998 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001984:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4910      	ldr	r1, [pc, #64]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001994:	4313      	orrs	r3, r2
 8001996:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001998:	f000 f824 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f0>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	490b      	ldr	r1, [pc, #44]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f4>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	4a09      	ldr	r2, [pc, #36]	@ (80019dc <HAL_RCC_ClockConfig+0x1f8>)
 80019b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019b8:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <HAL_RCC_ClockConfig+0x1fc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe ffe5 	bl	800098c <HAL_InitTick>
 80019c2:	4603      	mov	r3, r0
 80019c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80019c6:	7afb      	ldrb	r3, [r7, #11]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40022000 	.word	0x40022000
 80019d4:	40021000 	.word	0x40021000
 80019d8:	08003180 	.word	0x08003180
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000004 	.word	0x20000004

080019e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	@ 0x24
 80019e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019f2:	4b3e      	ldr	r3, [pc, #248]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019fc:	4b3b      	ldr	r3, [pc, #236]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x34>
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d121      	bne.n	8001a56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d11e      	bne.n	8001a56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a18:	4b34      	ldr	r3, [pc, #208]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a24:	4b31      	ldr	r3, [pc, #196]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 8001a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	e005      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a34:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a40:	4a2b      	ldr	r2, [pc, #172]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10d      	bne.n	8001a6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d102      	bne.n	8001a62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a5c:	4b25      	ldr	r3, [pc, #148]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	e004      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a68:	4b23      	ldr	r3, [pc, #140]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	d134      	bne.n	8001adc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a72:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d003      	beq.n	8001a8a <HAL_RCC_GetSysClockFreq+0xa6>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d003      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0xac>
 8001a88:	e005      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a8c:	617b      	str	r3, [r7, #20]
      break;
 8001a8e:	e005      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a90:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a92:	617b      	str	r3, [r7, #20]
      break;
 8001a94:	e002      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	617b      	str	r3, [r7, #20]
      break;
 8001a9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a9c:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	0a1b      	lsrs	r3, r3, #8
 8001ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	fb03 f202 	mul.w	r2, r3, r2
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	0e5b      	lsrs	r3, r3, #25
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	3301      	adds	r3, #1
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ada:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001adc:	69bb      	ldr	r3, [r7, #24]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	@ 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	08003198 	.word	0x08003198
 8001af4:	00f42400 	.word	0x00f42400
 8001af8:	007a1200 	.word	0x007a1200

08001afc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b00:	4b03      	ldr	r3, [pc, #12]	@ (8001b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000000 	.word	0x20000000

08001b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b18:	f7ff fff0 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	4904      	ldr	r1, [pc, #16]	@ (8001b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b2a:	5ccb      	ldrb	r3, [r1, r3]
 8001b2c:	f003 031f 	and.w	r3, r3, #31
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	08003190 	.word	0x08003190

08001b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b44:	f7ff ffda 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	0adb      	lsrs	r3, r3, #11
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	4904      	ldr	r1, [pc, #16]	@ (8001b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	08003190 	.word	0x08003190

08001b6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b78:	4b2a      	ldr	r3, [pc, #168]	@ (8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b84:	f7ff fa44 	bl	8001010 <HAL_PWREx_GetVoltageRange>
 8001b88:	6178      	str	r0, [r7, #20]
 8001b8a:	e014      	b.n	8001bb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b8c:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b90:	4a24      	ldr	r2, [pc, #144]	@ (8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b98:	4b22      	ldr	r3, [pc, #136]	@ (8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ba4:	f7ff fa34 	bl	8001010 <HAL_PWREx_GetVoltageRange>
 8001ba8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001baa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bae:	4a1d      	ldr	r2, [pc, #116]	@ (8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bbc:	d10b      	bne.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b80      	cmp	r3, #128	@ 0x80
 8001bc2:	d919      	bls.n	8001bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bc8:	d902      	bls.n	8001bd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bca:	2302      	movs	r3, #2
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	e013      	b.n	8001bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	e010      	b.n	8001bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b80      	cmp	r3, #128	@ 0x80
 8001bda:	d902      	bls.n	8001be2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bdc:	2303      	movs	r3, #3
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	e00a      	b.n	8001bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b80      	cmp	r3, #128	@ 0x80
 8001be6:	d102      	bne.n	8001bee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001be8:	2302      	movs	r3, #2
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	e004      	b.n	8001bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b70      	cmp	r3, #112	@ 0x70
 8001bf2:	d101      	bne.n	8001bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 0207 	bic.w	r2, r3, #7
 8001c00:	4909      	ldr	r1, [pc, #36]	@ (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c08:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40022000 	.word	0x40022000

08001c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c34:	2300      	movs	r3, #0
 8001c36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c38:	2300      	movs	r3, #0
 8001c3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d041      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c50:	d02a      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c56:	d824      	bhi.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c5c:	d008      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c62:	d81e      	bhi.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00a      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001c68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c6c:	d010      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001c6e:	e018      	b.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c70:	4b86      	ldr	r3, [pc, #536]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a85      	ldr	r2, [pc, #532]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c7c:	e015      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3304      	adds	r3, #4
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fabb 	bl	8002200 <RCCEx_PLLSAI1_Config>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c8e:	e00c      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3320      	adds	r3, #32
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fba6 	bl	80023e8 <RCCEx_PLLSAI2_Config>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ca0:	e003      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ca6:	e000      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001caa:	7cfb      	ldrb	r3, [r7, #19]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10b      	bne.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cb0:	4b76      	ldr	r3, [pc, #472]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cb6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cbe:	4973      	ldr	r1, [pc, #460]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001cc6:	e001      	b.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cc8:	7cfb      	ldrb	r3, [r7, #19]
 8001cca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d041      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cdc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ce0:	d02a      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ce2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ce6:	d824      	bhi.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ce8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cec:	d008      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001cee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cf2:	d81e      	bhi.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00a      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cfc:	d010      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cfe:	e018      	b.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d00:	4b62      	ldr	r3, [pc, #392]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4a61      	ldr	r2, [pc, #388]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d0c:	e015      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 fa73 	bl	8002200 <RCCEx_PLLSAI1_Config>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d1e:	e00c      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3320      	adds	r3, #32
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fb5e 	bl	80023e8 <RCCEx_PLLSAI2_Config>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d30:	e003      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	74fb      	strb	r3, [r7, #19]
      break;
 8001d36:	e000      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d3a:	7cfb      	ldrb	r3, [r7, #19]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10b      	bne.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d40:	4b52      	ldr	r3, [pc, #328]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d46:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d4e:	494f      	ldr	r1, [pc, #316]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001d56:	e001      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d58:	7cfb      	ldrb	r3, [r7, #19]
 8001d5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a0 	beq.w	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d6e:	4b47      	ldr	r3, [pc, #284]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00d      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d84:	4b41      	ldr	r3, [pc, #260]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d88:	4a40      	ldr	r2, [pc, #256]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d90:	4b3e      	ldr	r3, [pc, #248]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001da0:	4b3b      	ldr	r3, [pc, #236]	@ (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a3a      	ldr	r2, [pc, #232]	@ (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001da6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001daa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dac:	f7fe fe3e 	bl	8000a2c <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001db2:	e009      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db4:	f7fe fe3a 	bl	8000a2c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d902      	bls.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	74fb      	strb	r3, [r7, #19]
        break;
 8001dc6:	e005      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001dc8:	4b31      	ldr	r3, [pc, #196]	@ (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0ef      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001dd4:	7cfb      	ldrb	r3, [r7, #19]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d15c      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dda:	4b2c      	ldr	r3, [pc, #176]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001de4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d01f      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d019      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001df8:	4b24      	ldr	r3, [pc, #144]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e04:	4b21      	ldr	r3, [pc, #132]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e0a:	4a20      	ldr	r2, [pc, #128]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e14:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e24:	4a19      	ldr	r2, [pc, #100]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d016      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7fe fdf9 	bl	8000a2c <HAL_GetTick>
 8001e3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e3c:	e00b      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7fe fdf5 	bl	8000a2c <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d902      	bls.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	74fb      	strb	r3, [r7, #19]
            break;
 8001e54:	e006      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0ec      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001e64:	7cfb      	ldrb	r3, [r7, #19]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e6a:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e7a:	4904      	ldr	r1, [pc, #16]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001e82:	e009      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e84:	7cfb      	ldrb	r3, [r7, #19]
 8001e86:	74bb      	strb	r3, [r7, #18]
 8001e88:	e006      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e94:	7cfb      	ldrb	r3, [r7, #19]
 8001e96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e98:	7c7b      	ldrb	r3, [r7, #17]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d105      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9e:	4b9e      	ldr	r3, [pc, #632]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea2:	4a9d      	ldr	r2, [pc, #628]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ea4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ea8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eb6:	4b98      	ldr	r3, [pc, #608]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ebc:	f023 0203 	bic.w	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec4:	4994      	ldr	r1, [pc, #592]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00a      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ed8:	4b8f      	ldr	r3, [pc, #572]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ede:	f023 020c 	bic.w	r2, r3, #12
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ee6:	498c      	ldr	r1, [pc, #560]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001efa:	4b87      	ldr	r3, [pc, #540]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f00:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	4983      	ldr	r1, [pc, #524]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f1c:	4b7e      	ldr	r3, [pc, #504]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f22:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	497b      	ldr	r1, [pc, #492]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f3e:	4b76      	ldr	r3, [pc, #472]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f4c:	4972      	ldr	r1, [pc, #456]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f60:	4b6d      	ldr	r3, [pc, #436]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6e:	496a      	ldr	r1, [pc, #424]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f82:	4b65      	ldr	r3, [pc, #404]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f90:	4961      	ldr	r1, [pc, #388]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fa4:	4b5c      	ldr	r3, [pc, #368]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001faa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb2:	4959      	ldr	r1, [pc, #356]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fc6:	4b54      	ldr	r3, [pc, #336]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fcc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd4:	4950      	ldr	r1, [pc, #320]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fe8:	4b4b      	ldr	r3, [pc, #300]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff6:	4948      	ldr	r1, [pc, #288]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800200a:	4b43      	ldr	r3, [pc, #268]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002010:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002018:	493f      	ldr	r1, [pc, #252]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d028      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800202c:	4b3a      	ldr	r3, [pc, #232]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002032:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800203a:	4937      	ldr	r1, [pc, #220]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002046:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800204a:	d106      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800204c:	4b32      	ldr	r3, [pc, #200]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4a31      	ldr	r2, [pc, #196]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002052:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002056:	60d3      	str	r3, [r2, #12]
 8002058:	e011      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800205e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002062:	d10c      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3304      	adds	r3, #4
 8002068:	2101      	movs	r1, #1
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f8c8 	bl	8002200 <RCCEx_PLLSAI1_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800207a:	7cfb      	ldrb	r3, [r7, #19]
 800207c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d028      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800208a:	4b23      	ldr	r3, [pc, #140]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002090:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002098:	491f      	ldr	r1, [pc, #124]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020a8:	d106      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020b4:	60d3      	str	r3, [r2, #12]
 80020b6:	e011      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020c0:	d10c      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3304      	adds	r3, #4
 80020c6:	2101      	movs	r1, #1
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 f899 	bl	8002200 <RCCEx_PLLSAI1_Config>
 80020ce:	4603      	mov	r3, r0
 80020d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020d2:	7cfb      	ldrb	r3, [r7, #19]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d02b      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f6:	4908      	ldr	r1, [pc, #32]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002102:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002106:	d109      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002108:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a02      	ldr	r2, [pc, #8]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002112:	60d3      	str	r3, [r2, #12]
 8002114:	e014      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002120:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002124:	d10c      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3304      	adds	r3, #4
 800212a:	2101      	movs	r1, #1
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f867 	bl	8002200 <RCCEx_PLLSAI1_Config>
 8002132:	4603      	mov	r3, r0
 8002134:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002136:	7cfb      	ldrb	r3, [r7, #19]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d02f      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800214c:	4b2b      	ldr	r3, [pc, #172]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002152:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800215a:	4928      	ldr	r1, [pc, #160]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002166:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800216a:	d10d      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	2102      	movs	r1, #2
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f844 	bl	8002200 <RCCEx_PLLSAI1_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d014      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002182:	7cfb      	ldrb	r3, [r7, #19]
 8002184:	74bb      	strb	r3, [r7, #18]
 8002186:	e011      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800218c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002190:	d10c      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3320      	adds	r3, #32
 8002196:	2102      	movs	r1, #2
 8002198:	4618      	mov	r0, r3
 800219a:	f000 f925 	bl	80023e8 <RCCEx_PLLSAI2_Config>
 800219e:	4603      	mov	r3, r0
 80021a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021a2:	7cfb      	ldrb	r3, [r7, #19]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021a8:	7cfb      	ldrb	r3, [r7, #19]
 80021aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021b8:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021be:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021c6:	490d      	ldr	r1, [pc, #52]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021ea:	4904      	ldr	r1, [pc, #16]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000

08002200 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800220e:	4b75      	ldr	r3, [pc, #468]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d018      	beq.n	800224c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800221a:	4b72      	ldr	r3, [pc, #456]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0203 	and.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d10d      	bne.n	8002246 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
       ||
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002232:	4b6c      	ldr	r3, [pc, #432]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
       ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d047      	beq.n	80022d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	e044      	b.n	80022d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d018      	beq.n	8002286 <RCCEx_PLLSAI1_Config+0x86>
 8002254:	2b03      	cmp	r3, #3
 8002256:	d825      	bhi.n	80022a4 <RCCEx_PLLSAI1_Config+0xa4>
 8002258:	2b01      	cmp	r3, #1
 800225a:	d002      	beq.n	8002262 <RCCEx_PLLSAI1_Config+0x62>
 800225c:	2b02      	cmp	r3, #2
 800225e:	d009      	beq.n	8002274 <RCCEx_PLLSAI1_Config+0x74>
 8002260:	e020      	b.n	80022a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002262:	4b60      	ldr	r3, [pc, #384]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d11d      	bne.n	80022aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002272:	e01a      	b.n	80022aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002274:	4b5b      	ldr	r3, [pc, #364]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d116      	bne.n	80022ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002284:	e013      	b.n	80022ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002286:	4b57      	ldr	r3, [pc, #348]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10f      	bne.n	80022b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002292:	4b54      	ldr	r3, [pc, #336]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022a2:	e006      	b.n	80022b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
      break;
 80022a8:	e004      	b.n	80022b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022aa:	bf00      	nop
 80022ac:	e002      	b.n	80022b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022ae:	bf00      	nop
 80022b0:	e000      	b.n	80022b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10d      	bne.n	80022d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022ba:	4b4a      	ldr	r3, [pc, #296]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6819      	ldr	r1, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	430b      	orrs	r3, r1
 80022d0:	4944      	ldr	r1, [pc, #272]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d17d      	bne.n	80023d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022dc:	4b41      	ldr	r3, [pc, #260]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a40      	ldr	r2, [pc, #256]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80022e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e8:	f7fe fba0 	bl	8000a2c <HAL_GetTick>
 80022ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022ee:	e009      	b.n	8002304 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022f0:	f7fe fb9c 	bl	8000a2c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d902      	bls.n	8002304 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	73fb      	strb	r3, [r7, #15]
        break;
 8002302:	e005      	b.n	8002310 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002304:	4b37      	ldr	r3, [pc, #220]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1ef      	bne.n	80022f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d160      	bne.n	80023d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d111      	bne.n	8002340 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800231c:	4b31      	ldr	r3, [pc, #196]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002324:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6892      	ldr	r2, [r2, #8]
 800232c:	0211      	lsls	r1, r2, #8
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68d2      	ldr	r2, [r2, #12]
 8002332:	0912      	lsrs	r2, r2, #4
 8002334:	0452      	lsls	r2, r2, #17
 8002336:	430a      	orrs	r2, r1
 8002338:	492a      	ldr	r1, [pc, #168]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	610b      	str	r3, [r1, #16]
 800233e:	e027      	b.n	8002390 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d112      	bne.n	800236c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002346:	4b27      	ldr	r3, [pc, #156]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800234e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6892      	ldr	r2, [r2, #8]
 8002356:	0211      	lsls	r1, r2, #8
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6912      	ldr	r2, [r2, #16]
 800235c:	0852      	lsrs	r2, r2, #1
 800235e:	3a01      	subs	r2, #1
 8002360:	0552      	lsls	r2, r2, #21
 8002362:	430a      	orrs	r2, r1
 8002364:	491f      	ldr	r1, [pc, #124]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002366:	4313      	orrs	r3, r2
 8002368:	610b      	str	r3, [r1, #16]
 800236a:	e011      	b.n	8002390 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800236c:	4b1d      	ldr	r3, [pc, #116]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002374:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6892      	ldr	r2, [r2, #8]
 800237c:	0211      	lsls	r1, r2, #8
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6952      	ldr	r2, [r2, #20]
 8002382:	0852      	lsrs	r2, r2, #1
 8002384:	3a01      	subs	r2, #1
 8002386:	0652      	lsls	r2, r2, #25
 8002388:	430a      	orrs	r2, r1
 800238a:	4916      	ldr	r1, [pc, #88]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800238c:	4313      	orrs	r3, r2
 800238e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002390:	4b14      	ldr	r3, [pc, #80]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a13      	ldr	r2, [pc, #76]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002396:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800239a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239c:	f7fe fb46 	bl	8000a2c <HAL_GetTick>
 80023a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023a2:	e009      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023a4:	f7fe fb42 	bl	8000a2c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d902      	bls.n	80023b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	73fb      	strb	r3, [r7, #15]
          break;
 80023b6:	e005      	b.n	80023c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023b8:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0ef      	beq.n	80023a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	4904      	ldr	r1, [pc, #16]	@ (80023e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000

080023e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023f6:	4b6a      	ldr	r3, [pc, #424]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d018      	beq.n	8002434 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002402:	4b67      	ldr	r3, [pc, #412]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0203 	and.w	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d10d      	bne.n	800242e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
       ||
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800241a:	4b61      	ldr	r3, [pc, #388]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	091b      	lsrs	r3, r3, #4
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
       ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d047      	beq.n	80024be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	e044      	b.n	80024be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d018      	beq.n	800246e <RCCEx_PLLSAI2_Config+0x86>
 800243c:	2b03      	cmp	r3, #3
 800243e:	d825      	bhi.n	800248c <RCCEx_PLLSAI2_Config+0xa4>
 8002440:	2b01      	cmp	r3, #1
 8002442:	d002      	beq.n	800244a <RCCEx_PLLSAI2_Config+0x62>
 8002444:	2b02      	cmp	r3, #2
 8002446:	d009      	beq.n	800245c <RCCEx_PLLSAI2_Config+0x74>
 8002448:	e020      	b.n	800248c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800244a:	4b55      	ldr	r3, [pc, #340]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d11d      	bne.n	8002492 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800245a:	e01a      	b.n	8002492 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800245c:	4b50      	ldr	r3, [pc, #320]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002464:	2b00      	cmp	r3, #0
 8002466:	d116      	bne.n	8002496 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246c:	e013      	b.n	8002496 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800246e:	4b4c      	ldr	r3, [pc, #304]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10f      	bne.n	800249a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800247a:	4b49      	ldr	r3, [pc, #292]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800248a:	e006      	b.n	800249a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
      break;
 8002490:	e004      	b.n	800249c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002492:	bf00      	nop
 8002494:	e002      	b.n	800249c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002496:	bf00      	nop
 8002498:	e000      	b.n	800249c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800249a:	bf00      	nop
    }

    if(status == HAL_OK)
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10d      	bne.n	80024be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024a2:	4b3f      	ldr	r3, [pc, #252]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	430b      	orrs	r3, r1
 80024b8:	4939      	ldr	r1, [pc, #228]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d167      	bne.n	8002594 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80024c4:	4b36      	ldr	r3, [pc, #216]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a35      	ldr	r2, [pc, #212]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d0:	f7fe faac 	bl	8000a2c <HAL_GetTick>
 80024d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024d6:	e009      	b.n	80024ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024d8:	f7fe faa8 	bl	8000a2c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d902      	bls.n	80024ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	73fb      	strb	r3, [r7, #15]
        break;
 80024ea:	e005      	b.n	80024f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024ec:	4b2c      	ldr	r3, [pc, #176]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ef      	bne.n	80024d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d14a      	bne.n	8002594 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d111      	bne.n	8002528 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002504:	4b26      	ldr	r3, [pc, #152]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800250c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6892      	ldr	r2, [r2, #8]
 8002514:	0211      	lsls	r1, r2, #8
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68d2      	ldr	r2, [r2, #12]
 800251a:	0912      	lsrs	r2, r2, #4
 800251c:	0452      	lsls	r2, r2, #17
 800251e:	430a      	orrs	r2, r1
 8002520:	491f      	ldr	r1, [pc, #124]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002522:	4313      	orrs	r3, r2
 8002524:	614b      	str	r3, [r1, #20]
 8002526:	e011      	b.n	800254c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002528:	4b1d      	ldr	r3, [pc, #116]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002530:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6892      	ldr	r2, [r2, #8]
 8002538:	0211      	lsls	r1, r2, #8
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6912      	ldr	r2, [r2, #16]
 800253e:	0852      	lsrs	r2, r2, #1
 8002540:	3a01      	subs	r2, #1
 8002542:	0652      	lsls	r2, r2, #25
 8002544:	430a      	orrs	r2, r1
 8002546:	4916      	ldr	r1, [pc, #88]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002548:	4313      	orrs	r3, r2
 800254a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800254c:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a13      	ldr	r2, [pc, #76]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002556:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7fe fa68 	bl	8000a2c <HAL_GetTick>
 800255c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800255e:	e009      	b.n	8002574 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002560:	f7fe fa64 	bl	8000a2c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d902      	bls.n	8002574 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	73fb      	strb	r3, [r7, #15]
          break;
 8002572:	e005      	b.n	8002580 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002574:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ef      	beq.n	8002560 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	4904      	ldr	r1, [pc, #16]	@ (80025a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002590:	4313      	orrs	r3, r2
 8002592:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e040      	b.n	8002638 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe f89e 	bl	8000708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2224      	movs	r2, #36	@ 0x24
 80025d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fb6a 	bl	8002cc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f8af 	bl	8002754 <UART_SetConfig>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e01b      	b.n	8002638 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800260e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800261e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fbe9 	bl	8002e08 <UART_CheckIdleState>
 8002636:	4603      	mov	r3, r0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	@ 0x28
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002654:	2b20      	cmp	r3, #32
 8002656:	d177      	bne.n	8002748 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_UART_Transmit+0x24>
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e070      	b.n	800274a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2221      	movs	r2, #33	@ 0x21
 8002674:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002676:	f7fe f9d9 	bl	8000a2c <HAL_GetTick>
 800267a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	88fa      	ldrh	r2, [r7, #6]
 8002680:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	88fa      	ldrh	r2, [r7, #6]
 8002688:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002694:	d108      	bne.n	80026a8 <HAL_UART_Transmit+0x68>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d104      	bne.n	80026a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	e003      	b.n	80026b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026b0:	e02f      	b.n	8002712 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2200      	movs	r2, #0
 80026ba:	2180      	movs	r1, #128	@ 0x80
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 fc4b 	bl	8002f58 <UART_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e03b      	b.n	800274a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10b      	bne.n	80026f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	881a      	ldrh	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026e4:	b292      	uxth	r2, r2
 80026e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	3302      	adds	r3, #2
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	e007      	b.n	8002700 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3301      	adds	r3, #1
 80026fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1c9      	bne.n	80026b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2200      	movs	r2, #0
 8002726:	2140      	movs	r1, #64	@ 0x40
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fc15 	bl	8002f58 <UART_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e005      	b.n	800274a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	e000      	b.n	800274a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002748:	2302      	movs	r3, #2
  }
}
 800274a:	4618      	mov	r0, r3
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002758:	b08a      	sub	sp, #40	@ 0x28
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	431a      	orrs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	431a      	orrs	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	4313      	orrs	r3, r2
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4ba4      	ldr	r3, [pc, #656]	@ (8002a14 <UART_SetConfig+0x2c0>)
 8002784:	4013      	ands	r3, r2
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800278c:	430b      	orrs	r3, r1
 800278e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a99      	ldr	r2, [pc, #612]	@ (8002a18 <UART_SetConfig+0x2c4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d004      	beq.n	80027c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027bc:	4313      	orrs	r3, r2
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d0:	430a      	orrs	r2, r1
 80027d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a90      	ldr	r2, [pc, #576]	@ (8002a1c <UART_SetConfig+0x2c8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d126      	bne.n	800282c <UART_SetConfig+0xd8>
 80027de:	4b90      	ldr	r3, [pc, #576]	@ (8002a20 <UART_SetConfig+0x2cc>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d81b      	bhi.n	8002824 <UART_SetConfig+0xd0>
 80027ec:	a201      	add	r2, pc, #4	@ (adr r2, 80027f4 <UART_SetConfig+0xa0>)
 80027ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f2:	bf00      	nop
 80027f4:	08002805 	.word	0x08002805
 80027f8:	08002815 	.word	0x08002815
 80027fc:	0800280d 	.word	0x0800280d
 8002800:	0800281d 	.word	0x0800281d
 8002804:	2301      	movs	r3, #1
 8002806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800280a:	e116      	b.n	8002a3a <UART_SetConfig+0x2e6>
 800280c:	2302      	movs	r3, #2
 800280e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002812:	e112      	b.n	8002a3a <UART_SetConfig+0x2e6>
 8002814:	2304      	movs	r3, #4
 8002816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800281a:	e10e      	b.n	8002a3a <UART_SetConfig+0x2e6>
 800281c:	2308      	movs	r3, #8
 800281e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002822:	e10a      	b.n	8002a3a <UART_SetConfig+0x2e6>
 8002824:	2310      	movs	r3, #16
 8002826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800282a:	e106      	b.n	8002a3a <UART_SetConfig+0x2e6>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a7c      	ldr	r2, [pc, #496]	@ (8002a24 <UART_SetConfig+0x2d0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d138      	bne.n	80028a8 <UART_SetConfig+0x154>
 8002836:	4b7a      	ldr	r3, [pc, #488]	@ (8002a20 <UART_SetConfig+0x2cc>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b0c      	cmp	r3, #12
 8002842:	d82d      	bhi.n	80028a0 <UART_SetConfig+0x14c>
 8002844:	a201      	add	r2, pc, #4	@ (adr r2, 800284c <UART_SetConfig+0xf8>)
 8002846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284a:	bf00      	nop
 800284c:	08002881 	.word	0x08002881
 8002850:	080028a1 	.word	0x080028a1
 8002854:	080028a1 	.word	0x080028a1
 8002858:	080028a1 	.word	0x080028a1
 800285c:	08002891 	.word	0x08002891
 8002860:	080028a1 	.word	0x080028a1
 8002864:	080028a1 	.word	0x080028a1
 8002868:	080028a1 	.word	0x080028a1
 800286c:	08002889 	.word	0x08002889
 8002870:	080028a1 	.word	0x080028a1
 8002874:	080028a1 	.word	0x080028a1
 8002878:	080028a1 	.word	0x080028a1
 800287c:	08002899 	.word	0x08002899
 8002880:	2300      	movs	r3, #0
 8002882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002886:	e0d8      	b.n	8002a3a <UART_SetConfig+0x2e6>
 8002888:	2302      	movs	r3, #2
 800288a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800288e:	e0d4      	b.n	8002a3a <UART_SetConfig+0x2e6>
 8002890:	2304      	movs	r3, #4
 8002892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002896:	e0d0      	b.n	8002a3a <UART_SetConfig+0x2e6>
 8002898:	2308      	movs	r3, #8
 800289a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800289e:	e0cc      	b.n	8002a3a <UART_SetConfig+0x2e6>
 80028a0:	2310      	movs	r3, #16
 80028a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028a6:	e0c8      	b.n	8002a3a <UART_SetConfig+0x2e6>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a5e      	ldr	r2, [pc, #376]	@ (8002a28 <UART_SetConfig+0x2d4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d125      	bne.n	80028fe <UART_SetConfig+0x1aa>
 80028b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a20 <UART_SetConfig+0x2cc>)
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80028bc:	2b30      	cmp	r3, #48	@ 0x30
 80028be:	d016      	beq.n	80028ee <UART_SetConfig+0x19a>
 80028c0:	2b30      	cmp	r3, #48	@ 0x30
 80028c2:	d818      	bhi.n	80028f6 <UART_SetConfig+0x1a2>
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d00a      	beq.n	80028de <UART_SetConfig+0x18a>
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d814      	bhi.n	80028f6 <UART_SetConfig+0x1a2>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <UART_SetConfig+0x182>
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	d008      	beq.n	80028e6 <UART_SetConfig+0x192>
 80028d4:	e00f      	b.n	80028f6 <UART_SetConfig+0x1a2>
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028dc:	e0ad      	b.n	8002a3a <UART_SetConfig+0x2e6>
 80028de:	2302      	movs	r3, #2
 80028e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028e4:	e0a9      	b.n	8002a3a <UART_SetConfig+0x2e6>
 80028e6:	2304      	movs	r3, #4
 80028e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028ec:	e0a5      	b.n	8002a3a <UART_SetConfig+0x2e6>
 80028ee:	2308      	movs	r3, #8
 80028f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028f4:	e0a1      	b.n	8002a3a <UART_SetConfig+0x2e6>
 80028f6:	2310      	movs	r3, #16
 80028f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028fc:	e09d      	b.n	8002a3a <UART_SetConfig+0x2e6>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a4a      	ldr	r2, [pc, #296]	@ (8002a2c <UART_SetConfig+0x2d8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d125      	bne.n	8002954 <UART_SetConfig+0x200>
 8002908:	4b45      	ldr	r3, [pc, #276]	@ (8002a20 <UART_SetConfig+0x2cc>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002912:	2bc0      	cmp	r3, #192	@ 0xc0
 8002914:	d016      	beq.n	8002944 <UART_SetConfig+0x1f0>
 8002916:	2bc0      	cmp	r3, #192	@ 0xc0
 8002918:	d818      	bhi.n	800294c <UART_SetConfig+0x1f8>
 800291a:	2b80      	cmp	r3, #128	@ 0x80
 800291c:	d00a      	beq.n	8002934 <UART_SetConfig+0x1e0>
 800291e:	2b80      	cmp	r3, #128	@ 0x80
 8002920:	d814      	bhi.n	800294c <UART_SetConfig+0x1f8>
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <UART_SetConfig+0x1d8>
 8002926:	2b40      	cmp	r3, #64	@ 0x40
 8002928:	d008      	beq.n	800293c <UART_SetConfig+0x1e8>
 800292a:	e00f      	b.n	800294c <UART_SetConfig+0x1f8>
 800292c:	2300      	movs	r3, #0
 800292e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002932:	e082      	b.n	8002a3a <UART_SetConfig+0x2e6>
 8002934:	2302      	movs	r3, #2
 8002936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800293a:	e07e      	b.n	8002a3a <UART_SetConfig+0x2e6>
 800293c:	2304      	movs	r3, #4
 800293e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002942:	e07a      	b.n	8002a3a <UART_SetConfig+0x2e6>
 8002944:	2308      	movs	r3, #8
 8002946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800294a:	e076      	b.n	8002a3a <UART_SetConfig+0x2e6>
 800294c:	2310      	movs	r3, #16
 800294e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002952:	e072      	b.n	8002a3a <UART_SetConfig+0x2e6>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a35      	ldr	r2, [pc, #212]	@ (8002a30 <UART_SetConfig+0x2dc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d12a      	bne.n	80029b4 <UART_SetConfig+0x260>
 800295e:	4b30      	ldr	r3, [pc, #192]	@ (8002a20 <UART_SetConfig+0x2cc>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002964:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002968:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800296c:	d01a      	beq.n	80029a4 <UART_SetConfig+0x250>
 800296e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002972:	d81b      	bhi.n	80029ac <UART_SetConfig+0x258>
 8002974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002978:	d00c      	beq.n	8002994 <UART_SetConfig+0x240>
 800297a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800297e:	d815      	bhi.n	80029ac <UART_SetConfig+0x258>
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <UART_SetConfig+0x238>
 8002984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002988:	d008      	beq.n	800299c <UART_SetConfig+0x248>
 800298a:	e00f      	b.n	80029ac <UART_SetConfig+0x258>
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002992:	e052      	b.n	8002a3a <UART_SetConfig+0x2e6>
 8002994:	2302      	movs	r3, #2
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800299a:	e04e      	b.n	8002a3a <UART_SetConfig+0x2e6>
 800299c:	2304      	movs	r3, #4
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029a2:	e04a      	b.n	8002a3a <UART_SetConfig+0x2e6>
 80029a4:	2308      	movs	r3, #8
 80029a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029aa:	e046      	b.n	8002a3a <UART_SetConfig+0x2e6>
 80029ac:	2310      	movs	r3, #16
 80029ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029b2:	e042      	b.n	8002a3a <UART_SetConfig+0x2e6>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a17      	ldr	r2, [pc, #92]	@ (8002a18 <UART_SetConfig+0x2c4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d13a      	bne.n	8002a34 <UART_SetConfig+0x2e0>
 80029be:	4b18      	ldr	r3, [pc, #96]	@ (8002a20 <UART_SetConfig+0x2cc>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029cc:	d01a      	beq.n	8002a04 <UART_SetConfig+0x2b0>
 80029ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029d2:	d81b      	bhi.n	8002a0c <UART_SetConfig+0x2b8>
 80029d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029d8:	d00c      	beq.n	80029f4 <UART_SetConfig+0x2a0>
 80029da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029de:	d815      	bhi.n	8002a0c <UART_SetConfig+0x2b8>
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <UART_SetConfig+0x298>
 80029e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029e8:	d008      	beq.n	80029fc <UART_SetConfig+0x2a8>
 80029ea:	e00f      	b.n	8002a0c <UART_SetConfig+0x2b8>
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f2:	e022      	b.n	8002a3a <UART_SetConfig+0x2e6>
 80029f4:	2302      	movs	r3, #2
 80029f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029fa:	e01e      	b.n	8002a3a <UART_SetConfig+0x2e6>
 80029fc:	2304      	movs	r3, #4
 80029fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a02:	e01a      	b.n	8002a3a <UART_SetConfig+0x2e6>
 8002a04:	2308      	movs	r3, #8
 8002a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a0a:	e016      	b.n	8002a3a <UART_SetConfig+0x2e6>
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a12:	e012      	b.n	8002a3a <UART_SetConfig+0x2e6>
 8002a14:	efff69f3 	.word	0xefff69f3
 8002a18:	40008000 	.word	0x40008000
 8002a1c:	40013800 	.word	0x40013800
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40004400 	.word	0x40004400
 8002a28:	40004800 	.word	0x40004800
 8002a2c:	40004c00 	.word	0x40004c00
 8002a30:	40005000 	.word	0x40005000
 8002a34:	2310      	movs	r3, #16
 8002a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a9f      	ldr	r2, [pc, #636]	@ (8002cbc <UART_SetConfig+0x568>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d17a      	bne.n	8002b3a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d824      	bhi.n	8002a96 <UART_SetConfig+0x342>
 8002a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a54 <UART_SetConfig+0x300>)
 8002a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a52:	bf00      	nop
 8002a54:	08002a79 	.word	0x08002a79
 8002a58:	08002a97 	.word	0x08002a97
 8002a5c:	08002a81 	.word	0x08002a81
 8002a60:	08002a97 	.word	0x08002a97
 8002a64:	08002a87 	.word	0x08002a87
 8002a68:	08002a97 	.word	0x08002a97
 8002a6c:	08002a97 	.word	0x08002a97
 8002a70:	08002a97 	.word	0x08002a97
 8002a74:	08002a8f 	.word	0x08002a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a78:	f7ff f84c 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 8002a7c:	61f8      	str	r0, [r7, #28]
        break;
 8002a7e:	e010      	b.n	8002aa2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a80:	4b8f      	ldr	r3, [pc, #572]	@ (8002cc0 <UART_SetConfig+0x56c>)
 8002a82:	61fb      	str	r3, [r7, #28]
        break;
 8002a84:	e00d      	b.n	8002aa2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a86:	f7fe ffad 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 8002a8a:	61f8      	str	r0, [r7, #28]
        break;
 8002a8c:	e009      	b.n	8002aa2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a92:	61fb      	str	r3, [r7, #28]
        break;
 8002a94:	e005      	b.n	8002aa2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002aa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80fb 	beq.w	8002ca0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4413      	add	r3, r2
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d305      	bcc.n	8002ac6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d903      	bls.n	8002ace <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002acc:	e0e8      	b.n	8002ca0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	461c      	mov	r4, r3
 8002ad4:	4615      	mov	r5, r2
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	022b      	lsls	r3, r5, #8
 8002ae0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002ae4:	0222      	lsls	r2, r4, #8
 8002ae6:	68f9      	ldr	r1, [r7, #12]
 8002ae8:	6849      	ldr	r1, [r1, #4]
 8002aea:	0849      	lsrs	r1, r1, #1
 8002aec:	2000      	movs	r0, #0
 8002aee:	4688      	mov	r8, r1
 8002af0:	4681      	mov	r9, r0
 8002af2:	eb12 0a08 	adds.w	sl, r2, r8
 8002af6:	eb43 0b09 	adc.w	fp, r3, r9
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	603b      	str	r3, [r7, #0]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b08:	4650      	mov	r0, sl
 8002b0a:	4659      	mov	r1, fp
 8002b0c:	f7fd fb5c 	bl	80001c8 <__aeabi_uldivmod>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4613      	mov	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b1e:	d308      	bcc.n	8002b32 <UART_SetConfig+0x3de>
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b26:	d204      	bcs.n	8002b32 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	60da      	str	r2, [r3, #12]
 8002b30:	e0b6      	b.n	8002ca0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002b38:	e0b2      	b.n	8002ca0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b42:	d15e      	bne.n	8002c02 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002b44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d828      	bhi.n	8002b9e <UART_SetConfig+0x44a>
 8002b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b54 <UART_SetConfig+0x400>)
 8002b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b52:	bf00      	nop
 8002b54:	08002b79 	.word	0x08002b79
 8002b58:	08002b81 	.word	0x08002b81
 8002b5c:	08002b89 	.word	0x08002b89
 8002b60:	08002b9f 	.word	0x08002b9f
 8002b64:	08002b8f 	.word	0x08002b8f
 8002b68:	08002b9f 	.word	0x08002b9f
 8002b6c:	08002b9f 	.word	0x08002b9f
 8002b70:	08002b9f 	.word	0x08002b9f
 8002b74:	08002b97 	.word	0x08002b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b78:	f7fe ffcc 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 8002b7c:	61f8      	str	r0, [r7, #28]
        break;
 8002b7e:	e014      	b.n	8002baa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b80:	f7fe ffde 	bl	8001b40 <HAL_RCC_GetPCLK2Freq>
 8002b84:	61f8      	str	r0, [r7, #28]
        break;
 8002b86:	e010      	b.n	8002baa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b88:	4b4d      	ldr	r3, [pc, #308]	@ (8002cc0 <UART_SetConfig+0x56c>)
 8002b8a:	61fb      	str	r3, [r7, #28]
        break;
 8002b8c:	e00d      	b.n	8002baa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b8e:	f7fe ff29 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 8002b92:	61f8      	str	r0, [r7, #28]
        break;
 8002b94:	e009      	b.n	8002baa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b9a:	61fb      	str	r3, [r7, #28]
        break;
 8002b9c:	e005      	b.n	8002baa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d077      	beq.n	8002ca0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	005a      	lsls	r2, r3, #1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	441a      	add	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b0f      	cmp	r3, #15
 8002bca:	d916      	bls.n	8002bfa <UART_SetConfig+0x4a6>
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bd2:	d212      	bcs.n	8002bfa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f023 030f 	bic.w	r3, r3, #15
 8002bdc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	8afb      	ldrh	r3, [r7, #22]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	8afa      	ldrh	r2, [r7, #22]
 8002bf6:	60da      	str	r2, [r3, #12]
 8002bf8:	e052      	b.n	8002ca0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c00:	e04e      	b.n	8002ca0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d827      	bhi.n	8002c5a <UART_SetConfig+0x506>
 8002c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c10 <UART_SetConfig+0x4bc>)
 8002c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c10:	08002c35 	.word	0x08002c35
 8002c14:	08002c3d 	.word	0x08002c3d
 8002c18:	08002c45 	.word	0x08002c45
 8002c1c:	08002c5b 	.word	0x08002c5b
 8002c20:	08002c4b 	.word	0x08002c4b
 8002c24:	08002c5b 	.word	0x08002c5b
 8002c28:	08002c5b 	.word	0x08002c5b
 8002c2c:	08002c5b 	.word	0x08002c5b
 8002c30:	08002c53 	.word	0x08002c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c34:	f7fe ff6e 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 8002c38:	61f8      	str	r0, [r7, #28]
        break;
 8002c3a:	e014      	b.n	8002c66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c3c:	f7fe ff80 	bl	8001b40 <HAL_RCC_GetPCLK2Freq>
 8002c40:	61f8      	str	r0, [r7, #28]
        break;
 8002c42:	e010      	b.n	8002c66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c44:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc0 <UART_SetConfig+0x56c>)
 8002c46:	61fb      	str	r3, [r7, #28]
        break;
 8002c48:	e00d      	b.n	8002c66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c4a:	f7fe fecb 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 8002c4e:	61f8      	str	r0, [r7, #28]
        break;
 8002c50:	e009      	b.n	8002c66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c56:	61fb      	str	r3, [r7, #28]
        break;
 8002c58:	e005      	b.n	8002c66 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c64:	bf00      	nop
    }

    if (pclk != 0U)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d019      	beq.n	8002ca0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	085a      	lsrs	r2, r3, #1
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	441a      	add	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	d909      	bls.n	8002c9a <UART_SetConfig+0x546>
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c8c:	d205      	bcs.n	8002c9a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60da      	str	r2, [r3, #12]
 8002c98:	e002      	b.n	8002ca0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002cac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3728      	adds	r7, #40	@ 0x28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cba:	bf00      	nop
 8002cbc:	40008000 	.word	0x40008000
 8002cc0:	00f42400 	.word	0x00f42400

08002cc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01a      	beq.n	8002dda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dc2:	d10a      	bne.n	8002dda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	605a      	str	r2, [r3, #4]
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b098      	sub	sp, #96	@ 0x60
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e18:	f7fd fe08 	bl	8000a2c <HAL_GetTick>
 8002e1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d12e      	bne.n	8002e8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e34:	2200      	movs	r2, #0
 8002e36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f88c 	bl	8002f58 <UART_WaitOnFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d021      	beq.n	8002e8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e4e:	e853 3f00 	ldrex	r3, [r3]
 8002e52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e66:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e6c:	e841 2300 	strex	r3, r2, [r1]
 8002e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1e6      	bne.n	8002e46 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e062      	b.n	8002f50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d149      	bne.n	8002f2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f856 	bl	8002f58 <UART_WaitOnFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d03c      	beq.n	8002f2c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	e853 3f00 	ldrex	r3, [r3]
 8002ebe:	623b      	str	r3, [r7, #32]
   return(result);
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ed0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ed8:	e841 2300 	strex	r3, r2, [r1]
 8002edc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e6      	bne.n	8002eb2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3308      	adds	r3, #8
 8002eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	e853 3f00 	ldrex	r3, [r3]
 8002ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3308      	adds	r3, #8
 8002f02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f04:	61fa      	str	r2, [r7, #28]
 8002f06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f08:	69b9      	ldr	r1, [r7, #24]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	e841 2300 	strex	r3, r2, [r1]
 8002f10:	617b      	str	r3, [r7, #20]
   return(result);
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e5      	bne.n	8002ee4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e011      	b.n	8002f50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3758      	adds	r7, #88	@ 0x58
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f68:	e04f      	b.n	800300a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f70:	d04b      	beq.n	800300a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7fd fd5b 	bl	8000a2c <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e04e      	b.n	800302a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d037      	beq.n	800300a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b80      	cmp	r3, #128	@ 0x80
 8002f9e:	d034      	beq.n	800300a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b40      	cmp	r3, #64	@ 0x40
 8002fa4:	d031      	beq.n	800300a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d110      	bne.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2208      	movs	r2, #8
 8002fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f838 	bl	8003032 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e029      	b.n	800302a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fe4:	d111      	bne.n	800300a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f81e 	bl	8003032 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e00f      	b.n	800302a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4013      	ands	r3, r2
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	429a      	cmp	r2, r3
 8003018:	bf0c      	ite	eq
 800301a:	2301      	moveq	r3, #1
 800301c:	2300      	movne	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	429a      	cmp	r2, r3
 8003026:	d0a0      	beq.n	8002f6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003032:	b480      	push	{r7}
 8003034:	b095      	sub	sp, #84	@ 0x54
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003042:	e853 3f00 	ldrex	r3, [r3]
 8003046:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800304e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003058:	643b      	str	r3, [r7, #64]	@ 0x40
 800305a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800305e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003060:	e841 2300 	strex	r3, r2, [r1]
 8003064:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e6      	bne.n	800303a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3308      	adds	r3, #8
 8003072:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	e853 3f00 	ldrex	r3, [r3]
 800307a:	61fb      	str	r3, [r7, #28]
   return(result);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3308      	adds	r3, #8
 800308a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800308c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800308e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003094:	e841 2300 	strex	r3, r2, [r1]
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e5      	bne.n	800306c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d118      	bne.n	80030da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	e853 3f00 	ldrex	r3, [r3]
 80030b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f023 0310 	bic.w	r3, r3, #16
 80030bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ca:	6979      	ldr	r1, [r7, #20]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	e841 2300 	strex	r3, r2, [r1]
 80030d2:	613b      	str	r3, [r7, #16]
   return(result);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e6      	bne.n	80030a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80030ee:	bf00      	nop
 80030f0:	3754      	adds	r7, #84	@ 0x54
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <memset>:
 80030fa:	4402      	add	r2, r0
 80030fc:	4603      	mov	r3, r0
 80030fe:	4293      	cmp	r3, r2
 8003100:	d100      	bne.n	8003104 <memset+0xa>
 8003102:	4770      	bx	lr
 8003104:	f803 1b01 	strb.w	r1, [r3], #1
 8003108:	e7f9      	b.n	80030fe <memset+0x4>
	...

0800310c <__libc_init_array>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	4d0d      	ldr	r5, [pc, #52]	@ (8003144 <__libc_init_array+0x38>)
 8003110:	4c0d      	ldr	r4, [pc, #52]	@ (8003148 <__libc_init_array+0x3c>)
 8003112:	1b64      	subs	r4, r4, r5
 8003114:	10a4      	asrs	r4, r4, #2
 8003116:	2600      	movs	r6, #0
 8003118:	42a6      	cmp	r6, r4
 800311a:	d109      	bne.n	8003130 <__libc_init_array+0x24>
 800311c:	4d0b      	ldr	r5, [pc, #44]	@ (800314c <__libc_init_array+0x40>)
 800311e:	4c0c      	ldr	r4, [pc, #48]	@ (8003150 <__libc_init_array+0x44>)
 8003120:	f000 f818 	bl	8003154 <_init>
 8003124:	1b64      	subs	r4, r4, r5
 8003126:	10a4      	asrs	r4, r4, #2
 8003128:	2600      	movs	r6, #0
 800312a:	42a6      	cmp	r6, r4
 800312c:	d105      	bne.n	800313a <__libc_init_array+0x2e>
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	f855 3b04 	ldr.w	r3, [r5], #4
 8003134:	4798      	blx	r3
 8003136:	3601      	adds	r6, #1
 8003138:	e7ee      	b.n	8003118 <__libc_init_array+0xc>
 800313a:	f855 3b04 	ldr.w	r3, [r5], #4
 800313e:	4798      	blx	r3
 8003140:	3601      	adds	r6, #1
 8003142:	e7f2      	b.n	800312a <__libc_init_array+0x1e>
 8003144:	080031d0 	.word	0x080031d0
 8003148:	080031d0 	.word	0x080031d0
 800314c:	080031d0 	.word	0x080031d0
 8003150:	080031d4 	.word	0x080031d4

08003154 <_init>:
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	bf00      	nop
 8003158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315a:	bc08      	pop	{r3}
 800315c:	469e      	mov	lr, r3
 800315e:	4770      	bx	lr

08003160 <_fini>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	bf00      	nop
 8003164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003166:	bc08      	pop	{r3}
 8003168:	469e      	mov	lr, r3
 800316a:	4770      	bx	lr
