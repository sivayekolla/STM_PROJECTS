
gpio_lcd_ultrasonic_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000600  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000788  08000788  00001788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800079c  0800079c  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800079c  0800079c  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800079c  0800079c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800079c  0800079c  0000179c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007a0  080007a0  000017a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080007a4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080007a8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080007a8  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c9a  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000774  00000000  00000000  00003cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000288  00000000  00000000  00004448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001c7  00000000  00000000  000046d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d5ec  00000000  00000000  00004897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002b2a  00000000  00000000  00021e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4d81  00000000  00000000  000249ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010972e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007fc  00000000  00000000  00109774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00109f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000770 	.word	0x08000770

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000770 	.word	0x08000770

080001c8 <delay_ms>:
#include "lcd_gpio.h"
#include <string.h>

static void delay_ms(uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0; i < ms * 4000; i++) __NOP();
 80001d0:	2300      	movs	r3, #0
 80001d2:	60fb      	str	r3, [r7, #12]
 80001d4:	e003      	b.n	80001de <delay_ms+0x16>
 80001d6:	bf00      	nop
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	3301      	adds	r3, #1
 80001dc:	60fb      	str	r3, [r7, #12]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80001e4:	fb02 f303 	mul.w	r3, r2, r3
 80001e8:	68fa      	ldr	r2, [r7, #12]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	d3f3      	bcc.n	80001d6 <delay_ms+0xe>
}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	3714      	adds	r7, #20
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr

080001fc <GPIO_WritePin>:

static void GPIO_WritePin(GPIO_TypeDef *port, uint8_t pin, uint8_t value) {
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	460b      	mov	r3, r1
 8000206:	70fb      	strb	r3, [r7, #3]
 8000208:	4613      	mov	r3, r2
 800020a:	70bb      	strb	r3, [r7, #2]
    if(value)
 800020c:	78bb      	ldrb	r3, [r7, #2]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d009      	beq.n	8000226 <GPIO_WritePin+0x2a>
        port->ODR |= (1 << pin);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	695b      	ldr	r3, [r3, #20]
 8000216:	78fa      	ldrb	r2, [r7, #3]
 8000218:	2101      	movs	r1, #1
 800021a:	fa01 f202 	lsl.w	r2, r1, r2
 800021e:	431a      	orrs	r2, r3
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	615a      	str	r2, [r3, #20]
    else
        port->ODR &= ~(1 << pin);
}
 8000224:	e009      	b.n	800023a <GPIO_WritePin+0x3e>
        port->ODR &= ~(1 << pin);
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	78fa      	ldrb	r2, [r7, #3]
 800022c:	2101      	movs	r1, #1
 800022e:	fa01 f202 	lsl.w	r2, r1, r2
 8000232:	43d2      	mvns	r2, r2
 8000234:	401a      	ands	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	615a      	str	r2, [r3, #20]
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
	...

08000248 <LCD_Send4Bits>:

static void LCD_Send4Bits(uint8_t data) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
    GPIO_WritePin(LCD_PORTB, LCD_D4_PIN, (data >> 0) & 1);
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	b2db      	uxtb	r3, r3
 800025a:	461a      	mov	r2, r3
 800025c:	2103      	movs	r1, #3
 800025e:	481d      	ldr	r0, [pc, #116]	@ (80002d4 <LCD_Send4Bits+0x8c>)
 8000260:	f7ff ffcc 	bl	80001fc <GPIO_WritePin>
    GPIO_WritePin(LCD_PORTB, LCD_D5_PIN, (data >> 1) & 1);
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	085b      	lsrs	r3, r3, #1
 8000268:	b2db      	uxtb	r3, r3
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	b2db      	uxtb	r3, r3
 8000270:	461a      	mov	r2, r3
 8000272:	2102      	movs	r1, #2
 8000274:	4817      	ldr	r0, [pc, #92]	@ (80002d4 <LCD_Send4Bits+0x8c>)
 8000276:	f7ff ffc1 	bl	80001fc <GPIO_WritePin>
    GPIO_WritePin(LCD_PORTB, LCD_D6_PIN, (data >> 2) & 1);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	089b      	lsrs	r3, r3, #2
 800027e:	b2db      	uxtb	r3, r3
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	b2db      	uxtb	r3, r3
 8000286:	461a      	mov	r2, r3
 8000288:	2101      	movs	r1, #1
 800028a:	4812      	ldr	r0, [pc, #72]	@ (80002d4 <LCD_Send4Bits+0x8c>)
 800028c:	f7ff ffb6 	bl	80001fc <GPIO_WritePin>
    GPIO_WritePin(LCD_PORTB, LCD_D7_PIN, (data >> 3) & 1);
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	08db      	lsrs	r3, r3, #3
 8000294:	b2db      	uxtb	r3, r3
 8000296:	f003 0301 	and.w	r3, r3, #1
 800029a:	b2db      	uxtb	r3, r3
 800029c:	461a      	mov	r2, r3
 800029e:	2100      	movs	r1, #0
 80002a0:	480c      	ldr	r0, [pc, #48]	@ (80002d4 <LCD_Send4Bits+0x8c>)
 80002a2:	f7ff ffab 	bl	80001fc <GPIO_WritePin>

    GPIO_WritePin(LCD_PORTA, LCD_EN_PIN, 1);
 80002a6:	2201      	movs	r2, #1
 80002a8:	2109      	movs	r1, #9
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ae:	f7ff ffa5 	bl	80001fc <GPIO_WritePin>
    delay_ms(1);
 80002b2:	2001      	movs	r0, #1
 80002b4:	f7ff ff88 	bl	80001c8 <delay_ms>
    GPIO_WritePin(LCD_PORTA, LCD_EN_PIN, 0);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2109      	movs	r1, #9
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c0:	f7ff ff9c 	bl	80001fc <GPIO_WritePin>
    delay_ms(1);
 80002c4:	2001      	movs	r0, #1
 80002c6:	f7ff ff7f 	bl	80001c8 <delay_ms>
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	48000400 	.word	0x48000400

080002d8 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
    GPIO_WritePin(LCD_PORTA, LCD_RS_PIN, 0);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2108      	movs	r1, #8
 80002e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ea:	f7ff ff87 	bl	80001fc <GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	091b      	lsrs	r3, r3, #4
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ffa7 	bl	8000248 <LCD_Send4Bits>
    LCD_Send4Bits(cmd & 0x0F);
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	b2db      	uxtb	r3, r3
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ffa0 	bl	8000248 <LCD_Send4Bits>
    delay_ms(2);
 8000308:	2002      	movs	r0, #2
 800030a:	f7ff ff5d 	bl	80001c8 <delay_ms>
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}

08000316 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 8000316:	b580      	push	{r7, lr}
 8000318:	b082      	sub	sp, #8
 800031a:	af00      	add	r7, sp, #0
 800031c:	4603      	mov	r3, r0
 800031e:	71fb      	strb	r3, [r7, #7]
    GPIO_WritePin(LCD_PORTA, LCD_RS_PIN, 1);
 8000320:	2201      	movs	r2, #1
 8000322:	2108      	movs	r1, #8
 8000324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000328:	f7ff ff68 	bl	80001fc <GPIO_WritePin>
    LCD_Send4Bits(data >> 4);
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	091b      	lsrs	r3, r3, #4
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff88 	bl	8000248 <LCD_Send4Bits>
    LCD_Send4Bits(data & 0x0F);
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	f003 030f 	and.w	r3, r3, #15
 800033e:	b2db      	uxtb	r3, r3
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff81 	bl	8000248 <LCD_Send4Bits>
    delay_ms(2);
 8000346:	2002      	movs	r0, #2
 8000348:	f7ff ff3e 	bl	80001c8 <delay_ms>
}
 800034c:	bf00      	nop
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}

08000354 <LCD_Init>:

void LCD_Init(void) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN;
 800035a:	4b2f      	ldr	r3, [pc, #188]	@ (8000418 <LCD_Init+0xc4>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800035e:	4a2e      	ldr	r2, [pc, #184]	@ (8000418 <LCD_Init+0xc4>)
 8000360:	f043 0303 	orr.w	r3, r3, #3
 8000364:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // PA8, PA9 output
    LCD_PORTA->MODER &= ~((3 << (2 * LCD_RS_PIN)) | (3 << (2 * LCD_EN_PIN)));
 8000366:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000370:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000374:	6013      	str	r3, [r2, #0]
    LCD_PORTA->MODER |=  ((1 << (2 * LCD_RS_PIN)) | (1 << (2 * LCD_EN_PIN)));
 8000376:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000380:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000384:	6013      	str	r3, [r2, #0]

    // PB0–PB3 output
    for (int i = 0; i <= 3; i++) {
 8000386:	2300      	movs	r3, #0
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	e019      	b.n	80003c0 <LCD_Init+0x6c>
        LCD_PORTB->MODER &= ~(3 << (2 * i));
 800038c:	4b23      	ldr	r3, [pc, #140]	@ (800041c <LCD_Init+0xc8>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	0052      	lsls	r2, r2, #1
 8000394:	2103      	movs	r1, #3
 8000396:	fa01 f202 	lsl.w	r2, r1, r2
 800039a:	43d2      	mvns	r2, r2
 800039c:	4611      	mov	r1, r2
 800039e:	4a1f      	ldr	r2, [pc, #124]	@ (800041c <LCD_Init+0xc8>)
 80003a0:	400b      	ands	r3, r1
 80003a2:	6013      	str	r3, [r2, #0]
        LCD_PORTB->MODER |=  (1 << (2 * i));
 80003a4:	4b1d      	ldr	r3, [pc, #116]	@ (800041c <LCD_Init+0xc8>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	0052      	lsls	r2, r2, #1
 80003ac:	2101      	movs	r1, #1
 80003ae:	fa01 f202 	lsl.w	r2, r1, r2
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a19      	ldr	r2, [pc, #100]	@ (800041c <LCD_Init+0xc8>)
 80003b6:	430b      	orrs	r3, r1
 80003b8:	6013      	str	r3, [r2, #0]
    for (int i = 0; i <= 3; i++) {
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	3301      	adds	r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2b03      	cmp	r3, #3
 80003c4:	dde2      	ble.n	800038c <LCD_Init+0x38>
    }

    delay_ms(20);
 80003c6:	2014      	movs	r0, #20
 80003c8:	f7ff fefe 	bl	80001c8 <delay_ms>
    LCD_Send4Bits(0x03);
 80003cc:	2003      	movs	r0, #3
 80003ce:	f7ff ff3b 	bl	8000248 <LCD_Send4Bits>
    delay_ms(5);
 80003d2:	2005      	movs	r0, #5
 80003d4:	f7ff fef8 	bl	80001c8 <delay_ms>
    LCD_Send4Bits(0x03);
 80003d8:	2003      	movs	r0, #3
 80003da:	f7ff ff35 	bl	8000248 <LCD_Send4Bits>
    delay_ms(1);
 80003de:	2001      	movs	r0, #1
 80003e0:	f7ff fef2 	bl	80001c8 <delay_ms>
    LCD_Send4Bits(0x02); // 4-bit mode
 80003e4:	2002      	movs	r0, #2
 80003e6:	f7ff ff2f 	bl	8000248 <LCD_Send4Bits>

    LCD_SendCommand(0x28); // 4-bit, 2 lines
 80003ea:	2028      	movs	r0, #40	@ 0x28
 80003ec:	f7ff ff74 	bl	80002d8 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display ON, Cursor OFF
 80003f0:	200c      	movs	r0, #12
 80003f2:	f7ff ff71 	bl	80002d8 <LCD_SendCommand>
    LCD_SendCommand(0x06); // Entry mode
 80003f6:	2006      	movs	r0, #6
 80003f8:	f7ff ff6e 	bl	80002d8 <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear
 80003fc:	2001      	movs	r0, #1
 80003fe:	f7ff ff6b 	bl	80002d8 <LCD_SendCommand>
    delay_ms(5);
 8000402:	2005      	movs	r0, #5
 8000404:	f7ff fee0 	bl	80001c8 <delay_ms>

    // Show "READY" immediately
    LCD_Print("READY");
 8000408:	4805      	ldr	r0, [pc, #20]	@ (8000420 <LCD_Init+0xcc>)
 800040a:	f000 f815 	bl	8000438 <LCD_Print>
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	48000400 	.word	0x48000400
 8000420:	08000788 	.word	0x08000788

08000424 <LCD_Clear>:

void LCD_Clear(void) {
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);
 8000428:	2001      	movs	r0, #1
 800042a:	f7ff ff55 	bl	80002d8 <LCD_SendCommand>
    delay_ms(2);
 800042e:	2002      	movs	r0, #2
 8000430:	f7ff feca 	bl	80001c8 <delay_ms>
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}

08000438 <LCD_Print>:

void LCD_Print(char *str) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000440:	e006      	b.n	8000450 <LCD_Print+0x18>
        LCD_SendData(*str++);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	1c5a      	adds	r2, r3, #1
 8000446:	607a      	str	r2, [r7, #4]
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff63 	bl	8000316 <LCD_SendData>
    while (*str) {
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d1f4      	bne.n	8000442 <LCD_Print+0xa>
    }
}
 8000458:	bf00      	nop
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <main>:
#include "lcd_gpio.h"
#include "ultrasonic_gpio.h"

int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
    LCD_Init();          // LCD shows "READY"
 800046a:	f7ff ff73 	bl	8000354 <LCD_Init>
    Ultrasonic_Init();   // Initialize ultrasonic GPIO
 800046e:	f000 f8bb 	bl	80005e8 <Ultrasonic_Init>

    while (1)
    {
        uint32_t distance = Ultrasonic_Read();
 8000472:	f000 f8dd 	bl	8000630 <Ultrasonic_Read>
 8000476:	6138      	str	r0, [r7, #16]
        LCD_Clear();
 8000478:	f7ff ffd4 	bl	8000424 <LCD_Clear>

        LCD_Print("Dist:");
 800047c:	4829      	ldr	r0, [pc, #164]	@ (8000524 <main+0xc0>)
 800047e:	f7ff ffdb 	bl	8000438 <LCD_Print>
        char buf[10];
        int i = 0, temp = distance;
 8000482:	2300      	movs	r3, #0
 8000484:	61fb      	str	r3, [r7, #28]
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	61bb      	str	r3, [r7, #24]
        if (temp == 0) buf[i++] = '0';
 800048a:	69bb      	ldr	r3, [r7, #24]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d126      	bne.n	80004de <main+0x7a>
 8000490:	69fb      	ldr	r3, [r7, #28]
 8000492:	1c5a      	adds	r2, r3, #1
 8000494:	61fa      	str	r2, [r7, #28]
 8000496:	3320      	adds	r3, #32
 8000498:	443b      	add	r3, r7
 800049a:	2230      	movs	r2, #48	@ 0x30
 800049c:	f803 2c1c 	strb.w	r2, [r3, #-28]
        while (temp > 0) {
 80004a0:	e01d      	b.n	80004de <main+0x7a>
            buf[i++] = (temp % 10) + '0';
 80004a2:	69ba      	ldr	r2, [r7, #24]
 80004a4:	4b20      	ldr	r3, [pc, #128]	@ (8000528 <main+0xc4>)
 80004a6:	fb83 1302 	smull	r1, r3, r3, r2
 80004aa:	1099      	asrs	r1, r3, #2
 80004ac:	17d3      	asrs	r3, r2, #31
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	460b      	mov	r3, r1
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	440b      	add	r3, r1
 80004b6:	005b      	lsls	r3, r3, #1
 80004b8:	1ad1      	subs	r1, r2, r3
 80004ba:	b2ca      	uxtb	r2, r1
 80004bc:	69fb      	ldr	r3, [r7, #28]
 80004be:	1c59      	adds	r1, r3, #1
 80004c0:	61f9      	str	r1, [r7, #28]
 80004c2:	3230      	adds	r2, #48	@ 0x30
 80004c4:	b2d2      	uxtb	r2, r2
 80004c6:	3320      	adds	r3, #32
 80004c8:	443b      	add	r3, r7
 80004ca:	f803 2c1c 	strb.w	r2, [r3, #-28]
            temp /= 10;
 80004ce:	69bb      	ldr	r3, [r7, #24]
 80004d0:	4a15      	ldr	r2, [pc, #84]	@ (8000528 <main+0xc4>)
 80004d2:	fb82 1203 	smull	r1, r2, r2, r3
 80004d6:	1092      	asrs	r2, r2, #2
 80004d8:	17db      	asrs	r3, r3, #31
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	61bb      	str	r3, [r7, #24]
        while (temp > 0) {
 80004de:	69bb      	ldr	r3, [r7, #24]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	dcde      	bgt.n	80004a2 <main+0x3e>
        }
        for (int j = i - 1; j >= 0; j--)
 80004e4:	69fb      	ldr	r3, [r7, #28]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	e009      	b.n	8000500 <main+0x9c>
            LCD_SendData(buf[j]);
 80004ec:	1d3a      	adds	r2, r7, #4
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	4413      	add	r3, r2
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ff0e 	bl	8000316 <LCD_SendData>
        for (int j = i - 1; j >= 0; j--)
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	3b01      	subs	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	2b00      	cmp	r3, #0
 8000504:	daf2      	bge.n	80004ec <main+0x88>
        LCD_Print("cm");
 8000506:	4809      	ldr	r0, [pc, #36]	@ (800052c <main+0xc8>)
 8000508:	f7ff ff96 	bl	8000438 <LCD_Print>

        for (volatile int d = 0; d < 500000; d++);
 800050c:	2300      	movs	r3, #0
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	e002      	b.n	8000518 <main+0xb4>
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	3301      	adds	r3, #1
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	4a05      	ldr	r2, [pc, #20]	@ (8000530 <main+0xcc>)
 800051c:	4293      	cmp	r3, r2
 800051e:	ddf8      	ble.n	8000512 <main+0xae>
    {
 8000520:	e7a7      	b.n	8000472 <main+0xe>
 8000522:	bf00      	nop
 8000524:	08000790 	.word	0x08000790
 8000528:	66666667 	.word	0x66666667
 800052c:	08000798 	.word	0x08000798
 8000530:	0007a11f 	.word	0x0007a11f

08000534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <NMI_Handler+0x4>

0800053c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <HardFault_Handler+0x4>

08000544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <MemManage_Handler+0x4>

0800054c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <BusFault_Handler+0x4>

08000554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <UsageFault_Handler+0x4>

0800055c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800058a:	f000 f8b9 	bl	8000700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000598:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <SystemInit+0x20>)
 800059a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800059e:	4a05      	ldr	r2, [pc, #20]	@ (80005b4 <SystemInit+0x20>)
 80005a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <delay_us>:
#include "ultrasonic_gpio.h"

static void delay_us(uint32_t us) {
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < us * 4; i++) __NOP();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	e003      	b.n	80005ce <delay_us+0x16>
 80005c6:	bf00      	nop
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3301      	adds	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3f6      	bcc.n	80005c6 <delay_us+0xe>
}
 80005d8:	bf00      	nop
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <Ultrasonic_Init>:

void Ultrasonic_Init(void) {
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 80005ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <Ultrasonic_Init+0x40>)
 80005ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <Ultrasonic_Init+0x40>)
 80005f2:	f043 0302 	orr.w	r3, r3, #2
 80005f6:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // TRIG = Output
    TRIG_PORT->MODER &= ~(3 << (2 * TRIG_PIN));
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <Ultrasonic_Init+0x44>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a0b      	ldr	r2, [pc, #44]	@ (800062c <Ultrasonic_Init+0x44>)
 80005fe:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000602:	6013      	str	r3, [r2, #0]
    TRIG_PORT->MODER |=  (1 << (2 * TRIG_PIN));
 8000604:	4b09      	ldr	r3, [pc, #36]	@ (800062c <Ultrasonic_Init+0x44>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a08      	ldr	r2, [pc, #32]	@ (800062c <Ultrasonic_Init+0x44>)
 800060a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800060e:	6013      	str	r3, [r2, #0]

    // ECHO = Input
    ECHO_PORT->MODER &= ~(3 << (2 * ECHO_PIN));
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <Ultrasonic_Init+0x44>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a05      	ldr	r2, [pc, #20]	@ (800062c <Ultrasonic_Init+0x44>)
 8000616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800061a:	6013      	str	r3, [r2, #0]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000
 800062c:	48000400 	.word	0x48000400

08000630 <Ultrasonic_Read>:

uint32_t Ultrasonic_Read(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
    uint32_t count = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]

    // Send trigger pulse
    TRIG_PORT->ODR &= ~(1 << TRIG_PIN);
 800063a:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <Ultrasonic_Read+0x74>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a19      	ldr	r2, [pc, #100]	@ (80006a4 <Ultrasonic_Read+0x74>)
 8000640:	f023 0320 	bic.w	r3, r3, #32
 8000644:	6153      	str	r3, [r2, #20]
    delay_us(2);
 8000646:	2002      	movs	r0, #2
 8000648:	f7ff ffb6 	bl	80005b8 <delay_us>
    TRIG_PORT->ODR |= (1 << TRIG_PIN);
 800064c:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <Ultrasonic_Read+0x74>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a14      	ldr	r2, [pc, #80]	@ (80006a4 <Ultrasonic_Read+0x74>)
 8000652:	f043 0320 	orr.w	r3, r3, #32
 8000656:	6153      	str	r3, [r2, #20]
    delay_us(10);
 8000658:	200a      	movs	r0, #10
 800065a:	f7ff ffad 	bl	80005b8 <delay_us>
    TRIG_PORT->ODR &= ~(1 << TRIG_PIN);
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <Ultrasonic_Read+0x74>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a10      	ldr	r2, [pc, #64]	@ (80006a4 <Ultrasonic_Read+0x74>)
 8000664:	f023 0320 	bic.w	r3, r3, #32
 8000668:	6153      	str	r3, [r2, #20]

    // Wait for ECHO HIGH
    while(!(ECHO_PORT->IDR & (1 << ECHO_PIN)));
 800066a:	bf00      	nop
 800066c:	4b0d      	ldr	r3, [pc, #52]	@ (80006a4 <Ultrasonic_Read+0x74>)
 800066e:	691b      	ldr	r3, [r3, #16]
 8000670:	f003 0310 	and.w	r3, r3, #16
 8000674:	2b00      	cmp	r3, #0
 8000676:	d0f9      	beq.n	800066c <Ultrasonic_Read+0x3c>
    while(ECHO_PORT->IDR & (1 << ECHO_PIN)) {
 8000678:	e005      	b.n	8000686 <Ultrasonic_Read+0x56>
        count++;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3301      	adds	r3, #1
 800067e:	607b      	str	r3, [r7, #4]
        delay_us(1);
 8000680:	2001      	movs	r0, #1
 8000682:	f7ff ff99 	bl	80005b8 <delay_us>
    while(ECHO_PORT->IDR & (1 << ECHO_PIN)) {
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <Ultrasonic_Read+0x74>)
 8000688:	691b      	ldr	r3, [r3, #16]
 800068a:	f003 0310 	and.w	r3, r3, #16
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f3      	bne.n	800067a <Ultrasonic_Read+0x4a>
    }

    // Convert to cm (approx)
    return (count / 58);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <Ultrasonic_Read+0x78>)
 8000696:	fba2 2303 	umull	r2, r3, r2, r3
 800069a:	095b      	lsrs	r3, r3, #5
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	48000400 	.word	0x48000400
 80006a8:	8d3dcb09 	.word	0x8d3dcb09

080006ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006b0:	f7ff ff70 	bl	8000594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	@ (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	@ (80006ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	@ (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	@ (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006da:	f000 f825 	bl	8000728 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006de:	f7ff fec1 	bl	8000464 <main>

080006e2 <LoopForever>:

LoopForever:
    b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80006f0:	080007a4 	.word	0x080007a4
  ldr r2, =_sbss
 80006f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80006f8:	20000024 	.word	0x20000024

080006fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC1_2_IRQHandler>
	...

08000700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <HAL_IncTick+0x20>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <HAL_IncTick+0x24>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4413      	add	r3, r2
 8000710:	4a04      	ldr	r2, [pc, #16]	@ (8000724 <HAL_IncTick+0x24>)
 8000712:	6013      	str	r3, [r2, #0]
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000000 	.word	0x20000000
 8000724:	20000020 	.word	0x20000020

08000728 <__libc_init_array>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	4d0d      	ldr	r5, [pc, #52]	@ (8000760 <__libc_init_array+0x38>)
 800072c:	4c0d      	ldr	r4, [pc, #52]	@ (8000764 <__libc_init_array+0x3c>)
 800072e:	1b64      	subs	r4, r4, r5
 8000730:	10a4      	asrs	r4, r4, #2
 8000732:	2600      	movs	r6, #0
 8000734:	42a6      	cmp	r6, r4
 8000736:	d109      	bne.n	800074c <__libc_init_array+0x24>
 8000738:	4d0b      	ldr	r5, [pc, #44]	@ (8000768 <__libc_init_array+0x40>)
 800073a:	4c0c      	ldr	r4, [pc, #48]	@ (800076c <__libc_init_array+0x44>)
 800073c:	f000 f818 	bl	8000770 <_init>
 8000740:	1b64      	subs	r4, r4, r5
 8000742:	10a4      	asrs	r4, r4, #2
 8000744:	2600      	movs	r6, #0
 8000746:	42a6      	cmp	r6, r4
 8000748:	d105      	bne.n	8000756 <__libc_init_array+0x2e>
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000750:	4798      	blx	r3
 8000752:	3601      	adds	r6, #1
 8000754:	e7ee      	b.n	8000734 <__libc_init_array+0xc>
 8000756:	f855 3b04 	ldr.w	r3, [r5], #4
 800075a:	4798      	blx	r3
 800075c:	3601      	adds	r6, #1
 800075e:	e7f2      	b.n	8000746 <__libc_init_array+0x1e>
 8000760:	0800079c 	.word	0x0800079c
 8000764:	0800079c 	.word	0x0800079c
 8000768:	0800079c 	.word	0x0800079c
 800076c:	080007a0 	.word	0x080007a0

08000770 <_init>:
 8000770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000772:	bf00      	nop
 8000774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000776:	bc08      	pop	{r3}
 8000778:	469e      	mov	lr, r3
 800077a:	4770      	bx	lr

0800077c <_fini>:
 800077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800077e:	bf00      	nop
 8000780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000782:	bc08      	pop	{r3}
 8000784:	469e      	mov	lr, r3
 8000786:	4770      	bx	lr
