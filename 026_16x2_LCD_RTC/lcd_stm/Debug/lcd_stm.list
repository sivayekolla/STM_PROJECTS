
lcd_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001268  08001268  00002268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012cc  080012cc  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080012cc  080012cc  000022cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080012d4  080012d4  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012d4  080012d4  000022d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080012d8  080012d8  000022d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080012dc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000054  08001330  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08001330  000031c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000024f6  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000086c  00000000  00000000  0000557a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b0  00000000  00000000  00005de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001e2  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da3a  00000000  00000000  0000627a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000307a  00000000  00000000  00023cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5925  00000000  00000000  00026d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c653  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d8c  00000000  00000000  0010c698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0010d424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001250 	.word	0x08001250

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001250 	.word	0x08001250

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <delay_us>:
#define D6_PIN   4
#define D7_PIN   5
#define LCD_PORT GPIOB

static void delay_us(uint32_t us)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0; i < us * 4; i++) __NOP();
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	e003      	b.n	8000286 <delay_us+0x16>
 800027e:	bf00      	nop
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	3301      	adds	r3, #1
 8000284:	60fb      	str	r3, [r7, #12]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	68fa      	ldr	r2, [r7, #12]
 800028c:	429a      	cmp	r2, r3
 800028e:	d3f6      	bcc.n	800027e <delay_us+0xe>
}
 8000290:	bf00      	nop
 8000292:	bf00      	nop
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
	...

080002a0 <pulse_enable>:

static void pulse_enable(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
    LCD_PORT->BSRR = (1 << EN_PIN);
 80002a4:	4b06      	ldr	r3, [pc, #24]	@ (80002c0 <pulse_enable+0x20>)
 80002a6:	2202      	movs	r2, #2
 80002a8:	619a      	str	r2, [r3, #24]
    delay_us(1);
 80002aa:	2001      	movs	r0, #1
 80002ac:	f7ff ffe0 	bl	8000270 <delay_us>
    LCD_PORT->BRR = (1 << EN_PIN);
 80002b0:	4b03      	ldr	r3, [pc, #12]	@ (80002c0 <pulse_enable+0x20>)
 80002b2:	2202      	movs	r2, #2
 80002b4:	629a      	str	r2, [r3, #40]	@ 0x28
    delay_us(100);
 80002b6:	2064      	movs	r0, #100	@ 0x64
 80002b8:	f7ff ffda 	bl	8000270 <delay_us>
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	48000400 	.word	0x48000400

080002c4 <lcd_send_nibble>:

static void lcd_send_nibble(uint8_t nibble)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
    LCD_PORT->BRR = (0xF << D4_PIN);
 80002ce:	4b07      	ldr	r3, [pc, #28]	@ (80002ec <lcd_send_nibble+0x28>)
 80002d0:	223c      	movs	r2, #60	@ 0x3c
 80002d2:	629a      	str	r2, [r3, #40]	@ 0x28
    LCD_PORT->BSRR = ((nibble & 0xF) << D4_PIN);
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	4a04      	ldr	r2, [pc, #16]	@ (80002ec <lcd_send_nibble+0x28>)
 80002da:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80002de:	6193      	str	r3, [r2, #24]
    pulse_enable();
 80002e0:	f7ff ffde 	bl	80002a0 <pulse_enable>
}
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	48000400 	.word	0x48000400

080002f0 <lcd_send_cmd>:

static void lcd_send_cmd(uint8_t cmd)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
    LCD_PORT->BRR = (1 << RS_PIN);
 80002fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000328 <lcd_send_cmd+0x38>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	629a      	str	r2, [r3, #40]	@ 0x28
    lcd_send_nibble(cmd >> 4);
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	091b      	lsrs	r3, r3, #4
 8000304:	b2db      	uxtb	r3, r3
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ffdc 	bl	80002c4 <lcd_send_nibble>
    lcd_send_nibble(cmd & 0x0F);
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	b2db      	uxtb	r3, r3
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ffd5 	bl	80002c4 <lcd_send_nibble>
    delay_us(50);
 800031a:	2032      	movs	r0, #50	@ 0x32
 800031c:	f7ff ffa8 	bl	8000270 <delay_us>
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	48000400 	.word	0x48000400

0800032c <lcd_send_data>:

static void lcd_send_data(uint8_t data)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
    LCD_PORT->BSRR = (1 << RS_PIN);
 8000336:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <lcd_send_data+0x38>)
 8000338:	2201      	movs	r2, #1
 800033a:	619a      	str	r2, [r3, #24]
    lcd_send_nibble(data >> 4);
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	091b      	lsrs	r3, r3, #4
 8000340:	b2db      	uxtb	r3, r3
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ffbe 	bl	80002c4 <lcd_send_nibble>
    lcd_send_nibble(data & 0x0F);
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	f003 030f 	and.w	r3, r3, #15
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ffb7 	bl	80002c4 <lcd_send_nibble>
    delay_us(50);
 8000356:	2032      	movs	r0, #50	@ 0x32
 8000358:	f7ff ff8a 	bl	8000270 <delay_us>
}
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	48000400 	.word	0x48000400

08000368 <LCD_Init>:

void LCD_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 800036c:	4b1d      	ldr	r3, [pc, #116]	@ (80003e4 <LCD_Init+0x7c>)
 800036e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000370:	4a1c      	ldr	r2, [pc, #112]	@ (80003e4 <LCD_Init+0x7c>)
 8000372:	f043 0302 	orr.w	r3, r3, #2
 8000376:	64d3      	str	r3, [r2, #76]	@ 0x4c

    LCD_PORT->MODER &= ~(0x3FFFF);
 8000378:	4b1b      	ldr	r3, [pc, #108]	@ (80003e8 <LCD_Init+0x80>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a1a      	ldr	r2, [pc, #104]	@ (80003e8 <LCD_Init+0x80>)
 800037e:	0c9b      	lsrs	r3, r3, #18
 8000380:	049b      	lsls	r3, r3, #18
 8000382:	6013      	str	r3, [r2, #0]
    LCD_PORT->MODER |=  (0x15555);
 8000384:	4b18      	ldr	r3, [pc, #96]	@ (80003e8 <LCD_Init+0x80>)
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	4917      	ldr	r1, [pc, #92]	@ (80003e8 <LCD_Init+0x80>)
 800038a:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <LCD_Init+0x84>)
 800038c:	4313      	orrs	r3, r2
 800038e:	600b      	str	r3, [r1, #0]

    delay_us(15000);
 8000390:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8000394:	f7ff ff6c 	bl	8000270 <delay_us>
    lcd_send_nibble(0x03);
 8000398:	2003      	movs	r0, #3
 800039a:	f7ff ff93 	bl	80002c4 <lcd_send_nibble>
    delay_us(5000);
 800039e:	f241 3088 	movw	r0, #5000	@ 0x1388
 80003a2:	f7ff ff65 	bl	8000270 <delay_us>
    lcd_send_nibble(0x03);
 80003a6:	2003      	movs	r0, #3
 80003a8:	f7ff ff8c 	bl	80002c4 <lcd_send_nibble>
    delay_us(200);
 80003ac:	20c8      	movs	r0, #200	@ 0xc8
 80003ae:	f7ff ff5f 	bl	8000270 <delay_us>
    lcd_send_nibble(0x03);
 80003b2:	2003      	movs	r0, #3
 80003b4:	f7ff ff86 	bl	80002c4 <lcd_send_nibble>
    lcd_send_nibble(0x02);
 80003b8:	2002      	movs	r0, #2
 80003ba:	f7ff ff83 	bl	80002c4 <lcd_send_nibble>

    lcd_send_cmd(0x28); // 4-bit, 2-line, 5x8
 80003be:	2028      	movs	r0, #40	@ 0x28
 80003c0:	f7ff ff96 	bl	80002f0 <lcd_send_cmd>
    lcd_send_cmd(0x0C); // Display ON
 80003c4:	200c      	movs	r0, #12
 80003c6:	f7ff ff93 	bl	80002f0 <lcd_send_cmd>
    lcd_send_cmd(0x06); // Auto increment
 80003ca:	2006      	movs	r0, #6
 80003cc:	f7ff ff90 	bl	80002f0 <lcd_send_cmd>
    lcd_send_cmd(0x01); // Clear
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff ff8d 	bl	80002f0 <lcd_send_cmd>
    delay_us(2000);
 80003d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003da:	f7ff ff49 	bl	8000270 <delay_us>
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000
 80003e8:	48000400 	.word	0x48000400
 80003ec:	00015555 	.word	0x00015555

080003f0 <LCD_Clear>:

void LCD_Clear(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f7ff ff7b 	bl	80002f0 <lcd_send_cmd>
    delay_us(2000);
 80003fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003fe:	f7ff ff37 	bl	8000270 <delay_us>
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}

08000406 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b084      	sub	sp, #16
 800040a:	af00      	add	r7, sp, #0
 800040c:	4603      	mov	r3, r0
 800040e:	460a      	mov	r2, r1
 8000410:	71fb      	strb	r3, [r7, #7]
 8000412:	4613      	mov	r3, r2
 8000414:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0) ? 0x00 : 0x40;
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d101      	bne.n	8000420 <LCD_SetCursor+0x1a>
 800041c:	2300      	movs	r3, #0
 800041e:	e000      	b.n	8000422 <LCD_SetCursor+0x1c>
 8000420:	2340      	movs	r3, #64	@ 0x40
 8000422:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | (addr + col));
 8000424:	7bfa      	ldrb	r2, [r7, #15]
 8000426:	79bb      	ldrb	r3, [r7, #6]
 8000428:	4413      	add	r3, r2
 800042a:	b2db      	uxtb	r3, r3
 800042c:	b25b      	sxtb	r3, r3
 800042e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000432:	b25b      	sxtb	r3, r3
 8000434:	b2db      	uxtb	r3, r3
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff5a 	bl	80002f0 <lcd_send_cmd>
}
 800043c:	bf00      	nop
 800043e:	3710      	adds	r7, #16
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <LCD_Print>:

void LCD_Print(char *str)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    while(*str)
 800044c:	e006      	b.n	800045c <LCD_Print+0x18>
    {
        lcd_send_data(*str++);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	1c5a      	adds	r2, r3, #1
 8000452:	607a      	str	r2, [r7, #4]
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ff68 	bl	800032c <lcd_send_data>
    while(*str)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d1f4      	bne.n	800044e <LCD_Print+0xa>
    }
}
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <main>:
#include "lcd.h"
#include "rtc.h"
#include <stdio.h>

int main(void)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b091      	sub	sp, #68	@ 0x44
 8000474:	af04      	add	r7, sp, #16
    SystemInit();
 8000476:	f000 f9ef 	bl	8000858 <SystemInit>
    LCD_Init();
 800047a:	f7ff ff75 	bl	8000368 <LCD_Init>
    RTC_Init();   // Start RTC (1 Hz tick)
 800047e:	f000 f869 	bl	8000554 <RTC_Init>
    char time_str[16];
    char date_str[16];
    uint8_t h, m, s, d, mo, y;
    char am_pm;

    LCD_Clear();
 8000482:	f7ff ffb5 	bl	80003f0 <LCD_Clear>
    LCD_Print("   HELLO  ");
 8000486:	482e      	ldr	r0, [pc, #184]	@ (8000540 <main+0xd0>)
 8000488:	f7ff ffdc 	bl	8000444 <LCD_Print>
    for (volatile int i=0; i<500000; i++);  // small delay
 800048c:	2300      	movs	r3, #0
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	e002      	b.n	8000498 <main+0x28>
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	3301      	adds	r3, #1
 8000496:	603b      	str	r3, [r7, #0]
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	4a2a      	ldr	r2, [pc, #168]	@ (8000544 <main+0xd4>)
 800049c:	4293      	cmp	r3, r2
 800049e:	ddf8      	ble.n	8000492 <main+0x22>
    LCD_Clear();
 80004a0:	f7ff ffa6 	bl	80003f0 <LCD_Clear>

    while (1)
    {
        RTC_GetTime12(&h, &m, &s, &am_pm);
 80004a4:	1d7b      	adds	r3, r7, #5
 80004a6:	f107 0209 	add.w	r2, r7, #9
 80004aa:	f107 010a 	add.w	r1, r7, #10
 80004ae:	f107 000b 	add.w	r0, r7, #11
 80004b2:	f000 f8c1 	bl	8000638 <RTC_GetTime12>
        RTC_GetDate(&d, &mo, &y);
 80004b6:	1dba      	adds	r2, r7, #6
 80004b8:	1df9      	adds	r1, r7, #7
 80004ba:	f107 0308 	add.w	r3, r7, #8
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 f914 	bl	80006ec <RTC_GetDate>

        snprintf(time_str, sizeof(time_str), "%02d:%02d:%02d %cM", h, m, s, am_pm);
 80004c4:	7afb      	ldrb	r3, [r7, #11]
 80004c6:	461c      	mov	r4, r3
 80004c8:	7abb      	ldrb	r3, [r7, #10]
 80004ca:	7a7a      	ldrb	r2, [r7, #9]
 80004cc:	7979      	ldrb	r1, [r7, #5]
 80004ce:	f107 001c 	add.w	r0, r7, #28
 80004d2:	9102      	str	r1, [sp, #8]
 80004d4:	9201      	str	r2, [sp, #4]
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	4623      	mov	r3, r4
 80004da:	4a1b      	ldr	r2, [pc, #108]	@ (8000548 <main+0xd8>)
 80004dc:	2110      	movs	r1, #16
 80004de:	f000 fa0b 	bl	80008f8 <sniprintf>
        snprintf(date_str, sizeof(date_str), "%02d/%02d/20%02d", d, mo, y);
 80004e2:	7a3b      	ldrb	r3, [r7, #8]
 80004e4:	4619      	mov	r1, r3
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	79ba      	ldrb	r2, [r7, #6]
 80004ea:	f107 000c 	add.w	r0, r7, #12
 80004ee:	9201      	str	r2, [sp, #4]
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	460b      	mov	r3, r1
 80004f4:	4a15      	ldr	r2, [pc, #84]	@ (800054c <main+0xdc>)
 80004f6:	2110      	movs	r1, #16
 80004f8:	f000 f9fe 	bl	80008f8 <sniprintf>

        LCD_Clear();
 80004fc:	f7ff ff78 	bl	80003f0 <LCD_Clear>
        LCD_SetCursor(0,0);
 8000500:	2100      	movs	r1, #0
 8000502:	2000      	movs	r0, #0
 8000504:	f7ff ff7f 	bl	8000406 <LCD_SetCursor>
        LCD_Print(time_str);
 8000508:	f107 031c 	add.w	r3, r7, #28
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff99 	bl	8000444 <LCD_Print>
        LCD_SetCursor(1,0);
 8000512:	2100      	movs	r1, #0
 8000514:	2001      	movs	r0, #1
 8000516:	f7ff ff76 	bl	8000406 <LCD_SetCursor>
        LCD_Print(date_str);
 800051a:	f107 030c 	add.w	r3, r7, #12
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ff90 	bl	8000444 <LCD_Print>

        // Wait until RTC seconds register changes
        uint8_t last = s;
 8000524:	7a7b      	ldrb	r3, [r7, #9]
 8000526:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        while (last == ((RTC->TR >> 0) & 0x7F));  // block until next second
 800052a:	bf00      	nop
 800052c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000530:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <main+0xe0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000538:	429a      	cmp	r2, r3
 800053a:	d0f7      	beq.n	800052c <main+0xbc>
    {
 800053c:	e7b2      	b.n	80004a4 <main+0x34>
 800053e:	bf00      	nop
 8000540:	08001268 	.word	0x08001268
 8000544:	0007a11f 	.word	0x0007a11f
 8000548:	08001274 	.word	0x08001274
 800054c:	08001288 	.word	0x08001288
 8000550:	40002800 	.word	0x40002800

08000554 <RTC_Init>:
#include "rtc.h"

// Initialize RTC with LSE 32.768 kHz clock
void RTC_Init(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;
 8000558:	4b31      	ldr	r3, [pc, #196]	@ (8000620 <RTC_Init+0xcc>)
 800055a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800055c:	4a30      	ldr	r2, [pc, #192]	@ (8000620 <RTC_Init+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000562:	6593      	str	r3, [r2, #88]	@ 0x58
    PWR->CR1 |= PWR_CR1_DBP; // enable backup domain access
 8000564:	4b2f      	ldr	r3, [pc, #188]	@ (8000624 <RTC_Init+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a2e      	ldr	r2, [pc, #184]	@ (8000624 <RTC_Init+0xd0>)
 800056a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800056e:	6013      	str	r3, [r2, #0]

    RCC->BDCR |= RCC_BDCR_LSEON;
 8000570:	4b2b      	ldr	r3, [pc, #172]	@ (8000620 <RTC_Init+0xcc>)
 8000572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000576:	4a2a      	ldr	r2, [pc, #168]	@ (8000620 <RTC_Init+0xcc>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    while(!(RCC->BDCR & RCC_BDCR_LSERDY));
 8000580:	bf00      	nop
 8000582:	4b27      	ldr	r3, [pc, #156]	@ (8000620 <RTC_Init+0xcc>)
 8000584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000588:	f003 0302 	and.w	r3, r3, #2
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f8      	beq.n	8000582 <RTC_Init+0x2e>

    RCC->BDCR &= ~RCC_BDCR_RTCSEL;
 8000590:	4b23      	ldr	r3, [pc, #140]	@ (8000620 <RTC_Init+0xcc>)
 8000592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000596:	4a22      	ldr	r2, [pc, #136]	@ (8000620 <RTC_Init+0xcc>)
 8000598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800059c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    RCC->BDCR |= RCC_BDCR_RTCSEL_0;  // LSE as RTC source
 80005a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000620 <RTC_Init+0xcc>)
 80005a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000620 <RTC_Init+0xcc>)
 80005a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    RCC->BDCR |= RCC_BDCR_RTCEN;
 80005b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000620 <RTC_Init+0xcc>)
 80005b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005b6:	4a1a      	ldr	r2, [pc, #104]	@ (8000620 <RTC_Init+0xcc>)
 80005b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    RTC->WPR = 0xCA;
 80005c0:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <RTC_Init+0xd4>)
 80005c2:	22ca      	movs	r2, #202	@ 0xca
 80005c4:	625a      	str	r2, [r3, #36]	@ 0x24
    RTC->WPR = 0x53;
 80005c6:	4b18      	ldr	r3, [pc, #96]	@ (8000628 <RTC_Init+0xd4>)
 80005c8:	2253      	movs	r2, #83	@ 0x53
 80005ca:	625a      	str	r2, [r3, #36]	@ 0x24

    RTC->ISR |= RTC_ISR_INIT;
 80005cc:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <RTC_Init+0xd4>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	4a15      	ldr	r2, [pc, #84]	@ (8000628 <RTC_Init+0xd4>)
 80005d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d6:	60d3      	str	r3, [r2, #12]
    while(!(RTC->ISR & RTC_ISR_INITF));
 80005d8:	bf00      	nop
 80005da:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <RTC_Init+0xd4>)
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <RTC_Init+0x86>

    RTC->PRER = (127 << 16) | 255;    // 1 Hz clock from 32.768 kHz
 80005e6:	4b10      	ldr	r3, [pc, #64]	@ (8000628 <RTC_Init+0xd4>)
 80005e8:	4a10      	ldr	r2, [pc, #64]	@ (800062c <RTC_Init+0xd8>)
 80005ea:	611a      	str	r2, [r3, #16]
    RTC->CR |= RTC_CR_FMT;            // 12 h mode
 80005ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <RTC_Init+0xd4>)
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <RTC_Init+0xd4>)
 80005f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005f6:	6093      	str	r3, [r2, #8]

    // Set initial India time (UTC+5:30)
    RTC->TR = (0x10 << 16) | (0x45 << 8) | (0x00); // 10:45:00
 80005f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <RTC_Init+0xd4>)
 80005fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000630 <RTC_Init+0xdc>)
 80005fc:	601a      	str	r2, [r3, #0]
    RTC->DR = (0x25 << 16) | (0x10 << 8) | (0x25); // 25-Oct-2025
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <RTC_Init+0xd4>)
 8000600:	4a0c      	ldr	r2, [pc, #48]	@ (8000634 <RTC_Init+0xe0>)
 8000602:	605a      	str	r2, [r3, #4]

    RTC->ISR &= ~RTC_ISR_INIT;
 8000604:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <RTC_Init+0xd4>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	4a07      	ldr	r2, [pc, #28]	@ (8000628 <RTC_Init+0xd4>)
 800060a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800060e:	60d3      	str	r3, [r2, #12]
    RTC->WPR = 0xFF;
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <RTC_Init+0xd4>)
 8000612:	22ff      	movs	r2, #255	@ 0xff
 8000614:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000
 8000624:	40007000 	.word	0x40007000
 8000628:	40002800 	.word	0x40002800
 800062c:	007f00ff 	.word	0x007f00ff
 8000630:	00104500 	.word	0x00104500
 8000634:	00251025 	.word	0x00251025

08000638 <RTC_GetTime12>:

void RTC_GetTime12(uint8_t *h, uint8_t *m, uint8_t *s, char *am_pm)
{
 8000638:	b480      	push	{r7}
 800063a:	b087      	sub	sp, #28
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
 8000644:	603b      	str	r3, [r7, #0]
    uint32_t tr = RTC->TR;
 8000646:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <RTC_GetTime12+0xb0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	617b      	str	r3, [r7, #20]
    *h = ((tr >> 20) & 0x3)*10 + ((tr >> 16) & 0xF);
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	0d1b      	lsrs	r3, r3, #20
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f003 0303 	and.w	r3, r3, #3
 8000656:	b2db      	uxtb	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	0092      	lsls	r2, r2, #2
 800065c:	4413      	add	r3, r2
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	b2da      	uxtb	r2, r3
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	0c1b      	lsrs	r3, r3, #16
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 030f 	and.w	r3, r3, #15
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4413      	add	r3, r2
 8000670:	b2da      	uxtb	r2, r3
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	701a      	strb	r2, [r3, #0]
    *m = ((tr >> 12) & 0x7)*10 + ((tr >> 8) & 0xF);
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	0b1b      	lsrs	r3, r3, #12
 800067a:	b2db      	uxtb	r3, r3
 800067c:	f003 0307 	and.w	r3, r3, #7
 8000680:	b2db      	uxtb	r3, r3
 8000682:	461a      	mov	r2, r3
 8000684:	0092      	lsls	r2, r2, #2
 8000686:	4413      	add	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	b2da      	uxtb	r2, r3
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	0a1b      	lsrs	r3, r3, #8
 8000690:	b2db      	uxtb	r3, r3
 8000692:	f003 030f 	and.w	r3, r3, #15
 8000696:	b2db      	uxtb	r3, r3
 8000698:	4413      	add	r3, r2
 800069a:	b2da      	uxtb	r2, r3
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	701a      	strb	r2, [r3, #0]
    *s = ((tr >> 4) & 0x7)*10 + (tr & 0xF);
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	091b      	lsrs	r3, r3, #4
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	0092      	lsls	r2, r2, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	4413      	add	r3, r2
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	701a      	strb	r2, [r3, #0]
    *am_pm = (tr & RTC_TR_PM) ? 'P' : 'A';
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <RTC_GetTime12+0x9e>
 80006d2:	2250      	movs	r2, #80	@ 0x50
 80006d4:	e000      	b.n	80006d8 <RTC_GetTime12+0xa0>
 80006d6:	2241      	movs	r2, #65	@ 0x41
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	701a      	strb	r2, [r3, #0]
}
 80006dc:	bf00      	nop
 80006de:	371c      	adds	r7, #28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	40002800 	.word	0x40002800

080006ec <RTC_GetDate>:

void RTC_GetDate(uint8_t *d, uint8_t *mo, uint8_t *y)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b087      	sub	sp, #28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
    uint32_t dr = RTC->DR;
 80006f8:	4b23      	ldr	r3, [pc, #140]	@ (8000788 <RTC_GetDate+0x9c>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	617b      	str	r3, [r7, #20]
    *d  = ((dr >> 20)&0x3)*10 + ((dr >>16)&0xF);
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	0d1b      	lsrs	r3, r3, #20
 8000702:	b2db      	uxtb	r3, r3
 8000704:	f003 0303 	and.w	r3, r3, #3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	461a      	mov	r2, r3
 800070c:	0092      	lsls	r2, r2, #2
 800070e:	4413      	add	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	b2da      	uxtb	r2, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	0c1b      	lsrs	r3, r3, #16
 8000718:	b2db      	uxtb	r3, r3
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4413      	add	r3, r2
 8000722:	b2da      	uxtb	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	701a      	strb	r2, [r3, #0]
    *mo = ((dr >> 12)&0x1)*10 + ((dr >> 8)&0xF);
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	0b1b      	lsrs	r3, r3, #12
 800072c:	b2db      	uxtb	r3, r3
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	b2db      	uxtb	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	0092      	lsls	r2, r2, #2
 8000738:	4413      	add	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 030f 	and.w	r3, r3, #15
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4413      	add	r3, r2
 800074c:	b2da      	uxtb	r2, r3
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	701a      	strb	r2, [r3, #0]
    *y  = ((dr >> 4)&0xF)*10 + (dr & 0xF);
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	091b      	lsrs	r3, r3, #4
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 030f 	and.w	r3, r3, #15
 800075c:	b2db      	uxtb	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	0092      	lsls	r2, r2, #2
 8000762:	4413      	add	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f003 030f 	and.w	r3, r3, #15
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4413      	add	r3, r2
 8000774:	b2da      	uxtb	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	701a      	strb	r2, [r3, #0]
}
 800077a:	bf00      	nop
 800077c:	371c      	adds	r7, #28
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40002800 	.word	0x40002800

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <NMI_Handler+0x4>

08000794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <MemManage_Handler+0x4>

080007a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e2:	f000 f875 	bl	80008d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f4:	4a14      	ldr	r2, [pc, #80]	@ (8000848 <_sbrk+0x5c>)
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <_sbrk+0x60>)
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000800:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <_sbrk+0x64>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <_sbrk+0x64>)
 800080a:	4a12      	ldr	r2, [pc, #72]	@ (8000854 <_sbrk+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <_sbrk+0x64>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	429a      	cmp	r2, r3
 800081a:	d207      	bcs.n	800082c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800081c:	f000 f8a2 	bl	8000964 <__errno>
 8000820:	4603      	mov	r3, r0
 8000822:	220c      	movs	r2, #12
 8000824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000826:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800082a:	e009      	b.n	8000840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800082c:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <_sbrk+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000832:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <_sbrk+0x64>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	4a05      	ldr	r2, [pc, #20]	@ (8000850 <_sbrk+0x64>)
 800083c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800083e:	68fb      	ldr	r3, [r7, #12]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20018000 	.word	0x20018000
 800084c:	00000400 	.word	0x00000400
 8000850:	20000070 	.word	0x20000070
 8000854:	200001c0 	.word	0x200001c0

08000858 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	@ (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800087c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000880:	f7ff ffea 	bl	8000858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	@ (80008b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	@ (80008bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <LoopForever+0xe>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	@ (80008c8 <LoopForever+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008aa:	f000 f861 	bl	8000970 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ae:	f7ff fddf 	bl	8000470 <main>

080008b2 <LoopForever>:

LoopForever:
    b LoopForever
 80008b2:	e7fe      	b.n	80008b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80008c0:	080012dc 	.word	0x080012dc
  ldr r2, =_sbss
 80008c4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80008c8:	200001c0 	.word	0x200001c0

080008cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_2_IRQHandler>
	...

080008d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_IncTick+0x20>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_IncTick+0x24>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a04      	ldr	r2, [pc, #16]	@ (80008f4 <HAL_IncTick+0x24>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000074 	.word	0x20000074

080008f8 <sniprintf>:
 80008f8:	b40c      	push	{r2, r3}
 80008fa:	b530      	push	{r4, r5, lr}
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <sniprintf+0x68>)
 80008fe:	1e0c      	subs	r4, r1, #0
 8000900:	681d      	ldr	r5, [r3, #0]
 8000902:	b09d      	sub	sp, #116	@ 0x74
 8000904:	da08      	bge.n	8000918 <sniprintf+0x20>
 8000906:	238b      	movs	r3, #139	@ 0x8b
 8000908:	602b      	str	r3, [r5, #0]
 800090a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800090e:	b01d      	add	sp, #116	@ 0x74
 8000910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000914:	b002      	add	sp, #8
 8000916:	4770      	bx	lr
 8000918:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800091c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	931b      	str	r3, [sp, #108]	@ 0x6c
 8000926:	bf14      	ite	ne
 8000928:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800092c:	4623      	moveq	r3, r4
 800092e:	9304      	str	r3, [sp, #16]
 8000930:	9307      	str	r3, [sp, #28]
 8000932:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000936:	9002      	str	r0, [sp, #8]
 8000938:	9006      	str	r0, [sp, #24]
 800093a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800093e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8000940:	ab21      	add	r3, sp, #132	@ 0x84
 8000942:	a902      	add	r1, sp, #8
 8000944:	4628      	mov	r0, r5
 8000946:	9301      	str	r3, [sp, #4]
 8000948:	f000 f894 	bl	8000a74 <_svfiprintf_r>
 800094c:	1c43      	adds	r3, r0, #1
 800094e:	bfbc      	itt	lt
 8000950:	238b      	movlt	r3, #139	@ 0x8b
 8000952:	602b      	strlt	r3, [r5, #0]
 8000954:	2c00      	cmp	r4, #0
 8000956:	d0da      	beq.n	800090e <sniprintf+0x16>
 8000958:	9b02      	ldr	r3, [sp, #8]
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e7d6      	b.n	800090e <sniprintf+0x16>
 8000960:	20000004 	.word	0x20000004

08000964 <__errno>:
 8000964:	4b01      	ldr	r3, [pc, #4]	@ (800096c <__errno+0x8>)
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000004 	.word	0x20000004

08000970 <__libc_init_array>:
 8000970:	b570      	push	{r4, r5, r6, lr}
 8000972:	4d0d      	ldr	r5, [pc, #52]	@ (80009a8 <__libc_init_array+0x38>)
 8000974:	4c0d      	ldr	r4, [pc, #52]	@ (80009ac <__libc_init_array+0x3c>)
 8000976:	1b64      	subs	r4, r4, r5
 8000978:	10a4      	asrs	r4, r4, #2
 800097a:	2600      	movs	r6, #0
 800097c:	42a6      	cmp	r6, r4
 800097e:	d109      	bne.n	8000994 <__libc_init_array+0x24>
 8000980:	4d0b      	ldr	r5, [pc, #44]	@ (80009b0 <__libc_init_array+0x40>)
 8000982:	4c0c      	ldr	r4, [pc, #48]	@ (80009b4 <__libc_init_array+0x44>)
 8000984:	f000 fc64 	bl	8001250 <_init>
 8000988:	1b64      	subs	r4, r4, r5
 800098a:	10a4      	asrs	r4, r4, #2
 800098c:	2600      	movs	r6, #0
 800098e:	42a6      	cmp	r6, r4
 8000990:	d105      	bne.n	800099e <__libc_init_array+0x2e>
 8000992:	bd70      	pop	{r4, r5, r6, pc}
 8000994:	f855 3b04 	ldr.w	r3, [r5], #4
 8000998:	4798      	blx	r3
 800099a:	3601      	adds	r6, #1
 800099c:	e7ee      	b.n	800097c <__libc_init_array+0xc>
 800099e:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a2:	4798      	blx	r3
 80009a4:	3601      	adds	r6, #1
 80009a6:	e7f2      	b.n	800098e <__libc_init_array+0x1e>
 80009a8:	080012d4 	.word	0x080012d4
 80009ac:	080012d4 	.word	0x080012d4
 80009b0:	080012d4 	.word	0x080012d4
 80009b4:	080012d8 	.word	0x080012d8

080009b8 <__retarget_lock_acquire_recursive>:
 80009b8:	4770      	bx	lr

080009ba <__retarget_lock_release_recursive>:
 80009ba:	4770      	bx	lr

080009bc <__ssputs_r>:
 80009bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c0:	688e      	ldr	r6, [r1, #8]
 80009c2:	461f      	mov	r7, r3
 80009c4:	42be      	cmp	r6, r7
 80009c6:	680b      	ldr	r3, [r1, #0]
 80009c8:	4682      	mov	sl, r0
 80009ca:	460c      	mov	r4, r1
 80009cc:	4690      	mov	r8, r2
 80009ce:	d82d      	bhi.n	8000a2c <__ssputs_r+0x70>
 80009d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80009d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80009d8:	d026      	beq.n	8000a28 <__ssputs_r+0x6c>
 80009da:	6965      	ldr	r5, [r4, #20]
 80009dc:	6909      	ldr	r1, [r1, #16]
 80009de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80009e2:	eba3 0901 	sub.w	r9, r3, r1
 80009e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80009ea:	1c7b      	adds	r3, r7, #1
 80009ec:	444b      	add	r3, r9
 80009ee:	106d      	asrs	r5, r5, #1
 80009f0:	429d      	cmp	r5, r3
 80009f2:	bf38      	it	cc
 80009f4:	461d      	movcc	r5, r3
 80009f6:	0553      	lsls	r3, r2, #21
 80009f8:	d527      	bpl.n	8000a4a <__ssputs_r+0x8e>
 80009fa:	4629      	mov	r1, r5
 80009fc:	f000 f958 	bl	8000cb0 <_malloc_r>
 8000a00:	4606      	mov	r6, r0
 8000a02:	b360      	cbz	r0, 8000a5e <__ssputs_r+0xa2>
 8000a04:	6921      	ldr	r1, [r4, #16]
 8000a06:	464a      	mov	r2, r9
 8000a08:	f000 fbc2 	bl	8001190 <memcpy>
 8000a0c:	89a3      	ldrh	r3, [r4, #12]
 8000a0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a16:	81a3      	strh	r3, [r4, #12]
 8000a18:	6126      	str	r6, [r4, #16]
 8000a1a:	6165      	str	r5, [r4, #20]
 8000a1c:	444e      	add	r6, r9
 8000a1e:	eba5 0509 	sub.w	r5, r5, r9
 8000a22:	6026      	str	r6, [r4, #0]
 8000a24:	60a5      	str	r5, [r4, #8]
 8000a26:	463e      	mov	r6, r7
 8000a28:	42be      	cmp	r6, r7
 8000a2a:	d900      	bls.n	8000a2e <__ssputs_r+0x72>
 8000a2c:	463e      	mov	r6, r7
 8000a2e:	6820      	ldr	r0, [r4, #0]
 8000a30:	4632      	mov	r2, r6
 8000a32:	4641      	mov	r1, r8
 8000a34:	f000 fb82 	bl	800113c <memmove>
 8000a38:	68a3      	ldr	r3, [r4, #8]
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	60a3      	str	r3, [r4, #8]
 8000a3e:	6823      	ldr	r3, [r4, #0]
 8000a40:	4433      	add	r3, r6
 8000a42:	6023      	str	r3, [r4, #0]
 8000a44:	2000      	movs	r0, #0
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	462a      	mov	r2, r5
 8000a4c:	f000 fb48 	bl	80010e0 <_realloc_r>
 8000a50:	4606      	mov	r6, r0
 8000a52:	2800      	cmp	r0, #0
 8000a54:	d1e0      	bne.n	8000a18 <__ssputs_r+0x5c>
 8000a56:	6921      	ldr	r1, [r4, #16]
 8000a58:	4650      	mov	r0, sl
 8000a5a:	f000 fba7 	bl	80011ac <_free_r>
 8000a5e:	230c      	movs	r3, #12
 8000a60:	f8ca 3000 	str.w	r3, [sl]
 8000a64:	89a3      	ldrh	r3, [r4, #12]
 8000a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a6a:	81a3      	strh	r3, [r4, #12]
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a70:	e7e9      	b.n	8000a46 <__ssputs_r+0x8a>
	...

08000a74 <_svfiprintf_r>:
 8000a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a78:	4698      	mov	r8, r3
 8000a7a:	898b      	ldrh	r3, [r1, #12]
 8000a7c:	061b      	lsls	r3, r3, #24
 8000a7e:	b09d      	sub	sp, #116	@ 0x74
 8000a80:	4607      	mov	r7, r0
 8000a82:	460d      	mov	r5, r1
 8000a84:	4614      	mov	r4, r2
 8000a86:	d510      	bpl.n	8000aaa <_svfiprintf_r+0x36>
 8000a88:	690b      	ldr	r3, [r1, #16]
 8000a8a:	b973      	cbnz	r3, 8000aaa <_svfiprintf_r+0x36>
 8000a8c:	2140      	movs	r1, #64	@ 0x40
 8000a8e:	f000 f90f 	bl	8000cb0 <_malloc_r>
 8000a92:	6028      	str	r0, [r5, #0]
 8000a94:	6128      	str	r0, [r5, #16]
 8000a96:	b930      	cbnz	r0, 8000aa6 <_svfiprintf_r+0x32>
 8000a98:	230c      	movs	r3, #12
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000aa0:	b01d      	add	sp, #116	@ 0x74
 8000aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aa6:	2340      	movs	r3, #64	@ 0x40
 8000aa8:	616b      	str	r3, [r5, #20]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8000aae:	2320      	movs	r3, #32
 8000ab0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000ab4:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ab8:	2330      	movs	r3, #48	@ 0x30
 8000aba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000c58 <_svfiprintf_r+0x1e4>
 8000abe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ac2:	f04f 0901 	mov.w	r9, #1
 8000ac6:	4623      	mov	r3, r4
 8000ac8:	469a      	mov	sl, r3
 8000aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ace:	b10a      	cbz	r2, 8000ad4 <_svfiprintf_r+0x60>
 8000ad0:	2a25      	cmp	r2, #37	@ 0x25
 8000ad2:	d1f9      	bne.n	8000ac8 <_svfiprintf_r+0x54>
 8000ad4:	ebba 0b04 	subs.w	fp, sl, r4
 8000ad8:	d00b      	beq.n	8000af2 <_svfiprintf_r+0x7e>
 8000ada:	465b      	mov	r3, fp
 8000adc:	4622      	mov	r2, r4
 8000ade:	4629      	mov	r1, r5
 8000ae0:	4638      	mov	r0, r7
 8000ae2:	f7ff ff6b 	bl	80009bc <__ssputs_r>
 8000ae6:	3001      	adds	r0, #1
 8000ae8:	f000 80a7 	beq.w	8000c3a <_svfiprintf_r+0x1c6>
 8000aec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000aee:	445a      	add	r2, fp
 8000af0:	9209      	str	r2, [sp, #36]	@ 0x24
 8000af2:	f89a 3000 	ldrb.w	r3, [sl]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 809f 	beq.w	8000c3a <_svfiprintf_r+0x1c6>
 8000afc:	2300      	movs	r3, #0
 8000afe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b06:	f10a 0a01 	add.w	sl, sl, #1
 8000b0a:	9304      	str	r3, [sp, #16]
 8000b0c:	9307      	str	r3, [sp, #28]
 8000b0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b12:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b14:	4654      	mov	r4, sl
 8000b16:	2205      	movs	r2, #5
 8000b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b1c:	484e      	ldr	r0, [pc, #312]	@ (8000c58 <_svfiprintf_r+0x1e4>)
 8000b1e:	f7ff fb57 	bl	80001d0 <memchr>
 8000b22:	9a04      	ldr	r2, [sp, #16]
 8000b24:	b9d8      	cbnz	r0, 8000b5e <_svfiprintf_r+0xea>
 8000b26:	06d0      	lsls	r0, r2, #27
 8000b28:	bf44      	itt	mi
 8000b2a:	2320      	movmi	r3, #32
 8000b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b30:	0711      	lsls	r1, r2, #28
 8000b32:	bf44      	itt	mi
 8000b34:	232b      	movmi	r3, #43	@ 0x2b
 8000b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8000b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b40:	d015      	beq.n	8000b6e <_svfiprintf_r+0xfa>
 8000b42:	9a07      	ldr	r2, [sp, #28]
 8000b44:	4654      	mov	r4, sl
 8000b46:	2000      	movs	r0, #0
 8000b48:	f04f 0c0a 	mov.w	ip, #10
 8000b4c:	4621      	mov	r1, r4
 8000b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b52:	3b30      	subs	r3, #48	@ 0x30
 8000b54:	2b09      	cmp	r3, #9
 8000b56:	d94b      	bls.n	8000bf0 <_svfiprintf_r+0x17c>
 8000b58:	b1b0      	cbz	r0, 8000b88 <_svfiprintf_r+0x114>
 8000b5a:	9207      	str	r2, [sp, #28]
 8000b5c:	e014      	b.n	8000b88 <_svfiprintf_r+0x114>
 8000b5e:	eba0 0308 	sub.w	r3, r0, r8
 8000b62:	fa09 f303 	lsl.w	r3, r9, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	9304      	str	r3, [sp, #16]
 8000b6a:	46a2      	mov	sl, r4
 8000b6c:	e7d2      	b.n	8000b14 <_svfiprintf_r+0xa0>
 8000b6e:	9b03      	ldr	r3, [sp, #12]
 8000b70:	1d19      	adds	r1, r3, #4
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	9103      	str	r1, [sp, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bfbb      	ittet	lt
 8000b7a:	425b      	neglt	r3, r3
 8000b7c:	f042 0202 	orrlt.w	r2, r2, #2
 8000b80:	9307      	strge	r3, [sp, #28]
 8000b82:	9307      	strlt	r3, [sp, #28]
 8000b84:	bfb8      	it	lt
 8000b86:	9204      	strlt	r2, [sp, #16]
 8000b88:	7823      	ldrb	r3, [r4, #0]
 8000b8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b8c:	d10a      	bne.n	8000ba4 <_svfiprintf_r+0x130>
 8000b8e:	7863      	ldrb	r3, [r4, #1]
 8000b90:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b92:	d132      	bne.n	8000bfa <_svfiprintf_r+0x186>
 8000b94:	9b03      	ldr	r3, [sp, #12]
 8000b96:	1d1a      	adds	r2, r3, #4
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	9203      	str	r2, [sp, #12]
 8000b9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000ba0:	3402      	adds	r4, #2
 8000ba2:	9305      	str	r3, [sp, #20]
 8000ba4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000c68 <_svfiprintf_r+0x1f4>
 8000ba8:	7821      	ldrb	r1, [r4, #0]
 8000baa:	2203      	movs	r2, #3
 8000bac:	4650      	mov	r0, sl
 8000bae:	f7ff fb0f 	bl	80001d0 <memchr>
 8000bb2:	b138      	cbz	r0, 8000bc4 <_svfiprintf_r+0x150>
 8000bb4:	9b04      	ldr	r3, [sp, #16]
 8000bb6:	eba0 000a 	sub.w	r0, r0, sl
 8000bba:	2240      	movs	r2, #64	@ 0x40
 8000bbc:	4082      	lsls	r2, r0
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	3401      	adds	r4, #1
 8000bc2:	9304      	str	r3, [sp, #16]
 8000bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bc8:	4824      	ldr	r0, [pc, #144]	@ (8000c5c <_svfiprintf_r+0x1e8>)
 8000bca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000bce:	2206      	movs	r2, #6
 8000bd0:	f7ff fafe 	bl	80001d0 <memchr>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d036      	beq.n	8000c46 <_svfiprintf_r+0x1d2>
 8000bd8:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <_svfiprintf_r+0x1ec>)
 8000bda:	bb1b      	cbnz	r3, 8000c24 <_svfiprintf_r+0x1b0>
 8000bdc:	9b03      	ldr	r3, [sp, #12]
 8000bde:	3307      	adds	r3, #7
 8000be0:	f023 0307 	bic.w	r3, r3, #7
 8000be4:	3308      	adds	r3, #8
 8000be6:	9303      	str	r3, [sp, #12]
 8000be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000bea:	4433      	add	r3, r6
 8000bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8000bee:	e76a      	b.n	8000ac6 <_svfiprintf_r+0x52>
 8000bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8000bf4:	460c      	mov	r4, r1
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	e7a8      	b.n	8000b4c <_svfiprintf_r+0xd8>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	3401      	adds	r4, #1
 8000bfe:	9305      	str	r3, [sp, #20]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f04f 0c0a 	mov.w	ip, #10
 8000c06:	4620      	mov	r0, r4
 8000c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c0c:	3a30      	subs	r2, #48	@ 0x30
 8000c0e:	2a09      	cmp	r2, #9
 8000c10:	d903      	bls.n	8000c1a <_svfiprintf_r+0x1a6>
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0c6      	beq.n	8000ba4 <_svfiprintf_r+0x130>
 8000c16:	9105      	str	r1, [sp, #20]
 8000c18:	e7c4      	b.n	8000ba4 <_svfiprintf_r+0x130>
 8000c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c1e:	4604      	mov	r4, r0
 8000c20:	2301      	movs	r3, #1
 8000c22:	e7f0      	b.n	8000c06 <_svfiprintf_r+0x192>
 8000c24:	ab03      	add	r3, sp, #12
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	462a      	mov	r2, r5
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <_svfiprintf_r+0x1f0>)
 8000c2c:	a904      	add	r1, sp, #16
 8000c2e:	4638      	mov	r0, r7
 8000c30:	f3af 8000 	nop.w
 8000c34:	1c42      	adds	r2, r0, #1
 8000c36:	4606      	mov	r6, r0
 8000c38:	d1d6      	bne.n	8000be8 <_svfiprintf_r+0x174>
 8000c3a:	89ab      	ldrh	r3, [r5, #12]
 8000c3c:	065b      	lsls	r3, r3, #25
 8000c3e:	f53f af2d 	bmi.w	8000a9c <_svfiprintf_r+0x28>
 8000c42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c44:	e72c      	b.n	8000aa0 <_svfiprintf_r+0x2c>
 8000c46:	ab03      	add	r3, sp, #12
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	462a      	mov	r2, r5
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <_svfiprintf_r+0x1f0>)
 8000c4e:	a904      	add	r1, sp, #16
 8000c50:	4638      	mov	r0, r7
 8000c52:	f000 f91b 	bl	8000e8c <_printf_i>
 8000c56:	e7ed      	b.n	8000c34 <_svfiprintf_r+0x1c0>
 8000c58:	08001299 	.word	0x08001299
 8000c5c:	080012a3 	.word	0x080012a3
 8000c60:	00000000 	.word	0x00000000
 8000c64:	080009bd 	.word	0x080009bd
 8000c68:	0800129f 	.word	0x0800129f

08000c6c <sbrk_aligned>:
 8000c6c:	b570      	push	{r4, r5, r6, lr}
 8000c6e:	4e0f      	ldr	r6, [pc, #60]	@ (8000cac <sbrk_aligned+0x40>)
 8000c70:	460c      	mov	r4, r1
 8000c72:	6831      	ldr	r1, [r6, #0]
 8000c74:	4605      	mov	r5, r0
 8000c76:	b911      	cbnz	r1, 8000c7e <sbrk_aligned+0x12>
 8000c78:	f000 fa7a 	bl	8001170 <_sbrk_r>
 8000c7c:	6030      	str	r0, [r6, #0]
 8000c7e:	4621      	mov	r1, r4
 8000c80:	4628      	mov	r0, r5
 8000c82:	f000 fa75 	bl	8001170 <_sbrk_r>
 8000c86:	1c43      	adds	r3, r0, #1
 8000c88:	d103      	bne.n	8000c92 <sbrk_aligned+0x26>
 8000c8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000c8e:	4620      	mov	r0, r4
 8000c90:	bd70      	pop	{r4, r5, r6, pc}
 8000c92:	1cc4      	adds	r4, r0, #3
 8000c94:	f024 0403 	bic.w	r4, r4, #3
 8000c98:	42a0      	cmp	r0, r4
 8000c9a:	d0f8      	beq.n	8000c8e <sbrk_aligned+0x22>
 8000c9c:	1a21      	subs	r1, r4, r0
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	f000 fa66 	bl	8001170 <_sbrk_r>
 8000ca4:	3001      	adds	r0, #1
 8000ca6:	d1f2      	bne.n	8000c8e <sbrk_aligned+0x22>
 8000ca8:	e7ef      	b.n	8000c8a <sbrk_aligned+0x1e>
 8000caa:	bf00      	nop
 8000cac:	200001b4 	.word	0x200001b4

08000cb0 <_malloc_r>:
 8000cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cb4:	1ccd      	adds	r5, r1, #3
 8000cb6:	f025 0503 	bic.w	r5, r5, #3
 8000cba:	3508      	adds	r5, #8
 8000cbc:	2d0c      	cmp	r5, #12
 8000cbe:	bf38      	it	cc
 8000cc0:	250c      	movcc	r5, #12
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	db01      	blt.n	8000ccc <_malloc_r+0x1c>
 8000cc8:	42a9      	cmp	r1, r5
 8000cca:	d904      	bls.n	8000cd6 <_malloc_r+0x26>
 8000ccc:	230c      	movs	r3, #12
 8000cce:	6033      	str	r3, [r6, #0]
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000dac <_malloc_r+0xfc>
 8000cda:	f000 f9f5 	bl	80010c8 <__malloc_lock>
 8000cde:	f8d8 3000 	ldr.w	r3, [r8]
 8000ce2:	461c      	mov	r4, r3
 8000ce4:	bb44      	cbnz	r4, 8000d38 <_malloc_r+0x88>
 8000ce6:	4629      	mov	r1, r5
 8000ce8:	4630      	mov	r0, r6
 8000cea:	f7ff ffbf 	bl	8000c6c <sbrk_aligned>
 8000cee:	1c43      	adds	r3, r0, #1
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	d158      	bne.n	8000da6 <_malloc_r+0xf6>
 8000cf4:	f8d8 4000 	ldr.w	r4, [r8]
 8000cf8:	4627      	mov	r7, r4
 8000cfa:	2f00      	cmp	r7, #0
 8000cfc:	d143      	bne.n	8000d86 <_malloc_r+0xd6>
 8000cfe:	2c00      	cmp	r4, #0
 8000d00:	d04b      	beq.n	8000d9a <_malloc_r+0xea>
 8000d02:	6823      	ldr	r3, [r4, #0]
 8000d04:	4639      	mov	r1, r7
 8000d06:	4630      	mov	r0, r6
 8000d08:	eb04 0903 	add.w	r9, r4, r3
 8000d0c:	f000 fa30 	bl	8001170 <_sbrk_r>
 8000d10:	4581      	cmp	r9, r0
 8000d12:	d142      	bne.n	8000d9a <_malloc_r+0xea>
 8000d14:	6821      	ldr	r1, [r4, #0]
 8000d16:	1a6d      	subs	r5, r5, r1
 8000d18:	4629      	mov	r1, r5
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	f7ff ffa6 	bl	8000c6c <sbrk_aligned>
 8000d20:	3001      	adds	r0, #1
 8000d22:	d03a      	beq.n	8000d9a <_malloc_r+0xea>
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	442b      	add	r3, r5
 8000d28:	6023      	str	r3, [r4, #0]
 8000d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	bb62      	cbnz	r2, 8000d8c <_malloc_r+0xdc>
 8000d32:	f8c8 7000 	str.w	r7, [r8]
 8000d36:	e00f      	b.n	8000d58 <_malloc_r+0xa8>
 8000d38:	6822      	ldr	r2, [r4, #0]
 8000d3a:	1b52      	subs	r2, r2, r5
 8000d3c:	d420      	bmi.n	8000d80 <_malloc_r+0xd0>
 8000d3e:	2a0b      	cmp	r2, #11
 8000d40:	d917      	bls.n	8000d72 <_malloc_r+0xc2>
 8000d42:	1961      	adds	r1, r4, r5
 8000d44:	42a3      	cmp	r3, r4
 8000d46:	6025      	str	r5, [r4, #0]
 8000d48:	bf18      	it	ne
 8000d4a:	6059      	strne	r1, [r3, #4]
 8000d4c:	6863      	ldr	r3, [r4, #4]
 8000d4e:	bf08      	it	eq
 8000d50:	f8c8 1000 	streq.w	r1, [r8]
 8000d54:	5162      	str	r2, [r4, r5]
 8000d56:	604b      	str	r3, [r1, #4]
 8000d58:	4630      	mov	r0, r6
 8000d5a:	f000 f9bb 	bl	80010d4 <__malloc_unlock>
 8000d5e:	f104 000b 	add.w	r0, r4, #11
 8000d62:	1d23      	adds	r3, r4, #4
 8000d64:	f020 0007 	bic.w	r0, r0, #7
 8000d68:	1ac2      	subs	r2, r0, r3
 8000d6a:	bf1c      	itt	ne
 8000d6c:	1a1b      	subne	r3, r3, r0
 8000d6e:	50a3      	strne	r3, [r4, r2]
 8000d70:	e7af      	b.n	8000cd2 <_malloc_r+0x22>
 8000d72:	6862      	ldr	r2, [r4, #4]
 8000d74:	42a3      	cmp	r3, r4
 8000d76:	bf0c      	ite	eq
 8000d78:	f8c8 2000 	streq.w	r2, [r8]
 8000d7c:	605a      	strne	r2, [r3, #4]
 8000d7e:	e7eb      	b.n	8000d58 <_malloc_r+0xa8>
 8000d80:	4623      	mov	r3, r4
 8000d82:	6864      	ldr	r4, [r4, #4]
 8000d84:	e7ae      	b.n	8000ce4 <_malloc_r+0x34>
 8000d86:	463c      	mov	r4, r7
 8000d88:	687f      	ldr	r7, [r7, #4]
 8000d8a:	e7b6      	b.n	8000cfa <_malloc_r+0x4a>
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	42a3      	cmp	r3, r4
 8000d92:	d1fb      	bne.n	8000d8c <_malloc_r+0xdc>
 8000d94:	2300      	movs	r3, #0
 8000d96:	6053      	str	r3, [r2, #4]
 8000d98:	e7de      	b.n	8000d58 <_malloc_r+0xa8>
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	6033      	str	r3, [r6, #0]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	f000 f998 	bl	80010d4 <__malloc_unlock>
 8000da4:	e794      	b.n	8000cd0 <_malloc_r+0x20>
 8000da6:	6005      	str	r5, [r0, #0]
 8000da8:	e7d6      	b.n	8000d58 <_malloc_r+0xa8>
 8000daa:	bf00      	nop
 8000dac:	200001b8 	.word	0x200001b8

08000db0 <_printf_common>:
 8000db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db4:	4616      	mov	r6, r2
 8000db6:	4698      	mov	r8, r3
 8000db8:	688a      	ldr	r2, [r1, #8]
 8000dba:	690b      	ldr	r3, [r1, #16]
 8000dbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	bfb8      	it	lt
 8000dc4:	4613      	movlt	r3, r2
 8000dc6:	6033      	str	r3, [r6, #0]
 8000dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000dcc:	4607      	mov	r7, r0
 8000dce:	460c      	mov	r4, r1
 8000dd0:	b10a      	cbz	r2, 8000dd6 <_printf_common+0x26>
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	6033      	str	r3, [r6, #0]
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	0699      	lsls	r1, r3, #26
 8000dda:	bf42      	ittt	mi
 8000ddc:	6833      	ldrmi	r3, [r6, #0]
 8000dde:	3302      	addmi	r3, #2
 8000de0:	6033      	strmi	r3, [r6, #0]
 8000de2:	6825      	ldr	r5, [r4, #0]
 8000de4:	f015 0506 	ands.w	r5, r5, #6
 8000de8:	d106      	bne.n	8000df8 <_printf_common+0x48>
 8000dea:	f104 0a19 	add.w	sl, r4, #25
 8000dee:	68e3      	ldr	r3, [r4, #12]
 8000df0:	6832      	ldr	r2, [r6, #0]
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	42ab      	cmp	r3, r5
 8000df6:	dc26      	bgt.n	8000e46 <_printf_common+0x96>
 8000df8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000dfc:	6822      	ldr	r2, [r4, #0]
 8000dfe:	3b00      	subs	r3, #0
 8000e00:	bf18      	it	ne
 8000e02:	2301      	movne	r3, #1
 8000e04:	0692      	lsls	r2, r2, #26
 8000e06:	d42b      	bmi.n	8000e60 <_printf_common+0xb0>
 8000e08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000e0c:	4641      	mov	r1, r8
 8000e0e:	4638      	mov	r0, r7
 8000e10:	47c8      	blx	r9
 8000e12:	3001      	adds	r0, #1
 8000e14:	d01e      	beq.n	8000e54 <_printf_common+0xa4>
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	6922      	ldr	r2, [r4, #16]
 8000e1a:	f003 0306 	and.w	r3, r3, #6
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf02      	ittt	eq
 8000e22:	68e5      	ldreq	r5, [r4, #12]
 8000e24:	6833      	ldreq	r3, [r6, #0]
 8000e26:	1aed      	subeq	r5, r5, r3
 8000e28:	68a3      	ldr	r3, [r4, #8]
 8000e2a:	bf0c      	ite	eq
 8000e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e30:	2500      	movne	r5, #0
 8000e32:	4293      	cmp	r3, r2
 8000e34:	bfc4      	itt	gt
 8000e36:	1a9b      	subgt	r3, r3, r2
 8000e38:	18ed      	addgt	r5, r5, r3
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	341a      	adds	r4, #26
 8000e3e:	42b5      	cmp	r5, r6
 8000e40:	d11a      	bne.n	8000e78 <_printf_common+0xc8>
 8000e42:	2000      	movs	r0, #0
 8000e44:	e008      	b.n	8000e58 <_printf_common+0xa8>
 8000e46:	2301      	movs	r3, #1
 8000e48:	4652      	mov	r2, sl
 8000e4a:	4641      	mov	r1, r8
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	47c8      	blx	r9
 8000e50:	3001      	adds	r0, #1
 8000e52:	d103      	bne.n	8000e5c <_printf_common+0xac>
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5c:	3501      	adds	r5, #1
 8000e5e:	e7c6      	b.n	8000dee <_printf_common+0x3e>
 8000e60:	18e1      	adds	r1, r4, r3
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	2030      	movs	r0, #48	@ 0x30
 8000e66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e6a:	4422      	add	r2, r4
 8000e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e74:	3302      	adds	r3, #2
 8000e76:	e7c7      	b.n	8000e08 <_printf_common+0x58>
 8000e78:	2301      	movs	r3, #1
 8000e7a:	4622      	mov	r2, r4
 8000e7c:	4641      	mov	r1, r8
 8000e7e:	4638      	mov	r0, r7
 8000e80:	47c8      	blx	r9
 8000e82:	3001      	adds	r0, #1
 8000e84:	d0e6      	beq.n	8000e54 <_printf_common+0xa4>
 8000e86:	3601      	adds	r6, #1
 8000e88:	e7d9      	b.n	8000e3e <_printf_common+0x8e>
	...

08000e8c <_printf_i>:
 8000e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e90:	7e0f      	ldrb	r7, [r1, #24]
 8000e92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e94:	2f78      	cmp	r7, #120	@ 0x78
 8000e96:	4691      	mov	r9, r2
 8000e98:	4680      	mov	r8, r0
 8000e9a:	460c      	mov	r4, r1
 8000e9c:	469a      	mov	sl, r3
 8000e9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000ea2:	d807      	bhi.n	8000eb4 <_printf_i+0x28>
 8000ea4:	2f62      	cmp	r7, #98	@ 0x62
 8000ea6:	d80a      	bhi.n	8000ebe <_printf_i+0x32>
 8000ea8:	2f00      	cmp	r7, #0
 8000eaa:	f000 80d1 	beq.w	8001050 <_printf_i+0x1c4>
 8000eae:	2f58      	cmp	r7, #88	@ 0x58
 8000eb0:	f000 80b8 	beq.w	8001024 <_printf_i+0x198>
 8000eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000eb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ebc:	e03a      	b.n	8000f34 <_printf_i+0xa8>
 8000ebe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000ec2:	2b15      	cmp	r3, #21
 8000ec4:	d8f6      	bhi.n	8000eb4 <_printf_i+0x28>
 8000ec6:	a101      	add	r1, pc, #4	@ (adr r1, 8000ecc <_printf_i+0x40>)
 8000ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ecc:	08000f25 	.word	0x08000f25
 8000ed0:	08000f39 	.word	0x08000f39
 8000ed4:	08000eb5 	.word	0x08000eb5
 8000ed8:	08000eb5 	.word	0x08000eb5
 8000edc:	08000eb5 	.word	0x08000eb5
 8000ee0:	08000eb5 	.word	0x08000eb5
 8000ee4:	08000f39 	.word	0x08000f39
 8000ee8:	08000eb5 	.word	0x08000eb5
 8000eec:	08000eb5 	.word	0x08000eb5
 8000ef0:	08000eb5 	.word	0x08000eb5
 8000ef4:	08000eb5 	.word	0x08000eb5
 8000ef8:	08001037 	.word	0x08001037
 8000efc:	08000f63 	.word	0x08000f63
 8000f00:	08000ff1 	.word	0x08000ff1
 8000f04:	08000eb5 	.word	0x08000eb5
 8000f08:	08000eb5 	.word	0x08000eb5
 8000f0c:	08001059 	.word	0x08001059
 8000f10:	08000eb5 	.word	0x08000eb5
 8000f14:	08000f63 	.word	0x08000f63
 8000f18:	08000eb5 	.word	0x08000eb5
 8000f1c:	08000eb5 	.word	0x08000eb5
 8000f20:	08000ff9 	.word	0x08000ff9
 8000f24:	6833      	ldr	r3, [r6, #0]
 8000f26:	1d1a      	adds	r2, r3, #4
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6032      	str	r2, [r6, #0]
 8000f2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000f34:	2301      	movs	r3, #1
 8000f36:	e09c      	b.n	8001072 <_printf_i+0x1e6>
 8000f38:	6833      	ldr	r3, [r6, #0]
 8000f3a:	6820      	ldr	r0, [r4, #0]
 8000f3c:	1d19      	adds	r1, r3, #4
 8000f3e:	6031      	str	r1, [r6, #0]
 8000f40:	0606      	lsls	r6, r0, #24
 8000f42:	d501      	bpl.n	8000f48 <_printf_i+0xbc>
 8000f44:	681d      	ldr	r5, [r3, #0]
 8000f46:	e003      	b.n	8000f50 <_printf_i+0xc4>
 8000f48:	0645      	lsls	r5, r0, #25
 8000f4a:	d5fb      	bpl.n	8000f44 <_printf_i+0xb8>
 8000f4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f50:	2d00      	cmp	r5, #0
 8000f52:	da03      	bge.n	8000f5c <_printf_i+0xd0>
 8000f54:	232d      	movs	r3, #45	@ 0x2d
 8000f56:	426d      	negs	r5, r5
 8000f58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f5c:	4858      	ldr	r0, [pc, #352]	@ (80010c0 <_printf_i+0x234>)
 8000f5e:	230a      	movs	r3, #10
 8000f60:	e011      	b.n	8000f86 <_printf_i+0xfa>
 8000f62:	6821      	ldr	r1, [r4, #0]
 8000f64:	6833      	ldr	r3, [r6, #0]
 8000f66:	0608      	lsls	r0, r1, #24
 8000f68:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f6c:	d402      	bmi.n	8000f74 <_printf_i+0xe8>
 8000f6e:	0649      	lsls	r1, r1, #25
 8000f70:	bf48      	it	mi
 8000f72:	b2ad      	uxthmi	r5, r5
 8000f74:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f76:	4852      	ldr	r0, [pc, #328]	@ (80010c0 <_printf_i+0x234>)
 8000f78:	6033      	str	r3, [r6, #0]
 8000f7a:	bf14      	ite	ne
 8000f7c:	230a      	movne	r3, #10
 8000f7e:	2308      	moveq	r3, #8
 8000f80:	2100      	movs	r1, #0
 8000f82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f86:	6866      	ldr	r6, [r4, #4]
 8000f88:	60a6      	str	r6, [r4, #8]
 8000f8a:	2e00      	cmp	r6, #0
 8000f8c:	db05      	blt.n	8000f9a <_printf_i+0x10e>
 8000f8e:	6821      	ldr	r1, [r4, #0]
 8000f90:	432e      	orrs	r6, r5
 8000f92:	f021 0104 	bic.w	r1, r1, #4
 8000f96:	6021      	str	r1, [r4, #0]
 8000f98:	d04b      	beq.n	8001032 <_printf_i+0x1a6>
 8000f9a:	4616      	mov	r6, r2
 8000f9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8000fa0:	fb03 5711 	mls	r7, r3, r1, r5
 8000fa4:	5dc7      	ldrb	r7, [r0, r7]
 8000fa6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000faa:	462f      	mov	r7, r5
 8000fac:	42bb      	cmp	r3, r7
 8000fae:	460d      	mov	r5, r1
 8000fb0:	d9f4      	bls.n	8000f9c <_printf_i+0x110>
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d10b      	bne.n	8000fce <_printf_i+0x142>
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	07df      	lsls	r7, r3, #31
 8000fba:	d508      	bpl.n	8000fce <_printf_i+0x142>
 8000fbc:	6923      	ldr	r3, [r4, #16]
 8000fbe:	6861      	ldr	r1, [r4, #4]
 8000fc0:	4299      	cmp	r1, r3
 8000fc2:	bfde      	ittt	le
 8000fc4:	2330      	movle	r3, #48	@ 0x30
 8000fc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000fca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000fce:	1b92      	subs	r2, r2, r6
 8000fd0:	6122      	str	r2, [r4, #16]
 8000fd2:	f8cd a000 	str.w	sl, [sp]
 8000fd6:	464b      	mov	r3, r9
 8000fd8:	aa03      	add	r2, sp, #12
 8000fda:	4621      	mov	r1, r4
 8000fdc:	4640      	mov	r0, r8
 8000fde:	f7ff fee7 	bl	8000db0 <_printf_common>
 8000fe2:	3001      	adds	r0, #1
 8000fe4:	d14a      	bne.n	800107c <_printf_i+0x1f0>
 8000fe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fea:	b004      	add	sp, #16
 8000fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	f043 0320 	orr.w	r3, r3, #32
 8000ff6:	6023      	str	r3, [r4, #0]
 8000ff8:	4832      	ldr	r0, [pc, #200]	@ (80010c4 <_printf_i+0x238>)
 8000ffa:	2778      	movs	r7, #120	@ 0x78
 8000ffc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	6831      	ldr	r1, [r6, #0]
 8001004:	061f      	lsls	r7, r3, #24
 8001006:	f851 5b04 	ldr.w	r5, [r1], #4
 800100a:	d402      	bmi.n	8001012 <_printf_i+0x186>
 800100c:	065f      	lsls	r7, r3, #25
 800100e:	bf48      	it	mi
 8001010:	b2ad      	uxthmi	r5, r5
 8001012:	6031      	str	r1, [r6, #0]
 8001014:	07d9      	lsls	r1, r3, #31
 8001016:	bf44      	itt	mi
 8001018:	f043 0320 	orrmi.w	r3, r3, #32
 800101c:	6023      	strmi	r3, [r4, #0]
 800101e:	b11d      	cbz	r5, 8001028 <_printf_i+0x19c>
 8001020:	2310      	movs	r3, #16
 8001022:	e7ad      	b.n	8000f80 <_printf_i+0xf4>
 8001024:	4826      	ldr	r0, [pc, #152]	@ (80010c0 <_printf_i+0x234>)
 8001026:	e7e9      	b.n	8000ffc <_printf_i+0x170>
 8001028:	6823      	ldr	r3, [r4, #0]
 800102a:	f023 0320 	bic.w	r3, r3, #32
 800102e:	6023      	str	r3, [r4, #0]
 8001030:	e7f6      	b.n	8001020 <_printf_i+0x194>
 8001032:	4616      	mov	r6, r2
 8001034:	e7bd      	b.n	8000fb2 <_printf_i+0x126>
 8001036:	6833      	ldr	r3, [r6, #0]
 8001038:	6825      	ldr	r5, [r4, #0]
 800103a:	6961      	ldr	r1, [r4, #20]
 800103c:	1d18      	adds	r0, r3, #4
 800103e:	6030      	str	r0, [r6, #0]
 8001040:	062e      	lsls	r6, r5, #24
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	d501      	bpl.n	800104a <_printf_i+0x1be>
 8001046:	6019      	str	r1, [r3, #0]
 8001048:	e002      	b.n	8001050 <_printf_i+0x1c4>
 800104a:	0668      	lsls	r0, r5, #25
 800104c:	d5fb      	bpl.n	8001046 <_printf_i+0x1ba>
 800104e:	8019      	strh	r1, [r3, #0]
 8001050:	2300      	movs	r3, #0
 8001052:	6123      	str	r3, [r4, #16]
 8001054:	4616      	mov	r6, r2
 8001056:	e7bc      	b.n	8000fd2 <_printf_i+0x146>
 8001058:	6833      	ldr	r3, [r6, #0]
 800105a:	1d1a      	adds	r2, r3, #4
 800105c:	6032      	str	r2, [r6, #0]
 800105e:	681e      	ldr	r6, [r3, #0]
 8001060:	6862      	ldr	r2, [r4, #4]
 8001062:	2100      	movs	r1, #0
 8001064:	4630      	mov	r0, r6
 8001066:	f7ff f8b3 	bl	80001d0 <memchr>
 800106a:	b108      	cbz	r0, 8001070 <_printf_i+0x1e4>
 800106c:	1b80      	subs	r0, r0, r6
 800106e:	6060      	str	r0, [r4, #4]
 8001070:	6863      	ldr	r3, [r4, #4]
 8001072:	6123      	str	r3, [r4, #16]
 8001074:	2300      	movs	r3, #0
 8001076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800107a:	e7aa      	b.n	8000fd2 <_printf_i+0x146>
 800107c:	6923      	ldr	r3, [r4, #16]
 800107e:	4632      	mov	r2, r6
 8001080:	4649      	mov	r1, r9
 8001082:	4640      	mov	r0, r8
 8001084:	47d0      	blx	sl
 8001086:	3001      	adds	r0, #1
 8001088:	d0ad      	beq.n	8000fe6 <_printf_i+0x15a>
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	079b      	lsls	r3, r3, #30
 800108e:	d413      	bmi.n	80010b8 <_printf_i+0x22c>
 8001090:	68e0      	ldr	r0, [r4, #12]
 8001092:	9b03      	ldr	r3, [sp, #12]
 8001094:	4298      	cmp	r0, r3
 8001096:	bfb8      	it	lt
 8001098:	4618      	movlt	r0, r3
 800109a:	e7a6      	b.n	8000fea <_printf_i+0x15e>
 800109c:	2301      	movs	r3, #1
 800109e:	4632      	mov	r2, r6
 80010a0:	4649      	mov	r1, r9
 80010a2:	4640      	mov	r0, r8
 80010a4:	47d0      	blx	sl
 80010a6:	3001      	adds	r0, #1
 80010a8:	d09d      	beq.n	8000fe6 <_printf_i+0x15a>
 80010aa:	3501      	adds	r5, #1
 80010ac:	68e3      	ldr	r3, [r4, #12]
 80010ae:	9903      	ldr	r1, [sp, #12]
 80010b0:	1a5b      	subs	r3, r3, r1
 80010b2:	42ab      	cmp	r3, r5
 80010b4:	dcf2      	bgt.n	800109c <_printf_i+0x210>
 80010b6:	e7eb      	b.n	8001090 <_printf_i+0x204>
 80010b8:	2500      	movs	r5, #0
 80010ba:	f104 0619 	add.w	r6, r4, #25
 80010be:	e7f5      	b.n	80010ac <_printf_i+0x220>
 80010c0:	080012aa 	.word	0x080012aa
 80010c4:	080012bb 	.word	0x080012bb

080010c8 <__malloc_lock>:
 80010c8:	4801      	ldr	r0, [pc, #4]	@ (80010d0 <__malloc_lock+0x8>)
 80010ca:	f7ff bc75 	b.w	80009b8 <__retarget_lock_acquire_recursive>
 80010ce:	bf00      	nop
 80010d0:	200001b0 	.word	0x200001b0

080010d4 <__malloc_unlock>:
 80010d4:	4801      	ldr	r0, [pc, #4]	@ (80010dc <__malloc_unlock+0x8>)
 80010d6:	f7ff bc70 	b.w	80009ba <__retarget_lock_release_recursive>
 80010da:	bf00      	nop
 80010dc:	200001b0 	.word	0x200001b0

080010e0 <_realloc_r>:
 80010e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010e4:	4607      	mov	r7, r0
 80010e6:	4614      	mov	r4, r2
 80010e8:	460d      	mov	r5, r1
 80010ea:	b921      	cbnz	r1, 80010f6 <_realloc_r+0x16>
 80010ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010f0:	4611      	mov	r1, r2
 80010f2:	f7ff bddd 	b.w	8000cb0 <_malloc_r>
 80010f6:	b92a      	cbnz	r2, 8001104 <_realloc_r+0x24>
 80010f8:	f000 f858 	bl	80011ac <_free_r>
 80010fc:	4625      	mov	r5, r4
 80010fe:	4628      	mov	r0, r5
 8001100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001104:	f000 f89c 	bl	8001240 <_malloc_usable_size_r>
 8001108:	4284      	cmp	r4, r0
 800110a:	4606      	mov	r6, r0
 800110c:	d802      	bhi.n	8001114 <_realloc_r+0x34>
 800110e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001112:	d8f4      	bhi.n	80010fe <_realloc_r+0x1e>
 8001114:	4621      	mov	r1, r4
 8001116:	4638      	mov	r0, r7
 8001118:	f7ff fdca 	bl	8000cb0 <_malloc_r>
 800111c:	4680      	mov	r8, r0
 800111e:	b908      	cbnz	r0, 8001124 <_realloc_r+0x44>
 8001120:	4645      	mov	r5, r8
 8001122:	e7ec      	b.n	80010fe <_realloc_r+0x1e>
 8001124:	42b4      	cmp	r4, r6
 8001126:	4622      	mov	r2, r4
 8001128:	4629      	mov	r1, r5
 800112a:	bf28      	it	cs
 800112c:	4632      	movcs	r2, r6
 800112e:	f000 f82f 	bl	8001190 <memcpy>
 8001132:	4629      	mov	r1, r5
 8001134:	4638      	mov	r0, r7
 8001136:	f000 f839 	bl	80011ac <_free_r>
 800113a:	e7f1      	b.n	8001120 <_realloc_r+0x40>

0800113c <memmove>:
 800113c:	4288      	cmp	r0, r1
 800113e:	b510      	push	{r4, lr}
 8001140:	eb01 0402 	add.w	r4, r1, r2
 8001144:	d902      	bls.n	800114c <memmove+0x10>
 8001146:	4284      	cmp	r4, r0
 8001148:	4623      	mov	r3, r4
 800114a:	d807      	bhi.n	800115c <memmove+0x20>
 800114c:	1e43      	subs	r3, r0, #1
 800114e:	42a1      	cmp	r1, r4
 8001150:	d008      	beq.n	8001164 <memmove+0x28>
 8001152:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001156:	f803 2f01 	strb.w	r2, [r3, #1]!
 800115a:	e7f8      	b.n	800114e <memmove+0x12>
 800115c:	4402      	add	r2, r0
 800115e:	4601      	mov	r1, r0
 8001160:	428a      	cmp	r2, r1
 8001162:	d100      	bne.n	8001166 <memmove+0x2a>
 8001164:	bd10      	pop	{r4, pc}
 8001166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800116a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800116e:	e7f7      	b.n	8001160 <memmove+0x24>

08001170 <_sbrk_r>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4d06      	ldr	r5, [pc, #24]	@ (800118c <_sbrk_r+0x1c>)
 8001174:	2300      	movs	r3, #0
 8001176:	4604      	mov	r4, r0
 8001178:	4608      	mov	r0, r1
 800117a:	602b      	str	r3, [r5, #0]
 800117c:	f7ff fb36 	bl	80007ec <_sbrk>
 8001180:	1c43      	adds	r3, r0, #1
 8001182:	d102      	bne.n	800118a <_sbrk_r+0x1a>
 8001184:	682b      	ldr	r3, [r5, #0]
 8001186:	b103      	cbz	r3, 800118a <_sbrk_r+0x1a>
 8001188:	6023      	str	r3, [r4, #0]
 800118a:	bd38      	pop	{r3, r4, r5, pc}
 800118c:	200001bc 	.word	0x200001bc

08001190 <memcpy>:
 8001190:	440a      	add	r2, r1
 8001192:	4291      	cmp	r1, r2
 8001194:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001198:	d100      	bne.n	800119c <memcpy+0xc>
 800119a:	4770      	bx	lr
 800119c:	b510      	push	{r4, lr}
 800119e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80011a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80011a6:	4291      	cmp	r1, r2
 80011a8:	d1f9      	bne.n	800119e <memcpy+0xe>
 80011aa:	bd10      	pop	{r4, pc}

080011ac <_free_r>:
 80011ac:	b538      	push	{r3, r4, r5, lr}
 80011ae:	4605      	mov	r5, r0
 80011b0:	2900      	cmp	r1, #0
 80011b2:	d041      	beq.n	8001238 <_free_r+0x8c>
 80011b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011b8:	1f0c      	subs	r4, r1, #4
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bfb8      	it	lt
 80011be:	18e4      	addlt	r4, r4, r3
 80011c0:	f7ff ff82 	bl	80010c8 <__malloc_lock>
 80011c4:	4a1d      	ldr	r2, [pc, #116]	@ (800123c <_free_r+0x90>)
 80011c6:	6813      	ldr	r3, [r2, #0]
 80011c8:	b933      	cbnz	r3, 80011d8 <_free_r+0x2c>
 80011ca:	6063      	str	r3, [r4, #4]
 80011cc:	6014      	str	r4, [r2, #0]
 80011ce:	4628      	mov	r0, r5
 80011d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011d4:	f7ff bf7e 	b.w	80010d4 <__malloc_unlock>
 80011d8:	42a3      	cmp	r3, r4
 80011da:	d908      	bls.n	80011ee <_free_r+0x42>
 80011dc:	6820      	ldr	r0, [r4, #0]
 80011de:	1821      	adds	r1, r4, r0
 80011e0:	428b      	cmp	r3, r1
 80011e2:	bf01      	itttt	eq
 80011e4:	6819      	ldreq	r1, [r3, #0]
 80011e6:	685b      	ldreq	r3, [r3, #4]
 80011e8:	1809      	addeq	r1, r1, r0
 80011ea:	6021      	streq	r1, [r4, #0]
 80011ec:	e7ed      	b.n	80011ca <_free_r+0x1e>
 80011ee:	461a      	mov	r2, r3
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	b10b      	cbz	r3, 80011f8 <_free_r+0x4c>
 80011f4:	42a3      	cmp	r3, r4
 80011f6:	d9fa      	bls.n	80011ee <_free_r+0x42>
 80011f8:	6811      	ldr	r1, [r2, #0]
 80011fa:	1850      	adds	r0, r2, r1
 80011fc:	42a0      	cmp	r0, r4
 80011fe:	d10b      	bne.n	8001218 <_free_r+0x6c>
 8001200:	6820      	ldr	r0, [r4, #0]
 8001202:	4401      	add	r1, r0
 8001204:	1850      	adds	r0, r2, r1
 8001206:	4283      	cmp	r3, r0
 8001208:	6011      	str	r1, [r2, #0]
 800120a:	d1e0      	bne.n	80011ce <_free_r+0x22>
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	6053      	str	r3, [r2, #4]
 8001212:	4408      	add	r0, r1
 8001214:	6010      	str	r0, [r2, #0]
 8001216:	e7da      	b.n	80011ce <_free_r+0x22>
 8001218:	d902      	bls.n	8001220 <_free_r+0x74>
 800121a:	230c      	movs	r3, #12
 800121c:	602b      	str	r3, [r5, #0]
 800121e:	e7d6      	b.n	80011ce <_free_r+0x22>
 8001220:	6820      	ldr	r0, [r4, #0]
 8001222:	1821      	adds	r1, r4, r0
 8001224:	428b      	cmp	r3, r1
 8001226:	bf04      	itt	eq
 8001228:	6819      	ldreq	r1, [r3, #0]
 800122a:	685b      	ldreq	r3, [r3, #4]
 800122c:	6063      	str	r3, [r4, #4]
 800122e:	bf04      	itt	eq
 8001230:	1809      	addeq	r1, r1, r0
 8001232:	6021      	streq	r1, [r4, #0]
 8001234:	6054      	str	r4, [r2, #4]
 8001236:	e7ca      	b.n	80011ce <_free_r+0x22>
 8001238:	bd38      	pop	{r3, r4, r5, pc}
 800123a:	bf00      	nop
 800123c:	200001b8 	.word	0x200001b8

08001240 <_malloc_usable_size_r>:
 8001240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001244:	1f18      	subs	r0, r3, #4
 8001246:	2b00      	cmp	r3, #0
 8001248:	bfbc      	itt	lt
 800124a:	580b      	ldrlt	r3, [r1, r0]
 800124c:	18c0      	addlt	r0, r0, r3
 800124e:	4770      	bx	lr

08001250 <_init>:
 8001250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001252:	bf00      	nop
 8001254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001256:	bc08      	pop	{r3}
 8001258:	469e      	mov	lr, r3
 800125a:	4770      	bx	lr

0800125c <_fini>:
 800125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800125e:	bf00      	nop
 8001260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001262:	bc08      	pop	{r3}
 8001264:	469e      	mov	lr, r3
 8001266:	4770      	bx	lr
